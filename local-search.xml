<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/09/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/8.%20%E9%80%86%E5%90%91%E6%96%B9%E6%B3%95%E8%AE%BA/4.%20SO%E5%B1%82/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/ollvm/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%B7%B7%E6%B7%86/call%E5%9B%9E%E5%A1%AB/"/>
    <url>/blog/2025/05/09/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/8.%20%E9%80%86%E5%90%91%E6%96%B9%E6%B3%95%E8%AE%BA/4.%20SO%E5%B1%82/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/ollvm/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%B7%B7%E6%B7%86/call%E5%9B%9E%E5%A1%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="call-回填法"><a href="#call-回填法" class="headerlink" title="call 回填法"></a>call 回填法</h1><ul><li>存在一个蛮大的问题——似乎不少字符串没解密</li><li>在一般的hook+回填方案中，因为代码没法走到每一条方法和分支去，可能会有部分字符串没有解密，自然也hook不到，这个问题在dump回填方案中同样存在，我们可以手动处理部分解密，即call回填</li><li>正常情况下，<code>hook回填为主，call为辅</code>。但如果样本没有hook到的解密比较多，我们需要更依赖call</li><li>call的方式可以采用frida call。如果解密不复杂，可以使用IDAPython call</li></ul><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><h3 id="方式1-遍历解密方法的所有调用xref"><a href="#方式1-遍历解密方法的所有调用xref" class="headerlink" title="方式1: 遍历解密方法的所有调用xref"></a>方式1: 遍历解密方法的所有调用xref</h3><p>注意：</p><ol><li>—一个字符串可能会在多个位置被解密，导致重复解密或错误。所以要做去重</li><li>idaapi.get_arg_addrs得到调用参数</li><li>ida_bytes.del_items：把IDA 指定范围数据反向优化重定义<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> ida_bytes<br><span class="hljs-keyword">import</span> idaapi<br><span class="hljs-keyword">import</span> idautils<br><span class="hljs-keyword">import</span> idc<br><br><br>def <span class="hljs-title function_">decryptStr</span>(trueAddress, key, length):<br>    buffer = <span class="hljs-string">&quot;&quot;</span><br>    encryptBytes = ida_bytes.<span class="hljs-title function_">get_bytes</span>(trueAddress, length)<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-title function_">range</span>(length):<br>        decrypt_c = encryptBytes[j] ^ key<br>        ida_bytes.<span class="hljs-title function_">patch_byte</span>(trueAddress + j, decrypt_c)<br>        key = (key + <span class="hljs-number">3</span>) &amp; <span class="hljs-number">0xff</span><br>        buffer += <span class="hljs-title function_">chr</span>(decrypt_c)<br><br><br>    <span class="hljs-title function_">print</span>(buffer)<br><br># 打散data中的识别，<br>ida_bytes.<span class="hljs-title function_">del_items</span>(<span class="hljs-number">0xbf000</span>,<span class="hljs-number">0</span>, <span class="hljs-number">0xd1e98</span>)<br><br><br>encryptlist = []<br># 遍历解密函数的交叉引用<br>xrefs = idautils.<span class="hljs-title class_">CodeRefsTo</span>(<span class="hljs-number">0x41c4</span>, <span class="hljs-number">0</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-title function_">list</span>(xrefs):<br>    args = idaapi.<span class="hljs-title function_">get_arg_addrs</span>(i)<br>    <span class="hljs-keyword">if</span> <span class="hljs-attr">args</span>:<br>        length = idc.<span class="hljs-title function_">get_operand_value</span>(args[<span class="hljs-number">3</span>], <span class="hljs-number">1</span>)<br>        key = idc.<span class="hljs-title function_">get_operand_value</span>(args[<span class="hljs-number">2</span>], <span class="hljs-number">1</span>)<br>        encryptLine = args[<span class="hljs-number">1</span>]<br>        bufferLine = args[<span class="hljs-number">0</span>]<br>        # 解析encrypt地址<br>        <span class="hljs-attr">try</span>:<br>            encryptAddr = idc.<span class="hljs-title class_">GetDisasm</span>(encryptLine).<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;;&quot;</span>)[<span class="hljs-number">1</span>].<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;_&quot;</span>)[<span class="hljs-number">1</span>]<br>            <span class="hljs-keyword">if</span> encryptAddr not <span class="hljs-keyword">in</span> <span class="hljs-attr">encryptlist</span>:<br>                encryptlist.<span class="hljs-title function_">append</span>(encryptAddr)<br>                bufferAddr = <span class="hljs-number">0</span><br>                # 如果buffer也直接赋值，那么同理取一下，两步走，解析buffer地址，第一步是找到存储buffer的寄存器，它是第二个参数<br>                <span class="hljs-attr">try</span>:<br>                    bufferAddr = idc.<span class="hljs-title class_">GetDisasm</span>(encryptLine).<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;;&quot;</span>)[<span class="hljs-number">1</span>].<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;_&quot;</span>)[<span class="hljs-number">1</span>]<br>                <span class="hljs-attr">except</span>:<br>                    bufferReg = idc.<span class="hljs-title function_">get_operand_value</span>(bufferLine, <span class="hljs-number">1</span>)<br>                    # 往前递推最多<span class="hljs-number">20</span>条，寻找bufferReg的赋值处，解析它的unk_xxxxx<br>                    count = <span class="hljs-number">20</span><br>                    <span class="hljs-keyword">while</span> <span class="hljs-attr">count</span>:<br>                        count = count - <span class="hljs-number">1</span><br>                        bufferLine = idc.<span class="hljs-title function_">prev_head</span>(bufferLine)<br>                        oneLine = idc.<span class="hljs-title class_">GetDisasm</span>(bufferLine)<br>                        # 赋值处即第一个操作数是目标寄存器<br>                        lineReg = idc.<span class="hljs-title function_">get_operand_value</span>(bufferLine, <span class="hljs-number">0</span>)<br>                        <span class="hljs-keyword">if</span> bufferReg == <span class="hljs-attr">lineReg</span>:<br>                            bufferAddr = idc.<span class="hljs-title class_">GetDisasm</span>(bufferLine).<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;;&quot;</span>)[<span class="hljs-number">1</span>].<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;_&quot;</span>)[<span class="hljs-number">1</span>]<br>                            <span class="hljs-keyword">break</span><br>                <span class="hljs-title function_">decryptStr</span>(<span class="hljs-title function_">int</span>(encryptAddr, <span class="hljs-number">16</span>), key, length)<br>        <span class="hljs-attr">except</span>:<br>            pass<br>            <br></code></pre></td></tr></table></figure></li></ol><h3 id="方式2：正则匹配"><a href="#方式2：正则匹配" class="headerlink" title="方式2：正则匹配"></a>方式2：正则匹配</h3><ul><li>如果需要call回填的比较多，我们也可以遍历所有F5的伪代码，对其做正则匹配,拿到所有的入参值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> ida_idaapi<br><span class="hljs-keyword">import</span> idaapi<br><span class="hljs-keyword">import</span> idautils<br><br><br><br>def <span class="hljs-title function_">f5All</span>():<br>    sub_ABB0_call = []<br>    # 正则匹配伪C中的魔数初始化，以及哈希运算部分<br>    <span class="hljs-keyword">for</span> func <span class="hljs-keyword">in</span> idautils.<span class="hljs-title class_">Functions</span>(<span class="hljs-number">0</span>, ida_idaapi.<span class="hljs-property">BADADDR</span>):<br>        <span class="hljs-attr">try</span>:<br>            decompilerStr = <span class="hljs-title function_">str</span>(idaapi.<span class="hljs-title function_">decompile</span>(func))<br>            decompileList = re.<span class="hljs-title function_">findall</span>(<span class="hljs-string">&quot;sub_ABB0(\(.*?\))&quot;</span>, decompilerStr)<br>            <span class="hljs-keyword">if</span> <span class="hljs-attr">decompileList</span>:<br>                sub_ABB0_call += decompileList<br>        <span class="hljs-attr">except</span>:<br>            pass<br><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-attr">sub_ABB0_call</span>:<br>        <span class="hljs-title function_">print</span>(i)<br>        <br><span class="hljs-title function_">f5All</span>()<br></code></pre></td></tr></table></figure></li><li>得到的结果：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(&amp;unk_23530, <span class="hljs-number">3</span>)<br>(float *a1, int a2)<br>(flt_23694, <span class="hljs-number">16</span>)<br>(v18, <span class="hljs-number">13</span>)<br>(v18, <span class="hljs-number">13</span>)<br>(v16, <span class="hljs-number">13</span>)<br>(v16 + <span class="hljs-number">13</span>, <span class="hljs-number">13</span>)<br>(v16, <span class="hljs-number">13</span>)<br>(&amp;flt_23780[<span class="hljs-number">106</span>], <span class="hljs-number">24</span>)<br></code></pre></td></tr></table></figure></li><li>v18、v16这样的需要二次处理才能得到具体地址，比较麻烦，但因为数量较少，可以不理睬。&amp;unk_23530这样的格式最好，直接可以解析地址。而&amp;flt_23780[xxx] 这样的就要做额外转化。</li><li>我们观察到一个现象，从上面的(float *a1, int a2)之后，参数1就变成了更难解析的&amp;flt_xxx，而早一些的时机是好解析的unk_xxx，(float *a1, int a2)是什么？从格式可以看出，这其实是函数定义的地方——ABB0解密函数。</li><li>而在对它进行F5后，IDA根据对它的参数情况，进一步识别和优化了入参——参数1为float数组。理顺这个逻辑后，我们有些哭笑不得，IDA的优化反而增加了我们的工作量。</li><li>所以我把SO重新打开，运行新的IDA脚本——跳过对sub_ABB0 F5<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> ida_idaapi<br><span class="hljs-keyword">import</span> idaapi<br><span class="hljs-keyword">import</span> idautils<br><br>def <span class="hljs-title function_">f5All</span>():<br>    sub_ABB0_call = []<br>    # 正则匹配伪C中的魔数初始化，以及哈希运算部分<br>    <span class="hljs-keyword">for</span> func <span class="hljs-keyword">in</span> idautils.<span class="hljs-title class_">Functions</span>(<span class="hljs-number">0</span>, ida_idaapi.<span class="hljs-property">BADADDR</span>):<br>        <span class="hljs-keyword">if</span> func != <span class="hljs-number">0x41C4</span>:<br>            <span class="hljs-attr">try</span>:<br>                decompilerStr = <span class="hljs-title function_">str</span>(idaapi.<span class="hljs-title function_">decompile</span>(func))<br>                decompileList = re.<span class="hljs-title function_">findall</span>(<span class="hljs-string">&quot;sub_41C4(\(.*?\))&quot;</span>, decompilerStr)<br>                <span class="hljs-keyword">if</span> <span class="hljs-attr">decompileList</span>:<br>                    sub_ABB0_call += decompileList<br>            <span class="hljs-attr">except</span>:<br>                pass<br>            <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-attr">sub_ABB0_call</span>:<br>        <span class="hljs-title function_">print</span>(i)<br>        <br><span class="hljs-title function_">f5All</span>()<br></code></pre></td></tr></table></figure></li></ul><h2 id="call"><a href="#call" class="headerlink" title="call"></a>call</h2><h3 id="IDAPython-call"><a href="#IDAPython-call" class="headerlink" title="IDAPython call"></a>IDAPython call</h3><p>idaapi.get_arg_addrs</p><ul><li>浅色的函数，指IDA没有办法获取到准确的参数信息，参数列表是它自己推断出来的，而深色的相反，参数确凿。</li><li>对于浅色的函数，因为参数的这种模糊不确定性，使用idaapi.get_arg_addrs 并不会生效。好在我们可以手动明确参数。</li><li>在函数上右键，Set item type，因为IDA对sub_41C4函数的参数识别并没什么问题，我们不用做什么修改，只需要对IDA的参数猜测予以确认即可，所以跳出的窗口上直接OK。sub_41C4就变成深色的函数了。</li></ul><p>ida_bytes.del_items</p><ul><li>即加密内存块或buffer，被识别为字符串（尽管不可读），对于我们此处需求而言，也属于IDA的反向优化，我们希望它呈现地址——unk_xxxxx 的形式。在上一节中，只要不F5解密函数，就不会进行优化，这个例子并非如此。所以我手动将data段的内容全部undefine打散。</li><li>segment 查看data 节区的范围，del_items api 可以删除掉这些定义，它的参数1和3为开始地址和结束地址，参数2默认填0，函数作用为取消整个范围内IDA所做的定义。<blockquote><p>ida_bytes.del_items(0xbf000,0, 0xd1e98)</p></blockquote></li><li>我IDA中重新打开SO，以及set item type 确认解密函数参数。完整代码逻辑如下</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">import</span> ida_bytes<br><span class="hljs-attribute">import</span> idaapi<br><span class="hljs-attribute">import</span> idautils<br><span class="hljs-attribute">import</span> idc<br><br><br><span class="hljs-attribute">def</span> decryptStr(trueAddress, key, length):<br>    <span class="hljs-attribute">buffer</span> = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-attribute">encryptBytes</span> = ida_bytes.get_bytes(trueAddress, length)<br>    <span class="hljs-attribute">for</span> j in range(length):<br>        <span class="hljs-attribute">decrypt_c</span> = encryptBytes[j] ^ key<br>        <span class="hljs-attribute">ida_bytes</span>.patch_byte(trueAddress + j, decrypt_c)<br>        <span class="hljs-attribute">key</span> = (key + <span class="hljs-number">3</span>) &amp; <span class="hljs-number">0</span>xff<br>        <span class="hljs-attribute">buffer</span> += chr(decrypt_c)<br><br><br>    <span class="hljs-attribute">print</span>(buffer)<br><br><br><span class="hljs-comment"># 打散data中的识别，</span><br><span class="hljs-attribute">ida_bytes</span>.del_items(<span class="hljs-number">0</span>xbf000,<span class="hljs-number">0</span>, <span class="hljs-number">0</span>xd1e98)<br><br><br><span class="hljs-attribute">encryptlist</span> =<span class="hljs-meta"> []</span><br><span class="hljs-comment"># 遍历解密函数的交叉引用</span><br><span class="hljs-attribute">xrefs</span> = idautils.CodeRefsTo(<span class="hljs-number">0</span>x41c4, <span class="hljs-number">0</span>)<br><span class="hljs-attribute">for</span> i in list(xrefs):<br>    <span class="hljs-attribute">args</span> = idaapi.get_arg_addrs(i)<br>    <span class="hljs-attribute">if</span> args:<br>        <span class="hljs-attribute">length</span> = idc.get_operand_value(args[<span class="hljs-number">3</span>], <span class="hljs-number">1</span>)<br>        <span class="hljs-attribute">key</span> = idc.get_operand_value(args[<span class="hljs-number">2</span>], <span class="hljs-number">1</span>)<br>        <span class="hljs-attribute">encryptLine</span> = args[<span class="hljs-number">1</span>]<br>        <span class="hljs-attribute">bufferLine</span> = args[<span class="hljs-number">0</span>]<br>        <span class="hljs-comment"># 解析encrypt地址</span><br>        <span class="hljs-attribute">try</span>:<br>            <span class="hljs-attribute">encryptAddr</span> = idc.GetDisasm(encryptLine).split(<span class="hljs-string">&quot;;&quot;</span>)[<span class="hljs-number">1</span>].split(<span class="hljs-string">&quot;_&quot;</span>)[<span class="hljs-number">1</span>]<br>            <span class="hljs-attribute">if</span> encryptAddr not in encryptlist:<br>                <span class="hljs-attribute">encryptlist</span>.append(encryptAddr)<br>                <span class="hljs-attribute">bufferAddr</span> = <span class="hljs-number">0</span><br>                <span class="hljs-comment"># 如果buffer也直接赋值，那么同理取一下，两步走，解析buffer地址，第一步是找到存储buffer的寄存器，它是第二个参数</span><br>                <span class="hljs-attribute">try</span>:<br>                    <span class="hljs-attribute">bufferAddr</span> = idc.GetDisasm(encryptLine).split(<span class="hljs-string">&quot;;&quot;</span>)[<span class="hljs-number">1</span>].split(<span class="hljs-string">&quot;_&quot;</span>)[<span class="hljs-number">1</span>]<br>                <span class="hljs-attribute">except</span>:<br>                    <span class="hljs-attribute">bufferReg</span> = idc.get_operand_value(bufferLine, <span class="hljs-number">1</span>)<br>                    <span class="hljs-comment"># 往前递推最多20条，寻找bufferReg的赋值处，解析它的unk_xxxxx</span><br>                    <span class="hljs-attribute">count</span> = <span class="hljs-number">20</span><br>                    <span class="hljs-attribute">while</span> count:<br>                        <span class="hljs-attribute">count</span> = count - <span class="hljs-number">1</span><br>                        <span class="hljs-attribute">bufferLine</span> = idc.prev_head(bufferLine)<br>                        <span class="hljs-attribute">oneLine</span> = idc.GetDisasm(bufferLine)<br>                        <span class="hljs-comment"># 赋值处即第一个操作数是目标寄存器</span><br>                        <span class="hljs-attribute">lineReg</span> = idc.get_operand_value(bufferLine, <span class="hljs-number">0</span>)<br>                        <span class="hljs-attribute">if</span> bufferReg == lineReg:<br>                            <span class="hljs-attribute">bufferAddr</span> = idc.GetDisasm(bufferLine).split(<span class="hljs-string">&quot;;&quot;</span>)[<span class="hljs-number">1</span>].split(<span class="hljs-string">&quot;_&quot;</span>)[<span class="hljs-number">1</span>]<br>                            <span class="hljs-attribute">break</span><br>                <span class="hljs-attribute">decryptStr</span>(int(encryptAddr, <span class="hljs-number">16</span>), key, length)<br>        <span class="hljs-attribute">except</span>:<br>            <span class="hljs-attribute">pass</span><br></code></pre></td></tr></table></figure><h3 id="frida-call"><a href="#frida-call" class="headerlink" title="frida call"></a>frida call</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">call_abb1</span>(<span class="hljs-params">offset, length</span>) &#123;<br>    <span class="hljs-comment">// 函数在内存中的地址</span><br>    <span class="hljs-keyword">var</span> baseSOFile = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findBaseAddress</span>(so_name);<br>    <span class="hljs-comment">// console.log(&quot;base: &quot; + baseSOFile)</span><br>    <span class="hljs-keyword">var</span> real_addr = baseSOFile.<span class="hljs-title function_">add</span>(<span class="hljs-number">0xabb1</span>)<br>    <span class="hljs-keyword">var</span> md5_function = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeFunction</span>(real_addr, <span class="hljs-string">&quot;pointer&quot;</span>, [<span class="hljs-string">&quot;pointer&quot;</span>, <span class="hljs-string">&quot;int&quot;</span>])<br>    <span class="hljs-keyword">var</span> input = baseSOFile.<span class="hljs-title function_">add</span>(offset);<br>    <span class="hljs-keyword">var</span> res = <span class="hljs-title function_">md5_function</span>(input, length);<br>    <span class="hljs-comment">// console.log(hexdump(res,&#123;length:length&#125;));</span><br>    <span class="hljs-comment">// console.log(res.readCString())</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(offset + <span class="hljs-string">&quot;###&quot;</span> + res.<span class="hljs-title function_">readUtf8String</span>())<br>&#125;<br><br><span class="hljs-comment">// call_abb1(0x26514, 21)</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> res = [<span class="hljs-string">&#x27;235B0, 14&#x27;</span>, <span class="hljs-string">&#x27;235F0, 41&#x27;</span>, <span class="hljs-string">&#x27;24050, 2&#x27;</span>, <span class="hljs-string">&#x27;23FB0, 38&#x27;</span>, <span class="hljs-string">&#x27;244A0, 9&#x27;</span>, <span class="hljs-string">&#x27;244D0, 47&#x27;</span>, <span class="hljs-string">&#x27;24590, 10&#x27;</span>, <span class="hljs-string">&#x27;245C0, 47&#x27;</span>, <span class="hljs-string">&#x27;247DC, 4&#x27;</span>, <span class="hljs-string">&#x27;24680, 46&#x27;</span>, <span class="hljs-string">&#x27;24740, 5&#x27;</span>, <span class="hljs-string">&#x27;24760, 27&#x27;</span>, <span class="hljs-string">&#x27;24FE0, 4&#x27;</span>, <span class="hljs-string">&#x27;24CA0, 21&#x27;</span>, <span class="hljs-string">&#x27;24FF0, 4&#x27;</span>, <span class="hljs-string">&#x27;24D00, 22&#x27;</span>, <span class="hljs-string">&#x27;24D60, 9&#x27;</span>, <span class="hljs-string">&#x27;24D90, 47&#x27;</span>, <span class="hljs-string">&#x27;24E50, 10&#x27;</span>, <span class="hljs-string">&#x27;24E80, 47&#x27;</span>, <span class="hljs-string">&#x27;24F40, 5&#x27;</span>, <span class="hljs-string">&#x27;24F60, 27&#x27;</span>, <span class="hljs-string">&#x27;255E0, 5&#x27;</span>, <span class="hljs-string">&#x27;25600, 21&#x27;</span>, <span class="hljs-string">&#x27;25660, 5&#x27;</span>, <span class="hljs-string">&#x27;25680, 22&#x27;</span>, <span class="hljs-string">&#x27;256E0, 9&#x27;</span>, <span class="hljs-string">&#x27;25710, 47&#x27;</span>, <span class="hljs-string">&#x27;257D0, 10&#x27;</span>, <span class="hljs-string">&#x27;25800, 47&#x27;</span>, <span class="hljs-string">&#x27;258C0, 5&#x27;</span>, <span class="hljs-string">&#x27;258E0, 27&#x27;</span>, <span class="hljs-string">&#x27;23020, 7&#x27;</span>, <span class="hljs-string">&#x27;231BC, 20&#x27;</span>, <span class="hljs-string">&#x27;2320C, 21&#x27;</span>, <span class="hljs-string">&#x27;23020, 7&#x27;</span>, <span class="hljs-string">&#x27;231BC, 20&#x27;</span>, <span class="hljs-string">&#x27;233E8, 35&#x27;</span>, <span class="hljs-string">&#x27;23060, 10&#x27;</span>, <span class="hljs-string">&#x27;23260, 22&#x27;</span>, <span class="hljs-string">&#x27;2316C, 20&#x27;</span>, <span class="hljs-string">&#x27;23314, 25&#x27;</span>, <span class="hljs-string">&#x27;230EC, 15&#x27;</span>, <span class="hljs-string">&#x27;23128, 17&#x27;</span>, <span class="hljs-string">&#x27;23378, 28&#x27;</span>, <span class="hljs-string">&#x27;23088, 12&#x27;</span>, <span class="hljs-string">&#x27;232B8, 23&#x27;</span>, <span class="hljs-string">&#x27;230B8, 13&#x27;</span>, <span class="hljs-string">&#x27;23010, 4&#x27;</span>, <span class="hljs-string">&#x27;2316C, 20&#x27;</span>, <span class="hljs-string">&#x27;23314, 25&#x27;</span>, <span class="hljs-string">&#x27;2303C, 9&#x27;</span>, <span class="hljs-string">&#x27;23474, 37&#x27;</span>, <span class="hljs-string">&#x27;23510, 8&#x27;</span>, <span class="hljs-string">&#x27;23568, 4&#x27;</span>, <span class="hljs-string">&#x27;23578, 4&#x27;</span>, <span class="hljs-string">&#x27;2353C, 3&#x27;</span>, <span class="hljs-string">&#x27;23588, 9&#x27;</span>, <span class="hljs-string">&#x27;23548, 4&#x27;</span>, <span class="hljs-string">&#x27;23558, 4&#x27;</span>, <span class="hljs-string">&#x27;23530, 3&#x27;</span>, <span class="hljs-string">&#x27;23694, 16&#x27;</span>, <span class="hljs-string">&#x27;23928, 24&#x27;</span>, <span class="hljs-string">&#x27;23A4C, 26&#x27;</span>, <span class="hljs-string">&#x27;239E8, 25&#x27;</span>, <span class="hljs-string">&#x27;237D0, 21&#x27;</span>, <span class="hljs-string">&#x27;23780, 20&#x27;</span>, <span class="hljs-string">&#x27;23824, 21&#x27;</span>, <span class="hljs-string">&#x27;23878, 22&#x27;</span>, <span class="hljs-string">&#x27;238D0, 22&#x27;</span>, <span class="hljs-string">&#x27;23988, 24&#x27;</span>, <span class="hljs-string">&#x27;23AB4, 56&#x27;</span>, <span class="hljs-string">&#x27;23BA0, 13&#x27;</span>, <span class="hljs-string">&#x27;23BD4, 20&#x27;</span>, <span class="hljs-string">&#x27;23C24, 33&#x27;</span>, <span class="hljs-string">&#x27;23CA8, 33&#x27;</span>, <span class="hljs-string">&#x27;23F74, 15&#x27;</span>, <span class="hljs-string">&#x27;23F50, 9&#x27;</span>, <span class="hljs-string">&#x27;24058, 29&#x27;</span>, <span class="hljs-string">&#x27;24144, 15&#x27;</span>, <span class="hljs-string">&#x27;24180, 16&#x27;</span>, <span class="hljs-string">&#x27;243D0, 45&#x27;</span>, <span class="hljs-string">&#x27;24204, 23&#x27;</span>, <span class="hljs-string">&#x27;24110, 13&#x27;</span>, <span class="hljs-string">&#x27;240D0, 4&#x27;</span>, <span class="hljs-string">&#x27;24318, 23&#x27;</span>, <span class="hljs-string">&#x27;240E0, 12&#x27;</span>, <span class="hljs-string">&#x27;24374, 23&#x27;</span>, <span class="hljs-string">&#x27;24260, 23&#x27;</span>, <span class="hljs-string">&#x27;241C0, 17&#x27;</span>, <span class="hljs-string">&#x27;242BC, 23&#x27;</span>, <span class="hljs-string">&#x27;24A94, 22&#x27;</span>, <span class="hljs-string">&#x27;248E8, 10&#x27;</span>, <span class="hljs-string">&#x27;2480C, 4&#x27;</span>, <span class="hljs-string">&#x27;247FC, 4&#x27;</span>, <span class="hljs-string">&#x27;24A3C, 22&#x27;</span>, <span class="hljs-string">&#x27;248C0, 10&#x27;</span>, <span class="hljs-string">&#x27;24844, 5&#x27;</span>, <span class="hljs-string">&#x27;24830, 5&#x27;</span>, <span class="hljs-string">&#x27;24C1C, 30&#x27;</span>, <span class="hljs-string">&#x27;24AEC, 24&#x27;</span>, <span class="hljs-string">&#x27;247EC, 4&#x27;</span>, <span class="hljs-string">&#x27;249E4, 22&#x27;</span>, <span class="hljs-string">&#x27;24858, 6&#x27;</span>, <span class="hljs-string">&#x27;247D0, 3&#x27;</span>, <span class="hljs-string">&#x27;24898, 10&#x27;</span>, <span class="hljs-string">&#x27;2498C, 22&#x27;</span>, <span class="hljs-string">&#x27;24870, 10&#x27;</span>, <span class="hljs-string">&#x27;2481C, 5&#x27;</span>, <span class="hljs-string">&#x27;24BB4, 26&#x27;</span>, <span class="hljs-string">&#x27;24910, 15&#x27;</span>, <span class="hljs-string">&#x27;24B4C, 26&#x27;</span>, <span class="hljs-string">&#x27;2494C, 16&#x27;</span>, <span class="hljs-string">&#x27;25280, 22&#x27;</span>, <span class="hljs-string">&#x27;250D4, 10&#x27;</span>, <span class="hljs-string">&#x27;25010, 4&#x27;</span>, <span class="hljs-string">&#x27;25000, 4&#x27;</span>, <span class="hljs-string">&#x27;25228, 22&#x27;</span>, <span class="hljs-string">&#x27;250AC, 10&#x27;</span>, <span class="hljs-string">&#x27;25048, 5&#x27;</span>, <span class="hljs-string">&#x27;25034, 5&#x27;</span>, <span class="hljs-string">&#x27;251D0, 22&#x27;</span>, <span class="hljs-string">&#x27;25084, 10&#x27;</span>, <span class="hljs-string">&#x27;25020, 5&#x27;</span>, <span class="hljs-string">&#x27;25578, 26&#x27;</span>, <span class="hljs-string">&#x27;250FC, 15&#x27;</span>, <span class="hljs-string">&#x27;25510, 26&#x27;</span>, <span class="hljs-string">&#x27;252D8, 23&#x27;</span>, <span class="hljs-string">&#x27;25334, 23&#x27;</span>, <span class="hljs-string">&#x27;24FD8, 2&#x27;</span>, <span class="hljs-string">&#x27;254B0, 24&#x27;</span>, <span class="hljs-string">&#x27;25178, 22&#x27;</span>, <span class="hljs-string">&#x27;2505C, 10&#x27;</span>, <span class="hljs-string">&#x27;25390, 24&#x27;</span>, <span class="hljs-string">&#x27;253F0, 24&#x27;</span>, <span class="hljs-string">&#x27;24FD0, 2&#x27;</span>, <span class="hljs-string">&#x27;25450, 24&#x27;</span>, <span class="hljs-string">&#x27;25138, 16&#x27;</span>, <span class="hljs-string">&#x27;25BE0, 22&#x27;</span>, <span class="hljs-string">&#x27;25A34, 10&#x27;</span>, <span class="hljs-string">&#x27;25970, 4&#x27;</span>, <span class="hljs-string">&#x27;25960, 4&#x27;</span>, <span class="hljs-string">&#x27;25B88, 22&#x27;</span>, <span class="hljs-string">&#x27;25A0C, 10&#x27;</span>, <span class="hljs-string">&#x27;259A8, 5&#x27;</span>, <span class="hljs-string">&#x27;25994, 5&#x27;</span>, <span class="hljs-string">&#x27;25B30, 22&#x27;</span>, <span class="hljs-string">&#x27;259E4, 10&#x27;</span>, <span class="hljs-string">&#x27;25980, 5&#x27;</span>, <span class="hljs-string">&#x27;25ED8, 26&#x27;</span>, <span class="hljs-string">&#x27;25A5C, 15&#x27;</span>, <span class="hljs-string">&#x27;25E70, 26&#x27;</span>, <span class="hljs-string">&#x27;25C38, 23&#x27;</span>, <span class="hljs-string">&#x27;25C94, 23&#x27;</span>, <span class="hljs-string">&#x27;25958, 2&#x27;</span>, <span class="hljs-string">&#x27;25E10, 24&#x27;</span>, <span class="hljs-string">&#x27;25AD8, 22&#x27;</span>, <span class="hljs-string">&#x27;259BC, 10&#x27;</span>, <span class="hljs-string">&#x27;25CF0, 24&#x27;</span>, <span class="hljs-string">&#x27;25D50, 24&#x27;</span>, <span class="hljs-string">&#x27;25950, 2&#x27;</span>, <span class="hljs-string">&#x27;25DB0, 24&#x27;</span>, <span class="hljs-string">&#x27;25A98, 16&#x27;</span>, <span class="hljs-string">&#x27;25F40, 6&#x27;</span>, <span class="hljs-string">&#x27;26088, 43&#x27;</span>, <span class="hljs-string">&#x27;25F58, 22&#x27;</span>, <span class="hljs-string">&#x27;26140, 30&#x27;</span>, <span class="hljs-string">&#x27;266C0, 26&#x27;</span>, <span class="hljs-string">&#x27;26418, 21&#x27;</span>, <span class="hljs-string">&#x27;26728, 30&#x27;</span>, <span class="hljs-string">&#x27;262B4, 17&#x27;</span>, <span class="hljs-string">&#x27;26950, 40&#x27;</span>, <span class="hljs-string">&#x27;268B8, 38&#x27;</span>, <span class="hljs-string">&#x27;261C8, 4&#x27;</span>, <span class="hljs-string">&#x27;26664, 23&#x27;</span>, <span class="hljs-string">&#x27;2646C, 21&#x27;</span>, <span class="hljs-string">&#x27;26274, 16&#x27;</span>, <span class="hljs-string">&#x27;26828, 36&#x27;</span>, <span class="hljs-string">&#x27;267A0, 34&#x27;</span>, <span class="hljs-string">&#x27;261D8, 5&#x27;</span>, <span class="hljs-string">&#x27;261C0, 1&#x27;</span>, <span class="hljs-string">&#x27;264C0, 21&#x27;</span>, <span class="hljs-string">&#x27;261C4, 1&#x27;</span>, <span class="hljs-string">&#x27;26514, 21&#x27;</span>, <span class="hljs-string">&#x27;26244, 12&#x27;</span>, <span class="hljs-string">&#x27;262F8, 18&#x27;</span>, <span class="hljs-string">&#x27;26568, 21&#x27;</span>, <span class="hljs-string">&#x27;261EC, 7&#x27;</span>, <span class="hljs-string">&#x27;26340, 18&#x27;</span>, <span class="hljs-string">&#x27;265BC, 21&#x27;</span>, <span class="hljs-string">&#x27;26208, 7&#x27;</span>, <span class="hljs-string">&#x27;26388, 18&#x27;</span>, <span class="hljs-string">&#x27;26B08, 18&#x27;</span>, <span class="hljs-string">&#x27;26AC8, 16&#x27;</span>, <span class="hljs-string">&#x27;26B50, 19&#x27;</span>, <span class="hljs-string">&#x27;26A5C, 6&#x27;</span>, <span class="hljs-string">&#x27;26B9C, 21&#x27;</span>, <span class="hljs-string">&#x27;26AA4, 9&#x27;</span>, <span class="hljs-string">&#x27;26C44, 38&#x27;</span>, <span class="hljs-string">&#x27;26A74, 6&#x27;</span>, <span class="hljs-string">&#x27;26BF0, 21&#x27;</span>, <span class="hljs-string">&#x27;26A8C, 6&#x27;</span>, <span class="hljs-string">&#x27;26A18, 3&#x27;</span>, <span class="hljs-string">&#x27;26A24, 3&#x27;</span>, <span class="hljs-string">&#x27;269F0, 2&#x27;</span>, <span class="hljs-string">&#x27;269F8, 2&#x27;</span>, <span class="hljs-string">&#x27;26A00, 2&#x27;</span>, <span class="hljs-string">&#x27;26A30, 3&#x27;</span>, <span class="hljs-string">&#x27;26A08, 2&#x27;</span>, <span class="hljs-string">&#x27;26A10, 2&#x27;</span>, <span class="hljs-string">&#x27;26A3C, 4&#x27;</span>, <span class="hljs-string">&#x27;26A4C, 4&#x27;</span>, <span class="hljs-string">&#x27;26D40, 16&#x27;</span>, <span class="hljs-string">&#x27;26CE0, 5&#x27;</span>, <span class="hljs-string">&#x27;26CF4, 8&#x27;</span>, <span class="hljs-string">&#x27;26E10, 22&#x27;</span>, <span class="hljs-string">&#x27;26E70, 20&#x27;</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; res.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">var</span> addr = res[i].<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;, &quot;</span>)[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">var</span> length = res[i].<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;, &quot;</span>)[<span class="hljs-number">1</span>]<br>        <span class="hljs-title function_">call_abb1</span>(<span class="hljs-built_in">parseInt</span>(addr, <span class="hljs-number">16</span>), <span class="hljs-built_in">parseInt</span>(length))<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="分析密文解密后位置回填"><a href="#分析密文解密后位置回填" class="headerlink" title="分析密文解密后位置回填"></a>分析密文解密后位置回填</h2><ul><li>分析发现bss节区中有一片地方，专门放解密后字符串的指针。frida验证下看看<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hookbss</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> base_addr = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findBaseAddress</span>(<span class="hljs-string">&quot;libmetasec_ml.so&quot;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;text:&quot;</span>+base_addr.<span class="hljs-title function_">add</span>(<span class="hljs-number">0x9fcac</span>).<span class="hljs-title function_">readPointer</span>().<span class="hljs-title function_">readCString</span>())<br>&#125;<br></code></pre></td></tr></table></figure></li><li>IDAPython匹配bss段所有变量的位置<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> ida_name<br><br># ida segment 查看bss段范围<br># .<span class="hljs-property">bss</span>  0009FAF0    000A65E1<br>nameList = []<br><span class="hljs-keyword">for</span> addr <span class="hljs-keyword">in</span> <span class="hljs-title function_">range</span>(<span class="hljs-number">0x9FAF0</span>, <span class="hljs-number">0xA65E1</span>):<br>    # 查看当前地址是否有名字<br>    name = ida_name.<span class="hljs-title function_">get_name</span>(addr)<br>    # 是否以dword_开头<br>    <span class="hljs-keyword">if</span> name.<span class="hljs-title function_">startswith</span>(<span class="hljs-string">&#x27;dword_&#x27;</span>):<br>        nameList.<span class="hljs-title function_">append</span>(<span class="hljs-title function_">int</span>(name.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;dword_&quot;</span>)[<span class="hljs-number">1</span>],<span class="hljs-number">16</span>))<br><span class="hljs-title function_">print</span>(nameList)<br>hook：数组放到frida代码中，查看对应内存<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">hookbss</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">const</span> addrList = [<span class="hljs-number">654064</span>, <span class="hljs-number">654068</span>, <span class="hljs-number">654136</span>, <span class="hljs-number">654140</span>, <span class="hljs-number">654144</span>, <span class="hljs-number">654160</span>, <span class="hljs-number">654164</span>, <span class="hljs-number">654168</span>, <span class="hljs-number">654172</span>, <span class="hljs-number">681436</span>]<br>    <span class="hljs-keyword">var</span> base_addr = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findBaseAddress</span>(<span class="hljs-string">&quot;libmetasec_ml.so&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i <span class="hljs-keyword">in</span> addrList)&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-keyword">var</span> text = base_addr.<span class="hljs-title function_">add</span>(addrList[i]).<span class="hljs-title function_">readPointer</span>().<span class="hljs-title function_">readCString</span>();<br>            <span class="hljs-keyword">if</span>(text != <span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(addrList[i]+<span class="hljs-string">&quot;: &quot;</span>+text)<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">catch</span>(e) &#123; &#125;<br>        <span class="hljs-keyword">finally</span>&#123;&#125;<br>    &#125;&#125;<br><span class="hljs-title function_">hookbss</span>();<br>回填：以注释形式回填到ida中<br><span class="hljs-keyword">import</span> idc<br>recordList = <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">654136: %s-%s-%s</span><br><span class="hljs-string">654140: android</span><br><span class="hljs-string">654160: bd</span><br><span class="hljs-string">##### 省略</span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;</span><br>records = recordList.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;\n&quot;</span>)<br><span class="hljs-keyword">for</span> record <span class="hljs-keyword">in</span> <span class="hljs-attr">records</span>:<br>    <span class="hljs-keyword">if</span> <span class="hljs-attr">record</span>:<br>        address = record.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;:&quot;</span>)[<span class="hljs-number">0</span>]<br>        address = <span class="hljs-title function_">int</span>(address)<br>        text = <span class="hljs-string">&quot;&quot;</span>.<span class="hljs-title function_">join</span>(record.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;:&quot;</span>)[<span class="hljs-number">1</span>:])<br>        # 设置注释<br>        <span class="hljs-title function_">print</span>(text)<br>        idc.<span class="hljs-title function_">set_cmt</span>(address, text, <span class="hljs-number">1</span>)<br><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/09/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/8.%20%E9%80%86%E5%90%91%E6%96%B9%E6%B3%95%E8%AE%BA/4.%20SO%E5%B1%82/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/ollvm/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%B7%B7%E6%B7%86/hook%E5%9B%9E%E5%A1%AB/"/>
    <url>/blog/2025/05/09/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/8.%20%E9%80%86%E5%90%91%E6%96%B9%E6%B3%95%E8%AE%BA/4.%20SO%E5%B1%82/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/ollvm/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%B7%B7%E6%B7%86/hook%E5%9B%9E%E5%A1%AB/</url>
    
    <content type="html"><![CDATA[<blockquote><p>hook回填法：适用于不回到原位 &amp;&amp; 解密函数单一&lt;不多&gt;且模块化</p></blockquote><h1 id="hook"><a href="#hook" class="headerlink" title="hook"></a>hook</h1><ol><li>Hook时机的问题，因为字符串解密可能位于 init_array 甚至 init_proc，所以如果Hook时机比较晚的话，就会错过一部分字符串的解密，如何在最早的时机对目标SO做Hook？这个问题的答案有很多，我们选择相对灵活且通用的一种，如下所示，即hook call_constructor 函数</li><li>hook获取结果 &amp;&amp; 尽可能多的点击、触发各种逻辑</li><li>spawn方式hook<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 模块加载的第一时间，早于目标SO的init_proc 和 init_array</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">hookInit</span>(<span class="hljs-params">moduleName</span>) &#123;<br>    <span class="hljs-keyword">var</span> linkername;<br>    <span class="hljs-keyword">var</span> call_constructor_addr = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">var</span> arch = <span class="hljs-title class_">Process</span>.<span class="hljs-property">arch</span>;<br>    <span class="hljs-keyword">if</span> (arch.<span class="hljs-title function_">endsWith</span>(<span class="hljs-string">&quot;arm&quot;</span>)) &#123;<br>        linkername = <span class="hljs-string">&quot;linker&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        linkername = <span class="hljs-string">&quot;linker64&quot;</span>;<br>        <span class="hljs-title class_">LogPrint</span>(<span class="hljs-string">&quot;arm64 is not supported yet!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">var</span> symbols = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">enumerateSymbolsSync</span>(linkername);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; symbols.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">var</span> symbol = symbols[i];<br>        <span class="hljs-keyword">if</span> (symbol.<span class="hljs-property">name</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;call_constructor&quot;</span>) !== -<span class="hljs-number">1</span>) &#123;<br>            call_constructor_addr = symbol.<span class="hljs-property">address</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 如果找到call_constructor符号</span><br>    <span class="hljs-keyword">if</span> (call_constructor_addr.<span class="hljs-title function_">compare</span>(<span class="hljs-variable constant_">NULL</span>) &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;get construct address&quot;</span>);<br>        <span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(call_constructor_addr, &#123;<br>            <span class="hljs-attr">onEnter</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">args</span>) &#123;<br>                <span class="hljs-keyword">if</span> (moduleName) &#123;<br>                    <span class="hljs-keyword">const</span> targetModule = <span class="hljs-title class_">Process</span>.<span class="hljs-title function_">findModuleByName</span>(moduleName);<br>                    <span class="hljs-keyword">if</span> (targetModule !== <span class="hljs-literal">null</span>) &#123;<br>                        <span class="hljs-comment">// 模块加载的第一时间，早于目标SO的init_proc 和 init_array</span><br>                        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;hook:&quot;</span> + moduleName);<br>                        <span class="hljs-comment">// 找到了之后阻止后续寻找工作</span><br>                        moduleName = <span class="hljs-literal">null</span>;<br>                        <span class="hljs-title function_">hook_ABB0</span>();<br>                    &#125;<br>                &#125;<br><br>            &#125;,<br>            <span class="hljs-attr">onLeave</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">retval</span>) &#123;<br><br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">// 对重复解密的数据做去重</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">hook_ABB0</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> base_addr = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findBaseAddress</span>(<span class="hljs-string">&quot;libJDMobileSec.so&quot;</span>);<br>    <span class="hljs-keyword">var</span> abb0_addr = base_addr.<span class="hljs-title function_">add</span>(<span class="hljs-number">0xABB1</span>);<br>    <span class="hljs-keyword">var</span> plainTextSet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>();<br>    <span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(abb0_addr, &#123;<br>        <span class="hljs-attr">onEnter</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">args</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">encryptAddress</span> = args[<span class="hljs-number">0</span>] - base_addr;<br>        &#125;,<br>        <span class="hljs-attr">onLeave</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">retval</span>) &#123;<br>            <span class="hljs-keyword">var</span> text = retval.<span class="hljs-title function_">readUtf8String</span>();<br>            <span class="hljs-keyword">if</span> (plainTextSet.<span class="hljs-title function_">has</span>(text)) &#123;<br>                <span class="hljs-comment">// do nothing</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                plainTextSet.<span class="hljs-title function_">add</span>(text);<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">encryptAddress</span> + <span class="hljs-string">&quot;###&quot;</span> + text);<br>            &#125;<br><br>        &#125;<br>    &#125;);<br>&#125;<br><br> <span class="hljs-comment">// 另一个样本hook</span><br> <span class="hljs-keyword">function</span> <span class="hljs-title function_">hook_decrypt_functions</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> base_addr = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findBaseAddress</span>(<span class="hljs-string">&quot;libmetasec_ml.so&quot;</span>);<br><br>    <span class="hljs-keyword">const</span> funcs = [<span class="hljs-string">&quot;0x71ea1&quot;</span>,<span class="hljs-string">&quot;0x72111&quot;</span>,<span class="hljs-string">&quot;0x72511&quot;</span>,<span class="hljs-string">&quot;0x71971&quot;</span>,<span class="hljs-string">&quot;0x71a81&quot;</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i <span class="hljs-keyword">in</span> funcs) &#123;<br>        <span class="hljs-keyword">let</span> funcPtr = base_addr.<span class="hljs-title function_">add</span>(funcs[i]);<br>        <span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(funcPtr, &#123;<br>            <span class="hljs-attr">onEnter</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">args</span>) &#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">buffer</span> = args[<span class="hljs-number">0</span>]<br>            &#125;,<br>            <span class="hljs-attr">onLeave</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-keyword">var</span> text = <span class="hljs-variable language_">this</span>.<span class="hljs-property">buffer</span>.<span class="hljs-title function_">readUtf8String</span>();<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(text);<br>            &#125;<br>        &#125;);<br><br><br>    &#125;<br>&#125;<br><br><span class="hljs-title function_">hookInit</span>(<span class="hljs-string">&quot;libJDMobileSec.so&quot;</span>)<br></code></pre></td></tr></table></figure>注意：</li><li>有些字符串一看都是一些对应的检测，因为它采用的运行时解密字符串而非init中统一解密，那么如果需要的话，还可以打印堆栈，顺藤摸瓜找到对应的检测处。</li><li>有的字符串需要特定的触发才会解密，所以会出现hook不全。此时可以采用call回填的方式</li></ol><h1 id="回填"><a href="#回填" class="headerlink" title="回填"></a>回填</h1><ul><li>比较好的方式是：patch回原密文内存块<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> ida_bytes<br><span class="hljs-keyword">import</span> idc<br><br># 获取到的地址是<span class="hljs-number">10</span>进制数，会转化成<span class="hljs-number">16</span>进制<br>recordList = <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">144816###println_native</span><br><span class="hljs-string">144880###(IILjava/lang/String;Ljava/lang/String;)I</span><br><span class="hljs-string">147536###n2</span><br><span class="hljs-string">147376###(Ljava/lang/String;)Ljava/lang/String;</span><br><span class="hljs-string">148640###readBytes</span><br><span class="hljs-string">148688###(Ljava/io/FileDescriptor;Ljava/lang/Object;II)I</span><br><span class="hljs-string">148880###writeBytes</span><br><span class="hljs-string">149468###open</span><br><span class="hljs-string">149120###(Ljava/lang/String;II)Ljava/io/FileDescriptor;</span><br><span class="hljs-string">149312###close</span><br><span class="hljs-string">149344###(Ljava/io/FileDescriptor;)V</span><br><span class="hljs-string">150688###(Ljava/lang/String;)V</span><br><span class="hljs-string">150784###(Ljava/lang/String;Z)V</span><br><span class="hljs-string">153056###open0</span><br><span class="hljs-string">157376###android/app/ActivityThread</span><br><span class="hljs-string">145800###/system/etc/xxzs_prop.sh</span><br><span class="hljs-string">146100###/system/etc/mumu-configs/device-prop-configs/mumu.config</span><br><span class="hljs-string">146336###/proc/%d/maps</span><br><span class="hljs-string">147316###/proc/%d/status</span><br><span class="hljs-string">146468###re.frida.server/frida-agent-32.so</span><br><span class="hljs-string">146600###re.frida.server/frida-agent-64.so</span><br><span class="hljs-string">146388###com.saurik.substrate</span><br><span class="hljs-string">143884###java/lang/ClassLoader</span><br><span class="hljs-string">143724###getSystemClassLoader</span><br><span class="hljs-string">144148###()Ljava/lang/ClassLoader;</span><br><span class="hljs-string">143420###loadClass</span><br><span class="hljs-string">144500###(Ljava/lang/String;)Ljava/lang/Class;</span><br><span class="hljs-string">144360###de.robv.android.xposed.XposedBridge</span><br><span class="hljs-string">147544###android/content/res/JDMobiSec</span><br><span class="hljs-string">145044###android/util/Log</span><br><span class="hljs-string">156228###mPackageName</span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;</span><br><br><br>records = recordList.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;\n&quot;</span>)<br><span class="hljs-keyword">for</span> record <span class="hljs-keyword">in</span> <span class="hljs-attr">records</span>:<br>    <span class="hljs-keyword">if</span> <span class="hljs-attr">record</span>:<br>        address, content = record.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;###&quot;</span>)<br>        address = <span class="hljs-title function_">int</span>(address)<br>        contentLength = <span class="hljs-title function_">len</span>(content)<br>        # patch 字符串<br>        ida_bytes.<span class="hljs-title function_">patch_bytes</span>(address, <span class="hljs-title function_">bytes</span>(content, encoding=<span class="hljs-string">&quot;utf8&quot;</span>))<br>        # 在明文末尾按照C字符串的风格添加终止符<br>        ida_bytes.<span class="hljs-title function_">patch_byte</span>(address + contentLength, <span class="hljs-number">0</span>)<br>        # 将这段内存转成字符串<br>        idc.<span class="hljs-title function_">create_strlit</span>(address, address+contentLength)<br></code></pre></td></tr></table></figure></li></ul><h1 id="重新分析"><a href="#重新分析" class="headerlink" title="重新分析"></a>重新分析</h1><ul><li>参考 dump回填 流程</li><li>但是因为有的样本存在一定的花指令，干扰了反汇编，进而干扰了函数识别、交叉引用、反编译等高级分析过程，IDA 在重新分析时，依然没有办法自动识别出部分字符串，如下处理：</li></ul><ol><li>如果情况少，可以框选出某个字符串区间，然后快捷键 A，手动转字符串。</li><li>情况多可以使用create_strlitAPI，它用于将一个地址范围内的数据转为字符串，参数3为idaapi.STRTYPE_TERMCHR 时，意味着生成C风格的字符串(以 \0 结尾）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> idaapi<br><br># 全路径，否则担心<span class="hljs-variable constant_">IDA</span>找不到<br><span class="hljs-keyword">with</span> <span class="hljs-title function_">open</span>(r<span class="hljs-string">&quot;C:\xxx\backup.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<span class="hljs-keyword">as</span> <span class="hljs-attr">F</span>:<br>    infos = F.<span class="hljs-title function_">readlines</span>()<br><span class="hljs-keyword">for</span> info <span class="hljs-keyword">in</span> <span class="hljs-attr">infos</span>:<br>    <span class="hljs-attr">try</span>:<br>        info = info.<span class="hljs-title function_">strip</span>().<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;,&quot;</span>)<br>        decryptAddress = <span class="hljs-title function_">int</span>(info[<span class="hljs-number">1</span>].<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;:&quot;</span>)[<span class="hljs-number">1</span>],<span class="hljs-number">16</span>)<br>        decryptInfo = bytes.<span class="hljs-title function_">fromhex</span>(info[<span class="hljs-number">3</span>].<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;:&quot;</span>)[<span class="hljs-number">1</span>])<br>        length = <span class="hljs-title function_">int</span>(info[<span class="hljs-number">2</span>].<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;:&quot;</span>)[<span class="hljs-number">1</span>],<span class="hljs-number">16</span>)<br>        idaapi.<span class="hljs-title function_">patch_bytes</span>(decryptAddress, decryptInfo)<br>        idaapi.<span class="hljs-title function_">create_strlit</span>(decryptAddress, length, idaapi.<span class="hljs-property">STRTYPE_TERMCHR</span>)<br>    <span class="hljs-attr">except</span>:<br>        <span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;parse error&quot;</span>)<br></code></pre></td></tr></table></figure></li></ol><h1 id="不回填，添加注释的方式"><a href="#不回填，添加注释的方式" class="headerlink" title="不回填，添加注释的方式"></a>不回填，添加注释的方式</h1><ul><li>数据使用处也可以看到对应注释<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> idaapi<br><br># 全路径，否则担心<span class="hljs-variable constant_">IDA</span>找不到<br><span class="hljs-keyword">with</span> <span class="hljs-title function_">open</span>(r<span class="hljs-string">&quot;C:\xxx\backup.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<span class="hljs-keyword">as</span> <span class="hljs-attr">F</span>:<br>    infos = F.<span class="hljs-title function_">readlines</span>()<br><br><span class="hljs-keyword">for</span> info <span class="hljs-keyword">in</span> <span class="hljs-attr">infos</span>:<br>    <span class="hljs-attr">try</span>:<br>        info = info.<span class="hljs-title function_">strip</span>().<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;,&quot;</span>)<br>        decryptAddress = <span class="hljs-title function_">int</span>(info[<span class="hljs-number">1</span>].<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;:&quot;</span>)[<span class="hljs-number">1</span>],<span class="hljs-number">16</span>)<br>        decryptInfo = bytes.<span class="hljs-title function_">fromhex</span>(info[<span class="hljs-number">3</span>].<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;:&quot;</span>)[<span class="hljs-number">1</span>])<br>        idaapi.<span class="hljs-title function_">set_cmt</span>(decryptAddress, decryptInfo.<span class="hljs-title function_">decode</span>(<span class="hljs-string">&quot;UTF-8&quot;</span>), <span class="hljs-number">1</span>)<br>    <span class="hljs-attr">except</span>:<br>        <span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;parse error&quot;</span>)<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/09/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/8.%20%E9%80%86%E5%90%91%E6%96%B9%E6%B3%95%E8%AE%BA/4.%20SO%E5%B1%82/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/ollvm/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%B7%B7%E6%B7%86/dump%E5%9B%9E%E5%A1%AB/"/>
    <url>/blog/2025/05/09/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/8.%20%E9%80%86%E5%90%91%E6%96%B9%E6%B3%95%E8%AE%BA/4.%20SO%E5%B1%82/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/ollvm/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%B7%B7%E6%B7%86/dump%E5%9B%9E%E5%A1%AB/</url>
    
    <content type="html"><![CDATA[<blockquote><p>dump 回填法&lt;运行时dump SO指定内存 + 回填&gt;： <code>适用于解密字符回到原位场景</code></p></blockquote><h1 id="字符串hexdump"><a href="#字符串hexdump" class="headerlink" title="字符串hexdump"></a>字符串hexdump</h1><h2 id="dump"><a href="#dump" class="headerlink" title="dump"></a>dump</h2><h3 id="bin文件"><a href="#bin文件" class="headerlink" title="bin文件"></a>bin文件</h3><p>注意： </p><ol><li>必须赋予App读写权限，否则脚本无法生效</li><li>最好attach的方式附加<br>3.虽然密文解密后不覆盖原先明文，但仍落在SO的data数据节区，那么就也可以用dump回填法</li><li>Frida获得的数据相比有细微不同。这是正常的。前文说过，data中并不只有字符串数据，其他的数据在不同时机可能存储不同的值，不一样很正常，只要字符串数据得到了还原就行。</li><li>有些朋友可能会想，既然内存中的SO是解密的，那为什么不直接dump 整个SO，然后分析这个dump的SO呢？这是因为加载SO的过程中，会丢掉一些信息（部分信息在运行时不需要使用），会增加一些信息（函数重定向到真实地址，bss被填充等等），因此dump下来的SO是没法直接用的，需要做一些修复，才能达到一个比较好的效果。</li></ol><h3 id="方式1"><a href="#方式1" class="headerlink" title="方式1"></a>方式1</h3><ul><li><code>IDA View - Open subviews - Segments 查看 data 段的范围 0x60000 - 0x642E0</code>，修改 Frida 脚本<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">dump_memory</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> base_addr = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findBaseAddress</span>(<span class="hljs-string">&quot;libpdd_secure.so&quot;</span>);<br>    <span class="hljs-keyword">var</span> dump_addr = base_addr.<span class="hljs-title function_">add</span>(<span class="hljs-number">0x60000</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">hexdump</span>(dump_addr, &#123;<span class="hljs-attr">length</span>: <span class="hljs-number">0x42E0</span>&#125;));<br>&#125;<br></code></pre></td></tr></table></figure></li><li>以 attach 模式附加到已启动的 App 上，<code>运行尽可能多的代码逻辑</code>，调用 dump_memory 函数，将 hexdump 获得的数据整体拷贝到 cyberchef 中查看。</li></ul><h3 id="方式2：dump-by-frida"><a href="#方式2：dump-by-frida" class="headerlink" title="方式2：dump by frida"></a>方式2：dump by frida</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">dumpSO</span>(<span class="hljs-params">so_name, start, end</span>)&#123;<br>    <span class="hljs-comment">// 找目标SO的基地址</span><br>    <span class="hljs-keyword">var</span> libso = <span class="hljs-title class_">Process</span>.<span class="hljs-title function_">findModuleByName</span>(so_name);<br>    <span class="hljs-comment">// 如果找不到，打印报错</span><br>    <span class="hljs-keyword">if</span> (libso == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;can not find &quot;</span>+so_name)<br>    &#125;<br>    <span class="hljs-comment">// 找到的话，给SO所处的内存可读可写可执行的充足权限，因为下一步我们就要读取它，怕权限不够</span><br>    <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">protect</span>(<span class="hljs-title function_">ptr</span>(libso.<span class="hljs-property">base</span>), libso.<span class="hljs-property">size</span>, <span class="hljs-string">&#x27;rwx&#x27;</span>);<br>    <span class="hljs-comment">// 用Frida的readByteArray API读取这块内存</span><br>    <span class="hljs-keyword">var</span> libso_buffer = <span class="hljs-title function_">ptr</span>(libso.<span class="hljs-property">base</span>).<span class="hljs-title function_">readByteArray</span>(libso.<span class="hljs-property">size</span>);<br>    <span class="hljs-comment">// 找到我们需要的data段</span><br>    <span class="hljs-keyword">var</span> data_segment = libso_buffer.<span class="hljs-title function_">slice</span>(start, end);<br>    <span class="hljs-comment">// 写到sdcard里，需要注意。必须赋予App读写权限。</span><br>    <span class="hljs-keyword">var</span> file = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;/sdcard/dump.bin&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>)<br>    <span class="hljs-comment">// 写进入</span><br>    file.<span class="hljs-title function_">write</span>(data_segment);<br>    file.<span class="hljs-title function_">flush</span>();<br>    file.<span class="hljs-title function_">close</span>();<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;dump OK&quot;</span>)<br>&#125;<br><br><br><span class="hljs-title function_">dumpSO</span>(<span class="hljs-string">&quot;libpdd_secure.so&quot;</span>, <span class="hljs-number">0x62000</span>, <span class="hljs-number">0x66720</span>)  <span class="hljs-comment">// so文件.data段的的start和end</span><br></code></pre></td></tr></table></figure><h3 id="dump-By-Adb"><a href="#dump-By-Adb" class="headerlink" title="dump By Adb"></a>dump By Adb</h3><ul><li>获取SO模块基地址<br><img src="/blog/../../../../../../../../images/android/%E6%96%B9%E6%B3%95%E8%AE%BA/so/1746764533741.jpg"><ul><li>有三条SO相关的内存信息，其中起始地址最小的就是SO的基地址，即0xb6f00000</li></ul></li><li>一个进程的内存数据可以通过 &#x2F;proc&#x2F;pid&#x2F;mem 获取，我们需要从 0xb6f00000+0x62000 开始的0x4720(0x66720 - 0x62000)长度个字节的数据。</li><li>dd 命令可以帮我们读取和拷贝这些数据，它的格式如下dd if&#x3D;xxx of&#x3D;{tempfile} skip&#x3D;{addrStart} ibs&#x3D;1 count&#x3D;{size} <ul><li>if 指定读取源，我们这里要读mem文件，&#x2F;proc&#x2F;{pid}&#x2F;mem 。 </li><li>of 指定输出文件名 </li><li>skip 指定从第几个字节开始 </li><li>bs 指定一次性读取多少字节，我选择一字节 </li><li>count 指定读取多少次dd if&#x3D;&#x2F;proc&#x2F;30408&#x2F;mem of&#x3D;&#x2F;sdcard&#x2F;adbdump.bin skip &#x3D;0xb6f62000 bs &#x3D; 1 count&#x3D;0x4720</li></ul></li><li>最后pull 到本机上</li></ul><h2 id="回填"><a href="#回填" class="headerlink" title="回填"></a>回填</h2><h3 id="方式1-1"><a href="#方式1-1" class="headerlink" title="方式1"></a>方式1</h3><p>可以看到非常多的明文字符串。接下来将数据在 cyberchef 中 tohex ，设置去除间隔符拷贝下来<br>使用IDA的 patch_bytes API做回填</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> idaapi<br><br>hex_string = <span class="hljs-string">&quot;00000000000000000000000000000000284c616e64726f69642f636f6e74656e742f436f6e746578743b295a00000000616e64726f69642e7065726d697373696f6e2e524541445f50484f4e455f535441544500000000000000000000000000636f6d2f78756e6d656e672f70696e64756f64756f2f75742f7574696c2f5574696c7300726f6d5f7374617475733d256c64000068697453706e67007064645f636f6e6669670000000000000000000054454c4550484f4e595f53455256494345000000000000000000000000000000706c6174666f726d5f747970653d25640000000050484f4e455f545950455f43444d4100000000000000000000000000616e64726f69642e7065726d697373696f6e2e57524954455f45585445524e414c5f53544f5241474500000050484f4e455f545950455f47534d00007375625f43313033000000007375625f43313034000000006e64657669640000626f6f745f74696d653d256c640000007375625f43313032000000007375625f4331303100000000696d6569305f64657465637400000000696d6569315f646574656374000000006470693d25640000000000007265736f6c7574696f6e3d256478256400000000776966690000000073657269616c000073657269616c300073657269616c3100706464696400000070646469643d000025640000726f6f743d2564006275696c645f69640000000066696e6765727072696e740063686172616374657269737469637300626174746572795f737461747573000000000000000000006c696273706e672d302e302e312e736f000000006d656964305f646574656374000000006d656964315f64657465637400000000637075696e666f0000000000696e7374616c6c5f74696d653d256c6c640000000000000000000000000000006170705f7570646174655f74696d653d256c6c64000000006574685f636865636b3d2564000000000000000000000000736861726564707265666572656e63655f6964006d656d6f72795f69640000007364636172645f6964000000696d656900000000696d656930000000696d6569310000006465766963653000646576696365310064657669636532006d656964000000006d656964300000006d656964310000006d616300626174746572790075696400636f6f6b69650000696d736900000000696d736930000000696d736931000000616e64726f69645f69640000736e6f0073657175656e6365000000006c6f63616c5f73657175656e636500006469645f696e666f0000000000000000c21da1b2c66236e7cadcf82c04b3dd18a41fa9fe99e23388de4ab46636e4dd0296725d0a699e58544fddddcf251986230d03d7451a25eb5c6232c904cdc7bb6e4cb9f18126fb6e83f1a59b5da14917838e82938e71088c68356ea062a73d83ee44db698fa6cab356e0881d68b13aa8f87543f0d721cdd9b687a0175ee030479b7b226b6579223a222573222c2264617461223a222573227d0000000001000100c21da1b2c66236e7cadcf82c04b3dd18a41fa9fe99e23388de4ab46636e4dd0296725d0a699e58544fddddcf251986230d03d7451a25eb5c6232c904cdc7bb6e4cb9f18126fb6e83f1a59b5da14917838e82938e71088c68356ea062a73d83ee44db698fa6cab356e0881d68b13aa8f87543f0d721cdd9b687a0175ee030479b7b226b6579223a222573222c2264617461223a222573227d000000000100010081906394ccb400000000000000000000774ff75ae8567ffeb9563fd0482ad10ea2a4b98d1f1a66882f37c40a468f5ad4704341d4de146b3a2b267f98a35f7ea25d6e2bc1fa764495d43774629e2cd9e2bcf1630989c97d2f35b7668522d6817f57ace4a94c726a42c94653685b8e0ae88c4603d981fb2798e8879824f2f652a75ebcea51a799f45727e124296e2eabec14c0030025732c257300000000000000904332b0db5124fe2162386ed0786dd19ae7d5528a658e67bcb2e53204ce40701f13dfb0799484c63d31a9c05c712a394a42dc7c945743e8d3a0cfcefd700ebe34d41857b0fda0f0709bc353e2e621fd8a6986a03eb5b1ef5efa0205428af2992ab4daebe5a338fbc9201e673584644133c058ad154b7c6dcd25071d2ec1cb6d01000100000000000000000000000000142ff681ff62ba64f51865f48cda3105ee72284f989ab4fe4b5bffa65b119013bb3d285729f6d7bb1608f97dc4e00000db5b7b7e6f4f9ef4697d7a2b8d071b9fbf433ba30a505f77c2b323a4f24ad4a60de42fd6845e1c4c3aa5b4c3c21cea3d6cacb97dcb56b0c4ca9a0ce40868d27fd30b03a041b89d2e463ab9bb73dd88c6683f7ab23b5947c62a516481eb5c98eb16e44e788aac893de60dc8db0277c937b69e9e6da1181a472dec0643337fb3f90db5cc00000000000000000000000000a4279eb14045a7bfaff92d988b7a199b763cdbbc1b7f7c38d50000000000000010d7ceccd3d843d5891b42c4fa73f91529164097028584e4729411686063741509a4af7c9fc6d07ea47fe513e576457e26e96888116cef36ec62a945d88c38986a655d4542703047626db312fbecd19432e8d840ca1a070fb743363b1ef3d61eb8d7941ca16a5da2f17b4203b8bbd2a120cff85806a17e015d8cad45d869b93d62b31000592ddb70520efb54fe1fb76d12a9a330000000000000000000000000fba1e1766e9863d45495edeee58a94d9a3f93b4e168f6b02989745c1f5dda13806d5c54514ead67bb2cfbc539aecf02d19ac6d6102a49c54ca5083469395fd1c56810c7ae526bde72b7fd2cb47386efee66f67973a994bc9cfa64fef703065d0bbaeb25ac7599e6edc5482db3bcbfdc869d3e778e71d816b6d849f4d50c4197a6879fd000cc52b0047686432d69c20063128039e1274b02e876c3baa29ef50ffec56ec91387a87e532616600000000007064645f6165735f3138303132315f31000000002829490068617368436f6465000000000000000000000000000000006a6176612f6c616e672f537472696e670000000032616700f5d7a200000000004b840e74ad4e797f49b9346458551623a02927402247e7bf0d4830d0ddcf3420d91aff3865e7b1e31cc5b15b81c798bbcca355dce345e6cb1b7e9816534da97a3f7b673a536373514dd974ed1345a3970f279a514cc7d4c1dd120239a75fc7a908c1c50d269e48a98c87dceb4ea34a012bfdf6ed87eec3c17553d20c1bad67ce99fa4c97037f5910fe422df9db8c12045fe7311e63eed99416853c4ee13b00002e603c00000000000000000000000000502f367ea262299bb47ef5f1356bebd540dd65bcba8b2a0794639e732917000081a1dd43123e943a8715e1ead0e75e5e157c8631a09b4341c97a191df9f6cb04c1c0c127b28563ab5036a36303134276491c3a610850eee5c75dc0ec7b679e72a163526c2dbead467d2b1b517823ca8564a72c790b8d32cf778c04478d79557e717b58207a1a945cba3820881aca444f847f0f4a6158bfae7509562bedb25ed37064645f7365637572655f6e61746976650000000000000000000000000000004a4e495f4f6e4c6f616420797562656e675f7365637572652064617461203a2573202573000000004d617920313320323032320030313a35333a3334000000004a4e495f4f6e4c6f616420797562656e675f736563757265204a4e495f4f6e4c6f6164206572726f72000000000000004a4e495f4f6e4c6f6164207064645f7365637572652064617461203a2573202573000000000000000000000000000000636f6d2f78756e6d656e672f70696e64756f64756f2f7365637572652f4465766963654e617469766500000000000000e4d702b473000000f5d702b47300000006d802b47300000017d802b473000000f0d802b47300000031d902b47300000042d902b4730000006fd902b47300000080d902b47300000091d902b473000000a2d902b473000000b3d902b473000000c4d902b473000000d5d902b473000000e6d902b473000000f7d902b47300000018da02b4730000000000000000000000726f2e6275696c642e76657273696f6e2e73646b000000002f646174610000002f73797374656d2f62696e2f737500002f73797374656d2f7862696e2f7375002f73797374656d2f7362696e2f7375002f7362696e2f7375000000002f76656e646f722f62696e2f737500005041544800000000737500007768696368207375000000007200000000000000000000002f73797374656d2f6170702f5375706572757365722e61706b000000000000006a6176612f6c616e672f537472696e670000000067657442797465730000000028295b4200000000000000000000000067657453797374656d5365727669636500000000000000000000000000000000616e64726f69642f636f6e74656e742f436f6e74657874000000000000000000284c6a6176612f6c616e672f537472696e673b294c6a6176612f6c616e672f4f626a6563743b000000000000000000004c6a6176612f6c616e672f537472696e673b00000000000000000000000000000e45dd3d8b5edfc2a130d69cbadeeb56ca342e000000000000000000000000005f006c6ed700765a05ee5a2d35a82559a5d011e52382bcf548fc89268b353b16c6d5cd13000000000000000000000000432fa57ecddbf8765b56f4762657666a584b748b94524b220000000000000000616e64726f69642f636f6e74656e742f436f6e74657874000000000000000000676574536861726564507265666572656e636573000000000000000000000000284c6a6176612f6c616e672f537472696e673b49294c616e64726f69642f636f6e74656e742f536861726564507265666572656e6365733b0000000000000000616e64726f69642f636f6e74656e742f436f6e746578740000000000000000007265676973746572526563656976657200000000000000000000000000000000284c616e64726f69642f636f6e74656e742f42726f61646361737452656365697665723b4c616e64726f69642f636f6e74656e742f496e74656e7446696c7465723b294c616e64726f69642f636f6e74656e742f496e74656e743b0000000000616e64726f69642f636f6e74656e742f436f6e74657874000000000000000000636865636b53656c665065726d697373696f6e00000000000000000000000000284c6a6176612f6c616e672f537472696e673b2949000000000000000000000066b33bfc85d9dce2e3a684a67e9a8598513760cfff562459a6da27e883d8d7cf716870600000000000000000000000009c38e6dbefc97b209aa99f86e76c8955e600000068ae7aebd8e0482a18a5bda5ea00000009ba283af6ee3e410000000054b3569cdaec8a912e254f63f2fa80e81e1d16c2eb000000000000000000000073801305f62d9a77b6eef6ebb27bd8e3ec66974b1bbce218f0a29a0e06a5aaf8df320f52c700000000000000000000005685ef2724fa018c99b56106f57b28d9abebe252a9067a1d7322a3f879e3d6d570a70000000000000000000000000000616e64726f69642f636f6e74656e742f436f6e746578740000000000000000006765745061636b6167654d616e6167657200000000000000000000000000000028294c616e64726f69642f636f6e74656e742f706d2f5061636b6167654d616e616765723b0000000000000000000000616e64726f69642f636f6e74656e742f436f6e7465787400000000000000000028294c6a6176612f6c616e672f537472696e673b000000006765745061636b6167654e616d6500000000000000000000ad23d5bca5a8e97a9c4db4f52e333d7c29772fc9297f579cc2f4f20000000000c8da7b64f808a6dd80595e5f6890be3473aa67f9668b0f9c7bd0c082d06da40009807ee898b0c97829ac346b33584e50d559af37d35f0000b6b73a5e15bacf66cad26ddbb6f7b7000000000000000000c1e0ef4b65629cc14a34234463bc1d2d0d52ca9caa405778aab2625100000000726f2e6275696c642e646973706c61792e696400000000000000000000000000726f2e6275696c642e76657273696f6e2e696e6372656d656e74616c00000000616e64726f69642e7065726d697373696f6e2e524541445f50484f4e455f535441544500000000000000000000000000726f2e70726f647563742e6272616e6400000000000000000000000000000000726f2e70726f647563742e646576696365000000726f2e6275696c642e74616773000000000000000000000000000000726f2e70726f647563742e6d6f64656c00000000000000000000000000000000726f2e70726f647563742e6d616e756661637475726572000000000000000000726f2e70726f647563742e626f61726400000000726f2e6275696c642e696400726f2e6275696c642e74797065000000726f2e6275696c642e76657273696f6e2e72656c656173650000000000000000726f2e6275696c642e76657273696f6e2e73646b000000000000000000000000726f2e6275696c642e646174652e7574630000000000000000000000000000002f73797374656d2f6275696c642e70726f700000000000000000000000000000616e64726f69642e7065726d697373696f6e2e524541445f50484f4e455f53544154450000000000000000000000000054454c4550484f4e595f5345525649434500000050484f4e455f545950455f47534d000050484f4e455f545950455f43444d410047505253000000004544474500000000554d54530000000043444d4100000000554e4b4e4f574e004556444f5f3000004556444f5f41000031785254540000004853445041000000485355504100000048535041000000004944454e000000004556444f5f4200004c5445004548525044000000485350415000000047534d0054445f5343444d410000000049574c414e0000004c54455f43410000636f6d2f78756e6d656e672f70696e64756f64756f2f7365637572652f4555006761640000000000000000000000000028294c6a6176612f6c616e672f537472696e673b000000004743432056455253494f4e002f70726f632f76657273696f6e000000720000004c494e55582056455253494f4e00000047434300534d5020505245454d5054000000000000000000616e64726f69642f6f732f44656275670000000000000000000000000000000069734465627567676572436f6e6e65637465640028295a002f70726f632f25642f73746174757300720000005472616365725069640000000000000000000000eb53392bf3a72cc50da09691b3af3254aeba0000000000000000000000000000e2de145c9796785559550fa5914c04a7bdbc6faeff77364e5c00000000000000dcbba23814433ec1266d6736800e96fae6e56730000000000000000000000000dea21b80aa9a01510ff50aa4e4b016a3bc65e86dc7a0aeeb00000000000000007a8d022194d2e1dd41a35813aba7ce4695639d03119205af856a412611b7f8550c1a0000000000000000000000000000246401dae8f531a3d39ca6ed9adf4b6154a3b3613dbd64f0acda484b81b9b5b25e053937a46a000059f919c9ecdb2f21edf57ba6e17fc20000e762467e00000073f0ed6230062fa700000000000000007e9a30781355d6f2401bb7db894393d7acde902e438e00000000000000000000c08215f3d0d28740059132f9edc2275a30b691e81fe69bb90188a03a5c8dc62efec44f0024af7558024b56c50f65b437015aca4460d06346ca85d6840af163313bd4290000000000000000000000000027e4647414138eac573db58476981b04c8a66ee798f843000000000000000000778f831408e617d61a6eed0c769cc4a4e93cfd2ab1000000282956000000000028294c6a6176612f6c616e672f537472696e673b0000000000000000000000006a6176612f6c616e672f5468726f7761626c65003c696e69743e00000000000064652e726f62762e616e64726f69642e78706f73656400000000000000000000636f6d2e73617572696b2e73756273747261746500000000676574537461636b5472616365000000000000000000000028295b4c6a6176612f6c616e672f537461636b5472616365456c656d656e743b000000000000000000000000000000006a6176612f6c616e672f537461636b5472616365456c656d656e7400676574436c6173734e616d6500000000000000006a6176612f7574696c2f55554944000072616e646f6d5555494400000000000028294c6a6176612f7574696c2f555549443b0000746f537472696e670000000028294c6a6176612f6c616e672f537472696e673b0000000000000000000000006a6176612f6c616e672f537472696e67000000007265706c616365416c6c0000284c6a6176612f6c616e672f537472696e673b4c6a6176612f6c616e672f537472696e673b294c6a6176612f6c616e672f537472696e673b000000002d0000007365637572655f736861726564707265666572656e63655f69640000000000007365637572655f6c6f63616c5f73657175656e63655f696400000000eb8e78023e250000201d000047bd0000000000007ec516d1a83d7b7657b3bc164df1e59d175abc543d65c79ad61f7eed58a20a4829000000a079cbd93c0fc293313c14000f04cc00a8ef5ba461ca706d2dddabfbd5bbc24d72656164537472696e67000072656379636c6500000000000000000028294c6a6176612f6c616e672f537472696e673b000000000000000000000000616e64726f69642f636f6e74656e742f436f6e7465787400000000000000000054454c4550484f4e595f534552564943450000000000000000000000000000004c6a6176612f6c616e672f537472696e673b0000000000000000000000000000636f6d2f78756e6d656e672f70696e64756f64756f2f736572766963655f686f6f6b2f53797374656d53657276696365486f6f6b65720000676574536572766963650000000000000000000000000000616e64726f69642f6f732f50617263656c0000006f627461696e00000000000028294c616e64726f69642f6f732f50617263656c3b00000000000000000000007772697465496e74657266616365546f6b656e00000000000000000000000000284c6a6176612f6c616e672f537472696e673b29560000007772697465537472696e6700000000000000000000000000284c6a6176612f6c616e672f537472696e673b294c616e64726f69642f6f732f4942696e6465723b0000000072656164457863657074696f6e00000028295600616e64726f69642f6f732f536572766963654d616e6167657200000000000000636f6d2f616e64726f69642f696e7465726e616c2f74656c6570686f6e792f4954656c6570686f6e79245374756200006765745061636b6167654e616d6500006173496e746572666163650000000000284c616e64726f69642f6f732f4942696e6465723b294c636f6d2f616e64726f69642f696e7465726e616c2f74656c6570686f6e792f4954656c6570686f6e793b0000000000000000000000000000006a6176612f6c616e672f4f626a65637400000000676574436c6173730000000028294c6a6176612f6c616e672f436c6173733b00676574446576696365496400284c6a6176612f6c616e672f537472696e673b294c6a6176612f6c616e672f537472696e673b00000000000000000000676574496e7465726661636544657363726970746f7200006a6176612f6c616e672f436c617373000000000000000000676574456e636c6f73696e67436c6173730000000000000000000000000000005452414e53414354494f4e5f676574446576696365496400490000000000000028494c616e64726f69642f6f732f50617263656c3b4c616e64726f69642f6f732f50617263656c3b49295a0000000000616e64726f69642f6f732f4942696e64657200007472616e736163740000000057494e444f575f5345525649434500003c696e69743e00006765744d6574726963730000282956000000000000000000616e64726f69642f7574696c2f446973706c61794d6574726963730000000000616e64726f69642f636f6e74656e742f7265732f5265736f7572636573000000676574446973706c61794d65747269637300000000000000000000000000000028294c616e64726f69642f7574696c2f446973706c61794d6574726963733b00616e64726f69642f766965772f57696e646f774d616e6167657200000000000067657444656661756c74446973706c617900000000000000000000000000000028294c616e64726f69642f766965772f446973706c61793b0000000000000000616e64726f69642f766965772f446973706c6179000000006765745265616c4d65747269637300000000000000000000284c616e64726f69642f7574696c2f446973706c61794d6574726963733b29560000000064656e7369747944706900007769647468506978656c7300686569676874506978656c73000000000000000028294c6a6176612f6c616e672f537472696e673b0000000000000000000000006a6176612f6c616e672f537472696e67000000000000000000000000000000006a6176612f7574696c2f456e756d65726174696f6e0000006861734d6f7265456c656d656e74730028295a006e657874456c656d656e7400000000000000000028294c6a6176612f6c616e672f4f626a6563743b000000000000000000000000676574486172647761726541646472657373000028295b4200000000574946495f534552564943450000000000000000616e64726f69642f6e65742f776966692f576966694d616e6167657200000000676574436f6e6e656374696f6e496e666f00000000000000000000000000000028294c616e64726f69642f6e65742f776966692f57696669496e666f3b000000616e64726f69642f6e65742f776966692f57696669496e666f0000006765744d616341646472657373000000000000006765744e6574776f726b496e746572666163657300000000000000000000000028294c6a6176612f7574696c2f456e756d65726174696f6e3b00000000000000253032583a253032583a253032583a253032583a253032583a253032580000006765744e616d6500776c616e300000006a6176612f6e65742f4e6574776f726b496e74657266616365000000746f5570706572436173650000000000000000007365637572655f6d61635f616464726573730000746f537472696e670000000028294c6a6176612f6c616e672f537472696e673b0000000000000000000000004c6a6176612f6c616e672f537472696e673b0000000000000000000000000000616e64726f69642f6f732f42756e646c650000006b6579536574000000000000284c6a6176612f6c616e672f537472696e673b29560000000000000000000000616e64726f69642f636f6e74656e742f496e74656e7446696c746572000000003c696e69743e000000000000000000006a6176612f6c616e672f4f626a656374000000006a6176612f7574696c2f536574000000746f4172726179000000000028295b4c6a6176612f6c616e672f4f626a6563743b000000000000000000000028294c6a6176612f7574696c2f5365743b00000025732c25732c000000000000616e64726f69642f636f6e74656e742f496e74656e7400000000000000000000414354494f4e5f424154544552595f4348414e474544000067657445787472617300000000000000000000000000000028294c616e64726f69642f6f732f42756e646c653b0000006765740000000000284c6a6176612f6c616e672f537472696e673b294c6a6176612f6c616e672f4f626a6563743b000025732c2c0000000028294c6a6176612f6c616e672f537472696e673b000000000000000000000000636f6d2f78756e6d656e672f70696e64756f64756f2f7365637572652f4555006761640000000000000000000000000028294c6a6176612f6c616e672f537472696e673b0000000000000000000000006a6176612f6c616e672f537472696e6700000000720000002f70726f632f637075696e666f0000004861726477617265000000007472696d00000000726f2e6275696c642e6964000000000000000000726f2e6275696c642e66696e6765727072696e74000000000000000000000000726f2e6275696c642e636861726163746572697374696373000000006c61737455706461746554696d65000000000000616e64726f69642f636f6e74656e742f706d2f5061636b6167654d616e616765720000006765745061636b616765496e666f0000000000000000000000000000284c6a6176612f6c616e672f537472696e673b49294c616e64726f69642f636f6e74656e742f706d2f5061636b616765496e666f3b0000000000000000000000616e64726f69642f636f6e74656e742f706d2f5061636b616765496e666f00006669727374496e7374616c6c54696d65000000004a000000000000000000000028294c6a6176612f6c616e672f537472696e673b0000000000000000000000006a6176612f7574696c2f456e756d65726174696f6e0000006861734d6f7265456c656d656e74730028295a006e657874456c656d656e7400000000000000000028294c6a6176612f6c616e672f4f626a6563743b0000000000000000000000006765744e6574776f726b496e746572666163657300000000000000000000000028294c6a6176612f7574696c2f456e756d65726174696f6e3b0000006765744e616d65000000000000000000000000006a6176612f6e65742f4e6574776f726b496e746572666163650000006574683000000000657468310000000025733d257300000025733d257300000025733d00fc3004796ec5ccac71ff573ebbba4679b2d706e313c4ba4bcc1a37023849bfcff6a6a5b634bbe384925f067a076dde15e592cefabfaae924d04782d21b6864ce7b53dd0f9956772b688e5413f5ea13fe2eea2a26fcbde3e20476eb08228b26296d924b6e68abbca9edff25e94fd3cf30f50ed3930554150a5815eb1dd0de69327c808c5fa45563fd02c8a389d5ba8ae8deeb8fd38945d25e5c4f42db792aff66b573273603c5e9c008a5c9987ca76d0e32d99365248948cc69d953e0da8a79e89a31c790508069ff94366a32f93d98d95d39954bbe74925650ef0f6861eb80511247eb767e9402b5438ac45173ac03d6a2db9be1e21063f7688301274a8296f599a2c1c3e3c61cb7dac9709e23e06d24275818474fc1da78a67a9525ada5f71abf6134ef8577acb62858ae3e05e9daa5cc22c5737d7652e40325ce4e8389ec640451e114710e0d6b2469c8b37199be0a667f943133be6d02e8aa0b315060cb987e353e3f08b9342e0f8e4df9386918bdf36a507b22dc1dc9d92a5a15cc7ad2e9623ce4d2db150e4430ae5edd232685aecf4a1f3a83918a4ae0aff89dcc7efc28bead60edf0585f02cd87baae5f76764d0991b30eee7b2036e6b1a2d6fc9639315f0340d6558d48a888d30b6ff75d2455763864acf547523219eb9c08b63bc1b0cfddcb768f2bf792dd61477ea79715f710c220c7a9f3c4b11132c99cb4f32e9f2d707a395995e13899d06099b0a8a2b69388ed996c55c3ce61fa1b59675ecfbf783ca9a4dd19689daa8fd01c0c937f22eded9ef50bb0567436a0cfe2a77ec0812d0000000000000000000000000000008e64f2e11d0000000000000000000000b9ee22ada2e66c2dc07a6fcfbf3d463b070f9c72c500556af6a367fc592042582c430000000000000000000000000000f5bc7aafdf5f6670fccb75fb86acc2a3043c4fb0448dd1b8002f5e0f50c821d1afd1497d40ae7af095f307da6a0000000c4ae025a74716226a3bd104e6be15c400c51b1f27b34d52b17436e89cc7663928cce1323a84e2676c00000011200720d667166f5e1a00000000000000000000616e64726f69642f636f6e74656e742f536861726564507265666572656e636573000000676574537472696e67000000284c6a6176612f6c616e672f537472696e673b4c6a6176612f6c616e672f537472696e673b294c6a6176612f6c616e672f537472696e673b0000000000000000616e64726f69642f636f6e74656e742f536861726564507265666572656e63657324456469746f72000000002829560065646974000000000000000000000000616e64726f69642f636f6e74656e742f536861726564507265666572656e63657300000000000000000000000000000028294c616e64726f69642f636f6e74656e742f536861726564507265666572656e63657324456469746f723b000000006170706c79000000707574537472696e67000000000000000000000000000000284c6a6176612f6c616e672f537472696e673b4c6a6176612f6c616e672f537472696e673b294c616e64726f69642f636f6e74656e742f536861726564507265666572656e63657324456469746f723b00000000000000000000000000000000616e64726f69642f636f6e74656e742f536861726564507265666572656e636573000000676574496e74000000000000284c6a6176612f6c616e672f537472696e673b49294900000000000000000000616e64726f69642f636f6e74656e742f536861726564507265666572656e63657324456469746f72000000002829560065646974000000000000000000000000616e64726f69642f636f6e74656e742f536861726564507265666572656e63657300000000000000000000000000000028294c616e64726f69642f636f6e74656e742f536861726564507265666572656e63657324456469746f723b000000006170706c79000000707574496e740000284c6a6176612f6c616e672f537472696e673b49294c616e64726f69642f636f6e74656e742f536861726564507265666572656e63657324456469746f723b000000000000000000000000000000000011e480402e2c0ff6be088845eab6ea205dbd00956a09dc38b097b157dd56c91fdd8b7600000000000000000000000000196cf8e9ef29c0326d695ae06cbcf0303d91ee2df7000000000000000000000078e679d5e0c58960f697ec0c7357453abfc556b4f88283db1e140cbedf9a71b2ccaa620000000000000000000000000072abffb713d620d334a9418f3470e1db842a6164aa0e688e42c7013663b729f64ce4d10065a9495200000000000000002ca3a230b4b3cb7096b3181c13eeabff215610bd3a41f8caea27df80b31b7823e5149c002b18eb158d2f357ee13a7c14e5adee85240000000000000000000000bdccc51c4ff4a8c88fb9ef7ed6de4bc681fbbcc3d0f1e895868e90d4b3db7a6c5f8b13000000000000000000000000004242e9e8cb663bb4e4212c26bef9120131409b720f0000000000000000000000775b2f30ed7335904fbfe8eb25e9ebab71f335c207ad6a369d9cd98a7d9428048096dc00f3cbd75142ae48ad571b7a23deec8d00000000000000000000000000616e64726f69642f74656c6570686f6e792f54656c6570686f6e794d616e6167657200002829490067657453696d53746174650000000000000000000000000028294c6a6176612f6c616e672f537472696e673b000000000000000000000000616e64726f69642f74656c6570686f6e792f54656c6570686f6e794d616e61676572000000000000000000000000000067657453696d4f70657261746f724e616d65000000000000000000000000000028294c6a6176612f6c616e672f537472696e673b000000000000000000000000616e64726f69642f74656c6570686f6e792f54656c6570686f6e794d616e61676572000000000000000000000000000067657453696d436f756e74727949736f00000000000000000000000000000000616e64726f69642f74656c6570686f6e792f54656c6570686f6e794d616e616765720000282949006765744e6574776f726b547970650000000000000000000028294c6a6176612f6c616e672f537472696e673b000000000000000000000000616e64726f69642f74656c6570686f6e792f54656c6570686f6e794d616e6167657200000000000000000000000000006765744e6574776f726b4f70657261746f72000000000000000000000000000028294c6a6176612f6c616e672f537472696e673b000000000000000000000000616e64726f69642f74656c6570686f6e792f54656c6570686f6e794d616e6167657200000000000000000000000000006765744e6574776f726b4f70657261746f724e616d650000000000000000000028294c6a6176612f6c616e672f537472696e673b000000000000000000000000616e64726f69642f74656c6570686f6e792f54656c6570686f6e794d616e6167657200000000000000000000000000006765744e6574776f726b436f756e74727949736f000000000000000000000000616e64726f69642f74656c6570686f6e792f54656c6570686f6e794d616e61676572000028294900676574446174614163746976697479000000000000000000616e64726f69642f74656c6570686f6e792f54656c6570686f6e794d616e6167657200002829490067657444617461537461746500000000000000000000000028294c6a6176612f6c616e672f537472696e673b0000000000000000000000004c6a6176612f6c616e672f537472696e673b0000726f2e73657269616c6e6f00616e64726f69642f6f732f4275696c640000000053455249414c000067657453657269616c000000756e6b6e6f776e00616e64726f69642f6f732f4275696c64000000004d414e554641435455524552000000007265616c6d6500006f70706f000000002d5f2e217e2a2728290000002d5f2e217e2a27282900000025642e25642e25642e2564001f4799935ccc1a5c49709163000000000000000000000000fb8a444fa6ac0000282956007772697465000000285b422956000000746f4279746541727261790028295b42000000006a6176612f696f2f4279746541727261794f757470757453747265616d0000006a6176612f7574696c2f7a69702f475a49504f757470757453747265616d00003c696e69743e00000000000000000000284c6a6176612f696f2f4f757470757453747265616d3b295600000066696e6973680000636c6f736500000000000000720000000000000000000000000000007374617420202f73746f726167652f656d756c61746564004163636573733a20000000004d6f646966793a20000000007200000049443a2000000000496e6f6465733a0000000000000000000000000073746174202d66202f73746f726167652f656d756c61746564000000426c6f636b733a007200000049443a2000000000496e6f6465733a00000000000000000073746174202d66202f73797374656d2f65746300426c6f636b733a0072000000636174202f70726f632f7379732f6b65726e656c2f72616e646f6d2f626f6f745f696400720000004163636573733a200000000000000000000000000000000073746174202f646174612f73797374656d2f75736572732f300000000000000025733b25733b25733b25733b25733b25733b25733b25733b25733b25733b00006765745f6469645f696e666f206c656e2825642c25642c25642c25642c25642c25642c25642c25642c25642c2564292025640000000000000000000000000000504154480000000025732f73750000003a0000000000000000000000000000002f73797374656d2f6c69622f6c6962726972752e736f000000000000000000002f73797374656d2f6c696236342f6c6962726972752e736f00000000000000002f70726f632f25642f6d61705f66696c65732f0025732573000000002f646174612f6d6973632f7269727500000000007379732e6f656d5f756e6c6f636b5f616c6c6f77656400003100000000000000635f636d646c696e65000000635f656e7669726f6e0000000000000000000000656e765f696e666f3a6e6174697665476574537973496e666f207374617274007064645f7365637572655f6e617469766500000000000000000000000000000028294c6a6176612f6c616e672f537472696e673b0000000000000000000000002f70726f632f73656c662f636d646c696e6500000000000000000000000000006f72672f6a736f6e2f4a534f4e4f626a65637400707574000000000000000000284c6a6176612f6c616e672f537472696e673b4c6a6176612f6c616e672f4f626a6563743b294c6f72672f6a736f6e2f4a534f4e4f626a6563743b00635f6664000000000000000000000000000000002f70726f632f73656c662f656e7669726f6e0000635f6d6170730000746f537472696e670000000000000000000000006a6176612f6c616e672f537472696e670000000067657442797465730000000028295b42000000002f70726f632f73656c662f6d61707300720000002e736f002e6a6172000000002e646578000000002e7a6970000000002e61706b000000003130f96698ddda701fa8a0e3e288025b720000002f70726f632f73656c662f66640000002e0000002e2e0000000000002f70726f632f73656c662f66642f2573000000002573202d3e202573000000003b3f438bf08cef3ecf88f54c56acef47d6e07131071237e3c74162611383af409fe95e000000000000000000000000003074072451bc526c81ef2692ecd4496bd4f386000000000000000000000000001ed5841e3fb896219b92b787489fdd70b85cfb9d15b864bcff821fbba65a9dc552f409000000000000000000000000005d78bbeb4bc44f70fde4a6b6aed612cf126c7c2da96e00000000000000000000616e64726f69642f74656c6570686f6e792f54656c6570686f6e794d616e6167657200000000000000000000000000004c6a6176612f6c616e672f537472696e673b0000676574496d65690000000000616e64726f69642f74656c6570686f6e792f54656c6570686f6e794d616e6167657200000000000000000000000000002849294c6a6176612f6c616e672f537472696e673b000000676574496d656900616e64726f69642f74656c6570686f6e792f54656c6570686f6e794d616e6167657200000000000000000000000000002849294c6a6176612f6c616e672f537472696e673b000000676574496d656900616e64726f69642f74656c6570686f6e792f54656c6570686f6e794d616e6167657200000000000000000000000000004c6a6176612f6c616e672f537472696e673b0000676574446576696365496400616e64726f69642f74656c6570686f6e792f54656c6570686f6e794d616e6167657200000000000000000000000000002849294c6a6176612f6c616e672f537472696e673b000000676574446576696365496400000000000000000000000000616e64726f69642f74656c6570686f6e792f54656c6570686f6e794d616e6167657200000000000000000000000000002849294c6a6176612f6c616e672f537472696e673b000000676574446576696365496400000000000000000000000000616e64726f69642f74656c6570686f6e792f54656c6570686f6e794d616e6167657200000000000000000000000000004c6a6176612f6c616e672f537472696e673b00006765744d6569640000000000616e64726f69642f74656c6570686f6e792f54656c6570686f6e794d616e6167657200000000000000000000000000002849294c6a6176612f6c616e672f537472696e673b0000006765744d65696400616e64726f69642f74656c6570686f6e792f54656c6570686f6e794d616e6167657200000000000000000000000000002849294c6a6176612f6c616e672f537472696e673b0000006765744d65696400616e64726f69642f74656c6570686f6e792f54656c6570686f6e794d616e6167657200000000000000000000000000004c6a6176612f6c616e672f537472696e673b000067657453756273637269626572496400000000000000000000000000616e64726f69642f74656c6570686f6e792f54656c6570686f6e794d616e6167657200000000000000000000000000002849294c6a6176612f6c616e672f537472696e673b000000676574537562736372696265724964000000000000000000616e64726f69642f74656c6570686f6e792f54656c6570686f6e794d616e6167657200000000000000000000000000002849294c6a6176612f6c616e672f537472696e673b00000067657453756273637269626572496400000000000000000067657453696d53657269616c4e756d6265720000000000000000000000000000616e64726f69642f74656c6570686f6e792f54656c6570686f6e794d616e6167657200000000000000000000000000004c6a6176612f6c616e672f537472696e673b000000000000000000000000000067657453696d53657269616c4e756d6265720000000000000000000000000000616e64726f69642f74656c6570686f6e792f54656c6570686f6e794d616e6167657200000000000000000000000000002849294c6a6176612f6c616e672f537472696e673b000000000000000000000067657453696d53657269616c4e756d6265720000000000000000000000000000616e64726f69642f74656c6570686f6e792f54656c6570686f6e794d616e6167657200000000000000000000000000002849294c6a6176612f6c616e672f537472696e673b000000000000000000000076891a88d8eff8e4177f356255c95cb5e47e5d9f277819e5c8efdd32b9e40bd461b7bbd9076e5926c581768138b88dba0d90d5deabb405c607656bc2f094ddf32bdfa5a9a79a3044339c373423c824b09c9e01747877fedff4a23033f5b08ff61df202343bbf9b90346bf2b6600d84b207dcd4a0627b4a21d9ab38608f23fd5814224faacc8fe6be4f7a2d09cba7c4367b7d6eadd7c37fa16d81b6c4821ce9f0bc705d35b9435e6fae79fb014acf9b80fba1247458045d414e3f466f270e79057b115e0b4ca91deb5c351381ddb5f77358f208c11b0970f1ab07df7664bffd5d50900e061eae8230060c477e589624e4aafe5474d61dba32112487405027cc850e94686dedbea128ee7425fe6d752190994c63399ca5408c3c78a2c5522ca21be4b9186c798d281c3d002cefd0f5d84d252b1c94d34c5c834e381445624ccc0ce2eadaa74721718892cb505996d459175a6f8cadf09f3dbd795ea984a1da57dccc5743772a4d294e63d0ce09bcc08a69778956a6a6bcf46b6f72b09e383ef56e8df2231db6b8f1daf0ee431cfb38d58c1ac153be4691cd2f489e22f06b4b4b1b1a85271452ca9ba9606104d58c8d422e371324c5f46716394b2b3b38b3fbd8b76ae85535ae13f723c5fa74c83f4c692240978518b6ad65e79796c8d341be58f08777ea204ed37b7977e97f357fb3d1840c77d580a3ed44363677a68f2d72ade493c84a4c6b3a4718df2c891d110913893ecad20286433247c8a7472f06c57cd9132c7ceb26955d3d6b519c54f529393026c359bb66cefe4344cbc5d4253cbeff6c188dee0221e554ed148a2a14dac8e20129216e58824afb44ee20cef041125c8bce1d2de84c9eb63b360c2c725b56e6037eee6ec1a37103bb6e52c1743e80d5b74bf8ff10cdb660e82dba6a892a078ad17b982be40b0d93ae895874b38ea71fb49fae9721fc4405f5c5fe9cc8ee9e05781c6e7c222bd996b34dceb8a73c89efc776580480cb3bf047fa0e7b2812a05707082cf2cf751894966136d375ab4b91d85b7dcc8d9a606bf4d742eee258e761b7682620761e43d87da9ede4f647fce9637c777bf26b6fc53001672bfed7ab76ca82c97dfa5947f0add4a2af9ca472c0b7fd9326363ff7cc34a5e5f171d8311504c723c31896059a071280e2eb27b27509832c1a1b6e5aa0523bd6b329e32f8453d100ed20fcb15b6acbbe394a4c58cfd0efaafb434d338545f9027f503c9fa851a3408f929d38f5bcb6da2110fff3d2cd0c13ec5f974417c4a77e3d645d197360814fdc222a908846eeb814de5e0bdbe0323a0a4906245cc2d3ac629195e479e7c8376d8dd54ea96c56f4ea657aae08ba78252e1ca6b4c6e8dd741f4bbd8b8a703eb5664803f60e613557b986c11d9ee1f8981169d98e949b1e87e9ce5528df8ca1890dbfe6426841992d0fb054bb16637c777bf26b6fc53001672bfed7ab76ca82c97dfa5947f0add4a2af9ca472c0b7fd9326363ff7cc34a5e5f171d8311504c723c31896059a071280e2eb27b27509832c1a1b6e5aa0523bd6b329e32f8453d100ed20fcb15b6acbbe394a4c58cfd0efaafb434d338545f9027f503c9fa851a3408f929d38f5bcb6da2110fff3d2cd0c13ec5f974417c4a77e3d645d197360814fdc222a908846eeb814de5e0bdbe0323a0a4906245cc2d3ac629195e479e7c8376d8dd54ea96c56f4ea657aae08ba78252e1ca6b4c6e8dd741f4bbd8b8a703eb5664803f60e613557b986c11d9ee1f8981169d98e949b1e87e9ce5528df8ca1890dbfe6426841992d0fb054bb1652096ad53036a538bf40a39e81f3d7fb7ce339829b2fff87348e4344c4dee9cb547b9432a6c2233dee4c950b42fac34e082ea16628d924b2765ba2496d8bd12572f8f66486689816d4a45ccc5d65b6926c704850fdedb9da5e154657a78d9d8490d8ab008cbcd30af7e45805b8b34506d02c1e8fca3f0f02c1afbd0301138a6b3a9111414f67dcea97f2cfcef0b4e67396ac7422e7ad3585e2f937e81c75df6e47f11a711d29c5896fb7620eaa18be1bfc563e4bc6d279209adbc0fe78cd5af41fdda8338807c731b11210592780ec5f60517fa919b54a0d2de57a9f93c99cefa0e03b4dae2af5b0c8ebbb3c83539961172b047eba77d626e169146355210c7d712c55626db8a305e5addf55e3491d6a9968f0d71f41a65316580d24fb5fbc134fb76d6e4d17535a60a78569bedb0e07a31dba40124eaf78be1e83cdae1c96bc94000000000000000000000000000000f41ff81efd3cb48949239aad81492a40b1d09959b49c58897b29674dcc594e64688311ea507f0e7d16db9185f7ac9f4ea3abd7d17ce224e29d98b797c3216bb3e1000000000000000000000000000000e5320190271694f6c03358a9827feb0b50a640e4edfa3fbc4f43a178245ce96f60daee0684ebb4d55efd3ee3081260e675d62e073f05dc3bb998d94c3256fa7b9a0000000000000000000000000000004142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f00000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000100000001000000f0de03b4730000000100000001000000086203b47300000001000000010000000c6203b4730000000100000001000000106203b4730000000100000001000000146203b4730000000100000001000000186203b47300000001000000010000001c6203b4730000000100000001000000206203b4730000000100000001000000246203b4730000000100000001000000286203b47300000001000000010000002c6203b473000000&quot;</span><br>barr = bytes.<span class="hljs-title function_">fromhex</span>(hex_string)<br>idaapi.<span class="hljs-title function_">patch_bytes</span>(<span class="hljs-number">0x60000</span>, barr)<br></code></pre></td></tr></table></figure><h3 id="方式2：回填-By-IDADAPython"><a href="#方式2：回填-By-IDADAPython" class="headerlink" title="方式2：回填 By IDADAPython"></a>方式2：回填 By IDADAPython</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> lief<br><br># 使用<span class="hljs-variable constant_">LIEF</span>加载目标<span class="hljs-variable constant_">SO</span><br>pdd_secure = lief.<span class="hljs-title function_">parse</span>(<span class="hljs-string">&quot;libpdd_secure.so&quot;</span>)<br># 找到data在文件中的位置<br>data_part = pdd_secure.<span class="hljs-title function_">get_section</span>(<span class="hljs-string">&quot;.data&quot;</span>)<br># 读取从内存中dump出来的data段的范围<br>pdd_secure_memory = <span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;dump.bin&quot;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>).<span class="hljs-title function_">read</span>()<br># 将内存中的data数据赋给目标<span class="hljs-variable constant_">SO</span>中对应部分，content为list类型，所以这里把read的bytes转成list<br>data_part.<span class="hljs-property">content</span> = <span class="hljs-title function_">list</span>(pdd_secure_memory)<br># 写到新文件里，write函的参数为文件名<br>pdd_secure.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;decrypt_pdd_secure.so&quot;</span>)<br></code></pre></td></tr></table></figure><p>注意：</p><ol><li>data中数据并非只有字符串信息，所以会带来一误判，所以我们会dump回填到一个新的SO副本，和原生SO在IDA中做对照</li><li>有时候dump 发现字符串表也多了几百条数据。前面说过，字符串数据属于data节区，但data中并不全是字符串。data 中的一些内容，在SO加载到内存后做了赋值，和静态地址不匹配，存在冲突。对 data整体 进行 dump 回填，就会遇到这个问题，因此最好原生SO和decrypt_SO对照着看</li></ol><h1 id="重新分析"><a href="#重新分析" class="headerlink" title="重新分析"></a>重新分析</h1><h2 id="方式1：Reanalyse-program-按键"><a href="#方式1：Reanalyse-program-按键" class="headerlink" title="方式1：Reanalyse program 按键"></a>方式1：Reanalyse program 按键</h2><ul><li>我们需要 IDA 做重新分析，或至少对 data 段做重新分析，使其自动识别这些字符串。</li><li>在 IDA 中如何做大范围的重新分析？可以在 Options 菜单栏选择 General - Analyse 界面，点击 Reanalyse program 并确定，也可以在 IDA 左下角 状态栏右键，同样选择 Reanalyse program</li><li><img src="/blog/../../../../../../../../images/android/%E6%96%B9%E6%B3%95%E8%AE%BA/so/1746764538833.jpg"></li><li>但只通过 “重新分析”没法让 IDA 识别出字符串。<code>猜测是因为 IDA 重新分析后，认为 byte 类型就挺对</code>。</li><li>假如我们选中 0x60010 - 0x6002C，右键 undefined 或用快捷键 U，使其回归未定位的状态，或者严谨一些说，“取消 IDA 对它的数据类型判断”。</li><li>然后再 Reanalyse program ，发现正常识别出了字符串</li><li>因此如果能将 data 段转化为尚未被分析的状态，再结合重新分析，就可以识别出大片字符串</li></ul><h2 id="方式2：IDA脚本"><a href="#方式2：IDA脚本" class="headerlink" title="方式2：IDA脚本"></a>方式2：IDA脚本</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> ida_auto<br><span class="hljs-keyword">import</span> ida_bytes<br><span class="hljs-keyword">import</span> idautils<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> idautils.<span class="hljs-title class_">Segments</span>():<br>    seg = idaapi.<span class="hljs-title function_">getseg</span>(i)<br>    segName = idaapi.<span class="hljs-title function_">get_segm_name</span>(seg)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;data&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-attr">segName</span>:<br>        startAddress = seg.<span class="hljs-property">start_ea</span><br>        endAddress = seg.<span class="hljs-property">end_ea</span><br>        ida_bytes.<span class="hljs-title function_">del_items</span>(startAddress, <span class="hljs-number">0</span>, endAddress)<br>        ida_auto.<span class="hljs-title function_">plan_and_wait</span>(startAddress, endAddress)<br></code></pre></td></tr></table></figure><p>需要注意，让 IDA 彻底重新分析的办法不止这一种，另一个方便的办法是将 IDA 中所作的 patch 保存回原文件，然后重新打开。操作如下，Edit - Patch program - Apply patches to input file，选择保存回原文件。然后重新打开 ，数据已经被良好呈现出来了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/09/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/8.%20%E9%80%86%E5%90%91%E6%96%B9%E6%B3%95%E8%AE%BA/4.%20SO%E5%B1%82/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/ollvm/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%B7%B7%E6%B7%86/unidbg%E9%80%9A%E7%94%A8%E6%80%9D%E8%B7%AF/"/>
    <url>/blog/2025/05/09/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/8.%20%E9%80%86%E5%90%91%E6%96%B9%E6%B3%95%E8%AE%BA/4.%20SO%E5%B1%82/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/ollvm/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%B7%B7%E6%B7%86/unidbg%E9%80%9A%E7%94%A8%E6%80%9D%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<ul><li>参考：<ul><li><a href="http://missking.cc/2020/11/03/unicorn2/">http://missking.cc/2020/11/03/unicorn2/</a></li><li><a href="https://github.com/Ccccccccvvm/unidbg_tools">https://github.com/Ccccccccvvm/unidbg_tools</a></li><li><a href="https://github.com/dqzg12300/unidbg_tools">https://github.com/dqzg12300/unidbg_tools</a></li></ul></li></ul><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="1-unidbg导入javafx模块，pom-xml"><a href="#1-unidbg导入javafx模块，pom-xml" class="headerlink" title="1. unidbg导入javafx模块，pom.xml:"></a>1. unidbg导入javafx模块，pom.xml:</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;dependency&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.openjfx<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javafx-controls<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br>&lt;/dependency&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.openjfx<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javafx-fxml<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="2-重写DeStrWriteHook，最好放在unidbg-api里"><a href="#2-重写DeStrWriteHook，最好放在unidbg-api里" class="headerlink" title="2. 重写DeStrWriteHook，最好放在unidbg-api里"></a>2. 重写DeStrWriteHook，最好放在unidbg-api里</h2><blockquote><p>png&gt;java: <img src="/blog/../../../../../../../../images/android/%E6%96%B9%E6%B3%95%E8%AE%BA/so/DeStrWriteHook.png"></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs javascript">package ollvm;<br><br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">Emulator</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">arm</span>.<span class="hljs-property">backend</span>.<span class="hljs-property">Backend</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">arm</span>.<span class="hljs-property">backend</span>.<span class="hljs-property">BackendException</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">arm</span>.<span class="hljs-property">backend</span>.<span class="hljs-property">WriteHook</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">listener</span>.<span class="hljs-property">TraceWriteListener</span>;<br><span class="hljs-keyword">import</span> javafx.<span class="hljs-property">util</span>.<span class="hljs-property">Pair</span>;<br><span class="hljs-keyword">import</span> trace.<span class="hljs-property">OtherTools</span>;<br><span class="hljs-keyword">import</span> unicorn.<span class="hljs-property">Unicorn</span>;<br><br><span class="hljs-keyword">import</span> java.<span class="hljs-property">io</span>.<span class="hljs-property">PrintStream</span>;<br><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">HashMap</span>;<br><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">Map</span>;<br><br><br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeStrWriteHook</span> implements <span class="hljs-title class_">WriteHook</span> &#123;<br><br>    private final boolean read;<br><br>    public <span class="hljs-title class_">DeStrWriteHook</span>(boolean read) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">read</span> = read;<br>    &#125;<br>    <span class="hljs-title class_">PrintStream</span> redirect;<br>    <span class="hljs-title class_">TraceWriteListener</span> traceWriteListener;<br>    public <span class="hljs-title class_">Map</span>&lt;<span class="hljs-title class_">Long</span>, <span class="hljs-title class_">Pair</span>&lt;byte[],byte[]&gt;&gt; dstr_datas=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;<span class="hljs-title class_">Long</span>, <span class="hljs-title class_">Pair</span>&lt;byte[],byte[]&gt;&gt;();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * long类型转byte[] (大端)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> <span class="hljs-variable">n</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    public <span class="hljs-keyword">static</span> byte[] <span class="hljs-title function_">longToBytesBig</span>(<span class="hljs-params">long n</span>) &#123;<br>        byte[] b = <span class="hljs-keyword">new</span> byte[<span class="hljs-number">8</span>];<br>        b[<span class="hljs-number">7</span>] = (byte) (n &amp; <span class="hljs-number">0xff</span>);<br>        b[<span class="hljs-number">6</span>] = (byte) (n &gt;&gt; <span class="hljs-number">8</span>  &amp; <span class="hljs-number">0xff</span>);<br>        b[<span class="hljs-number">5</span>] = (byte) (n &gt;&gt; <span class="hljs-number">16</span> &amp; <span class="hljs-number">0xff</span>);<br>        b[<span class="hljs-number">4</span>] = (byte) (n &gt;&gt; <span class="hljs-number">24</span> &amp; <span class="hljs-number">0xff</span>);<br>        b[<span class="hljs-number">3</span>] = (byte) (n &gt;&gt; <span class="hljs-number">32</span> &amp; <span class="hljs-number">0xff</span>);<br>        b[<span class="hljs-number">2</span>] = (byte) (n &gt;&gt; <span class="hljs-number">40</span> &amp; <span class="hljs-number">0xff</span>);<br>        b[<span class="hljs-number">1</span>] = (byte) (n &gt;&gt; <span class="hljs-number">48</span> &amp; <span class="hljs-number">0xff</span>);<br>        b[<span class="hljs-number">0</span>] = (byte) (n &gt;&gt; <span class="hljs-number">56</span> &amp; <span class="hljs-number">0xff</span>);<br>        <span class="hljs-keyword">return</span> b;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * long类型转byte[] (小端)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> <span class="hljs-variable">n</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    public <span class="hljs-keyword">static</span> byte[] <span class="hljs-title function_">longToBytesLittle</span>(<span class="hljs-params">long n</span>) &#123;<br>        byte[] b = <span class="hljs-keyword">new</span> byte[<span class="hljs-number">8</span>];<br>        b[<span class="hljs-number">0</span>] = (byte) (n &amp; <span class="hljs-number">0xff</span>);<br>        b[<span class="hljs-number">1</span>] = (byte) (n &gt;&gt; <span class="hljs-number">8</span>  &amp; <span class="hljs-number">0xff</span>);<br>        b[<span class="hljs-number">2</span>] = (byte) (n &gt;&gt; <span class="hljs-number">16</span> &amp; <span class="hljs-number">0xff</span>);<br>        b[<span class="hljs-number">3</span>] = (byte) (n &gt;&gt; <span class="hljs-number">24</span> &amp; <span class="hljs-number">0xff</span>);<br>        b[<span class="hljs-number">4</span>] = (byte) (n &gt;&gt; <span class="hljs-number">32</span> &amp; <span class="hljs-number">0xff</span>);<br>        b[<span class="hljs-number">5</span>] = (byte) (n &gt;&gt; <span class="hljs-number">40</span> &amp; <span class="hljs-number">0xff</span>);<br>        b[<span class="hljs-number">6</span>] = (byte) (n &gt;&gt; <span class="hljs-number">48</span> &amp; <span class="hljs-number">0xff</span>);<br>        b[<span class="hljs-number">7</span>] = (byte) (n &gt;&gt; <span class="hljs-number">56</span> &amp; <span class="hljs-number">0xff</span>);<br>        <span class="hljs-keyword">return</span> b;<br>    &#125;<br><br>    @<span class="hljs-title class_">Override</span><br>    public <span class="hljs-keyword">void</span> <span class="hljs-title function_">hook</span>(<span class="hljs-params">Backend backend, long address, int size, long value, <span class="hljs-built_in">Object</span> user</span>) &#123;<br>        <span class="hljs-keyword">if</span> (read) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-title class_">Emulator</span>&lt;?&gt; emulator = (<span class="hljs-title class_">Emulator</span>&lt;?&gt;) user;<br>            <span class="hljs-keyword">if</span> (traceWriteListener == <span class="hljs-literal">null</span> || traceWriteListener.<span class="hljs-title function_">onWrite</span>(emulator, address, size, value)) &#123;<br>                <span class="hljs-comment">//将写入的地址和写入的数据保存下来</span><br>                byte[] writedata=<span class="hljs-title function_">longToBytesLittle</span>(value);<br>                byte[] resizeWriteData=<span class="hljs-keyword">new</span> byte[size];<br>                byte[] buff=emulator.<span class="hljs-title function_">getBackend</span>().<span class="hljs-title function_">mem_read</span>(address,size);<br>                <span class="hljs-title class_">String</span> src= <span class="hljs-title class_">OtherTools</span>.<span class="hljs-title function_">byteToString</span>(buff);<br>                <span class="hljs-title class_">String</span> dest= <span class="hljs-title class_">OtherTools</span>.<span class="hljs-title function_">byteToString</span>(resizeWriteData);<br>                <span class="hljs-keyword">if</span>(!src.<span class="hljs-title function_">equals</span>(dest))&#123;<br>                    <span class="hljs-title class_">System</span>.<span class="hljs-title function_">arraycopy</span>(writedata,<span class="hljs-number">0</span>,resizeWriteData,<span class="hljs-number">0</span>,size);<br>                    dstr_datas.<span class="hljs-title function_">put</span>(address,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Pair</span>(resizeWriteData,buff));<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">BackendException</span> e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(e);<br>        &#125;<br>    &#125;<br><br>    @<span class="hljs-title class_">Override</span><br>    public <span class="hljs-keyword">void</span> <span class="hljs-title function_">onAttach</span>(<span class="hljs-params">Unicorn.UnHook unHook</span>) &#123;<br><br>    &#125;<br><br>    @<span class="hljs-title class_">Override</span><br>    public <span class="hljs-keyword">void</span> <span class="hljs-title function_">detach</span>(<span class="hljs-params"></span>) &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-代码逻辑"><a href="#3-代码逻辑" class="headerlink" title="3. 代码逻辑"></a>3. 代码逻辑</h2><ol><li>注意：以下代码适用于在init_array和JNI_OnOnLoad里面做解密&lt;应该不对&gt;。在代码外要先做执行操作即可</li><li>应该基本通用，如果不在init_array和JNI_OnOnLoad里解密，在其他地方，直接执行目标方法，然后回填应该也可以<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br>package com.<span class="hljs-property">ollvm</span>;<br><br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">AndroidEmulator</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">Module</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">linux</span>.<span class="hljs-property">android</span>.<span class="hljs-property">AndroidEmulatorBuilder</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">linux</span>.<span class="hljs-property">android</span>.<span class="hljs-property">AndroidResolver</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">linux</span>.<span class="hljs-property">android</span>.<span class="hljs-property">dvm</span>.<span class="hljs-property">AbstractJni</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">linux</span>.<span class="hljs-property">android</span>.<span class="hljs-property">dvm</span>.<span class="hljs-property">DalvikModule</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">linux</span>.<span class="hljs-property">android</span>.<span class="hljs-property">dvm</span>.<span class="hljs-property">VM</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">memory</span>.<span class="hljs-property">Memory</span>;<br><span class="hljs-keyword">import</span> javafx.<span class="hljs-property">util</span>.<span class="hljs-property">Pair</span>;<br><span class="hljs-keyword">import</span> trace.<span class="hljs-property">OtherTools</span>;<br><br><span class="hljs-keyword">import</span> java.<span class="hljs-property">io</span>.*;<br><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">Map</span>;<br><br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">ollvm_str</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">AbstractJni</span> &#123;<br>    private final <span class="hljs-title class_">AndroidEmulator</span> emulator;<br>    private final <span class="hljs-variable constant_">VM</span> vm;<br>    public <span class="hljs-title class_">DeStrWriteHook</span> trace;<br>    private final <span class="hljs-title class_">Module</span> <span class="hljs-variable language_">module</span>;<br>    public <span class="hljs-title class_">String</span> modulePath = <span class="hljs-string">&quot;unidbg-android/src/test/java/com/ollvm/strollvm.so&quot;</span>;<br><br><br>    public <span class="hljs-title function_">ollvm_str</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// 创建模拟器实例,进程名建议依照实际进程名填写，可以规避针对进程名的校验</span><br>        emulator = <span class="hljs-title class_">AndroidEmulatorBuilder</span>.<span class="hljs-title function_">for32Bit</span>().<span class="hljs-title function_">build</span>();<br>        trace = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeStrWriteHook</span>(<span class="hljs-literal">false</span>);<br>        <span class="hljs-comment">// 获取模拟器的内存操作接口</span><br>        final <span class="hljs-title class_">Memory</span> memory = emulator.<span class="hljs-title function_">getMemory</span>();<br>        <span class="hljs-comment">// 设置系统类库解析</span><br>        memory.<span class="hljs-title function_">setLibraryResolver</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AndroidResolver</span>(<span class="hljs-number">23</span>));<br><br>        emulator.<span class="hljs-title function_">getBackend</span>().<span class="hljs-title function_">hook_add_new</span>(trace, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, emulator);<br>        <span class="hljs-comment">// 创建Android虚拟机,传入APK，Unidbg可以替我们做部分签名校验的工作</span><br>        vm = emulator.<span class="hljs-title function_">createDalvikVM</span>();<br><br>        <span class="hljs-comment">// 加载目标SO</span><br>        <span class="hljs-title class_">DalvikModule</span> dm = vm.<span class="hljs-title function_">loadLibrary</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(modulePath), <span class="hljs-literal">true</span>); <span class="hljs-comment">// 加载so到虚拟内存， 参数二设为false(即不执行init相关函数)</span><br>        <span class="hljs-comment">//获取本SO模块的句柄,后续需要用它</span><br>        <span class="hljs-variable language_">module</span> = dm.<span class="hljs-title function_">getModule</span>();<br>        byte[] ceshi = emulator.<span class="hljs-title function_">getBackend</span>().<span class="hljs-title function_">mem_read</span>(<span class="hljs-variable language_">module</span>.<span class="hljs-property">base</span>, <span class="hljs-variable language_">module</span>.<span class="hljs-property">size</span>);<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;ceshi: &quot;</span> + <span class="hljs-title class_">OtherTools</span>.<span class="hljs-title function_">byteToString</span>(ceshi));<br><span class="hljs-comment">//        String savepath = modulePath + &quot;.new2&quot;;</span><br><span class="hljs-comment">//        writeFile(ceshi, savepath);</span><br>        vm.<span class="hljs-title function_">setJni</span>(<span class="hljs-variable language_">this</span>); <span class="hljs-comment">// 设置JNI</span><br>        vm.<span class="hljs-title function_">setVerbose</span>(<span class="hljs-literal">true</span>); <span class="hljs-comment">// 打印日志</span><br><br>        dm.<span class="hljs-title function_">callJNI_OnLoad</span>(emulator); <span class="hljs-comment">// 调用JNI OnLoad</span><br>    &#125;<br><br><br>    public <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeFile</span>(<span class="hljs-params">byte[] data, <span class="hljs-built_in">String</span> savefile</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-title class_">FileOutputStream</span> fos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(savefile);<br>            <span class="hljs-title class_">BufferedOutputStream</span> bos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(fos);<br>            bos.<span class="hljs-title function_">write</span>(data, <span class="hljs-number">0</span>, data.<span class="hljs-property">length</span>);<br>            bos.<span class="hljs-title function_">flush</span>();<br>            bos.<span class="hljs-title function_">close</span>();<br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">Exception</span> e) &#123;<br>            e.<span class="hljs-title function_">printStackTrace</span>();<br>        &#125;<br>    &#125;<br><br>    public <span class="hljs-keyword">static</span> byte[] <span class="hljs-title function_">readFile</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> strFile</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-title class_">InputStream</span> is = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(strFile);<br>            int iAvail = is.<span class="hljs-title function_">available</span>();<br>            byte[] bytes = <span class="hljs-keyword">new</span> byte[iAvail];<br>            is.<span class="hljs-title function_">read</span>(bytes);<br>            is.<span class="hljs-title function_">close</span>();<br>            <span class="hljs-keyword">return</span> bytes;<br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">Exception</span> e) &#123;<br>            e.<span class="hljs-title function_">printStackTrace</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    public <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>) &#123;<br>        ollvm_str demo = <span class="hljs-keyword">new</span> <span class="hljs-title function_">ollvm_str</span>();<br>        <span class="hljs-title class_">String</span> savepath = demo.<span class="hljs-property">modulePath</span> + <span class="hljs-string">&quot;.new&quot;</span>;<br>        byte[] sodata = <span class="hljs-title function_">readFile</span>(demo.<span class="hljs-property">modulePath</span>);<br>        long base_addr = demo.<span class="hljs-property">module</span>.<span class="hljs-property">base</span>;<br>        long module_size = demo.<span class="hljs-property">module</span>.<span class="hljs-property">size</span>;<br><br>        <span class="hljs-title class_">ByteArrayOutputStream</span> baos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        int cnt = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">//遍历保存的写入地址和写入数据</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-title class_">Map</span>.<span class="hljs-property">Entry</span>&lt;<span class="hljs-title class_">Long</span>, <span class="hljs-title class_">Pair</span>&lt;byte[], byte[]&gt;&gt; item : demo.<span class="hljs-property">trace</span>.<span class="hljs-property">dstr_datas</span>.<span class="hljs-title function_">entrySet</span>()) &#123;<br>            <span class="hljs-comment">//如果范围是在模块内的。则进行处理</span><br>            <span class="hljs-keyword">if</span> (item.<span class="hljs-title function_">getKey</span>() &gt; base_addr &amp;&amp; item.<span class="hljs-title function_">getKey</span>() &lt; base_addr + module_size) &#123;<br>                <span class="hljs-comment">//获取到正确的写入的偏移位置</span><br>                baos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>                <span class="hljs-title class_">Long</span> offset = item.<span class="hljs-title function_">getKey</span>() - base_addr - <span class="hljs-number">0x1000</span>;<br>                byte[] src = item.<span class="hljs-title function_">getValue</span>().<span class="hljs-title function_">getValue</span>();<br>                byte[] dest = item.<span class="hljs-title function_">getValue</span>().<span class="hljs-title function_">getKey</span>();<br><br>                <span class="hljs-keyword">for</span> (int i = offset.<span class="hljs-title function_">intValue</span>(); i &lt; offset.<span class="hljs-title function_">intValue</span>() + dest.<span class="hljs-property">length</span>; i++) &#123;<br>                    sodata[i] = dest[i - offset.<span class="hljs-title function_">intValue</span>()];<br>                &#125;<br>                baos.<span class="hljs-title function_">write</span>(sodata, <span class="hljs-number">0</span>, sodata.<span class="hljs-property">length</span>);<br>                cnt++;<br>                <span class="hljs-keyword">if</span> (cnt % <span class="hljs-number">1000</span> == <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-title class_">String</span>.<span class="hljs-title function_">format</span>(<span class="hljs-string">&quot;count:%d cur:%d&quot;</span>, demo.<span class="hljs-property">trace</span>.<span class="hljs-property">dstr_datas</span>.<span class="hljs-title function_">size</span>(), cnt));<br>                &#125;<br><br>            &#125;<br>        &#125;<br>        <span class="hljs-title function_">writeFile</span>(baos.<span class="hljs-title function_">toByteArray</span>(), savepath);<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;task over&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/09/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/8.%20%E9%80%86%E5%90%91%E6%96%B9%E6%B3%95%E8%AE%BA/4.%20SO%E5%B1%82/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/ollvm/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%B7%B7%E6%B7%86/%E6%80%BB%E7%BA%B2/"/>
    <url>/blog/2025/05/09/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/8.%20%E9%80%86%E5%90%91%E6%96%B9%E6%B3%95%E8%AE%BA/4.%20SO%E5%B1%82/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/ollvm/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%B7%B7%E6%B7%86/%E6%80%BB%E7%BA%B2/</url>
    
    <content type="html"><![CDATA[<blockquote><p>unidbg处理：<a href="http://missking.cc/2020/11/03/unicorn2/">http://missking.cc/2020/11/03/unicorn2/</a></p></blockquote><h1 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h1><p>首先定义字符串加密相关的三个基本概念</p><ul><li>明文：未经处理或解密后的字符串信息</li><li>密文：明文加密后的内容，不可读</li><li>加解密函数：明文和密文互相转换的算法</li></ul><p><code>加解密算法，通常是异或、base64这类比较朴素的办法，因为速度快，效率高</code>。但用<code>AES这类现代加密算法也可行，因为2022年的手机算力非常好</code>，这点加解密带不来任何压力。</p><p>每个样本采用的字符串加密方案都不太一样，但我们只要关注四个问题，就可以对它们进行分类以及对应的处理。</p><ol><li>是密文放在哪儿？</li><li>是明文放在哪儿？</li><li>是加解密算法是什么？</li><li>是解密于哪个时机？</li></ol><p>处理字符串加密，存在两个关键问题</p><ul><li><code>字符串解密后是否回到原位</code></li><li><code>解密函数是否单一且模块化</code></li></ul><h1 id="二、解决方案"><a href="#二、解决方案" class="headerlink" title="二、解决方案"></a>二、解决方案</h1><h2 id="1-常规知识补充"><a href="#1-常规知识补充" class="headerlink" title="1. 常规知识补充"></a>1. 常规知识补充</h2><ol start="0"><li><code>datadiv_decode</code>就是OLLVM中字符串解密的固定函数名特征</li><li>回顾ELF文件的节区知识：<code>text 存放代码，rodata 存只读数据，data 存可读写的非零数据，bss 预留位置给未初始化或全零的数据</code>。字符串属于程序数据的一部分，即 <code>data节区的一部分</code>，因此我们直接跳到data 看一下&lt;IDA:view–Open subviews–Segments–.data&gt;</li><li><code>unk_23510</code> 指的是一个IDA也没分析出是什么类型的数据</li><li>idaapi.get_arg_addrs：可以给出每个寄存器的赋值地址。以此拿到每个方法的参数地址</li></ol><ul><li>这个方法只对深色方法有作用，如果是浅色方法需要按Y键确认方法识别无误，就会变成深色方法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">args = idaapi.<span class="hljs-title function_">get_arg_addrs</span>(<span class="hljs-number">0xed74</span>)<br><span class="hljs-title function_">print</span>(args))<br></code></pre></td></tr></table></figure></li></ul><ol start="4"><li>内存中都是小端序</li><li><code>ida_bytes.del_items</code>: 当IDA识别出错，反向优化了，可以用它指定范围来删除掉IDA对这些方法的定义<blockquote><p>ida_bytes.del_items(0xbf000,0, 0xd1e98)</p></blockquote></li></ol><h2 id="2-判断是否有字符串加密"><a href="#2-判断是否有字符串加密" class="headerlink" title="2. 判断是否有字符串加密"></a>2. 判断是否有字符串加密</h2><ul><li><code>从data段往下滑动，我们会发现，几乎没有可见的字符串信息，这大概率做了字符串加密</code>。按照IDA的命名规范，byte_62020指的就是0x62020偏移处的一个字节数据，而 data 节区通篇这样，”位于xxx的一个字节”。反之，如果字符串没有加密，那么IDA会识别字符串，并且用字符串形式去展示它</li><li>或者就是在破解算法过程中发现某些关键字符走了解密程序</li></ul><h2 id="3-怎么快速找到字符串加密函数呢？"><a href="#3-怎么快速找到字符串加密函数呢？" class="headerlink" title="3. 怎么快速找到字符串加密函数呢？"></a>3. 怎么快速找到字符串加密函数呢？</h2><p>有这么一些思路：</p><ul><li>找一个疑似的密文，查看交叉引用，看是否有函数修改它。如果无交叉引用，那就对密文块下内存断点，动态调试时经过此处的，必然是解密函数。（IDA+一台可以内存断点的测试机，或者使用Frida MemoryAccessMonitor API 监控对某个内存块的首次访问，或fridaMemoryAccessTrace 这个很精妙的项目)</li><li>从结果出发，比如在函数中用到了某个字符串，但这个字符串在字符串表中找不到，Unidbg traceWrite找它的来源，来源也必定是解密函数。</li><li>分析 init 或者 init_array 中是否有字符串加密函数，因为我们发现，一部分样本会在初始化时解密全部密文块，这个时机点会很早。</li><li>如果解密代码是一个函数而非宏，那么它在功能设计上，大概率如下——参数是指向密文块的指针，以及解密长度，函数做解密操作后，返回指向明文字符串的指针。作为解密函数，它大概率会被调用非常多次，毕竟字符串常常数百上千。那么，我们可以写个IDA脚本，由高到低排一下函数的交叉引用次数，再仔细分析调用最多的那几个函数中，是否是哪个是字符串解密函数。</li></ul><p>我这里用了第四个思路，IDAPython脚本如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> idautils<br><span class="hljs-keyword">from</span> operator <span class="hljs-keyword">import</span> itemgetter<br><br>functionList = []<br><span class="hljs-keyword">for</span> func <span class="hljs-keyword">in</span> idautils.<span class="hljs-title class_">Functions</span>():<br>    xrefs = idautils.<span class="hljs-title class_">CodeRefsTo</span>(func, <span class="hljs-number">0</span>)<br>    xrefCount = <span class="hljs-title function_">len</span>(<span class="hljs-title function_">list</span>(xrefs))<br>    oneFuncDict = &#123;<span class="hljs-string">&quot;funcName&quot;</span>:idc.<span class="hljs-title function_">get_func_name</span>(func), <span class="hljs-string">&quot;Address&quot;</span>: <span class="hljs-title function_">hex</span>(func), <span class="hljs-string">&quot;xrefCount&quot;</span>: xrefCount&#125;<br>    functionList.<span class="hljs-title function_">append</span>(oneFuncDict)<br><br>function_list_by_countNum = <span class="hljs-title function_">sorted</span>(functionList, key=<span class="hljs-title function_">itemgetter</span>(<span class="hljs-string">&#x27;xrefCount&#x27;</span>),reverse=<span class="hljs-title class_">True</span>)<br><span class="hljs-keyword">for</span> func <span class="hljs-keyword">in</span> function_list_by_countNum[:<span class="hljs-number">10</span>]:<br>    <span class="hljs-title function_">print</span>(func)<br></code></pre></td></tr></table></figure><h2 id="4-破解混淆方法见同级目录"><a href="#4-破解混淆方法见同级目录" class="headerlink" title="4. 破解混淆方法见同级目录"></a>4. 破解混淆方法见同级目录</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/09/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/8.%20%E9%80%86%E5%90%91%E6%96%B9%E6%B3%95%E8%AE%BA/4.%20SO%E5%B1%82/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/ollvm/%E6%8C%87%E4%BB%A4%E8%86%A8%E8%83%80sub/"/>
    <url>/blog/2025/05/09/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/8.%20%E9%80%86%E5%90%91%E6%96%B9%E6%B3%95%E8%AE%BA/4.%20SO%E5%B1%82/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/ollvm/%E6%8C%87%E4%BB%A4%E8%86%A8%E8%83%80sub/</url>
    
    <content type="html"><![CDATA[<p>D810 可以基本处理 OLLVM 的指令替换，它的原理是模式匹配和 Z3 符号执行。<br>参考：<a href="https://github.com/joydo/d810">https://github.com/joydo/d810</a><br>安装<br>Python 3.7 及更高版本仅支持 IDA v7.5 或更高版本（因为我们需要微码 Python API）<br>将此存储库复制到.idapro&#x2F;plugins<br>我们建议安装 Z3 以便能够使用 D-810 的几个功能：<br>pip3 install z3-solver<br>步骤<br>1.使用Ctrl-Shift-D快捷方式加载插件<br>2.选择或创建您的项目配置。如果您不确定在此处做什么，请保留default_instruction_only.json。<br>3.单击Start按钮启用反混淆<br>4.反编译一个混淆函数，代码应该被简化（希望如此）<br>5.当您想禁用反混淆时，只需单击Stop按钮即可。<br>6.之后刷新反编译的伪C代码</p><p>阐述<br>我们以Key为例，它的完整流程如下（下面均为十六进制字节）<br>首先，Key是 30 29 28 27 26 25 24 23 22 21 00 00 00 00 00 00，开发者不希望硬编码在SO里，所以先将它异或0x20，在SO中硬编码即 10 09 08 07 06 05 04 03 02 01 20 20 20 20 20 20。<br>然后在使用时，将这么一串异或0x20，因为异或两次等于自身，所以Key重新变成30 29 28 27 26 25 24 23 22 21 00 00 00 00 00 00，正常参与运算。<br>那么下面这两种运算，其功能都等价于单字节异或0x20，怎么变成这个样子了呢？<br>s[v7] &#x3D; (<del>s[v7] &amp; 0xE9 | s[v7] &amp; 0x16) ^ 0xC9;<br>*((_BYTE <em>)v8 + v6) &#x3D; (</em>((_BYTE <em>)v8 + v6) &amp; 0x8E | ~</em>((_BYTE *)v8 + v6) &amp; 0x71) ^ 0x51;<br>这就是指令替换的目的，将简单的加减乘除、异或、与等运算，替换成等价但更复杂的指令序列。<br>演示一下这个过程<br>S &#x3D; A ^ B<br>异或0不影响结果<br>S &#x3D; A ^ B ^ 0<br>0可以展开成C ^ C<br>S &#x3D; A ^ B ^  C ^ C<br>做一下简单的分配<br>S &#x3D; (A^C)^(B^C)<br>两数异或时可以等价替换如下，读者可以自行验证。<br>a ^ b &#x3D;&gt;  (</del>a &amp; b) | (a &amp; <del>b)<br>那么S &#x3D; (</del>A &amp; C) | (A &amp; <del>C) ^ (</del>B &amp; C) | (B &amp; <del>C)<br>回到 S &#x3D; A ^ B，假设A 就是我们的待处理数据，B是0x20，即将数据和0x20异或，我们再选择C为0xE9<br>S &#x3D; (</del>A &amp; 0xE9) | (A &amp; <del>0xE9) ^ (</del>0x20 &amp; 0xE9) | (0x20 &amp; ~0xE9)<br>0xE9 在取反后即 0x16，而异或的另外一方，因为不存在未知数，编译器会直接优化计算出结果</p><p>S &#x3D;  (<del>A &amp; 0xE9) | (A &amp; 0x16) ^ 0xC9<br>A 代入 s[v7] 不就是 s[v7] &#x3D; (</del>s[v7] &amp; 0xE9 | s[v7] &amp; 0x16) ^ 0xC9; 吗？<br>A 代入 *((_BYTE *)v8 + v6)，C 为0x71时，就是 另一个式子。<br>本质上，两者都是逐字节与0x20异或。<a href="https://github.com/joydo/d810">https://github.com/joydo/d810</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/09/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/8.%20%E9%80%86%E5%90%91%E6%96%B9%E6%B3%95%E8%AE%BA/4.%20SO%E5%B1%82/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/ollvm/%E6%8E%A7%E5%88%B6%E6%B5%81%E5%B9%B3%E5%9D%A6%E5%8C%96fla/"/>
    <url>/blog/2025/05/09/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/8.%20%E9%80%86%E5%90%91%E6%96%B9%E6%B3%95%E8%AE%BA/4.%20SO%E5%B1%82/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/ollvm/%E6%8E%A7%E5%88%B6%E6%B5%81%E5%B9%B3%E5%9D%A6%E5%8C%96fla/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/09/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/8.%20%E9%80%86%E5%90%91%E6%96%B9%E6%B3%95%E8%AE%BA/4.%20SO%E5%B1%82/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/ollvm/%E8%99%9A%E5%81%87%E5%88%86%E6%94%AFbcf/"/>
    <url>/blog/2025/05/09/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/8.%20%E9%80%86%E5%90%91%E6%96%B9%E6%B3%95%E8%AE%BA/4.%20SO%E5%B1%82/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/ollvm/%E8%99%9A%E5%81%87%E5%88%86%E6%94%AFbcf/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/09/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/8.%20%E9%80%86%E5%90%91%E6%96%B9%E6%B3%95%E8%AE%BA/4.%20SO%E5%B1%82/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/%E8%8A%B1%E6%8C%87%E4%BB%A4/jumpout/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/blog/2025/05/09/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/8.%20%E9%80%86%E5%90%91%E6%96%B9%E6%B3%95%E8%AE%BA/4.%20SO%E5%B1%82/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/%E8%8A%B1%E6%8C%87%E4%BB%A4/jumpout/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h1 id="方式1：单个处理-非批量"><a href="#方式1：单个处理-非批量" class="headerlink" title="方式1：单个处理[非批量]"></a>方式1：单个处理[非批量]</h1><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://bbs.pediy.com/thread-259062.htm">https://bbs.pediy.com/thread-259062.htm</a></li><li><a href="http://www.yxfzedu.com/rs_show/150">http://www.yxfzedu.com/rs_show/150</a></li></ul><h3 id="技术要点"><a href="#技术要点" class="headerlink" title="技术要点"></a>技术要点</h3><ul><li>遇见JUMPOUT就patch </li><li>ida会帮我们解析出一些跳转的偏移，它解析不了的，我们需要帮助它 </li><li>记得删除函数块和新建函数块，同时有些时候你需要帮助ida确定函数尾 </li><li>我的代码不能patch所有地方，每遇到一个JUMPOUT，你需要修改偏移，然后手动patch（因为它们的JUMPOUT特征不固定，想完美patch，需要完美的patch代码，哈哈，不过它一个函数JUMPOUT的地方还不是很多，你按我的方法做也不累） </li><li>至于fla嘛，你随意吧，网络上对抗fla的帖子还是挺多的，另外想动态调试可以忽略它</li></ul><h3 id="patch代码"><a href="#patch代码" class="headerlink" title="patch代码"></a>patch代码</h3><ol><li>修改patch代码中的地址后让ida运行此python脚本</li><li>给鼠标放在代码块上，点ida的edit-functions-delete function； </li><li>在代码块起始位置按p<edit-functions-create function>，之后按f5<br>注意： 如果edit-functions后面的按钮按不动，可以给代码从c语言切换到汇编代码<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 新版本：</span><br>def <span class="hljs-title function_">put_unconditional_branch</span>(source, destination):<br>    offset = (destination - source - <span class="hljs-number">4</span>) &gt;&gt; <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> offset &gt; <span class="hljs-number">2097151</span> or offset &lt; -<span class="hljs-number">2097152</span>:<br>        raise <span class="hljs-title class_">RuntimeError</span>(<span class="hljs-string">&quot;Invalid offset&quot;</span>)<br>    <span class="hljs-keyword">if</span> offset &gt; <span class="hljs-number">1023</span> or offset &lt; -<span class="hljs-number">1024</span>:<br>        instruction1 = <span class="hljs-number">0xf000</span> | ((offset &gt;&gt; <span class="hljs-number">11</span>) &amp; <span class="hljs-number">0x7ff</span>)<br>        instruction2 = <span class="hljs-number">0xb800</span> | (offset &amp; <span class="hljs-number">0x7ff</span>)<br>        ida_bytes.<span class="hljs-title function_">patch_word</span>(source, instruction1)<br>        ida_bytes.<span class="hljs-title function_">patch_word</span>(source + <span class="hljs-number">2</span>, instruction2)<br>    <span class="hljs-attr">else</span>:<br>        instruction = <span class="hljs-number">0xe000</span> | (offset &amp; <span class="hljs-number">0x7ff</span>)<br>        ida_bytes.<span class="hljs-title function_">patch_word</span>(source, instruction)<br><br><span class="hljs-title function_">put_unconditional_branch</span>(<span class="hljs-title function_">here</span>(), <span class="hljs-number">0xF5D0</span>)<br><span class="hljs-comment">// 老版本：</span><br>def <span class="hljs-title function_">put_unconditional_branch</span>(source, destination):<br>    offset = (destination - source - <span class="hljs-number">4</span>) &gt;&gt; <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> offset &gt; <span class="hljs-number">2097151</span> or offset &lt; -<span class="hljs-number">2097152</span>:<br>        raise <span class="hljs-title class_">RuntimeError</span>(<span class="hljs-string">&quot;Invalid offset&quot;</span>)<br>    <span class="hljs-keyword">if</span> offset &gt; <span class="hljs-number">1023</span> or offset &lt; -<span class="hljs-number">1024</span>:<br>        instruction1 = <span class="hljs-number">0xf000</span> | ((offset &gt;&gt; <span class="hljs-number">11</span>) &amp; <span class="hljs-number">0x7ff</span>)<br>        instruction2 = <span class="hljs-number">0xb800</span> | (offset &amp; <span class="hljs-number">0x7ff</span>)<br>        <span class="hljs-title class_">PatchWord</span>(source, instruction1)<br>        <span class="hljs-title class_">PatchWord</span>(source + <span class="hljs-number">2</span>, instruction2)<br>    <span class="hljs-attr">else</span>:<br>        instruction = <span class="hljs-number">0xe000</span> | (offset &amp; <span class="hljs-number">0x7ff</span>)<br>        <span class="hljs-title class_">PatchWord</span>(source, instruction)<br><br><span class="hljs-title function_">put_unconditional_branch</span>(<span class="hljs-title function_">here</span>(), <span class="hljs-number">0xF5D0</span>)<br></code></pre></td></tr></table></figure></li></ol><h1 id="方式2：idapython-keypatch-批量"><a href="#方式2：idapython-keypatch-批量" class="headerlink" title="方式2：idapython &amp; keypatch[批量]"></a>方式2：idapython &amp; keypatch[批量]</h1><h2 id="keypatch使用"><a href="#keypatch使用" class="headerlink" title="keypatch使用"></a>keypatch使用</h2><ul><li><a href="https://github.com/keystone-engine/keypatch">Keypatch</a><br><img src="/blog/../../../../../../../../images/android/%E6%96%B9%E6%B3%95%E8%AE%BA/so/1746760225890.jpg"></li><li>大部分绿色版 IDA 都自带 Keypatch </li><li>Patcher 是修改某一行汇编为指定汇编； </li><li>Fill Range 是先选定一片区域，然后将这片区域修改为指定汇编代码，它的使用场景之一是批量 nop ； </li><li>Undo last patching 是撤销前一次做所的 patch 操作</li></ul><h4 id="Patch-后的重新分析"><a href="#Patch-后的重新分析" class="headerlink" title="Patch 后的重新分析"></a>Patch 后的重新分析</h4><blockquote><p>并不会立刻发生什么改变，比如对 JNI_OnLoad 重新 F5，依然是 jumpout。因为我们还没有让 IDA 重新分析——根据我们 patch 后的新现状做重新分析&lt;可以选择 <code>options - general</code> 子菜单，切换到 <code>Analysis</code> 窗口，点击重新分析程序按钮，并确认 OK，即可实现程序的重新分析; <code>快捷键右键左下角；实际使用中你会发现它并不是真正、全盘、彻底的重新分析</code>&gt;</p></blockquote><h4 id="Patch-后的持久化"><a href="#Patch-后的持久化" class="headerlink" title="Patch 后的持久化"></a>Patch 后的持久化</h4><blockquote><p>首先让 Patch 持久化：<code>Edit--Patch program--apply patches to input_file</code><br>将我们所作的 patch 保存回原文件。关闭 IDA（不保存任何 IDB 文件），重新打开 patch 后的 SO</p></blockquote><h2 id="花指令批量处理"><a href="#花指令批量处理" class="headerlink" title="花指令批量处理"></a>花指令批量处理</h2><ul><li>两种思路：IDP_HOOKS&lt;<code>ev_emu_insn | ev_emu_insn &amp; add_cref</code>&gt;或者下面的脚本</li></ul><h3 id="搜索与匹配"><a href="#搜索与匹配" class="headerlink" title="搜索与匹配"></a>搜索与匹配</h3><ul><li>思路总结：搜索匹配可以根据<font color=#16900>助记符的顺序  |  固定二进制 |  最好反汇编text段，遍历地址，判断是否调用目标方法或者方法集 | 交叉引用&lt;少用，因为花指令存在，因为它自身不一定被顺利识别为函数，调用它的地方不一定被正确识别为代码，也就不存在对应的引用信息&gt;  | junkCode的内容&lt;然后遍历text段，每四个字节判断是否是B跳转指令且跳转地址在junkCode的match列表&gt;</font></li><li><code>因为花指令的存在，最好使用纯粹的反汇编&lt;如idapython | capstore&gt;对样本text段进行反汇编</code></li></ul><h4 id="搜索：适用于特征明显，可用二进制直接匹配类型花指令"><a href="#搜索：适用于特征明显，可用二进制直接匹配类型花指令" class="headerlink" title="搜索：适用于特征明显，可用二进制直接匹配类型花指令"></a>搜索：适用于特征明显，可用二进制直接匹配类型花指令</h4><ul><li>二进制搜索与汇编搜索&lt;在 IDA 中十分值得一提的还有 AST Search&gt;<blockquote><p>搜索汇编: 菜单栏 Search - Text 可以进行汇编搜索，记得勾选 Find all occurences，寻找所有出现地方</p></blockquote></li></ul><blockquote><p>二进制搜索: 首先打开机器码展示，设置为 4 字节, 菜单栏Search - Sequence of bytes 做二进制搜索</p></blockquote><blockquote><p>我们在处理花指令时，绝不会使用汇编匹配。因为花指令本就用于混淆和干扰反汇编过程，它很可能会让 IDA 将某些代码误识别为数据，以及某些数据误识别为代码</p><p>二进制搜索，它的好处就是不存在漏判的问题，但容易误判，即某些数据可能恰好和机器码的值相同。因此，在二进制搜索时需要更严格的匹配规则，比如从搜索四个字节调整为搜索八个字节</p></blockquote><p><strong>ida_search.find_binary</strong></p><ul><li>它存在问题——会造成一定遗漏<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> ida_bytes<br><span class="hljs-keyword">import</span> ida_search<br><span class="hljs-keyword">import</span> idaapi<br><span class="hljs-keyword">import</span> idc<br><br>def <span class="hljs-title function_">findBinary</span>(start, end, pattern):<br>    matches = []<br>    addr = start<br>    <span class="hljs-keyword">if</span> end == <span class="hljs-number">0</span>:<br>        end = idc.<span class="hljs-property">BADADDR</span><br>    <span class="hljs-keyword">while</span> addr &lt; <span class="hljs-attr">end</span>:<br>        addr = ida_search.<span class="hljs-title function_">find_binary</span>(addr, end, pattern, <span class="hljs-number">16</span>, ida_search.<span class="hljs-property">SEARCH_DOWN</span> | ida_search.<span class="hljs-property">SEARCH_NEXT</span>)<br>        <span class="hljs-keyword">if</span> addr != idc.<span class="hljs-property">BADADDR</span>:<br>            matches.<span class="hljs-title function_">append</span>(addr)<br>    <span class="hljs-keyword">return</span> matches<br><br><br>matches = <span class="hljs-title function_">findBinary</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;E0 07 BE A9 E2 7B 01 A9&quot;</span>)<br><span class="hljs-title function_">print</span>(<span class="hljs-title function_">len</span>(matches))<br><br></code></pre></td></tr></table></figure><strong>ida_bytes.bin_search</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> ida_bytes<br><span class="hljs-keyword">import</span> ida_search<br><span class="hljs-keyword">import</span> idaapi<br><span class="hljs-keyword">import</span> idc<br><br>def <span class="hljs-title function_">binSearch</span>(start, end, pattern):<br>    matches = []<br>    addr = start<br>    <span class="hljs-keyword">if</span> end == <span class="hljs-number">0</span>:<br>        end = idc.<span class="hljs-property">BADADDR</span><br>    <span class="hljs-keyword">if</span> end != idc.<span class="hljs-property">BADADDR</span>:<br>        end = end + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-title class_">True</span>:<br>        addr = ida_bytes.<span class="hljs-title function_">bin_search</span>(addr, end, bytes.<span class="hljs-title function_">fromhex</span>(pattern), <span class="hljs-title class_">None</span>, idaapi.<span class="hljs-property">BIN_SEARCH_FORWARD</span>,<br>                                    idaapi.<span class="hljs-property">BIN_SEARCH_NOCASE</span>)<br>        <span class="hljs-keyword">if</span> addr == idc.<span class="hljs-property">BADADDR</span>:<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-attr">else</span>:<br>            matches.<span class="hljs-title function_">append</span>(addr)<br>            addr = addr + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> matches<br><br>matches = <span class="hljs-title function_">binSearch</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;E0 07 BE A9 E2 7B 01 A9&quot;</span>)<br><span class="hljs-title function_">int</span>(<span class="hljs-title function_">len</span>(matches))<br></code></pre></td></tr></table></figure></li></ul><h4 id="匹配：适用于特征不明显需要找规律的场景"><a href="#匹配：适用于特征不明显需要找规律的场景" class="headerlink" title="匹配：适用于特征不明显需要找规律的场景"></a>匹配：适用于特征不明显需要找规律的场景</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">import</span> capstone<br><span class="hljs-keyword">import</span> ida_bytes<br><span class="hljs-keyword">import</span> ida_ida<br><span class="hljs-keyword">import</span> ida_segment<br><span class="hljs-keyword">import</span> idaapi<br><span class="hljs-keyword">import</span> idautils<br><span class="hljs-keyword">import</span> idc<br><br># 初始化架构和模式<br><span class="hljs-variable constant_">CS</span> = capstone.<span class="hljs-title class_">Cs</span>(capstone.<span class="hljs-property">CS_ARCH_ARM64</span>, capstone.<span class="hljs-property">CS_MODE_ARM</span>)<br># 设置为详细反汇编模式<br><span class="hljs-variable constant_">CS</span>.<span class="hljs-property">detail</span> = <span class="hljs-title class_">True</span><br># 设置反汇编跳过数据<br><span class="hljs-variable constant_">CS</span>.<span class="hljs-property">skipdata</span> = <span class="hljs-title class_">True</span><br><br><br>def <span class="hljs-title function_">getAddrRange</span>():<br>    start = ida_ida.<span class="hljs-title function_">inf_get_min_ea</span>()<br>    size = ida_ida.<span class="hljs-title function_">inf_get_max_ea</span>() - start<br>    # 将地址范围限定于text节<br>    <span class="hljs-keyword">for</span> seg <span class="hljs-keyword">in</span> idautils.<span class="hljs-title class_">Segments</span>():<br>        seg = idaapi.<span class="hljs-title function_">getseg</span>(seg)<br>        segName = ida_segment.<span class="hljs-title function_">get_segm_name</span>(seg)<br>        <span class="hljs-keyword">if</span> segName == <span class="hljs-string">&quot;.text&quot;</span>:<br>            start = seg.<span class="hljs-property">start_ea</span><br>            size = seg.<span class="hljs-title function_">size</span>()<br>    <span class="hljs-keyword">return</span> start, size<br><br><br>def <span class="hljs-title function_">binSearch</span>(start, end, pattern):<br>    matches = []<br>    addr = start<br>    <span class="hljs-keyword">if</span> end == <span class="hljs-number">0</span>:<br>        end = idc.<span class="hljs-property">BADADDR</span><br><br>    <span class="hljs-keyword">if</span> end != idc.<span class="hljs-property">BADADDR</span>:<br>        end = end + <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">while</span> <span class="hljs-title class_">True</span>:<br>        addr = ida_bytes.<span class="hljs-title function_">bin_search</span>(addr, end, bytes.<span class="hljs-title function_">fromhex</span>(pattern), <span class="hljs-title class_">None</span>, idaapi.<span class="hljs-property">BIN_SEARCH_FORWARD</span>,<br>                                    idaapi.<span class="hljs-property">BIN_SEARCH_NOCASE</span>)<br>        <span class="hljs-keyword">if</span> addr == idc.<span class="hljs-property">BADADDR</span>:<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-attr">else</span>:<br>            <span class="hljs-title function_">print</span>(<span class="hljs-title function_">hex</span>(addr))<br>            matches.<span class="hljs-title function_">append</span>(addr)<br>    <span class="hljs-keyword">return</span> matches<br><br><br>junkList = []<br># 匹配进行 <span class="hljs-variable constant_">X0</span> = <span class="hljs-variable constant_">PC</span> + <span class="hljs-number">4</span> 的那些简单函数<br>matches = <span class="hljs-title function_">binSearch</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;ff 43 00 d1 fd 7b 00 a9 e0 07 40 f9 fd 7b 40 a9 ff 43 00 91 c0 03 5f d6&quot;</span>)<br># 获取代码段的起始地址和长度<br>start, size = <span class="hljs-title function_">getAddrRange</span>()<br># 获取对应的数据，字节数组形式<br>codebytes = idc.<span class="hljs-title function_">get_bytes</span>(start, size)<br># 反汇编，参数<span class="hljs-number">1</span>是待反汇编的数据，参数<span class="hljs-number">2</span>是基地址，参数<span class="hljs-number">3</span>是反汇编长度<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-variable constant_">CS</span>.<span class="hljs-title function_">disasm</span>(codebytes, start, size):<br>     <span class="hljs-keyword">if</span> i.<span class="hljs-property">mnemonic</span> == <span class="hljs-string">&quot;bl&quot;</span>:<br>        subAddress = <span class="hljs-title function_">int</span>(i.<span class="hljs-property">op_str</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;#&quot;</span>, <span class="hljs-string">&quot;&quot;</span>), <span class="hljs-number">16</span>)<br>        <span class="hljs-keyword">if</span> subAddress <span class="hljs-keyword">in</span> <span class="hljs-attr">matches</span>:<br>            junkList.<span class="hljs-title function_">append</span>(i.<span class="hljs-property">address</span>)<br><br></code></pre></td></tr></table></figure><h4 id="总结：样本中常见的会是两种方式的结合使用"><a href="#总结：样本中常见的会是两种方式的结合使用" class="headerlink" title="总结：样本中常见的会是两种方式的结合使用"></a>总结：样本中常见的会是两种方式的结合使用</h4><h3 id="计算实际跳转地址"><a href="#计算实际跳转地址" class="headerlink" title="计算实际跳转地址"></a>计算实际跳转地址</h3><h4 id="方式1：-根据具体逻辑，使用idaapi获取操作数或者capstone反汇编获取操作数"><a href="#方式1：-根据具体逻辑，使用idaapi获取操作数或者capstone反汇编获取操作数" class="headerlink" title="方式1： 根据具体逻辑，使用idaapi获取操作数或者capstone反汇编获取操作数"></a>方式1： 根据具体逻辑，使用idaapi获取操作数或者capstone反汇编获取操作数</h4><blockquote><p>IDA 的idc.get_operand_value(ea, n)API 可以很方便的获取ea地址处汇编代码的第n个操作数的值（n 从 0 开始计数）</p></blockquote><h5 id="因为花指令等存在，代码未被ida识别，以数据块形式展示，因此无法解析藏在数据块里的花指令，如何做？"><a href="#因为花指令等存在，代码未被ida识别，以数据块形式展示，因此无法解析藏在数据块里的花指令，如何做？" class="headerlink" title="因为花指令等存在，代码未被ida识别，以数据块形式展示，因此无法解析藏在数据块里的花指令，如何做？"></a>因为花指令等存在，代码未被ida识别，以数据块形式展示，因此无法解析藏在数据块里的花指令，如何做？</h5><ol><li>一个比较流行的方案是通过 IDAPython 获取 junk code 对应的 bytes，然后放到 Capstone 这样的第三方反汇编引擎中解析为汇编代码，而不依赖 IDA 自己的反汇编模块</li><li>将匹配到的位置通过 API 识别为代码<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">def <span class="hljs-title function_">makeInsn</span>(addr):<br>    <span class="hljs-keyword">if</span> idc.<span class="hljs-title function_">create_insn</span>(addr) == <span class="hljs-number">0</span>:<br>        idc.<span class="hljs-title function_">del_items</span>(addr, idc.<span class="hljs-property">DELIT_EXPAND</span>)<br>        idc.<span class="hljs-title function_">create_insn</span>(addr)<br>    idc.<span class="hljs-title function_">auto_wait</span>()<br></code></pre></td></tr></table></figure></li></ol><h4 id="方式2：flare-emu-Unicorn"><a href="#方式2：flare-emu-Unicorn" class="headerlink" title="方式2：flare-emu &#x2F; Unicorn"></a>方式2：flare-emu &#x2F; Unicorn</h4><blockquote><p>可以让 Flare-emu 从首地址开始执行，一直运行到 目标寄存器 生成的地方，并获取 目标寄存器 的值。<br> junk code 往往是一串不复杂的汇编代码，不复杂指其中基本不包括外部函数调用或系统调用，所以使用模拟器很方便</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> flare_emu<br><br>myEH = flare_emu.<span class="hljs-title class_">EmuHelper</span>()<br>myEH.<span class="hljs-title function_">emulateRange</span>(startAddr=addr, endAddr=addr + <span class="hljs-number">36</span>)<br>targetAddress = myEH.<span class="hljs-title function_">getRegVal</span>(<span class="hljs-string">&quot;X9&quot;</span>)<br><span class="hljs-title function_">print</span>(targetAddress)<br></code></pre></td></tr></table></figure><h3 id="Patch"><a href="#Patch" class="headerlink" title="Patch"></a>Patch</h3><ol><li>自写这条 B 指令所对应的汇编逻辑，生成B xxx所对应的机器码</li><li>使用成熟的汇编引擎，比如 Keystone，上面使用的 Keypatch 其底层就是 Keystone</li></ol><ul><li>确保 <a href="https://github.com/keystone-engine/keystone">keystone</a> 成功安装后调用 API <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">def <span class="hljs-title function_">generate</span>(code, addr):<br>    ks = <span class="hljs-title class_">Ks</span>(keystone.<span class="hljs-property">KS_ARCH_ARM64</span>, keystone.<span class="hljs-property">KS_MODE_LITTLE_ENDIAN</span>)<br>    # 参数<span class="hljs-number">2</span>是地址，很多指令是地址相关的，比如 B 指令，如果地址无关直接传 <span class="hljs-number">0</span> 即可，比如 nop。<br>    encoding, _ = ks.<span class="hljs-title function_">asm</span>(code, addr)<br>    <span class="hljs-keyword">return</span> encoding<br><br>nopCode = <span class="hljs-title function_">generate</span>(<span class="hljs-string">&quot;nop&quot;</span>, <span class="hljs-number">0</span>)<br>ida_bytes.<span class="hljs-title function_">patch_bytes</span>(addr + <span class="hljs-number">4</span>, <span class="hljs-title function_">bytes</span>(nopCode) * <span class="hljs-number">9</span>)<br></code></pre></td></tr></table></figure>运行脚本后，将 patch 持久化 保存回 SO 重新打开</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/09/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/8.%20%E9%80%86%E5%90%91%E6%96%B9%E6%B3%95%E8%AE%BA/4.%20SO%E5%B1%82/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/%E8%8A%B1%E6%8C%87%E4%BB%A4/jumpout/%E4%BB%8B%E7%BB%8D/"/>
    <url>/blog/2025/05/09/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/8.%20%E9%80%86%E5%90%91%E6%96%B9%E6%B3%95%E8%AE%BA/4.%20SO%E5%B1%82/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/%E8%8A%B1%E6%8C%87%E4%BB%A4/jumpout/%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="jumpout的相关解释"><a href="#jumpout的相关解释" class="headerlink" title="jumpout的相关解释"></a>jumpout的相关解释</h1><ul><li><code>函数边界识别错误</code>，如果是边界识别错误，那就alt+p,找到正确的末尾；如果是后者，那就通过append_func_tail来将目标区域添加到本函数中，另外，得先undefine目标区域</li><li>或者是由于<code>编译器某些原因会把某些代码分出来，不存放在连续区域，而是在其他位置</code>，这些块有时ida能识别出来，被称为chunk,有些不能识别，此时就得自己手动设置。</li></ul><h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><ol><li>ida分析出跳转后的地址，直接patch即可</li><li>ida无法分析出跳转后的地址，需要分析者自己去计算或者使用相关api，描述如下：<blockquote><p>通过BR跳转离开；但在反编译效果却不太一样，这里反馈为一条__asm{ BR X1}，<code>ASM关键字用于调用内联汇编</code>，所以这里就是BX X1，说白了 IDA 没能分析出 X1 的具体值，代码如下展示</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">.<span class="hljs-property">text</span>:0000000000029D90                 <span class="hljs-variable constant_">BL</span>              sub_29D9C<br>.<span class="hljs-property">text</span>:0000000000029D94                 <span class="hljs-variable constant_">ADD</span>             <span class="hljs-variable constant_">X1</span>, <span class="hljs-variable constant_">X0</span>, #<span class="hljs-number">0x34</span> ; <span class="hljs-string">&#x27;4&#x27;</span><br>.<span class="hljs-property">text</span>:0000000000029D98                 <span class="hljs-variable constant_">BR</span>              <span class="hljs-variable constant_">X1</span><br>sub_29D9C： <br>.<span class="hljs-property">text</span>:0000000000029D9C                 <span class="hljs-variable constant_">SUB</span>             <span class="hljs-variable constant_">SP</span>, <span class="hljs-variable constant_">SP</span>, #<span class="hljs-number">0x10</span><br>.<span class="hljs-property">text</span>:0000000000029DA0                 <span class="hljs-variable constant_">STP</span>             <span class="hljs-variable constant_">X29</span>, <span class="hljs-variable constant_">X30</span>, [<span class="hljs-variable constant_">SP</span>,#<span class="hljs-number">0x10</span>+var_10]<br>.<span class="hljs-property">text</span>:0000000000029DA4                 <span class="hljs-variable constant_">LDR</span>             <span class="hljs-variable constant_">X0</span>, [<span class="hljs-variable constant_">SP</span>,#<span class="hljs-number">0x10</span>+var_8]<br>.<span class="hljs-property">text</span>:0000000000029DA8                 <span class="hljs-variable constant_">LDP</span>             <span class="hljs-variable constant_">X29</span>, <span class="hljs-variable constant_">X30</span>, [<span class="hljs-variable constant_">SP</span>,#<span class="hljs-number">0x10</span>+var_10]<br>.<span class="hljs-property">text</span>:0000000000029DAC                 <span class="hljs-variable constant_">ADD</span>             <span class="hljs-variable constant_">SP</span>, <span class="hljs-variable constant_">SP</span>, #<span class="hljs-number">0x10</span><br>.<span class="hljs-property">text</span>:0000000000029DB0                 <span class="hljs-variable constant_">RET</span><br><br>分析sub_29D9C：<br>函数一共六行代码，第一行开栈，第二行将 <span class="hljs-variable constant_">X29</span>、<span class="hljs-variable constant_">X30</span> 入栈，第三行将 <span class="hljs-variable constant_">SP</span> + <span class="hljs-number">8</span> 赋给 <span class="hljs-variable constant_">X0</span>，这个地址处的值是刚放进去的 <span class="hljs-variable constant_">X30</span>，所以就是 <span class="hljs-variable constant_">X30</span> = <span class="hljs-variable constant_">X0</span>，第 <span class="hljs-number">4</span>、<span class="hljs-number">5</span> 行是出栈和清栈，是开头两行的逆操作，最后 <span class="hljs-keyword">return</span> 结束函数。<br>因此这个函数的作用就是将 <span class="hljs-variable constant_">X30</span> 的值赋给 <span class="hljs-variable constant_">X0</span><br>别忘了 <span class="hljs-variable constant_">X30</span> 就是 <span class="hljs-variable constant_">LR</span> 寄存器，而这里是<span class="hljs-variable constant_">BL</span> label函数调用，我们回顾一下<span class="hljs-variable constant_">BL</span>指令所作的两件事<br>    <span class="hljs-number">1.</span> 将下一行指令的地址放到 <span class="hljs-variable constant_">LR</span><br>    <span class="hljs-number">2.</span> 跳转到 label<br></code></pre></td></tr></table></figure></li></ol><blockquote><p>总结：对于.text:0000000000029D90  BL  sub_29D9C而言，LR &#x3D; 0x29D94，所以 X1 &#x3D; 0x29D94 + 0x34 &#x3D; 0x29DC8。跳转到这个地址看看，发现此处被误识别为数据</p></blockquote><ul><li>注：此场景可能会需要多次patch，每次patch都会出现新的jumpout，所以要一次次的分析jumpout地址</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/09/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/8.%20%E9%80%86%E5%90%91%E6%96%B9%E6%B3%95%E8%AE%BA/4.%20SO%E5%B1%82/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/%E8%8A%B1%E6%8C%87%E4%BB%A4/%E5%A2%9E%E5%BC%BA%E5%AF%B9%E6%89%A7%E8%A1%8C%E5%92%8C%E6%9C%AA%E6%89%A7%E8%A1%8C%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8C%BA%E5%88%86/"/>
    <url>/blog/2025/05/09/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/8.%20%E9%80%86%E5%90%91%E6%96%B9%E6%B3%95%E8%AE%BA/4.%20SO%E5%B1%82/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/%E8%8A%B1%E6%8C%87%E4%BB%A4/%E5%A2%9E%E5%BC%BA%E5%AF%B9%E6%89%A7%E8%A1%8C%E5%92%8C%E6%9C%AA%E6%89%A7%E8%A1%8C%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8C%BA%E5%88%86/</url>
    
    <content type="html"><![CDATA[<ul><li>参考：<a href="https://www.yuque.com/lilac-2hqvv/xdwlsg/tns2uu133m9sw4x5">https://www.yuque.com/lilac-2hqvv/xdwlsg/tns2uu133m9sw4x5</a></li></ul><h3 id="1-先unidbg执行目标方法，获得走过的地址并保存文件"><a href="#1-先unidbg执行目标方法，获得走过的地址并保存文件" class="headerlink" title="1. 先unidbg执行目标方法，获得走过的地址并保存文件"></a>1. 先unidbg执行目标方法，获得走过的地址并保存文件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 10.7.30.27161</span><br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">KS</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">AbstractJni</span> &#123;<br>    ....<br>    public <span class="hljs-title function_">KS</span>(<span class="hljs-params"></span>) &#123;<br>        .....<br>        <span class="hljs-title class_">DalvikModule</span> dm = vm.<span class="hljs-title function_">loadLibrary</span>(<span class="hljs-string">&quot;kwsgmain&quot;</span>, <span class="hljs-literal">true</span>);<br>        <span class="hljs-variable language_">module</span> = dm.<span class="hljs-title function_">getModule</span>();<br>        <span class="hljs-title function_">getTrace</span>();<br>        dm.<span class="hljs-title function_">callJNI_OnLoad</span>(emulator);<br>    &#125;<br><br>    public <span class="hljs-keyword">void</span> <span class="hljs-title function_">getTrace</span>(<span class="hljs-params"></span>)&#123;<br>        emulator.<span class="hljs-title function_">getBackend</span>().<span class="hljs-title function_">hook_add_new</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CodeHook</span>() &#123;<br>            @<span class="hljs-title class_">Override</span><br>            public <span class="hljs-keyword">void</span> <span class="hljs-title function_">hook</span>(<span class="hljs-params">Backend backend, long address, int size, <span class="hljs-built_in">Object</span> user</span>) &#123;<br>                int offset = (int) (address - <span class="hljs-variable language_">module</span>.<span class="hljs-property">base</span>);<br>                traceSet.<span class="hljs-title function_">add</span>(offset);<br>            &#125;<br>            @<span class="hljs-title class_">Override</span><br>            public <span class="hljs-keyword">void</span> <span class="hljs-title function_">onAttach</span>(<span class="hljs-params">UnHook unHook</span>) &#123;&#125;<br>            @<span class="hljs-title class_">Override</span><br>            public <span class="hljs-keyword">void</span> <span class="hljs-title function_">detach</span>(<span class="hljs-params"></span>) &#123;&#125;<br>        &#125;, <span class="hljs-variable language_">module</span>.<span class="hljs-property">base</span>, <span class="hljs-variable language_">module</span>.<span class="hljs-property">base</span>+<span class="hljs-variable language_">module</span>.<span class="hljs-property">size</span>, <span class="hljs-literal">null</span>);<br>    &#125;<br>    public <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveToFile</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title class_">FileOutputStream</span> outputStream;<br>        <span class="hljs-keyword">try</span> &#123;<br>            outputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;unidbg-android/src/test/java/com/unidbg/idaTrace/trace.log&quot;</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-title class_">Integer</span> integer : traceSet) &#123;<br>                outputStream.<span class="hljs-title function_">write</span>((integer +<span class="hljs-string">&quot;,&quot;</span>).<span class="hljs-title function_">getBytes</span>(<span class="hljs-title class_">StandardCharsets</span>.<span class="hljs-property">UTF_8</span>));<br>            &#125;<br>            outputStream.<span class="hljs-title function_">close</span>();<br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">IOException</span> e) &#123;<br>            e.<span class="hljs-title function_">printStackTrace</span>();<br>        &#125;<br>    &#125;<br>    public <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>) &#123;<br>        <span class="hljs-variable constant_">KS</span> ks = <span class="hljs-keyword">new</span> <span class="hljs-title function_">KS</span>();<br>        ks.<span class="hljs-title function_">saveToFile</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-idapython对so进行不同场景处理"><a href="#2-idapython对so进行不同场景处理" class="headerlink" title="2. idapython对so进行不同场景处理"></a>2. idapython对so进行不同场景处理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 场景2：增强区分——使用 trace 增强对执行和未执行代码的区分。在 IDA 里对 trace 走过的地址染色</span><br><span class="hljs-keyword">import</span> idc<br><br>def <span class="hljs-title function_">setColor</span>(addr):<br>    idc.<span class="hljs-title function_">set_color</span>(addr, idc.<span class="hljs-property">CIC_ITEM</span>, <span class="hljs-number">0x33BDFF</span>)<br><br><br>contents = <span class="hljs-string">&quotquot;</span><br>addrs = contents.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;,&quot;</span>)<br><span class="hljs-keyword">for</span> addr <span class="hljs-keyword">in</span> <span class="hljs-attr">addrs</span>:<br>    <span class="hljs-keyword">if</span> <span class="hljs-attr">addr</span>:<br>        addr = <span class="hljs-title function_">int</span>(addr)<br>        <span class="hljs-title function_">setColor</span>(addr)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/09/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/8.%20%E9%80%86%E5%90%91%E6%96%B9%E6%B3%95%E8%AE%BA/4.%20SO%E5%B1%82/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/%E8%8A%B1%E6%8C%87%E4%BB%A4/%E4%BB%A3%E7%A0%81%E5%9D%97%E6%95%B0%E6%8D%AE%E5%9D%97%E8%AF%AF%E8%AF%86%E5%88%AB/"/>
    <url>/blog/2025/05/09/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/8.%20%E9%80%86%E5%90%91%E6%96%B9%E6%B3%95%E8%AE%BA/4.%20SO%E5%B1%82/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/%E8%8A%B1%E6%8C%87%E4%BB%A4/%E4%BB%A3%E7%A0%81%E5%9D%97%E6%95%B0%E6%8D%AE%E5%9D%97%E8%AF%AF%E8%AF%86%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<ul><li>参考：<a href="https://www.yuque.com/lilac-2hqvv/xdwlsg/tns2uu133m9sw4x5">https://www.yuque.com/lilac-2hqvv/xdwlsg/tns2uu133m9sw4x5</a></li></ul><h3 id="1-先unidbg执行目标方法，获得走过的地址并保存文件"><a href="#1-先unidbg执行目标方法，获得走过的地址并保存文件" class="headerlink" title="1. 先unidbg执行目标方法，获得走过的地址并保存文件"></a>1. 先unidbg执行目标方法，获得走过的地址并保存文件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 10.7.30.27161</span><br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">KS</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">AbstractJni</span> &#123;<br>    ....<br>    public <span class="hljs-title function_">KS</span>(<span class="hljs-params"></span>) &#123;<br>        .....<br>        <span class="hljs-title class_">DalvikModule</span> dm = vm.<span class="hljs-title function_">loadLibrary</span>(<span class="hljs-string">&quot;kwsgmain&quot;</span>, <span class="hljs-literal">true</span>);<br>        <span class="hljs-variable language_">module</span> = dm.<span class="hljs-title function_">getModule</span>();<br>        <span class="hljs-title function_">getTrace</span>();<br>        dm.<span class="hljs-title function_">callJNI_OnLoad</span>(emulator);<br>    &#125;<br><br>    public <span class="hljs-keyword">void</span> <span class="hljs-title function_">getTrace</span>(<span class="hljs-params"></span>)&#123;<br>        emulator.<span class="hljs-title function_">getBackend</span>().<span class="hljs-title function_">hook_add_new</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CodeHook</span>() &#123;<br>            @<span class="hljs-title class_">Override</span><br>            public <span class="hljs-keyword">void</span> <span class="hljs-title function_">hook</span>(<span class="hljs-params">Backend backend, long address, int size, <span class="hljs-built_in">Object</span> user</span>) &#123;<br>                int offset = (int) (address - <span class="hljs-variable language_">module</span>.<span class="hljs-property">base</span>);<br>                traceSet.<span class="hljs-title function_">add</span>(offset);<br>            &#125;<br>            @<span class="hljs-title class_">Override</span><br>            public <span class="hljs-keyword">void</span> <span class="hljs-title function_">onAttach</span>(<span class="hljs-params">UnHook unHook</span>) &#123;&#125;<br>            @<span class="hljs-title class_">Override</span><br>            public <span class="hljs-keyword">void</span> <span class="hljs-title function_">detach</span>(<span class="hljs-params"></span>) &#123;&#125;<br>        &#125;, <span class="hljs-variable language_">module</span>.<span class="hljs-property">base</span>, <span class="hljs-variable language_">module</span>.<span class="hljs-property">base</span>+<span class="hljs-variable language_">module</span>.<span class="hljs-property">size</span>, <span class="hljs-literal">null</span>);<br>    &#125;<br>    public <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveToFile</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title class_">FileOutputStream</span> outputStream;<br>        <span class="hljs-keyword">try</span> &#123;<br>            outputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;unidbg-android/src/test/java/com/unidbg/idaTrace/trace.log&quot;</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-title class_">Integer</span> integer : traceSet) &#123;<br>                outputStream.<span class="hljs-title function_">write</span>((integer +<span class="hljs-string">&quot;,&quot;</span>).<span class="hljs-title function_">getBytes</span>(<span class="hljs-title class_">StandardCharsets</span>.<span class="hljs-property">UTF_8</span>));<br>            &#125;<br>            outputStream.<span class="hljs-title function_">close</span>();<br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">IOException</span> e) &#123;<br>            e.<span class="hljs-title function_">printStackTrace</span>();<br>        &#125;<br>    &#125;<br>    public <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>) &#123;<br>        <span class="hljs-variable constant_">KS</span> ks = <span class="hljs-keyword">new</span> <span class="hljs-title function_">KS</span>();<br>        ks.<span class="hljs-title function_">saveToFile</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-idapython对so进行不同场景处理"><a href="#2-idapython对so进行不同场景处理" class="headerlink" title="2. idapython对so进行不同场景处理"></a>2. idapython对so进行不同场景处理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 场景1：增强 IDA 对代码的识别。误识别的数据块转成了代码块</span><br><span class="hljs-comment">// ida脚本：运行之后发现，误识别的数据块确实被转成了代码块，但仍然需要进一步的 patch 和矫正才能让它融入到函数里。</span><br><span class="hljs-keyword">import</span> idc<br><br>def <span class="hljs-title function_">makeInsn</span>(addr):<br>    <span class="hljs-keyword">if</span> idc.<span class="hljs-title function_">create_insn</span>(addr) == <span class="hljs-number">0</span>:<br>        idc.<span class="hljs-title function_">del_items</span>(addr, idc.<span class="hljs-property">DELIT_EXPAND</span>)<br>        idc.<span class="hljs-title function_">create_insn</span>(addr)<br>    idc.<span class="hljs-title function_">auto_wait</span>()<br><br><br>contents = <span class="hljs-string">&quotquot;</span><br>addrs = contents.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;,&quot;</span>)<br><span class="hljs-keyword">for</span> addr <span class="hljs-keyword">in</span> <span class="hljs-attr">addrs</span>:<br>    <span class="hljs-keyword">if</span> <span class="hljs-attr">addr</span>:<br>        addr = <span class="hljs-title function_">int</span>(addr)<br>        <span class="hljs-title function_">makeInsn</span>(addr)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/09/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/8.%20%E9%80%86%E5%90%91%E6%96%B9%E6%B3%95%E8%AE%BA/4.%20SO%E5%B1%82/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/%E6%80%BB%E7%BA%B2/"/>
    <url>/blog/2025/05/09/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/8.%20%E9%80%86%E5%90%91%E6%96%B9%E6%B3%95%E8%AE%BA/4.%20SO%E5%B1%82/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/%E6%80%BB%E7%BA%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="ollvm和花指令的关系"><a href="#ollvm和花指令的关系" class="headerlink" title="ollvm和花指令的关系"></a>ollvm和花指令的关系</h1><p>OLLVM（Obfuscator-LLVM）和花指令都属于代码混淆技术的范畴，但它们在实现方式、应用范围以及目标方面存在差异。</p><h3 id="OLLVM"><a href="#OLLVM" class="headerlink" title="OLLVM"></a>OLLVM</h3><p>OLLVM 是基于 LLVM 编译框架的一个开源项目，旨在为开发者提供一套强大的代码混淆工具。通过修改LLVM的中间表示(IR)，OLLVM可以在编译过程中对源代码进行多种混淆处理，以增加逆向工程的难度。OLLVM支持的混淆策略包括但不限于：</p><ul><li><code>控制流平坦化</code>：改变程序原有的控制结构，使其难以理解。</li><li><code>假控制流插入</code>：向程序中添加无实际作用但看起来像是有效逻辑的控制流。</li><li><code>函数内联与拆分</code>：将函数合并或分解，打乱原有的函数边界。</li><li><code>字符串加密</code>：加密程序中的字符串常量，防止直接阅读。</li></ul><h3 id="花指令"><a href="#花指令" class="headerlink" title="花指令"></a>花指令</h3><p>花指令是一种较为传统的代码混淆手法，<code>通常指的是在二进制代码级别上添加无效或者误导性的指令序列</code>。这些指令不会改变程序的行为，但是会干扰分析者的理解和自动化工具的工作效率。例如，在x86汇编语言中，可以通过插入跳转到下一条指令的跳转指令来制造混乱，或者使用等价但形式不同的指令组合完成相同的操作。</p><h3 id="关系与区别"><a href="#关系与区别" class="headerlink" title="关系与区别"></a>关系与区别</h3><ul><li>层次不同：<code>OLLVM主要工作在源代码编译阶段，通过对高级语言代码进行转换和混淆；而花指令则更多地应用于低级语言层面，如机器码或汇编代码</code>。</li><li>自动化程度：<code>OLLVM提供了高度自动化的解决方案</code>，用户只需配置相应的选项即可生成混淆后的输出；相比之下，<code>花指令往往需要手动编写或利用特定工具集来实施</code>。</li><li>覆盖范围：<code>OLLVM能够针对整个软件开发周期中的多个环节提供保护措施</code>，包括但不限于源代码、库文件等；花指令主要用于成品软件的加固，特别是在发布前对关键部分进行额外防护。</li><li>综上所述，虽然OLLVM和花指令都能达到保护软件不被轻易逆向分析的目的，但它们的技术路径和应用场景有所不同。现代软件保护策略常常结合使用这两种方法，以及其他高级混淆技术和安全机制，以构建多层次的安全防护体系。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/09/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/8.%20%E9%80%86%E5%90%91%E6%96%B9%E6%B3%95%E8%AE%BA/4.%20SO%E5%B1%82/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/%E8%8A%B1%E6%8C%87%E4%BB%A4/%E8%8A%B1%E6%8C%87%E4%BB%A4%E6%80%BB%E7%BA%B2/"/>
    <url>/blog/2025/05/09/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/8.%20%E9%80%86%E5%90%91%E6%96%B9%E6%B3%95%E8%AE%BA/4.%20SO%E5%B1%82/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/%E8%8A%B1%E6%8C%87%E4%BB%A4/%E8%8A%B1%E6%8C%87%E4%BB%A4%E6%80%BB%E7%BA%B2/</url>
    
    <content type="html"><![CDATA[<ul><li>参考：<a href="https://www.yuque.com/lilac-2hqvv/zfho3g/issny5">https://www.yuque.com/lilac-2hqvv/zfho3g/issny5</a>?</li></ul><h1 id="花指令扫盲"><a href="#花指令扫盲" class="headerlink" title="花指令扫盲"></a>花指令扫盲</h1><blockquote><p>花指令是由<code>设计者特别构思，希望使反汇编出错</code>，让破解者无法清楚正确的理解程序逻辑的一种技术<br><code>企图隐藏掉不想被逆向工程的代码块 (或其它功能) 的一种方法</code>, <code>在真实代码中插入一些垃圾代码的同时还保证原有程序的正确执行</code>, <code>而程序无法很好地反编译</code>, 难以理解程序内容, 达到混淆视听的效果.</p></blockquote><h3 id="花指令的意图"><a href="#花指令的意图" class="headerlink" title="花指令的意图"></a>花指令的意图</h3><ul><li>花指令试图去干扰 IDA、Ghidra 这些分析工具，让反汇编过程出错</li><li>有的花指令未必得迷惑分析工具，恶心分析人员也是可行的</li><li>指令膨胀 增加了我们分析的“体量</li><li>实际场景中我们遇到的花指令主要会干扰工具，因为干扰工具的花指令往往也能干扰分析人员，一举两得。</li></ul><h3 id="区分花指令"><a href="#区分花指令" class="headerlink" title="区分花指令"></a>区分花指令</h3><p>比如 Windows 上的“热补丁”技术，会将函数开头预留几个字节的空间，填充为 nop。这看起来和 P1 是类似的，但它是花指令吗，当然不是。它的意图是为 Inline Hook 提供便利。</p><h3 id="常见花指令特征"><a href="#常见花指令特征" class="headerlink" title="常见花指令特征"></a>常见花指令特征</h3><ol><li><code>JNI_OnLoad 作为一个鲜明的入口，就可以称得上关键函数</code>。对它的反编译是否正常和顺利，往往就能判断出是否有花指令或其他代码保护手段</li><li><code>栈开的也太小了</code>，如只有 32 字节，它存进去了四个 X 系列寄存器，每个占 8 字节空间，<code>直接满了</code>，难道程序没有局部变量要处理？</li><li><code>备份的寄存器很奇怪</code>，X1、X2、X3 没有备份的必要，这些本就是函数中需要被使用到的、易变的寄存器，它们的值被破坏是可预见以及可接受的。</li><li><code>只有函数序言没有函数尾声</code></li></ol><h1 id="汇编语言之序言和尾声"><a href="#汇编语言之序言和尾声" class="headerlink" title="汇编语言之序言和尾声"></a>汇编语言之序言和尾声</h1><ul><li><p>函数开头的几行代码叫函数序言，与之对应，函数结尾处的几行代码叫函数尾声。</p></li><li><p><code>函数序言</code>： <code>会修改 SP 寄存器，让它的值更小，因为栈默认是从高地址往低地址方向增长，所以这是开辟栈空间的动作，一般称为开栈</code>。新开辟的栈内存用于存储局部变量以及不想被污染的寄存器。局部变量不必多说，不想被污染的寄存器指的是在当前函数中这些寄存器可能被使用，进而其值会被改变，但我们希望在函数结束后可以恢复这些寄存器，这可以理解为备份</p></li><li><p><code>函数尾声</code>：<code>函数序言的逆操作</code>，比如我们举例的这个函数，将不想被污染的寄存器 完完整整的从栈中取出，即恢复它们为进入函数前的状态，然后修改 SP 寄存器，同样回到原先状态，和函数序言形成对应，开多少栈就清多少，即<code>清栈</code>。</p></li><li><p>比如下面是一个普通 ARM64 函数的序言部分</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">.<span class="hljs-property">text</span>:00000000000311D4 <span class="hljs-variable constant_">FF</span> <span class="hljs-number">83</span> <span class="hljs-number">02</span> <span class="hljs-variable constant_">D1</span>                 <span class="hljs-variable constant_">SUB</span>             <span class="hljs-variable constant_">SP</span>, <span class="hljs-variable constant_">SP</span>, #<span class="hljs-number">0xA0</span><br>.<span class="hljs-property">text</span>:00000000000311D8 <span class="hljs-variable constant_">FC</span> 6F <span class="hljs-number">04</span> <span class="hljs-variable constant_">A9</span>                 <span class="hljs-variable constant_">STP</span>             <span class="hljs-variable constant_">X28</span>, <span class="hljs-variable constant_">X27</span>, [<span class="hljs-variable constant_">SP</span>,#<span class="hljs-number">0x90</span>+var_50]<br>.<span class="hljs-property">text</span>:00000000000311DC <span class="hljs-variable constant_">FA</span> <span class="hljs-number">67</span> <span class="hljs-number">05</span> <span class="hljs-variable constant_">A9</span>                 <span class="hljs-variable constant_">STP</span>             <span class="hljs-variable constant_">X26</span>, <span class="hljs-variable constant_">X25</span>, [<span class="hljs-variable constant_">SP</span>,#<span class="hljs-number">0x90</span>+var_40]<br>.<span class="hljs-property">text</span>:00000000000311E0 <span class="hljs-variable constant_">F8</span> 5F <span class="hljs-number">06</span> <span class="hljs-variable constant_">A9</span>                 <span class="hljs-variable constant_">STP</span>             <span class="hljs-variable constant_">X24</span>, <span class="hljs-variable constant_">X23</span>, [<span class="hljs-variable constant_">SP</span>,#<span class="hljs-number">0x90</span>+var_30]<br>.<span class="hljs-property">text</span>:00000000000311E4 <span class="hljs-variable constant_">F6</span> <span class="hljs-number">57</span> <span class="hljs-number">07</span> <span class="hljs-variable constant_">A9</span>                 <span class="hljs-variable constant_">STP</span>             <span class="hljs-variable constant_">X22</span>, <span class="hljs-variable constant_">X21</span>, [<span class="hljs-variable constant_">SP</span>,#<span class="hljs-number">0x90</span>+var_20]<br>.<span class="hljs-property">text</span>:00000000000311E8 <span class="hljs-variable constant_">F4</span> 4F <span class="hljs-number">08</span> <span class="hljs-variable constant_">A9</span>                 <span class="hljs-variable constant_">STP</span>             <span class="hljs-variable constant_">X20</span>, <span class="hljs-variable constant_">X19</span>, [<span class="hljs-variable constant_">SP</span>,#<span class="hljs-number">0x90</span>+var_10]<br>.<span class="hljs-property">text</span>:00000000000311EC <span class="hljs-variable constant_">FD</span> 7B <span class="hljs-number">09</span> <span class="hljs-variable constant_">A9</span>                 <span class="hljs-variable constant_">STP</span>             <span class="hljs-variable constant_">X29</span>, <span class="hljs-variable constant_">X30</span>, [<span class="hljs-variable constant_">SP</span>,#<span class="hljs-number">0x90</span>+var_s0]<br></code></pre></td></tr></table></figure></li><li><p>开辟了 0xA0 字节的栈空间，然后<code>先将 X19 - X30 的值放到了栈里，这可以理解为备份</code>。其余的栈空间在程序中用于存放局部变量。</p></li><li><p>函数尾声是函数序言的逆操作，比如我们举例的这个函数，将 X19 - X30 完完整整的从栈中取出，即恢复它们为进入函数前的状态，然后修改 SP 寄存器，同样回到原先状态，和函数序言形成对应，开多少栈就清多少，即清栈。</p></li></ul><h1 id="自动化或半自动化去除花指令"><a href="#自动化或半自动化去除花指令" class="headerlink" title="自动化或半自动化去除花指令"></a>自动化或半自动化去除花指令</h1><h3 id="简易方案"><a href="#简易方案" class="headerlink" title="简易方案"></a>简易方案</h3><ul><li>junk code 的核心特征是“事倍功半——较多的代码量只对寄存器和内存环境做了微小甚至单一的改变。</li><li>那么如果我们定位到花指令的起始处，我们称此处是初始状态（包括寄存器、堆栈、内存），然后使用指令模拟器往下执行，<code>在某一位置，运行状态相较于初始状态仅有极小的差异</code>，比如仅有单个通用寄存器的值不同，那么此处大概率就是 junk code 的结束位置</li></ul><h3 id="激进方案"><a href="#激进方案" class="headerlink" title="激进方案"></a>激进方案</h3><ul><li>就是不用指定起始执行地址，工具采用随机或遍历执行的方式，<code>寻找可以“压缩”的执行片段</code>。</li><li>比如限定每次执行至少十行以上汇编，如果两端的寄存器状态差异极小，那么就认为是花指令的边界，然后生成对应的等效代码并 patch处理。</li><li>这个方案很激进，好处当然很大，根本不需要分析人员去理解花指令以及抽象出对应的匹配特征。但缺点也很大，存在很大的不稳定性以及可能有很严重的误判。</li><li>比如 <a href="https://github.com/alex-ilgayev/ida-pro-junk-code-removal">ida-pro-junk-code-removal</a> 、<a href="https://github.com/tkmru/nao">nao</a> 这些项目虽然很简陋，其实都有这种思路的影子</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/07/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/8.%20%E9%80%86%E5%90%91%E6%96%B9%E6%B3%95%E8%AE%BA/4.%20SO%E5%B1%82/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8SVC%E9%97%AE%E9%A2%98/"/>
    <url>/blog/2025/05/07/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/8.%20%E9%80%86%E5%90%91%E6%96%B9%E6%B3%95%E8%AE%BA/4.%20SO%E5%B1%82/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8SVC%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="svc和系统调用的关系"><a href="#svc和系统调用的关系" class="headerlink" title="svc和系统调用的关系"></a>svc和系统调用的关系</h2><ul><li><code>svc指令是软中断，系统调用通过它发起</code></li><li><code>svc后的立即数恒为0，intro值为2表示软中断，也就是svc指令或者称之为系统调用</code></li><li>系统调用的实现可以使用libc.so中的syscall库函数，也可以使用svc内联汇编配合Arm的R7或Arm64的X8寄存器存储调用号实现</li><li>popen是库函数，依赖于execve系统调用，execve底层也是svc</li><li>层级关系：<code>库函数---&gt; 系统调用/SVC</code></li></ul><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><h2 id="hook-Find-SVC原理"><a href="#hook-Find-SVC原理" class="headerlink" title="hook | Find SVC原理"></a>hook | Find SVC原理</h2><ul><li>对于thumb svc 0对应的00DF二进制 调用号是在r7寄存器中</li><li>对于armv7 svc 0对应的00EF二进制 调用号是在r7寄存器中</li><li>armv8 svc 0对应的010000D4二进制 调用号是在x8寄存器中</li><li>实现原理就是遍历文件夹下的每个so文件读取elf信息找出.text代码范围，然后在这个里面找010000D4字串，然后向前去找X8&lt;调用号&gt;的值</li></ul><h2 id="方法原理"><a href="#方法原理" class="headerlink" title="方法原理"></a>方法原理</h2><h3 id="ptrace"><a href="#ptrace" class="headerlink" title="ptrace"></a>ptrace</h3><p>ptrace原理：</p><ul><li><a href="https://www.cnblogs.com/mysky007/p/11047943.html">https://www.cnblogs.com/mysky007/p/11047943.html</a></li><li><a href="https://www.cnblogs.com/pugang/p/14409936.html">https://www.cnblogs.com/pugang/p/14409936.html</a></li></ul><p>ptrace使用：</p><ul><li><a href="https://www.jianshu.com/p/b1f9d6911c90">https://www.jianshu.com/p/b1f9d6911c90</a></li><li><a href="https://www.anquanke.com/post/id/231078">https://www.anquanke.com/post/id/231078</a></li><li><a href="https://bbs.pediy.com/thread-273160.htm">https://bbs.pediy.com/thread-273160.htm</a></li></ul><blockquote><p>Ptrace 提供了一种父进程可以控制子进程运行，并可以检查和改变它的核心image。它主要用于实现断点调试。一个被跟踪的进程运行中，直到发生一个信号。则进程被中止，并且通知其父进程。在进程中止的状态下，进程的内存空间可以被读写。父进程还可以使子进程继续执行，并选择是否是否忽略引起中止的信号</p></blockquote><p>其基本原理是: </p><ul><li>当使用了ptrace跟踪后，所有发送给被跟踪的子进程的信号(除了SIGKILL)，都会被转发给父进程，而子进程则会被阻塞，这时子进程的状态就会被系统标注为TASK_TRACED。而父进程收到信号后，就可以对停止下来的子进程进行检查和修改，然后让子进程继续运行</li><li><code>ptrace当注入当前进程的时候是不需要root</code>。如果注入非自己的进程是需要root才可以。调用注入的时候选择一个pid即可。 </li><li><code>ptrace可以在任何内存地方下断点，修改对应位置的数据</code></li></ul><h3 id="seccomp"><a href="#seccomp" class="headerlink" title="seccomp"></a>seccomp</h3><ul><li>seccomp 是 Linux 内核提供的一种应用程序沙箱机制，**<em>主要通过限制进程的系统调用来完成部分沙箱隔离功能</em>**。<code>seccomp-bpf</code> 是 seccomp 的一个扩展，<code>它可以通过配置来允许应用程序调用其他的系统调用</code>。</li><li>android 8.1以上使用了Seccomp</li><li><code>主要功能是限制直接通过syscall去调用某些系统函数，当开启了Seccomp的进程在此调用的时候会变走异常的回调</code></li></ul><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="批量检测android-app的so中是否有svc调用"><a href="#批量检测android-app的so中是否有svc调用" class="headerlink" title="批量检测android app的so中是否有svc调用"></a>批量检测android app的so中是否有svc调用</h3><ul><li>参考： <a href="https://bbs.pediy.com/thread-269895.htm">https://bbs.pediy.com/thread-269895.htm</a></li><li>代码：<a href="https://gitee.com/sunyuzhe114/svc_call_demo/blob/master/fridaSrc/fridaSrc/search_in_so_file_for_svc_armv8.py">https://gitee.com/sunyuzhe114/svc_call_demo/blob/master/fridaSrc/fridaSrc/search_in_so_file_for_svc_armv8.py</a></li></ul><blockquote><p>png &gt; py： <img src="/blog/../../../../../images/android/%E6%96%B9%E6%B3%95%E8%AE%BA/so/findAllSoSVCCall.png"></p></blockquote><h3 id="unidbg"><a href="#unidbg" class="headerlink" title="unidbg"></a>unidbg</h3><ul><li>参考unidbg</li></ul><h3 id="Frida-Seccomp"><a href="#Frida-Seccomp" class="headerlink" title="Frida-Seccomp"></a>Frida-Seccomp</h3><ul><li>参考：<a href="https://bbs.pediy.com/thread-271815.htm">https://bbs.pediy.com/thread-271815.htm</a></li><li>代码：<a href="https://github.com/Abbbbbi/Frida-Seccomp">https://github.com/Abbbbbi/Frida-Seccomp</a></li></ul><p><strong>注意</strong>：</p><ol><li>暂时只支持ARM64</li><li>只在hook页面展示调用号像下面这样 ，而详细信息在log文件中</li><li>可以拦截大多数的系统调用，应该是通用，推荐<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">spawn_added</span>: <span class="hljs-title class_">Spawn</span>(pid=<span class="hljs-number">18632</span>, identifier=<span class="hljs-string">&quot;com.shizhuang.duapp&quot;</span>)<br><span class="hljs-title function_">install_filter</span>(<span class="hljs-number">207</span>)  <span class="hljs-comment">// 调用号为207对应arm64位recvfrom</span><br></code></pre></td></tr></table></figure></li></ol><p><strong>使用</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">pip3 install frida<br>python3 multi_frida_seccomp.<span class="hljs-property">py</span> packageName<br></code></pre></td></tr></table></figure><h3 id="frida-svc-interceptor"><a href="#frida-svc-interceptor" class="headerlink" title="frida-svc-interceptor"></a>frida-svc-interceptor</h3><ul><li>参考：<a href="https://mp.weixin.qq.com/s/TYwmqIE0jZ0BYWpunQ7TZw">https://mp.weixin.qq.com/s/TYwmqIE0jZ0BYWpunQ7TZw</a></li><li>代码：<a href="https://github.com/huaerxiela/frida-script">https://github.com/huaerxiela/frida-script</a></li></ul><p>原理：找到svc指令地址，inlinehook它</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">frida momory search svc<br>parse insn and count call_number<br>frida native hook svc<br></code></pre></td></tr></table></figure><p>注意：只实现了两个调用号</p><blockquote><p>png &gt; js: <img src="/blog/../../../../../images/android/%E6%96%B9%E6%B3%95%E8%AE%BA/so/frida-svc-interceptor.png"></p></blockquote><h3 id="Ptrace-Seccomp"><a href="#Ptrace-Seccomp" class="headerlink" title="Ptrace-Seccomp"></a>Ptrace-Seccomp</h3><ul><li>参考：<a href="https://bbs.pediy.com/thread-273160.htm">https://bbs.pediy.com/thread-273160.htm</a></li><li>代码：<a href="https://github.com/proot-me/proot">https://github.com/proot-me/proot</a></li></ul><h3 id="Syscall-intercept-arm64"><a href="#Syscall-intercept-arm64" class="headerlink" title="Syscall_intercept_arm64"></a>Syscall_intercept_arm64</h3><ul><li>参考：<a href="https://bbs.pediy.com/thread-271921.htm">https://bbs.pediy.com/thread-271921.htm</a></li><li>代码：<a href="https://github.com/onesss19/Syscall_intercept_arm64">https://github.com/onesss19/Syscall_intercept_arm64</a></li><li>基于ptrace实现，且只实现openat系统调用，还需要编译makefile可执行文件</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/06/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E7%AE%97%E6%B3%95%E8%BF%98%E5%8E%9F/%E5%9B%BA%E5%AE%9A%E8%BE%93%E5%87%BA/3.%20%E5%9B%BA%E5%AE%9AJNI/"/>
    <url>/blog/2025/05/06/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E7%AE%97%E6%B3%95%E8%BF%98%E5%8E%9F/%E5%9B%BA%E5%AE%9A%E8%BE%93%E5%87%BA/3.%20%E5%9B%BA%E5%AE%9AJNI/</url>
    
    <content type="html"><![CDATA[<p>程序可以通过 JNI 调用 JAVA 中的各种变值，最常见的是时间和随机数。</p><h1 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">@<span class="hljs-title class_">Override</span><br>public long <span class="hljs-title function_">callStaticLongMethodV</span>(<span class="hljs-params">BaseVM vm, DvmClass dvmClass, <span class="hljs-built_in">String</span> signature, VaList vaList</span>) &#123;<br>    <span class="hljs-keyword">switch</span> (signature)&#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;java/lang/System-&gt;currentTimeMillis()J&quot;</span>:&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-title class_">System</span>.<span class="hljs-title function_">currentTimeMillis</span>();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">super</span>.<span class="hljs-title function_">callStaticLongMethodV</span>(vm, dvmClass, signature, vaList);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// AbstractJni</span><br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;java/util/UUID-&gt;randomUUID()Ljava/util/UUID;&quot;</span>:&#123;<br>    <span class="hljs-keyword">return</span> dvmClass.<span class="hljs-title function_">newObject</span>(<span class="hljs-variable constant_">UUID</span>.<span class="hljs-title function_">randomUUID</span>());<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul><li>在补 JNI 环境时，需要留心自己补的内容以及 JNI 日志，就可以意识到这些随机项的存在，并进一步固定它们，就像下面这样。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">@<span class="hljs-title class_">Override</span><br>public long <span class="hljs-title function_">callStaticLongMethodV</span>(<span class="hljs-params">BaseVM vm, DvmClass dvmClass, <span class="hljs-built_in">String</span> signature, VaList vaList</span>) &#123;<br>    <span class="hljs-keyword">switch</span> (signature)&#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;java/lang/System-&gt;currentTimeMillis()J&quot;</span>:&#123;<br>            <span class="hljs-keyword">return</span> 1667275121452L;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">super</span>.<span class="hljs-title function_">callStaticLongMethodV</span>(vm, dvmClass, signature, vaList);<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/06/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E7%AE%97%E6%B3%95%E8%BF%98%E5%8E%9F/%E5%9B%BA%E5%AE%9A%E8%BE%93%E5%87%BA/2.%20%E5%9B%BA%E5%AE%9A%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%97%B6%E9%97%B4%E6%88%B3/"/>
    <url>/blog/2025/05/06/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E7%AE%97%E6%B3%95%E8%BF%98%E5%8E%9F/%E5%9B%BA%E5%AE%9A%E8%BE%93%E5%87%BA/2.%20%E5%9B%BA%E5%AE%9A%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%97%B6%E9%97%B4%E6%88%B3/</url>
    
    <content type="html"><![CDATA[<p>参考：<a href="https://www.yuque.com/docs/share/1425c020-f52a-420e-afe4-edf749e76d69">https://www.yuque.com/docs/share/1425c020-f52a-420e-afe4-edf749e76d69</a></p><h1 id="以时间为例"><a href="#以时间为例" class="headerlink" title="以时间为例"></a>以时间为例</h1><p>这里说的系统调用拦截，并不是要对系统调用进行Hook，比如frida - syscall - intercceptor这样，系统调用全部是Unidbg自己实现的，日志一开就能看，显然也没有Hook的必要。Unidbg的系统调用拦截是为了替换系统调用，修改Unidbg中系统调用的实现。 </p><ul><li>有两个问题需要解释</li></ul><ol><li>为什么要修改系统调用？ Unidbg中部分系统调用没实现或者没实现好，以及有时候想要固定其输出，比如获取时间的系统调用，这些需求需要我们修复或修改Unidbg中系统调用的实现。</li><li>为什么不直接修改Unidbg源码 <ol><li>1是灵活性较差，</li><li>2是我们的实现或修改并不是完美的，直接改Unidbg源码是对运行环境的污染，影响其他项目。</li></ol></li></ol><ul><li>在分析算法时，输入不变的前提下，如果输出在不停变化，会干扰算法分析，这种情况的一大来源是时间戳参与了运算。<code>在Frida中，为了控制这种干扰因素，常常会Hook libc的gettimeodfay这个时间获取函数。</code></li></ul><h1 id="1-Frida"><a href="#1-Frida" class="headerlink" title="1.Frida"></a>1.Frida</h1><h3 id="hook-time"><a href="#hook-time" class="headerlink" title="hook time"></a>hook time</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> time = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findExportByName</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;time&quot;</span>);<br><span class="hljs-keyword">if</span> (time != <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(time, &#123;<br>        <span class="hljs-attr">onEnter</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">args</span>) &#123;<br><br>        &#125;,<br>        <span class="hljs-attr">onLeave</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">retval</span>) &#123;<br>            <span class="hljs-comment">// time返回秒级时间戳，修改返回值为100</span><br>            retval.<span class="hljs-title function_">replace</span>(<span class="hljs-number">100</span>);<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="hook-gettimeofday"><a href="#hook-gettimeofday" class="headerlink" title="hook gettimeofday"></a>hook gettimeofday</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 方式1：</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">hook_gettimeofday</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> addr_gettimeofday = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findExportByName</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;gettimeofday&quot;</span>);<br>    <span class="hljs-keyword">var</span> gettimeofday = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeFunction</span>(addr_gettimeofday, <span class="hljs-string">&quot;int&quot;</span>, [<span class="hljs-string">&quot;pointer&quot;</span>, <span class="hljs-string">&quot;pointer&quot;</span>]);<br>    <br>    <span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">replace</span>(addr_gettimeofday, <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeCallback</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">ptr_tz, ptr_tzp</span>) &#123;<br>        <span class="hljs-keyword">var</span> result = <span class="hljs-title function_">gettimeofday</span>(ptr_tz, ptr_tzp);<br>        <span class="hljs-keyword">if</span> (result == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;hook gettimeofday:&quot;</span>, ptr_tz, ptr_tzp, result);<br>            <span class="hljs-keyword">var</span> t = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Int32Array</span>(<span class="hljs-title class_">ArrayBuffer</span>.<span class="hljs-title function_">wrap</span>(ptr_tz, <span class="hljs-number">8</span>));<br>            t[<span class="hljs-number">0</span>] = <span class="hljs-number">0xAAAA</span>;<br>            t[<span class="hljs-number">1</span>] = <span class="hljs-number">0xBBBB</span>;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">hexdump</span>(ptr_tz));<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;, <span class="hljs-string">&quot;int&quot;</span>, [<span class="hljs-string">&quot;pointer&quot;</span>, <span class="hljs-string">&quot;pointer&quot;</span>]));<br>&#125;<br><span class="hljs-comment">// 方式2：</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">hook_gettimeofday</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> addr_gettimeofday = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findExportByName</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;gettimeofday&quot;</span>);<br><br>  <span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">replace</span>(addr_gettimeofday, <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeCallback</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">ptr_tz, ptr_tzp</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;hook gettimeofday:&quot;</span>, ptr_tz, ptr_tzp, result);<br>    <span class="hljs-keyword">var</span> t = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Int32Array</span>(<span class="hljs-title class_">ArrayBuffer</span>.<span class="hljs-title function_">wrap</span>(ptr_tz, <span class="hljs-number">8</span>));<br>    t[<span class="hljs-number">0</span>] = <span class="hljs-number">0xAAAA</span>;<br>    t[<span class="hljs-number">1</span>] = <span class="hljs-number">0xBBBB</span>;<br>  &#125;, <span class="hljs-string">&quot;int&quot;</span>, [<span class="hljs-string">&quot;pointer&quot;</span>, <span class="hljs-string">&quot;pointer&quot;</span>]));<br>&#125;<br></code></pre></td></tr></table></figure><p>但Frida做这件事并不容易做圆满，单是libc.so，就有time、gettimeodfay、clock_gettime、clock 这四个库函数可以获取时间戳，而且样本可以通过内联汇编使用系统调用，获取时间戳。</p><h1 id="2-Unidbg"><a href="#2-Unidbg" class="headerlink" title="2.Unidbg"></a>2.Unidbg</h1><h3 id="方式1：亲测有效"><a href="#方式1：亲测有效" class="headerlink" title="方式1：亲测有效"></a>方式1：亲测有效</h3><p>在Unidbg辅助算法还原时，直接固定Unidbg <code>gettimeofday 系统调用所获取的时间</code>才是更底层的办法，位于<code>Unidbg-api/Unidbg-api/src/main/java/com/github/unidbg/unix/UnixSyscallHandler.java</code></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">方法名：gettimeofday  <span class="hljs-string">|  gettimeofday64</span><br>直接将System.currentTimeMillis<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span>改为固定值<br></code></pre></td></tr></table></figure><h3 id="方式2：测试无效"><a href="#方式2：测试无效" class="headerlink" title="方式2：测试无效"></a>方式2：测试无效</h3><p>Unidbg中可以更方便、更大范围的固定时间，不必像Frida那般。time和gettimeodfay库函数基于gettimeofday这个系统调用，clock_gettime和clock基于clock_gettime系统调用。所以只要在Unidbg中固定gettimeofday和clock_gettime这两个系统调用获取的时间戳，就可以一劳永逸。</p><p>首先实现时间相关的系统调用处理器，其中的<code>*System.currentTimeMillis()和System.nanoTime()*</code>改成定数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs javascript">package com.<span class="hljs-property">tutorial</span>;<br><br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">Emulator</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">linux</span>.<span class="hljs-property">ARM32SyscallHandler</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">memory</span>.<span class="hljs-property">SvcMemory</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">pointer</span>.<span class="hljs-property">UnidbgPointer</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">unix</span>.<span class="hljs-property">struct</span>.<span class="hljs-property">TimeVal32</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">unix</span>.<span class="hljs-property">struct</span>.<span class="hljs-property">TimeZone</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">sun</span>.<span class="hljs-property">jna</span>.<span class="hljs-property">Pointer</span>;<br><span class="hljs-keyword">import</span> unicorn.<span class="hljs-property">ArmConst</span>;<br><br><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">Calendar</span>;<br><br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">TimeSyscallHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">ARM32SyscallHandler</span> &#123;<br>    public <span class="hljs-title class_">TimeSyscallHandler</span>(<span class="hljs-title class_">SvcMemory</span> svcMemory) &#123;<br>        <span class="hljs-variable language_">super</span>(svcMemory);<br>    &#125;<br><br>    @<span class="hljs-title class_">Override</span><br>    protected boolean <span class="hljs-title function_">handleUnknownSyscall</span>(<span class="hljs-params">Emulator emulator, int NR</span>) &#123;<br>        <span class="hljs-keyword">switch</span> (<span class="hljs-variable constant_">NR</span>) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">78</span>:<br>                <span class="hljs-comment">// gettimeofday</span><br>                <span class="hljs-title function_">mygettimeofday</span>(emulator);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">263</span>:<br>                <span class="hljs-comment">// clock_gettime</span><br>                <span class="hljs-title function_">myclock_gettime</span>(emulator);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">super</span>.<span class="hljs-title function_">handleUnknownSyscall</span>(emulator, <span class="hljs-variable constant_">NR</span>);<br>    &#125;<br><br><br>    private <span class="hljs-keyword">void</span> <span class="hljs-title function_">mygettimeofday</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator</span>) &#123;<br>        <span class="hljs-title class_">Pointer</span> tv = <span class="hljs-title class_">UnidbgPointer</span>.<span class="hljs-title function_">register</span>(emulator, <span class="hljs-title class_">ArmConst</span>.<span class="hljs-property">UC_ARM_REG_R0</span>);<br>        <span class="hljs-title class_">Pointer</span> tz = <span class="hljs-title class_">UnidbgPointer</span>.<span class="hljs-title function_">register</span>(emulator, <span class="hljs-title class_">ArmConst</span>.<span class="hljs-property">UC_ARM_REG_R1</span>);<br>        emulator.<span class="hljs-title function_">getBackend</span>().<span class="hljs-title function_">reg_write</span>(<span class="hljs-title class_">ArmConst</span>.<span class="hljs-property">UC_ARM_REG_R0</span>, <span class="hljs-title function_">mygettimeofday</span>(tv, tz));<br>    &#125;;<br><br>    private int <span class="hljs-title function_">mygettimeofday</span>(<span class="hljs-params">Pointer tv, Pointer tz</span>) &#123;<br>        long currentTimeMillis = <span class="hljs-title class_">System</span>.<span class="hljs-title function_">currentTimeMillis</span>();<br><br>        long tv_sec = currentTimeMillis / <span class="hljs-number">1000</span>;<br>        long tv_usec = (currentTimeMillis % <span class="hljs-number">1000</span>) * <span class="hljs-number">1000</span>;<br><br>        <span class="hljs-title class_">TimeVal32</span> timeVal = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TimeVal32</span>(tv);<br>        timeVal.<span class="hljs-property">tv_sec</span> = (int) tv_sec;<br>        timeVal.<span class="hljs-property">tv_usec</span> = (int) tv_usec;<br>        timeVal.<span class="hljs-title function_">pack</span>();<br><br>        <span class="hljs-keyword">if</span> (tz != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-title class_">Calendar</span> calendar = <span class="hljs-title class_">Calendar</span>.<span class="hljs-title function_">getInstance</span>();<br>            int tz_minuteswest = -(calendar.<span class="hljs-title function_">get</span>(<span class="hljs-title class_">Calendar</span>.<span class="hljs-property">ZONE_OFFSET</span>) + calendar.<span class="hljs-title function_">get</span>(<span class="hljs-title class_">Calendar</span>.<span class="hljs-property">DST_OFFSET</span>)) / (<span class="hljs-number">60</span> * <span class="hljs-number">1000</span>);<br>            <span class="hljs-title class_">TimeZone</span> timeZone = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TimeZone</span>(tz);<br>            timeZone.<span class="hljs-property">tz_minuteswest</span> = tz_minuteswest;<br>            timeZone.<span class="hljs-property">tz_dsttime</span> = <span class="hljs-number">0</span>;<br>            timeZone.<span class="hljs-title function_">pack</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    private <span class="hljs-keyword">static</span> final int <span class="hljs-variable constant_">CLOCK_REALTIME</span> = <span class="hljs-number">0</span>;<br>    private <span class="hljs-keyword">static</span> final int <span class="hljs-variable constant_">CLOCK_MONOTONIC</span> = <span class="hljs-number">1</span>;<br>    private <span class="hljs-keyword">static</span> final int <span class="hljs-variable constant_">CLOCK_THREAD_CPUTIME_ID</span> = <span class="hljs-number">3</span>;<br>    private <span class="hljs-keyword">static</span> final int <span class="hljs-variable constant_">CLOCK_MONOTONIC_RAW</span> = <span class="hljs-number">4</span>;<br>    private <span class="hljs-keyword">static</span> final int <span class="hljs-variable constant_">CLOCK_MONOTONIC_COARSE</span> = <span class="hljs-number">6</span>;<br>    private <span class="hljs-keyword">static</span> final int <span class="hljs-variable constant_">CLOCK_BOOTTIME</span> = <span class="hljs-number">7</span>;<br>    private final long nanoTime = <span class="hljs-title class_">System</span>.<span class="hljs-title function_">nanoTime</span>();<br><br>    private int <span class="hljs-title function_">myclock_gettime</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator</span>) &#123;<br>        int clk_id = emulator.<span class="hljs-title function_">getBackend</span>().<span class="hljs-title function_">reg_read</span>(<span class="hljs-title class_">ArmConst</span>.<span class="hljs-property">UC_ARM_REG_R0</span>).<span class="hljs-title function_">intValue</span>();<br>        <span class="hljs-title class_">Pointer</span> tp = <span class="hljs-title class_">UnidbgPointer</span>.<span class="hljs-title function_">register</span>(emulator, <span class="hljs-title class_">ArmConst</span>.<span class="hljs-property">UC_ARM_REG_R1</span>);<br>        long offset = clk_id == <span class="hljs-variable constant_">CLOCK_REALTIME</span> ? <span class="hljs-title class_">System</span>.<span class="hljs-title function_">currentTimeMillis</span>() * 1000000L : <span class="hljs-title class_">System</span>.<span class="hljs-title function_">nanoTime</span>() - nanoTime;<br>        long tv_sec = offset / 1000000000L;<br>        long tv_nsec = offset % 1000000000L;<br><br>        <span class="hljs-keyword">switch</span> (clk_id) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-attr">CLOCK_REALTIME</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-attr">CLOCK_MONOTONIC</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-attr">CLOCK_MONOTONIC_RAW</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-attr">CLOCK_MONOTONIC_COARSE</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-attr">CLOCK_BOOTTIME</span>:<br>                tp.<span class="hljs-title function_">setInt</span>(<span class="hljs-number">0</span>, (int) tv_sec);<br>                tp.<span class="hljs-title function_">setInt</span>(<span class="hljs-number">4</span>, (int) tv_nsec);<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-attr">CLOCK_THREAD_CPUTIME_ID</span>:<br>                tp.<span class="hljs-title function_">setInt</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>                tp.<span class="hljs-title function_">setInt</span>(<span class="hljs-number">4</span>, <span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>(<span class="hljs-string">&quot;clk_id=&quot;</span> + clk_id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在自己的模拟器上使用它，原来模拟器创建是这么一句</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 创建模拟器实例</span><br>emulator = <span class="hljs-title class_">AndroidEmulatorBuilder</span>.<span class="hljs-title function_">for32Bit</span>().<span class="hljs-title function_">build</span>();<br></code></pre></td></tr></table></figure><p>修改如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 创建模拟器实例</span><br><span class="hljs-title class_">AndroidEmulatorBuilder</span> builder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AndroidEmulatorBuilder</span>(<span class="hljs-literal">false</span>) &#123;<br>    public <span class="hljs-title class_">AndroidEmulator</span> <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AndroidARMEmulator</span>(processName, rootDir,<br>                backendFactories) &#123;<br>            @<span class="hljs-title class_">Override</span><br>            protected <span class="hljs-title class_">UnixSyscallHandler</span>&lt;<span class="hljs-title class_">AndroidFileIO</span>&gt;<br>            <span class="hljs-title function_">createSyscallHandler</span>(<span class="hljs-params">SvcMemory svcMemory</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TimeSyscallHandler</span>(svcMemory);<br>            &#125;<br>        &#125;;<br>    &#125;<br>&#125;;<br><br>emulator = builder.<span class="hljs-title function_">build</span>();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/06/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E7%AE%97%E6%B3%95%E8%BF%98%E5%8E%9F/%E5%9B%BA%E5%AE%9A%E8%BE%93%E5%87%BA/1.%20%E5%9B%BA%E5%AE%9A%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    <url>/blog/2025/05/06/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E7%AE%97%E6%B3%95%E8%BF%98%E5%8E%9F/%E5%9B%BA%E5%AE%9A%E8%BE%93%E5%87%BA/1.%20%E5%9B%BA%E5%AE%9A%E9%9A%8F%E6%9C%BA%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<ul><li>参考：<a href="https://www.yuque.com/docs/share/1425c020-f52a-420e-afe4-edf749e76d69">https://www.yuque.com/docs/share/1425c020-f52a-420e-afe4-edf749e76d69</a></li></ul><p>输入固定，输出却在变化，一般意味着执行流中存在随机的干扰项。常见的随机干扰项包括但不限于</p><ul><li>时间戳</li><li>文件信息</li><li>随机数</li></ul><p>首先简单看一下so依赖的库函数，查看Import面板，输入“rand”<br><img src="/blog/../../../../../../../images/android/%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/%E7%AE%97%E6%B3%95%E8%BF%98%E5%8E%9F/1746540698201.jpg"><br><font color=#7500>lrand48 可以生成一个四字节随机数，srand48则是设置随机数种子，如果随机数种子不变，那么生成的随机数也不变。开发中常使用时间戳、进程ID等生成随机数种子。</font></p><p><code>linux 下的 lrand48()</code> 函数随机生成 0 - 2 ^ 31 之间的长整数</p><h3 id="hook-lrand48，-看是否有调用-调用位置"><a href="#hook-lrand48，-看是否有调用-调用位置" class="headerlink" title="hook lrand48， 看是否有调用 &amp; 调用位置"></a>hook lrand48， 看是否有调用 &amp; 调用位置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">public <span class="hljs-keyword">void</span> <span class="hljs-title function_">hookRandom</span>(<span class="hljs-params"></span>)&#123;<br>        emulator.<span class="hljs-title function_">attach</span>().<span class="hljs-title function_">addBreakPoint</span>(<span class="hljs-variable language_">module</span>.<span class="hljs-title function_">findSymbolByName</span>(<span class="hljs-string">&quot;lrand48&quot;</span>, <span class="hljs-literal">true</span>).<span class="hljs-title function_">getAddress</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">BreakPointCallback</span>() &#123;<br>            @<span class="hljs-title class_">Override</span><br>            public boolean <span class="hljs-title function_">onHit</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator, long address</span>) &#123;<br>                <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;call lrand48&quot;</span>);<br>                emulator.<span class="hljs-title function_">getUnwinder</span>().<span class="hljs-title function_">unwind</span>();<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="固定lrand48的返回值"><a href="#固定lrand48的返回值" class="headerlink" title="固定lrand48的返回值"></a>固定lrand48的返回值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">public <span class="hljs-keyword">void</span> <span class="hljs-title function_">hookRandom</span>(<span class="hljs-params"></span>)&#123;<br>    emulator.<span class="hljs-title function_">attach</span>().<span class="hljs-title function_">addBreakPoint</span>(<span class="hljs-variable language_">module</span>.<span class="hljs-title function_">findSymbolByName</span>(<span class="hljs-string">&quot;lrand48&quot;</span>, <span class="hljs-literal">true</span>).<span class="hljs-title function_">getAddress</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">BreakPointCallback</span>() &#123;<br>        @<span class="hljs-title class_">Override</span><br>        public boolean <span class="hljs-title function_">onHit</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator, long address</span>) &#123;<br>            <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;call lrand48&quot;</span>);<br>            emulator.<span class="hljs-title function_">getUnwinder</span>().<span class="hljs-title function_">unwind</span>();<br>            emulator.<span class="hljs-title function_">attach</span>().<span class="hljs-title function_">addBreakPoint</span>(emulator.<span class="hljs-title function_">getContext</span>().<span class="hljs-title function_">getLRPointer</span>().<span class="hljs-property">peer</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BreakPointCallback</span>() &#123;<br>                @<span class="hljs-title class_">Override</span><br>                public boolean <span class="hljs-title function_">onHit</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator, long address</span>) &#123;<br>                    emulator.<span class="hljs-title function_">getBackend</span>().<span class="hljs-title function_">reg_write</span>(<span class="hljs-title class_">ArmConst</span>.<span class="hljs-property">UC_ARM_REG_R0</span>, <span class="hljs-number">0x12345678</span>);<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/06/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E7%AE%97%E6%B3%95%E8%BF%98%E5%8E%9F/%E5%9B%BA%E5%AE%9A%E8%BE%93%E5%87%BA/0.%E6%80%BB%E7%BA%B2/"/>
    <url>/blog/2025/05/06/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E7%AE%97%E6%B3%95%E8%BF%98%E5%8E%9F/%E5%9B%BA%E5%AE%9A%E8%BE%93%E5%87%BA/0.%E6%80%BB%E7%BA%B2/</url>
    
    <content type="html"><![CDATA[<p>参考：<a href="https://www.yuque.com/docs/share/1425c020-f52a-420e-afe4-edf749e76d69">https://www.yuque.com/docs/share/1425c020-f52a-420e-afe4-edf749e76d69</a></p><h1 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h1><p>在固定干扰项后，使用 Unidbg 与 Frida 调用目标函数且入参一致时，理论上返回结果也一致，这意味着我们得到了绝对意义上的，完全正确的模拟执行。<br>具体操作流程如下</p><ol><li>在 Unidbg 中找到和固定干扰项，使得 Unidbg Call 在入参不变的情况下结果固定。</li><li>参考 Unidbg，用 Frida 同等固定干扰项（使用 inline hook &#x2F; patch &#x2F; replace 等等），使得 Frida Call 在入参不变的情况下结果固定。</li><li>对比两个固定值是否一致。</li></ol><p>在顺序上，选择先在 Unidbg 里分析，然后迁移到真机上，这是因为在 Unidbg 找干扰项更容易，所有的系统调用、文件访问、JNI 都由 Unidbg 处理和监控，固定它们并进行测试十分方便</p><h1 id="干扰项"><a href="#干扰项" class="headerlink" title="干扰项"></a>干扰项</h1><p>输入固定，输出却在变化，一般意味着执行流中存在随机的干扰项。常见的随机干扰项包括但不限于</p><ul><li>时间戳</li><li>文件信息</li><li>随机数</li></ul><h1 id="干扰项来源"><a href="#干扰项来源" class="headerlink" title="干扰项来源"></a>干扰项来源</h1><h3 id="JNI：如获取时间戳或者uuid"><a href="#JNI：如获取时间戳或者uuid" class="headerlink" title="JNI：如获取时间戳或者uuid"></a>JNI：如获取时间戳或者uuid</h3><h3 id="库函数"><a href="#库函数" class="headerlink" title="库函数"></a>库函数</h3><ul><li>时间上：gettimeoday、clock_gettime等库函数。 time 和ftime 库函数基于 gettimeofday； clock 库函数基于 clock_gettime</li><li>随机数上：有各种各样的 random 函数</li></ul><h3 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h3><ul><li>样本可以通过内联汇编直接调用系统调用，而且绝大多数干扰项所对应的库函数也都基于系统调用，因此<font color=#77000>如果拦截和处理系统调用，就可以从根本上处理随机干扰项</font></li></ul><h4 id="固定时间戳"><a href="#固定时间戳" class="headerlink" title="固定时间戳"></a>固定时间戳</h4><ul><li>固定gettimeofday：  <code>src/main/java/com/github/unidbg/unix/UnixSyscallHandler.java</code><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">方法名：gettimeofday  <span class="hljs-string">|  gettimeofday64</span><br>直接将System.currentTimeMillis<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span>改为固定值<br></code></pre></td></tr></table></figure></li><li>固定clock_gettime：<code>src/main/java/com/github/unidbg/linux/ARM64SyscallHandler.java | ARM32SyscallHandler</code>：直接将System.currentTimeMillis()和System.nanoTime()改为固定值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript">  private <span class="hljs-keyword">static</span> final int <span class="hljs-variable constant_">CLOCK_REALTIME</span> = <span class="hljs-number">0</span>;<br>    private <span class="hljs-keyword">static</span> final int <span class="hljs-variable constant_">CLOCK_MONOTONIC</span> = <span class="hljs-number">1</span>;<br>    private <span class="hljs-keyword">static</span> final int <span class="hljs-variable constant_">CLOCK_MONOTONIC_RAW</span> = <span class="hljs-number">4</span>;<br>    private <span class="hljs-keyword">static</span> final int <span class="hljs-variable constant_">CLOCK_MONOTONIC_COARSE</span> = <span class="hljs-number">6</span>;<br>    private <span class="hljs-keyword">static</span> final int <span class="hljs-variable constant_">CLOCK_BOOTTIME</span> = <span class="hljs-number">7</span>;<br><br><span class="hljs-comment">//    private final long nanoTime = System.nanoTime();</span><br>    private final long nanoTime = 1653628742314L;   <span class="hljs-comment">// todo 修改这里</span><br><br>    protected int <span class="hljs-title function_">clock_gettime</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator</span>) &#123;<br>        <span class="hljs-title class_">RegisterContext</span> context = emulator.<span class="hljs-title function_">getContext</span>();<br>        int clk_id = context.<span class="hljs-title function_">getIntArg</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-title class_">Pointer</span> tp = context.<span class="hljs-title function_">getPointerArg</span>(<span class="hljs-number">1</span>);<br>        long t1 = 1653628742314L;<br>        long t2 = 1653928742314L;<br>        long offset = clk_id == <span class="hljs-variable constant_">CLOCK_REALTIME</span> ? t1 * 1000000L : t2 - nanoTime;  <span class="hljs-comment">// 修改这里</span><br>        long tv_sec = offset / 1000000000L;<br>        long tv_nsec = offset % 1000000000L;<br>        <span class="hljs-keyword">if</span> (log.<span class="hljs-title function_">isDebugEnabled</span>()) &#123;<br>            log.<span class="hljs-title function_">debug</span>(<span class="hljs-string">&quot;clock_gettime clk_id=&quot;</span> + clk_id + <span class="hljs-string">&quot;, tp=&quot;</span> + tp + <span class="hljs-string">&quot;, offset=&quot;</span> + offset + <span class="hljs-string">&quot;, tv_sec=&quot;</span> + tv_sec + <span class="hljs-string">&quot;, tv_nsec=&quot;</span> + tv_nsec);<br>        &#125;<br>        <span class="hljs-keyword">switch</span> (clk_id) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-attr">CLOCK_REALTIME</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-attr">CLOCK_MONOTONIC</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-attr">CLOCK_MONOTONIC_RAW</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-attr">CLOCK_MONOTONIC_COARSE</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-attr">CLOCK_BOOTTIME</span>:<br>                tp.<span class="hljs-title function_">setLong</span>(<span class="hljs-number">0</span>, tv_sec);<br>                tp.<span class="hljs-title function_">setLong</span>(<span class="hljs-number">8</span>, tv_nsec);<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>(<span class="hljs-string">&quot;clk_id=&quot;</span> + clk_id);<br>    &#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="固定随机数"><a href="#固定随机数" class="headerlink" title="固定随机数"></a>固定随机数</h4><ul><li><code>src/main/java/com/github/unidbg/unix/UnixSyscallHandler.java</code></li></ul><p>系统调用 getrandom的实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">同理可以将 <span class="hljs-title class_">Random</span> 改成固定值。<br>protected int <span class="hljs-title function_">getrandom</span>(<span class="hljs-params">Pointer buf, int bufSize, int flags</span>) &#123;<br>    <span class="hljs-title class_">Random</span> random = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>    byte[] bytes = <span class="hljs-keyword">new</span> byte[bufSize];<br>    random.<span class="hljs-title function_">nextBytes</span>(bytes);<br>    buf.<span class="hljs-title function_">write</span>(<span class="hljs-number">0</span>, bytes, <span class="hljs-number">0</span>, bytes.<span class="hljs-property">length</span>);<br>    <span class="hljs-keyword">if</span> (log.<span class="hljs-title function_">isDebugEnabled</span>()) &#123;<br>        log.<span class="hljs-title function_">debug</span>(<span class="hljs-title class_">Inspector</span>.<span class="hljs-title function_">inspectString</span>(bytes, <span class="hljs-string">&quot;getrandom buf=&quot;</span> + buf + <span class="hljs-string">&quot;, bufSize=&quot;</span> + bufSize + <span class="hljs-string">&quot;, flags=0x&quot;</span> + <span class="hljs-title class_">Integer</span>.<span class="hljs-title function_">toHexString</span>(flags)));<br>    &#125;<br>    <span class="hljs-keyword">return</span> bufSize;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>src/main/java/com/github/unidbg/linux/file/DriverFileIO.java</code></li></ul><p>文件访问时，直接访问 &#x2F;dev&#x2F;urandom、&#x2F;dev&#x2F;random 读取字节流，实现随机数的获取修改的位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript">public <span class="hljs-keyword">class</span> <span class="hljs-title class_">DriverFileIO</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">BaseAndroidFileIO</span> implements <span class="hljs-title class_">NewFileIO</span>, <span class="hljs-title class_">AndroidFileIO</span> &#123;<br><br>    private <span class="hljs-keyword">static</span> final <span class="hljs-title class_">Log</span> log = <span class="hljs-title class_">LogFactory</span>.<span class="hljs-title function_">getLog</span>(<span class="hljs-title class_">DriverFileIO</span>.<span class="hljs-property">class</span>);<br><br>    public <span class="hljs-keyword">static</span> <span class="hljs-title class_">DriverFileIO</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator, int oflags, <span class="hljs-built_in">String</span> pathname</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;/dev/urandom&quot;</span>.<span class="hljs-title function_">equals</span>(pathname) || <span class="hljs-string">&quot;/dev/random&quot;</span>.<span class="hljs-title function_">equals</span>(pathname) || <span class="hljs-string">&quot;/dev/srandom&quot;</span>.<span class="hljs-title function_">equals</span>(pathname)) &#123;<br>            <span class="hljs-comment">// todo 看这里是否有调用，如果有进入RandomFileIO</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomFileIO</span>(emulator, pathname);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;/dev/alarm&quot;</span>.<span class="hljs-title function_">equals</span>(pathname) || <span class="hljs-string">&quot;/dev/null&quot;</span>.<span class="hljs-title function_">equals</span>(pathname)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DriverFileIO</span>(emulator, oflags, pathname);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;/dev/ashmem&quot;</span>.<span class="hljs-title function_">equals</span>(pathname)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Ashmem</span>(emulator, oflags, pathname);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;/dev/zero&quot;</span>.<span class="hljs-title function_">equals</span>(pathname)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZeroFileIO</span>(emulator, oflags, pathname);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript">public <span class="hljs-keyword">class</span> <span class="hljs-title class_">RandomFileIO</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">DriverFileIO</span> &#123;<br><br>    public <span class="hljs-title class_">RandomFileIO</span>(<span class="hljs-title class_">Emulator</span>&lt;?&gt; emulator, <span class="hljs-title class_">String</span> path) &#123;<br>        <span class="hljs-variable language_">super</span>(emulator, <span class="hljs-title class_">IOConstants</span>.<span class="hljs-property">O_RDONLY</span>, path);<br>    &#125;<br><br>    @<span class="hljs-title class_">Override</span><br>    public int <span class="hljs-title function_">read</span>(<span class="hljs-params">Backend backend, Pointer buffer, int count</span>) &#123;<br>        int total = <span class="hljs-number">0</span>;<br>        byte[] buf = <span class="hljs-keyword">new</span> byte[<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(<span class="hljs-number">0x1000</span>, count)];<br><span class="hljs-comment">//        randBytes(buf);  // todo 注释这里</span><br>        <span class="hljs-title class_">Pointer</span> pointer = buffer;<br>        <span class="hljs-keyword">while</span> (total &lt; count) &#123;<br>            int read = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(buf.<span class="hljs-property">length</span>, count - total);<br>            pointer.<span class="hljs-title function_">write</span>(<span class="hljs-number">0</span>, buf, <span class="hljs-number">0</span>, read);<br>            total += read;<br>            pointer = pointer.<span class="hljs-title function_">share</span>(read);<br>        &#125;<br>        <span class="hljs-keyword">return</span> total;<br>    &#125;<br><br>    protected <span class="hljs-keyword">void</span> <span class="hljs-title function_">randBytes</span>(<span class="hljs-params">byte[] bytes</span>) &#123;<br>        <span class="hljs-title class_">ThreadLocalRandom</span>.<span class="hljs-title function_">current</span>().<span class="hljs-title function_">nextBytes</span>(bytes);<br>    &#125;<br><br>    @<span class="hljs-title class_">Override</span><br>    public int <span class="hljs-title function_">fstat</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator, StatStructure stat</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/06/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/%E5%85%B6%E4%BB%96%E9%97%AE%E9%A2%98/"/>
    <url>/blog/2025/05/06/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/%E5%85%B6%E4%BB%96%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/06/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/6.%20dump%E5%86%85%E5%AD%98+%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/5.%20MemDumper%20&amp;%20unidbg/"/>
    <url>/blog/2025/05/06/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/6.%20dump%E5%86%85%E5%AD%98+%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/5.%20MemDumper%20&amp;%20unidbg/</url>
    
    <content type="html"><![CDATA[<p>参考：</p><ul><li><a href="https://www.yuque.com/docs/share/b439808e-fb6b-446c-ac86-a61020eceab2">https://www.yuque.com/docs/share/b439808e-fb6b-446c-ac86-a61020eceab2</a></li><li><a href="https://github.com/kp7742/MemDumper">https://github.com/kp7742/MemDumper</a></li></ul><h1 id="dump"><a href="#dump" class="headerlink" title="dump"></a>dump</h1><ul><li>根据手机是arm还是 arm64，所以选择 memdumper文件 push 到测试环境上。</li><li>打开样例正常执行，仅 dump 目标 SO 所处的内存范围<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod 777 memdumper64<br>./memdumper64 -p com.aikucun.akapp -l -r -n libmx.so -o /sdcard<br>Process name: com.aikucun.akapp, Pid: 19562<br>Base Address of libmx.so Found At 6ee85ca000<br>End Address of libmx.so Found At 6ee85fd000<br>Lib Size: 208896<br>Dumped in 0.212934S<br>polaris:/data/local/tmp #<br></code></pre></td></tr></table></figure></li><li>运行报错在so所处内存外的地址，继续dump成bin文件</li><li>遇到了一个新的内存错误 0x6f5d895d10<blockquote><p>Read memory failed: address&#x3D;0x6f5d895d10, size&#x3D;8, value&#x3D;0x0</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 打开emulator.traceCode(); 就能看到报错的位置 来自于so的哪个地址</span><br>v21 = <span class="hljs-built_in">strcat</span>((<span class="hljs-type">char</span> *)v19, *(<span class="hljs-type">const</span> <span class="hljs-type">char</span> **)(lpAppInfo + v20));<br></code></pre></td></tr></table></figure></li><li>这说明 lpAppInfo 并不是保存在 SO 地址范围里的，而是通过 malloc 等函数做的内存分配，用 memdumper64 dump 对应地址 0x1000 字节长度的内存<blockquote><p>.&#x2F;memdumper64 -p com.aikucun.akapp -m -s 0x6f5d895d10 -e 0x6f5d896d10 -n 6f5d895d10.bin -o &#x2F;sdcard</p></blockquote></li></ul><h1 id="接入unidbg"><a href="#接入unidbg" class="headerlink" title="接入unidbg"></a>接入unidbg</h1><p>问题总结</p><ol><li>手动将SO 对应的内存写到 Unidbg 虚拟环境<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript">private long <span class="hljs-title function_">align_page_up</span>(<span class="hljs-params">long x</span>)&#123;<br>    <span class="hljs-keyword">return</span> (x + <span class="hljs-number">0x1000</span> - <span class="hljs-number">1</span>) &amp; -<span class="hljs-number">0x1000</span>;<br>&#125;<br><br>private long <span class="hljs-title function_">align_page_down</span>(<span class="hljs-params">long x</span>)&#123;<br>    <span class="hljs-keyword">return</span> x &amp; -<span class="hljs-number">0x1000</span>;<br>&#125;<br><br>public <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadBinary</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> path, long address</span>)&#123;<br>    <span class="hljs-title class_">Path</span> binaryPath = <span class="hljs-title class_">Paths</span>.<span class="hljs-title function_">get</span>(path);<br>    byte[] data = <span class="hljs-keyword">new</span> byte[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">try</span> &#123;<br>        data = <span class="hljs-title class_">Files</span>.<span class="hljs-title function_">readAllBytes</span>(binaryPath);<br>    &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">IOException</span> e) &#123;<br>        e.<span class="hljs-title function_">printStackTrace</span>();<br>    &#125;<br>    long size = data.<span class="hljs-property">length</span>;<br>    long mem_start = address;<br>    long mem_end = address + size;<br>    long mem_start_aligned = <span class="hljs-title function_">align_page_down</span>(mem_start);<br>    long mem_end_aligned = <span class="hljs-title function_">align_page_up</span>(mem_end);<br><br>    <span class="hljs-keyword">if</span> (mem_start_aligned &lt; mem_end_aligned)&#123;<br>        emulator.<span class="hljs-title function_">getBackend</span>().<span class="hljs-title function_">mem_map</span>(mem_start_aligned, mem_end_aligned - mem_start_aligned, <span class="hljs-title class_">UnicornConst</span>.<span class="hljs-property">UC_PROT_ALL</span>);<br>    &#125;<br>    emulator.<span class="hljs-title function_">getBackend</span>().<span class="hljs-title function_">mem_write</span>(address, data);<br>&#125;<br></code></pre></td></tr></table></figure></li><li>遇到so内存以内的地址报错，大概率是libc.so报错，可以直接patch<br>样本想要访问外部的 strlen 函数，我们是 dump 对应的 libc 内存，还是怎么做？脸哥认为走原生的执行流（即 dump 和加载 libc 的内存环境）或自己 patch 比较好，我更青睐于使用 Unidbg 加载内部的 libc，做一下嫁接。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript">public <span class="hljs-keyword">void</span> <span class="hljs-title function_">patchOne</span>(<span class="hljs-params">long addr</span>)&#123;<br>    emulator.<span class="hljs-title function_">attach</span>().<span class="hljs-title function_">addBreakPoint</span>(addr, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BreakPointCallback</span>() &#123;<br>        @<span class="hljs-title class_">Override</span><br>        public boolean <span class="hljs-title function_">onHit</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator, long address</span>) &#123;<br>            emulator.<span class="hljs-title function_">getBackend</span>().<span class="hljs-title function_">reg_write</span>(<span class="hljs-title class_">Arm64Const</span>.<span class="hljs-property">UC_ARM64_REG_PC</span>, <span class="hljs-variable language_">module</span>.<span class="hljs-property">base</span> + (addr - moduleBase));<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;);<br>&#125;<br><br>public <span class="hljs-keyword">void</span> <span class="hljs-title function_">patchLib</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">patchOne</span>(0x6ee85d73d0L);<br>    <span class="hljs-title function_">patchOne</span>(0x6ee85d7640L);<br>    <span class="hljs-title function_">patchOne</span>(0x6ee85d7680L);<br>    <span class="hljs-title function_">patchOne</span>(0x6ee85d76a0L);<br>    <span class="hljs-title function_">patchOne</span>(0x6ee85d7430L);<br>    <span class="hljs-title function_">patchOne</span>(0x6ee85d7620L);<br>&#125;<br></code></pre></td></tr></table></figure></li><li>遇到so内存以外的地址报错，用MemDumper工具dump成bin文<blockquote><p>png &gt; java: <img src="/blog/../../../../../../../images/android/%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/MXSecurityDump.png"></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs javascript">package com.<span class="hljs-property">aikucun</span>.<span class="hljs-property">akapp</span>;<br><br><span class="hljs-keyword">import</span> capstone.<span class="hljs-property">api</span>.<span class="hljs-property">Instruction</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">AndroidEmulator</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">Emulator</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">Module</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">arm</span>.<span class="hljs-property">backend</span>.<span class="hljs-property">Unicorn2Factory</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">debugger</span>.<span class="hljs-property">BreakPointCallback</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">linux</span>.<span class="hljs-property">android</span>.<span class="hljs-property">AndroidEmulatorBuilder</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">linux</span>.<span class="hljs-property">android</span>.<span class="hljs-property">AndroidResolver</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">linux</span>.<span class="hljs-property">android</span>.<span class="hljs-property">dvm</span>.<span class="hljs-property">AbstractJni</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">linux</span>.<span class="hljs-property">android</span>.<span class="hljs-property">dvm</span>.<span class="hljs-property">DalvikModule</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">linux</span>.<span class="hljs-property">android</span>.<span class="hljs-property">dvm</span>.<span class="hljs-property">StringObject</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">linux</span>.<span class="hljs-property">android</span>.<span class="hljs-property">dvm</span>.<span class="hljs-property">VM</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">listener</span>.<span class="hljs-property">TraceCodeListener</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">memory</span>.<span class="hljs-property">Memory</span>;<br><span class="hljs-keyword">import</span> unicorn.<span class="hljs-property">Arm64Const</span>;<br><span class="hljs-keyword">import</span> unicorn.<span class="hljs-property">ArmConst</span>;<br><span class="hljs-keyword">import</span> unicorn.<span class="hljs-property">UnicornConst</span>;<br><br><span class="hljs-keyword">import</span> java.<span class="hljs-property">io</span>.<span class="hljs-property">File</span>;<br><span class="hljs-keyword">import</span> java.<span class="hljs-property">io</span>.<span class="hljs-property">IOException</span>;<br><span class="hljs-keyword">import</span> java.<span class="hljs-property">nio</span>.<span class="hljs-property">file</span>.<span class="hljs-property">Files</span>;<br><span class="hljs-keyword">import</span> java.<span class="hljs-property">nio</span>.<span class="hljs-property">file</span>.<span class="hljs-property">Path</span>;<br><span class="hljs-keyword">import</span> java.<span class="hljs-property">nio</span>.<span class="hljs-property">file</span>.<span class="hljs-property">Paths</span>;<br><br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">MXSecurityDump</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">AbstractJni</span> &#123;<br>    private final <span class="hljs-title class_">AndroidEmulator</span> emulator;<br>    private final <span class="hljs-variable constant_">VM</span> vm;<br>    public long moduleBase;<br>    public <span class="hljs-title class_">Module</span> <span class="hljs-variable language_">module</span>;<br><br>    public <span class="hljs-title class_">MXSecurityDump</span>() &#123;<br>        emulator = <span class="hljs-title class_">AndroidEmulatorBuilder</span>.<span class="hljs-title function_">for64Bit</span>()<br>                .<span class="hljs-title function_">addBackendFactory</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Unicorn2Factory</span>(<span class="hljs-literal">false</span>))<br>                .<span class="hljs-title function_">setProcessName</span>(<span class="hljs-string">&quot;com.aikucun.akapp&quot;</span>)<br>                .<span class="hljs-title function_">build</span>();<br>        emulator.<span class="hljs-title function_">getBackend</span>().<span class="hljs-title function_">registerEmuCountHook</span>(<span class="hljs-number">10000</span>); <span class="hljs-comment">// 设置执行多少条指令切换一次线程</span><br>        emulator.<span class="hljs-title function_">getSyscallHandler</span>().<span class="hljs-title function_">setVerbose</span>(<span class="hljs-literal">true</span>);<br>        emulator.<span class="hljs-title function_">getSyscallHandler</span>().<span class="hljs-title function_">setEnableThreadDispatcher</span>(<span class="hljs-literal">true</span>);<br>        <span class="hljs-title class_">Memory</span> memory = emulator.<span class="hljs-title function_">getMemory</span>();<br>        memory.<span class="hljs-title function_">setLibraryResolver</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AndroidResolver</span>(<span class="hljs-number">23</span>));<br>        vm = emulator.<span class="hljs-title function_">createDalvikVM</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;unidbg-android/src/test/resources/aikucun/dump/aikucun_6.3.2.apk&quot;</span>));<br>        vm.<span class="hljs-title function_">setVerbose</span>(<span class="hljs-literal">true</span>);<br>        vm.<span class="hljs-title function_">setJni</span>(<span class="hljs-variable language_">this</span>);<br>        moduleBase = 0x6ee85ca000L;  <span class="hljs-comment">// 地址来自于dump时展示so首地址</span><br>        <span class="hljs-comment">// 手动将 SO 对应的内存写到 Unidbg 虚拟环境里</span><br>        <span class="hljs-title function_">loadBinary</span>(<span class="hljs-string">&quot;unidbg-android/src/test/resources/aikucun/dump/libmx.so&quot;</span>, moduleBase);<br>        <span class="hljs-title function_">loadBinary</span>(<span class="hljs-string">&quot;unidbg-android/src/test/resources/aikucun/dump/6f5d895d10.bin&quot;</span>, 0x6f5d895d10L);<br>        <span class="hljs-title class_">DalvikModule</span> dalvikModule = vm.<span class="hljs-title function_">loadLibrary</span>(<span class="hljs-string">&quot;mx&quot;</span>, <span class="hljs-literal">false</span>);<br>        <span class="hljs-variable language_">module</span> = dalvikModule.<span class="hljs-title function_">getModule</span>();<br>        emulator.<span class="hljs-title function_">traceCode</span>();<br>    &#125;<br><br>    private long <span class="hljs-title function_">align_page_up</span>(<span class="hljs-params">long x</span>)&#123;<br>        <span class="hljs-keyword">return</span> (x + <span class="hljs-number">0x1000</span> - <span class="hljs-number">1</span>) &amp; -<span class="hljs-number">0x1000</span>;<br>    &#125;<br><br>    private long <span class="hljs-title function_">align_page_down</span>(<span class="hljs-params">long x</span>)&#123;<br>        <span class="hljs-keyword">return</span> x &amp; -<span class="hljs-number">0x1000</span>;<br>    &#125;<br><br>    public <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadBinary</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> path, long address</span>)&#123;<br>        <span class="hljs-title class_">Path</span> binaryPath = <span class="hljs-title class_">Paths</span>.<span class="hljs-title function_">get</span>(path);<br>        byte[] data = <span class="hljs-keyword">new</span> byte[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">try</span> &#123;<br>            data = <span class="hljs-title class_">Files</span>.<span class="hljs-title function_">readAllBytes</span>(binaryPath);<br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">IOException</span> e) &#123;<br>            e.<span class="hljs-title function_">printStackTrace</span>();<br>        &#125;<br>        long size = data.<span class="hljs-property">length</span>;<br>        long mem_start = address;<br>        long mem_end = address + size;<br>        long mem_start_aligned = <span class="hljs-title function_">align_page_down</span>(mem_start);<br>        long mem_end_aligned = <span class="hljs-title function_">align_page_up</span>(mem_end);<br><br>        <span class="hljs-keyword">if</span> (mem_start_aligned &lt; mem_end_aligned)&#123;<br>            emulator.<span class="hljs-title function_">getBackend</span>().<span class="hljs-title function_">mem_map</span>(mem_start_aligned, mem_end_aligned - mem_start_aligned, <span class="hljs-title class_">UnicornConst</span>.<span class="hljs-property">UC_PROT_ALL</span>);<br>        &#125;<br>        emulator.<span class="hljs-title function_">getBackend</span>().<span class="hljs-title function_">mem_write</span>(address, data);<br>    &#125;<br><br><br>    public <span class="hljs-keyword">void</span> <span class="hljs-title function_">patchOne</span>(<span class="hljs-params">long addr</span>)&#123;<br>        emulator.<span class="hljs-title function_">attach</span>().<span class="hljs-title function_">addBreakPoint</span>(addr, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BreakPointCallback</span>() &#123;<br>            @<span class="hljs-title class_">Override</span><br>            public boolean <span class="hljs-title function_">onHit</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator, long address</span>) &#123;<br>                emulator.<span class="hljs-title function_">getBackend</span>().<span class="hljs-title function_">reg_write</span>(<span class="hljs-title class_">Arm64Const</span>.<span class="hljs-property">UC_ARM64_REG_PC</span>, <span class="hljs-variable language_">module</span>.<span class="hljs-property">base</span> + (addr - moduleBase));<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;);<br>    &#125;<br><br>    public <span class="hljs-keyword">void</span> <span class="hljs-title function_">patchLib</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title function_">patchOne</span>(0x6ee85d73d0L);<br>        <span class="hljs-title function_">patchOne</span>(0x6ee85d7640L);<br>        <span class="hljs-title function_">patchOne</span>(0x6ee85d7680L);<br>        <span class="hljs-title function_">patchOne</span>(0x6ee85d76a0L);<br>        <span class="hljs-title function_">patchOne</span>(0x6ee85d7430L);<br>        <span class="hljs-title function_">patchOne</span>(0x6ee85d7620L);<br>    &#125;<br><br>    public <span class="hljs-keyword">void</span> <span class="hljs-title function_">call</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title class_">StringObject</span> arg1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringObject</span>(vm, <span class="hljs-string">&quot;https://zuul.aikucun.com/aggregation-center-facade/api/app/search/product/image/switch?&quot;</span> +<br>                <span class="hljs-string">&quot;appid=38741001&amp;did=6d2fe7c7702721c6b797cf22ec8f5f58&amp;noncestr=4b373c&amp;timestamp=1662394452&amp;zuul=1&quot;</span>);<br>        <span class="hljs-title class_">StringObject</span> arg2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringObject</span>(vm, <span class="hljs-string">&quot;4b373c&quot;</span>);<br>        <span class="hljs-title class_">StringObject</span> arg3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringObject</span>(vm, <span class="hljs-string">&quot;1662394452&quot;</span>);<br>        <span class="hljs-title class_">Number</span> number = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">emulateFunction</span>(emulator, 0x6ee85ca000L + <span class="hljs-number">0xe2ec</span>, vm.<span class="hljs-title function_">getJNIEnv</span>(), <span class="hljs-number">0</span>, vm.<span class="hljs-title function_">addLocalObject</span>(arg1), vm.<span class="hljs-title function_">addLocalObject</span>(arg2), vm.<span class="hljs-title function_">addLocalObject</span>(arg3));<br>        <span class="hljs-title class_">String</span> result = vm.<span class="hljs-title function_">getObject</span>(number.<span class="hljs-title function_">intValue</span>()).<span class="hljs-title function_">getValue</span>().<span class="hljs-title function_">toString</span>();<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;result:&quot;</span>+result);<br>    &#125;<br><br>    public <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>) &#123;<br>        <span class="hljs-title class_">MXSecurityDump</span> msDump = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MXSecurityDump</span>();<br>        msDump.<span class="hljs-title function_">patchLib</span>();<br>        msDump.<span class="hljs-title function_">call</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/06/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/6.%20dump%E5%86%85%E5%AD%98+%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/4.%20%E6%8E%A5%E5%85%A5unidbg/"/>
    <url>/blog/2025/05/06/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/6.%20dump%E5%86%85%E5%AD%98+%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/4.%20%E6%8E%A5%E5%85%A5unidbg/</url>
    
    <content type="html"><![CDATA[<h1 id="接入流程"><a href="#接入流程" class="headerlink" title="接入流程"></a>接入流程</h1><h3 id="1-设置寄存器注意"><a href="#1-设置寄存器注意" class="headerlink" title="1. 设置寄存器注意"></a>1. 设置寄存器注意</h3><ul><li>如果目标so方法涉及系统so，需要获取系统so的值，并写入</li><li>如何获取 <ul><li>在运行前设置断点，在执行到目标位置 register read xn获取 </li><li>不设置断点方式：<code>expression void** $tpidr_el0; __asm__(&quot;mrs %0, tpidr_el0&quot; : &quot;=r&quot; ($tpidr_el0)); $tpidr_el0;</code><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">backend.reg_write(Arm64Const.UC_ARM64_REG_CPACR_EL1, </span><span class="hljs-number">0x300000</span>L)<span class="hljs-comment">;  // </span><br><span class="hljs-keyword">backend.reg_write(Arm64Const.UC_ARM64_REG_TPIDR_EL0, </span><span class="hljs-number">0x0000006d4aa68000</span>L);<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="2-加载内存"><a href="#2-加载内存" class="headerlink" title="2. 加载内存"></a>2. 加载内存</h3><ul><li>通过白名单机制加载（代码中搜white_list）；对于没有名字则可以通过content_file来加载<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">String</span>&gt; white_list = <span class="hljs-title class_">Arrays</span>.<span class="hljs-title function_">asList</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;liboasiscore.so&quot;</span>, <span class="hljs-string">&quot;libc.so&quot;</span>, <span class="hljs-string">&quot;****.bin&quot;</span>&#125;);  <span class="hljs-comment">// todo</span><br><span class="hljs-keyword">if</span> (white_list.<span class="hljs-title function_">contains</span>(module_name) || white_list.<span class="hljs-title function_">contains</span>(content_file))&#123;<br></code></pre></td></tr></table></figure></li><li>如何确定加载拿些内存段&lt;白名单&gt;</li></ul><ol><li>最开始可以只加载libc.so和目标so相关的，然后直接模拟执行看哪些地方出现报错，再去计算确定是哪些段没有加载（将报错的内存地址转为10进制，在_index.json文件中比较各个seg分段的start和end，看是什么分段的地址）</li><li>一般会涉及到libc.so和上下文位置的so<blockquote><p>png &gt; py: <img src="/blog/../../../../../../../images/android/%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/get_memory_name.png"></p></blockquote></li></ol><h3 id="3-如何执行"><a href="#3-如何执行" class="headerlink" title="3. 如何执行"></a>3. 如何执行</h3><ol><li>遇到的第一个问题是没有module，可以使用Module.emulateFunction这样来调用</li><li>模拟执行的起始地址是dump上下文时的pc地址</li></ol><h1 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h1><h3 id="Invalid-instruction-UC-ERR-INSN-INVALID-异常"><a href="#Invalid-instruction-UC-ERR-INSN-INVALID-异常" class="headerlink" title="Invalid instruction (UC_ERR_INSN_INVALID)异常"></a>Invalid instruction (UC_ERR_INSN_INVALID)异常</h3><ol><li>tracecode打开，观察运行到哪里报错，到so文件中找到位置，进行patch或者重写</li><li>如果是libc.so里方法的报错，直接patch</li><li>如果是其他方法，patch或者重写</li></ol><h3 id="重写解决思路参考：https-blog-seeflower-dev-archives-171"><a href="#重写解决思路参考：https-blog-seeflower-dev-archives-171" class="headerlink" title="重写解决思路参考：https://blog.seeflower.dev/archives/171/"></a>重写解决思路参考：<a href="https://blog.seeflower.dev/archives/171/">https://blog.seeflower.dev/archives/171/</a></h3><h3 id="patch解决思路参考："><a href="#patch解决思路参考：" class="headerlink" title="patch解决思路参考："></a>patch解决思路参考：</h3><ul><li><a href="https://www.yuque.com/docs/share/eb6bff84-476f-430a-b353-b061f35731a6">https://www.yuque.com/docs/share/eb6bff84-476f-430a-b353-b061f35731a6</a></li><li><a href="https://www.yuque.com/docs/share/b439808e-fb6b-446c-ac86-a61020eceab2">https://www.yuque.com/docs/share/b439808e-fb6b-446c-ac86-a61020eceab2</a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">public <span class="hljs-keyword">void</span> <span class="hljs-title function_">patchOne</span>(<span class="hljs-params">long addr</span>)&#123;<br>    emulator.<span class="hljs-title function_">attach</span>().<span class="hljs-title function_">addBreakPoint</span>(addr, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BreakPointCallback</span>() &#123;<br>        @<span class="hljs-title class_">Override</span><br>        public boolean <span class="hljs-title function_">onHit</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator, long address</span>) &#123;<br>            emulator.<span class="hljs-title function_">getBackend</span>().<span class="hljs-title function_">reg_write</span>(<span class="hljs-title class_">Arm64Const</span>.<span class="hljs-property">UC_ARM64_REG_PC</span>, <span class="hljs-variable language_">module</span>.<span class="hljs-property">base</span> + (addr - moduleBase));<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="参考接入代码"><a href="#参考接入代码" class="headerlink" title="参考接入代码"></a>参考接入代码</h1><ul><li><p>32位so dump运行</p><blockquote><p>png &gt; java: <img src="/blog/../../../../../../../images/android/%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Template32.png"></p></blockquote></li><li><p>64位so dump运行</p><blockquote><p>png &gt; java: <img src="/blog/../../../../../../../images/android/%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Template64.png"></p></blockquote></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/06/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/6.%20dump%E5%86%85%E5%AD%98+%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/3.%20lldb%20dump%E4%B8%8A%E4%B8%8B%E6%96%87/"/>
    <url>/blog/2025/05/06/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/6.%20dump%E5%86%85%E5%AD%98+%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/3.%20lldb%20dump%E4%B8%8A%E4%B8%8B%E6%96%87/</url>
    
    <content type="html"><![CDATA[<ul><li>参考：<a href="https://blog.seeflower.dev/archives/169/">https://blog.seeflower.dev/archives/169/</a></li></ul><h2 id="流程命令总结"><a href="#流程命令总结" class="headerlink" title="流程命令总结"></a>流程命令总结</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs shell">adb install --abi armeabi-v7a E:\Desktop\ks.apk<br>su<br>source env.sh  // 通常情况下，在设置环境变量后，shell会自动切换到/data/data/com.termux/files/home<br>cd /data/data/com.termux/files/home<br>lldb<br>platform shell pwd    // 检查lldb的工作目录<br>platform settings -w settings -w /data/data/com.termux/files/home    // 如果工作目录不是/data/data/com.termux/files/home则切换<br>command script import lldb_dumper.py    // 导入dump脚本<br>process handle SIGSEGV -p true -s false   // attach后有时候会遇到报错的的信号，这个时候APP就突然暂停了，通过process handle SIGSEGV查看信号设置后再通过前面命令修改信号设置<br>ps -ef | grep packageNameName   // adb shell界面拿到目标apk的pid<br>attach pid   // 返回附加信息代表attach上<br>image list -o -f lib***.so    // 查看目标so的基址信息<br>breakpoint set -s libtiger_tally.so -a 0x5f008<br>breakpoint set -s lib***.so -a 0x***   // 目标函数的start地址<br>// 现在断点下好了，将APP切换到后台，再进入APP就能触发函数的调用<br>c <br>// 如果频繁调用目标方法，比如高德，根据传入第一个参数确定是不是目标调用。<br>// 断下来的时候，通过register read r2  |  register read x2看看传入参数，这里对应的也就是java层的第一个参数<br>// 另外注意如果你有多个断点，也就是图中圈起来的Thread 250，你可以通过thread select xxx来切换线程，因为有时候当前断下的可能不是想要的线程，千万不要搞错了<br>      <br> <br>dumpctx  //要在命中断点&lt;app会卡住暂停&gt;的时候dump。 dump的文件需要查看下_index.json，内容中要包含有很多寄存器的信息才对。如果没有寄存器信息，多半是没有断点的时候dump的<br>// 命中断点的时候同时dump和获取tpidr_el0<br><br>// canary机制获取系统寄存器值。<br>方法1：<br>breakpoint set -s lib***.so -a 0x***   // 经过实践，发现无法直接在最开始断点的时候就拿到，只能在执行完MRS这条指令之后去获取x8的值，所以还需要在MRS的下一行断点<br>register read x8  // 注意，不一定都是把值赋给x8<br>方法2：推荐，全程只需要下一次断点，命中断点的时候同时dump和获取tpidr_el0<br>expression void** $tpidr_el0; __asm__(&quot;mrs %0, tpidr_el0&quot; : &quot;=r&quot; ($tpidr_el0)); $tpidr_el0;<br>方法3：推荐，使用脚本<br>getel0<br>debugger.HandleCommand(&#x27;command script add -f lldb_dumper.get_tpidr_el0 getel0&#x27;)<br>def get_tpidr_el0(frame: &#x27;SBFrame&#x27;):<br>    &#x27;&#x27;&#x27;<br>    手动执行的命令 =&gt; expression void** $tpidr_el0; __asm__(mrs %0, tpidr_el0 : =r ($tpidr_el0)); $tpidr_el0;<br>    &#x27;&#x27;&#x27;<br>    tpidr_el0 = None<br>    var_name = f&#x27;tpidr_el0_&#123;os.urandom(4).hex()&#125;&#x27;<br>    expr_text = f&#x27;void** $&#123;var_name&#125;; __asm__(mrs %0, tpidr_el0 : =r ($&#123;var_name&#125;)); $&#123;var_name&#125;;&#x27;<br>    expr_ret = frame.EvaluateExpression(expr_text)  # type: SBValue<br>    error = expr_ret.GetError()  # type: SBError<br>    if error.Success():<br>        expr_ret.SetFormat(lldb.eFormatHex)<br>        tpidr_el0 = expr_ret.GetValue()  # type: str<br>    return tpidr_el0<br>    <br>    <br>breakpoint delete 1  // 删除断点<br>process detach<br></code></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol><li>如果其他APP存在反调试，可能会发<code>SIGQUIT SIGSTOP SIGKILL</code>之类的信号；暂停的时候可以打调用栈看看，说不定能找到反调试信息</li><li>因为Android逆向中的Canary机制，还需要获取其他系统寄存器<ol><li>v35 &#x3D; *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);</li><li>Android逆向中的Canary机制：<a href="https://cataloc.gitee.io/blog/2021/04/24/Android%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84Canary%E6%9C%BA%E5%88%B6/#%E5%89%8D%E8%A8%80">https://cataloc.gitee.io/blog/2021/04/24/Android%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84Canary%E6%9C%BA%E5%88%B6/#%E5%89%8D%E8%A8%80</a></li><li>还有哪些系统寄存器：<a href="https://github.com/TrungNguyen1909/aarch64-sysreg-ida/blob/main/aarch64_sysreg.py">https://github.com/TrungNguyen1909/aarch64-sysreg-ida/blob/main/aarch64_sysreg.py</a></li><li>经过实践，发现无法直接在最开始断点的时候就拿到只能在执行完MRS这条指令之后去获取x8的值；所以还需要在<code>MRS</code>的下一行断点，也就是<code>liboasiscore.so + 0x116F4</code></li></ol></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/06/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/6.%20dump%E5%86%85%E5%AD%98+%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/2.%20lldb%20dump%E8%84%9A%E6%9C%AC/"/>
    <url>/blog/2025/05/06/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/6.%20dump%E5%86%85%E5%AD%98+%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/2.%20lldb%20dump%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<p>参考：</p><ul><li><p><a href="https://blog.seeflower.dev/archives/166/#">https://blog.seeflower.dev/archives/166/#</a></p></li><li><p><a href="https://gist.github.com/SeeFlowerX/24c4507f9ed9ba09a5d1a3dd86aeef26">https://gist.github.com/SeeFlowerX/24c4507f9ed9ba09a5d1a3dd86aeef26</a></p></li><li><p>附件</p><blockquote><p>png &gt; py<br><img src="/blog/../../../../../../../images/android/%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/lldb_dumper.png"><br><img src="/blog/../../../../../../../images/android/%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/lldb.png"></p></blockquote></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> zlib<br><span class="hljs-keyword">import</span> shutil<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> logging<br><span class="hljs-keyword">import</span> zipfile<br><br><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> <span class="hljs-title class_">Path</span><br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-variable constant_">TYPE_CHECKING</span>, <span class="hljs-title class_">Dict</span>, <span class="hljs-title class_">List</span><br><span class="hljs-keyword">if</span> <span class="hljs-attr">TYPE_CHECKING</span>:<br>    <span class="hljs-keyword">from</span> lldb <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">import</span> lldb<br><br><br>def <span class="hljs-title function_">__lldb_init_module</span>(<span class="hljs-attr">debugger</span>: <span class="hljs-string">&#x27;SBDebugger&#x27;</span>, <span class="hljs-attr">internal_dict</span>: dict):<br>    <span class="hljs-keyword">debugger</span>.<span class="hljs-title class_">HandleCommand</span>(<span class="hljs-string">&#x27;command script add -f lldb_dumper.helloworld hello&#x27;</span>)<br>    <span class="hljs-keyword">debugger</span>.<span class="hljs-title class_">HandleCommand</span>(<span class="hljs-string">&#x27;command script add -f lldb_dumper.dump_context dumpctx&#x27;</span>)<br><br><br><span class="hljs-variable constant_">GLOBAL_LOGGERS</span> = &#123;&#125;<br>logger = <span class="hljs-title class_">None</span> # <span class="hljs-attr">type</span>: logging.<span class="hljs-property">Logger</span><br><br><br>def <span class="hljs-title function_">setup_logger</span>(<span class="hljs-attr">log_tag</span>: str, <span class="hljs-attr">log_path</span>: <span class="hljs-title class_">Path</span>, <span class="hljs-attr">first_call</span>: bool = <span class="hljs-title class_">False</span>) -&gt; logging.<span class="hljs-property">Logger</span>:<br>    <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">    输出的信息太多 Terminal可能不全 记录到日志文件</span><br><span class="hljs-string">    &#x27;</span><span class="hljs-string">&#x27;&#x27;</span><br>    logger = <span class="hljs-variable constant_">GLOBAL_LOGGERS</span>.<span class="hljs-title function_">get</span>(log_tag)<br>    <span class="hljs-keyword">if</span> <span class="hljs-attr">logger</span>:<br>        <span class="hljs-keyword">return</span> logger<br><br>    logger = logging.<span class="hljs-title function_">getLogger</span>(log_tag)<br>    <span class="hljs-variable constant_">GLOBAL_LOGGERS</span>[log_tag] = logger<br><br>    # 避免重新载入脚本时重复输出<br>    <span class="hljs-keyword">if</span> first_call and logger.<span class="hljs-title function_">hasHandlers</span>():<br>        logger.<span class="hljs-property">handlers</span>.<span class="hljs-title function_">clear</span>()<br><br>    # 设置所有 handler 的日志等级<br>    logger.<span class="hljs-title function_">setLevel</span>(logging.<span class="hljs-property">DEBUG</span>)<br><br>    # 添加终端 handler 只打印原始信息<br>    formatter = logging.<span class="hljs-title class_">Formatter</span>(<span class="hljs-string">&#x27;%(message)s&#x27;</span>)<br>    ch = logging.<span class="hljs-title class_">StreamHandler</span>()<br>    ch.<span class="hljs-title function_">setLevel</span>(logging.<span class="hljs-property">DEBUG</span>)<br>    ch.<span class="hljs-title function_">setFormatter</span>(formatter)<br>    logger.<span class="hljs-title function_">addHandler</span>(ch)<br><br>    # 添加文件 handler 记录详细时间和内容<br>    formatter = logging.<span class="hljs-title class_">Formatter</span>(<span class="hljs-string">&#x27;%(asctime)s.%(msecs)03d %(levelname)s: %(message)s&#x27;</span>, datefmt=<span class="hljs-string">&#x27;%H:%M:%S&#x27;</span>)<br>    fh = logging.<span class="hljs-title class_">FileHandler</span>(log_path.<span class="hljs-title function_">as_posix</span>(), encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>, delay=<span class="hljs-title class_">True</span>)<br>    fh.<span class="hljs-title function_">setLevel</span>(logging.<span class="hljs-property">DEBUG</span>)<br>    fh.<span class="hljs-title function_">setFormatter</span>(formatter)<br>    logger.<span class="hljs-title function_">addHandler</span>(fh)<br><br>    <span class="hljs-keyword">return</span> logger<br><br>def <span class="hljs-title function_">dump_arch_info</span>(<span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;SBTarget&#x27;</span>):<br>    triple = target.<span class="hljs-title class_">GetTriple</span>()<br>    logger.<span class="hljs-title function_">debug</span>(f<span class="hljs-string">&#x27;[dump_arch_info] triple =&gt; &#123;triple&#125;&#x27;</span>)<br>    # <span class="hljs-string">&#x27;aarch64&#x27;</span>, <span class="hljs-string">&#x27;unknown&#x27;</span>, <span class="hljs-string">&#x27;linux&#x27;</span>, <span class="hljs-string">&#x27;android&#x27;</span><br>    arch, vendor, sys, abi = triple.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;-&#x27;</span>)<br>    <span class="hljs-keyword">if</span> arch == <span class="hljs-string">&#x27;aarch64&#x27;</span> or arch == <span class="hljs-string">&#x27;arm64&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;arm64le&#x27;</span><br>    elif arch == <span class="hljs-string">&#x27;aarch64_be&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;arm64be&#x27;</span><br>    elif arch == <span class="hljs-string">&#x27;armeb&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;armbe&#x27;</span><br>    elif arch == <span class="hljs-string">&#x27;arm&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;armle&#x27;</span><br>    <span class="hljs-attr">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span><br><br>def <span class="hljs-title function_">dump_regs</span>(<span class="hljs-attr">frame</span>: <span class="hljs-string">&#x27;SBFrame&#x27;</span>):<br>    regs = &#123;&#125; # <span class="hljs-attr">type</span>: <span class="hljs-title class_">Dict</span>[str, int]<br>    # 实际类型是 <span class="hljs-title class_">SBValueList</span> 但是这样 type hint 没有效果<br>    registers = <span class="hljs-title class_">None</span> # <span class="hljs-attr">type</span>: <span class="hljs-title class_">List</span>[<span class="hljs-title class_">SBValue</span>]<br>    <span class="hljs-keyword">for</span> registers <span class="hljs-keyword">in</span> frame.<span class="hljs-title class_">GetRegisters</span>():<br>        # - <span class="hljs-title class_">General</span> <span class="hljs-title class_">Purpose</span> <span class="hljs-title class_">Registers</span><br>        # - <span class="hljs-title class_">Floating</span> <span class="hljs-title class_">Point</span> <span class="hljs-title class_">Registers</span><br>        logger.<span class="hljs-title function_">debug</span>(f<span class="hljs-string">&#x27;registers name =&gt; &#123;registers.GetName()&#125;&#x27;</span>)<br>        <span class="hljs-keyword">for</span> register <span class="hljs-keyword">in</span> <span class="hljs-attr">registers</span>:<br>            register_name = register.<span class="hljs-title class_">GetName</span>()<br>            # 直接获取 <span class="hljs-title class_">SBValue</span> 拿到的值通常得到的是贴近人类可读的字符串<br>            # 但是对于浮点寄存器来说 我们应该拿到最为精确的值<br>            # 可以指定为 lldb.<span class="hljs-property">eFormatUnsigned</span> 这样就直接是最完整的数值了 <br>            # 但是类型依然是字符串 在使用时还需要一次转换<br>            # 因此这里干脆指定为 lldb.<span class="hljs-property">eFormatHex</span> 更加符合逆向人员的阅读习惯<br>            # <span class="hljs-attr">https</span>:<span class="hljs-comment">//lldb.llvm.org/python_api_enums.html#format</span><br>            register.<span class="hljs-title class_">SetFormat</span>(lldb.<span class="hljs-property">eFormatHex</span>)<br>            register_value = register.<span class="hljs-title class_">GetValue</span>()<br>            regs[register_name] = register_value<br>    logger.<span class="hljs-title function_">info</span>(f<span class="hljs-string">&#x27;regs =&gt; &#123;json.dumps(regs, ensure_ascii=False, indent=4)&#125;&#x27;</span>)<br>    <span class="hljs-keyword">return</span> regs<br><br>def <span class="hljs-title function_">get_section_info</span>(<span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;SBTarget&#x27;</span>, <span class="hljs-attr">section</span>: <span class="hljs-string">&#x27;SBSection&#x27;</span>):<br>    name = section.<span class="hljs-property">name</span> <span class="hljs-keyword">if</span> section.<span class="hljs-property">name</span> is not <span class="hljs-title class_">None</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">if</span> section.<span class="hljs-title class_">GetParent</span>().<span class="hljs-property">name</span> is not <span class="hljs-title class_">None</span>:<br>        name = section.<span class="hljs-title class_">GetParent</span>().<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;.&#x27;</span> + section.<span class="hljs-property">name</span><br><br>    module_name = section.<span class="hljs-property">addr</span>.<span class="hljs-property">module</span>.<span class="hljs-property">file</span>.<span class="hljs-title class_">GetFilename</span>()<br>    module_name = module_name <span class="hljs-keyword">if</span> module_name is not <span class="hljs-title class_">None</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;&#x27;</span><br>    long_name = module_name + <span class="hljs-string">&#x27;.&#x27;</span> + name<br><br>    load_addr = section.<span class="hljs-property">addr</span>.<span class="hljs-title class_">GetLoadAddress</span>(target)<br><br>    <span class="hljs-keyword">return</span> load_addr, (load_addr + section.<span class="hljs-property">size</span>), section.<span class="hljs-property">size</span>, long_name<br><br>def <span class="hljs-title function_">dump_memory_info</span>(<span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;SBTarget&#x27;</span>):<br>    logger.<span class="hljs-title function_">debug</span>(<span class="hljs-string">&#x27;start dump_memory_info&#x27;</span>)<br>    sections = []<br>    # 先查找全部分段信息<br>    <span class="hljs-keyword">for</span> <span class="hljs-variable language_">module</span> <span class="hljs-keyword">in</span> target.<span class="hljs-title function_">module_iter</span>():<br>        <span class="hljs-attr">module</span>: <span class="hljs-title class_">SBModule</span><br>        <span class="hljs-keyword">for</span> section <span class="hljs-keyword">in</span> <span class="hljs-variable language_">module</span>.<span class="hljs-title function_">section_iter</span>():<br>            <span class="hljs-attr">section</span>: <span class="hljs-title class_">SBSection</span><br>            module_name = <span class="hljs-variable language_">module</span>.<span class="hljs-property">file</span>.<span class="hljs-title class_">GetFilename</span>()<br>            start, end, size, name = <span class="hljs-title function_">get_section_info</span>(target, section)<br>            section_info = &#123;<br>                <span class="hljs-string">&#x27;module&#x27;</span>: module_name,<br>                <span class="hljs-string">&#x27;start&#x27;</span>: start,<br>                <span class="hljs-string">&#x27;end&#x27;</span>: end,<br>                <span class="hljs-string">&#x27;size&#x27;</span>: size,<br>                <span class="hljs-string">&#x27;name&#x27;</span>: name,<br>            &#125;<br>            # size 好像有负数的情况 不知道是什么情况<br>            logger.<span class="hljs-title function_">info</span>(f<span class="hljs-string">&#x27;Appending: &#123;name&#125;&#x27;</span>)<br>            sections.<span class="hljs-title function_">append</span>(section_info)<br>    <span class="hljs-keyword">return</span> sections<br><br>def <span class="hljs-title function_">dump_memory</span>(<span class="hljs-attr">process</span>: <span class="hljs-string">&#x27;SBProcess&#x27;</span>, <span class="hljs-attr">dump_path</span>: <span class="hljs-title class_">Path</span>, <span class="hljs-attr">black_list</span>: <span class="hljs-title class_">Dict</span>[str, <span class="hljs-title class_">List</span>[str]], <span class="hljs-attr">max_seg_size</span>: int):<br>    logger.<span class="hljs-title function_">debug</span>(<span class="hljs-string">&#x27;start dump memory&#x27;</span>)<br>    memory_list = []<br>    mem_info = lldb.<span class="hljs-title class_">SBMemoryRegionInfo</span>()<br>    start_addr = -<span class="hljs-number">1</span><br>    next_region_addr = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> next_region_addr &gt; <span class="hljs-attr">start_addr</span>:<br>        # 从内存起始位置开始获取内存信息<br>        err = process.<span class="hljs-title class_">GetMemoryRegionInfo</span>(next_region_addr, mem_info) # <span class="hljs-attr">type</span>: <span class="hljs-title class_">SBError</span><br>        <span class="hljs-keyword">if</span> not err.<span class="hljs-property">success</span>:<br>            logger.<span class="hljs-title function_">warning</span>(f<span class="hljs-string">&#x27;GetMemoryRegionInfo failed, &#123;err&#125;, break&#x27;</span>)<br>            <span class="hljs-keyword">break</span><br>        # 获取当前位置的结尾地址<br>        next_region_addr = mem_info.<span class="hljs-title class_">GetRegionEnd</span>()<br>        # 如果超出上限 结束遍历<br>        <span class="hljs-keyword">if</span> next_region_addr &gt;= sys.<span class="hljs-property">maxsize</span>:<br>            logger.<span class="hljs-title function_">info</span>(f<span class="hljs-string">&#x27;next_region_addr:0x&#123;next_region_addr:x&#125; &gt;= sys.maxsize, break&#x27;</span>)<br>            <span class="hljs-keyword">break</span><br>        # 获取当前这块内存的起始地址和结尾地址<br>        start = mem_info.<span class="hljs-title class_">GetRegionBase</span>()<br>        end = mem_info.<span class="hljs-title class_">GetRegionEnd</span>()<br>        # 很多内存块没有名字 预设一个<br>        region_name = <span class="hljs-string">&#x27;UNKNOWN&#x27;</span><br>        # 记录分配了的内存<br>        <span class="hljs-keyword">if</span> mem_info.<span class="hljs-title class_">IsMapped</span>():<br>            name = mem_info.<span class="hljs-title class_">GetName</span>()<br>            <span class="hljs-keyword">if</span> name is <span class="hljs-title class_">None</span>:<br>                name = <span class="hljs-string">&#x27;&#x27;</span><br>            mem_info_obj = &#123;<br>                <span class="hljs-string">&#x27;start&#x27;</span>: start,<br>                <span class="hljs-string">&#x27;end&#x27;</span>: end,<br>                <span class="hljs-string">&#x27;name&#x27;</span>: name,<br>                <span class="hljs-string">&#x27;permissions&#x27;</span>: &#123;<br>                    <span class="hljs-string">&#x27;r&#x27;</span>: mem_info.<span class="hljs-title class_">IsReadable</span>(),<br>                    <span class="hljs-string">&#x27;w&#x27;</span>: mem_info.<span class="hljs-title class_">IsWritable</span>(),<br>                    <span class="hljs-string">&#x27;x&#x27;</span>: mem_info.<span class="hljs-title class_">IsExecutable</span>(),<br>                &#125;,<br>                <span class="hljs-string">&#x27;content_file&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>            &#125;<br>            memory_list.<span class="hljs-title function_">append</span>(mem_info_obj)<br>    # 开始正式dump<br>    <span class="hljs-keyword">for</span> seg_info <span class="hljs-keyword">in</span> <span class="hljs-attr">memory_list</span>:<br>        <span class="hljs-attr">try</span>:<br>            start_addr = seg_info[<span class="hljs-string">&#x27;start&#x27;</span>] # <span class="hljs-attr">type</span>: int<br>            end_addr = seg_info[<span class="hljs-string">&#x27;end&#x27;</span>] # <span class="hljs-attr">type</span>: int<br>            region_name = seg_info[<span class="hljs-string">&#x27;name&#x27;</span>] # <span class="hljs-attr">type</span>: str<br>            permissions = seg_info[<span class="hljs-string">&#x27;permissions&#x27;</span>] # <span class="hljs-attr">type</span>: <span class="hljs-title class_">Dict</span>[str, bool]<br><br>            # 跳过不可读 之后考虑下是不是能修改权限再读<br>            <span class="hljs-keyword">if</span> seg_info[<span class="hljs-string">&#x27;permissions&#x27;</span>][<span class="hljs-string">&#x27;r&#x27;</span>] is <span class="hljs-title class_">False</span>:<br>                logger.<span class="hljs-title function_">warning</span>(f<span class="hljs-string">&#x27;Skip dump &#123;region_name&#125; permissions =&gt; &#123;permissions&#125;&#x27;</span>)<br>                <span class="hljs-keyword">continue</span><br><br>            # 超过预设大小的 跳过dump<br>            predicted_size = end_addr - start_addr<br>            <span class="hljs-keyword">if</span> predicted_size &gt; <span class="hljs-attr">max_seg_size</span>:<br>                logger.<span class="hljs-title function_">warning</span>(f<span class="hljs-string">&#x27;Skip dump &#123;region_name&#125; size:0x&#123;predicted_size:x&#125;&#x27;</span>)<br>                <span class="hljs-keyword">continue</span><br><br>            skip_dump = <span class="hljs-title class_">False</span><br><br>            <span class="hljs-keyword">for</span> rule <span class="hljs-keyword">in</span> black_list[<span class="hljs-string">&#x27;startswith&#x27;</span>]:<br>                <span class="hljs-keyword">if</span> region_name.<span class="hljs-title function_">startswith</span>(rule):<br>                    skip_dump = <span class="hljs-title class_">True</span><br>                    logger.<span class="hljs-title function_">warning</span>(f<span class="hljs-string">&#x27;Skip dump &#123;region_name&#125; hit startswith rule:&#123;rule&#125;&#x27;</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-attr">skip_dump</span>: <span class="hljs-keyword">continue</span><br><br>            <span class="hljs-keyword">for</span> rule <span class="hljs-keyword">in</span> black_list[<span class="hljs-string">&#x27;endswith&#x27;</span>]:<br>                <span class="hljs-keyword">if</span> region_name.<span class="hljs-title function_">endswith</span>(rule):<br>                    skip_dump = <span class="hljs-title class_">True</span><br>                    logger.<span class="hljs-title function_">warning</span>(f<span class="hljs-string">&#x27;Skip dump &#123;region_name&#125; hit endswith rule:&#123;rule&#125;&#x27;</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-attr">skip_dump</span>: <span class="hljs-keyword">continue</span><br><br>            <span class="hljs-keyword">for</span> rule <span class="hljs-keyword">in</span> black_list[<span class="hljs-string">&#x27;includes&#x27;</span>]:<br>                <span class="hljs-keyword">if</span> rule <span class="hljs-keyword">in</span> <span class="hljs-attr">region_name</span>:<br>                    skip_dump = <span class="hljs-title class_">True</span><br>                    logger.<span class="hljs-title function_">warning</span>(f<span class="hljs-string">&#x27;Skip dump &#123;region_name&#125; hit includes rule:&#123;rule&#125;&#x27;</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-attr">skip_dump</span>: <span class="hljs-keyword">continue</span><br><br>            # 开始读取内存<br>            ts = datetime.<span class="hljs-title function_">now</span>()<br>            err = lldb.<span class="hljs-title class_">SBError</span>()<br>            seg_content = process.<span class="hljs-title class_">ReadMemory</span>(start_addr, predicted_size, err)<br>            tm = (datetime.<span class="hljs-title function_">now</span>() - ts).<span class="hljs-title function_">total_seconds</span>()<br>            # 读取成功的才写入本地文件 并计算md5<br>            # 内存里面可能很多地方是<span class="hljs-number">0</span> 所以压缩写入文件 减少占用<br>            <span class="hljs-keyword">if</span> seg_content is <span class="hljs-title class_">None</span>:<br>                logger.<span class="hljs-title function_">debug</span>(f<span class="hljs-string">&#x27;Segment empty: @0x&#123;start_addr:016x&#125; &#123;region_name&#125; =&gt; &#123;err&#125;&#x27;</span>)<br>            <span class="hljs-attr">else</span>:<br>                logger.<span class="hljs-title function_">info</span>(f<span class="hljs-string">&#x27;Dumping @0x&#123;start_addr:016x&#125; &#123;tm:.2f&#125;s size:0x&#123;len(seg_content):x&#125;: &#123;region_name&#125; &#123;permissions&#125;&#x27;</span>)<br>                compressed_seg_content = zlib.<span class="hljs-title function_">compress</span>(seg_content)<br>                md5_sum = hashlib.<span class="hljs-title function_">md5</span>(compressed_seg_content).<span class="hljs-title function_">hexdigest</span>() + <span class="hljs-string">&#x27;.bin&#x27;</span><br>                seg_info[<span class="hljs-string">&#x27;content_file&#x27;</span>] = <span class="hljs-title function_">md5_sum</span><br>                (dump_path / md5_sum).<span class="hljs-title function_">write_bytes</span>(compressed_seg_content)<br>        except <span class="hljs-title class_">Exception</span> <span class="hljs-keyword">as</span> <span class="hljs-attr">e</span>:<br>            # 这里好像不会出现异常 因为前面有 <span class="hljs-title class_">SBError</span> 处理了 不过还是保留<br>            logger.<span class="hljs-title function_">error</span>(f<span class="hljs-string">&#x27;Exception reading segment &#123;region_name&#125;&#x27;</span>, exc_info=e)<br><br>    <span class="hljs-keyword">return</span> memory_list<br><br>def <span class="hljs-title function_">archive</span>(<span class="hljs-attr">dump_path</span>: <span class="hljs-title class_">Path</span>):<br>    <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">    打包dump文件夹 便于提取 毕竟小文件太多不方便</span><br><span class="hljs-string">    &#x27;</span><span class="hljs-string">&#x27;&#x27;</span><br>    zip_path = dump_path.<span class="hljs-property">parent</span> / f<span class="hljs-string">&#x27;&#123;dump_path.stem&#125;.zip&#x27;</span><br>    zipobj = zipfile.<span class="hljs-title class_">ZipFile</span>(zip_path.<span class="hljs-title function_">as_posix</span>(), <span class="hljs-string">&#x27;w&#x27;</span>, zipfile.<span class="hljs-property">ZIP_STORED</span>)<br>    <span class="hljs-keyword">for</span> path, dirnames, filenames <span class="hljs-keyword">in</span> os.<span class="hljs-title function_">walk</span>(dump_path.<span class="hljs-title function_">as_posix</span>()):<br>        # 去掉目标跟路径 替换的是 dump_path.<span class="hljs-property">parent</span> 这样多一层文件夹 解压不会乱<br>        fpath = <span class="hljs-title class_">Path</span>(path).<span class="hljs-title function_">as_posix</span>().<span class="hljs-title function_">replace</span>(dump_path.<span class="hljs-property">parent</span>.<span class="hljs-title function_">as_posix</span>(), <span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> <span class="hljs-attr">filenames</span>:<br>            zipobj.<span class="hljs-title function_">write</span>(os.<span class="hljs-property">path</span>.<span class="hljs-title function_">join</span>(path, filename), os.<span class="hljs-property">path</span>.<span class="hljs-title function_">join</span>(fpath, filename))<br>    # 删除临时dump文件夹<br>    shutil.<span class="hljs-title function_">rmtree</span>(dump_path.<span class="hljs-title function_">as_posix</span>())<br><br>def <span class="hljs-title function_">dump_context</span>(<span class="hljs-attr">debugger</span>: <span class="hljs-string">&#x27;SBDebugger&#x27;</span>, <span class="hljs-attr">command</span>: str, <span class="hljs-attr">exe_ctx</span>: <span class="hljs-string">&#x27;SBExecutionContext&#x27;</span>, <span class="hljs-attr">result</span>: <span class="hljs-string">&#x27;SBCommandReturnObject&#x27;</span>, <span class="hljs-attr">internal_dict</span>: dict):<br><br>    # 设置日志<br>    <span class="hljs-variable language_">global</span> logger<br>    log_tag = <span class="hljs-string">&#x27;LLDBDumper&#x27;</span><br>    log_time = datetime.<span class="hljs-title function_">now</span>().<span class="hljs-title function_">strftime</span>(<span class="hljs-string">&#x27;%Y%m%d_%H%M%S&#x27;</span>)<br>    log_path = <span class="hljs-title class_">Path</span>(__file__).<span class="hljs-property">parent</span> / f<span class="hljs-string">&#x27;&#123;log_tag&#125;_&#123;log_time&#125;.log&#x27;</span><br>    logger = <span class="hljs-title function_">setup_logger</span>(log_tag, log_path, first_call=<span class="hljs-title class_">True</span>)<br><br>    logger.<span class="hljs-title function_">info</span>(f<span class="hljs-string">&#x27;-----------&gt;start dumping&lt;-----------&#x27;</span>)<br><br>    target = exe_ctx.<span class="hljs-title class_">GetTarget</span>() # <span class="hljs-attr">type</span>: <span class="hljs-title class_">SBTarget</span><br>    <br>    # 获取架构信息<br>    arch_long = <span class="hljs-title function_">dump_arch_info</span>(target)<br>    logger.<span class="hljs-title function_">info</span>(f<span class="hljs-string">&#x27;arch =&gt; &#123;arch_long&#125;&#x27;</span>)<br><br>    # 获取寄存器信息<br>    frame = exe_ctx.<span class="hljs-title class_">GetFrame</span>() # <span class="hljs-attr">type</span>: <span class="hljs-title class_">SBFrame</span><br>    regs = <span class="hljs-title function_">dump_regs</span>(frame)<br><br>    # 获取内存分段信息<br>    sections = <span class="hljs-title function_">dump_memory_info</span>(target)<br><br>    # 创建临时文件夹<br>    dump_path = <span class="hljs-title class_">Path</span>(f<span class="hljs-string">&#x27;DumpContext_&#123;log_time&#125;&#x27;</span>).<span class="hljs-title function_">resolve</span>()<br>    <span class="hljs-keyword">if</span> dump_path.<span class="hljs-title function_">exists</span>() is <span class="hljs-title class_">False</span>:<br>        dump_path.<span class="hljs-title function_">mkdir</span>()<br>    logger.<span class="hljs-title function_">info</span>(f<span class="hljs-string">&#x27;dump to &#123;dump_path.as_posix()&#125;&#x27;</span>)<br><br>    # 保存内存分段信息<br>    memory_info = json.<span class="hljs-title function_">dumps</span>(sections, ensure_ascii=<span class="hljs-title class_">False</span>, indent=<span class="hljs-number">4</span>)<br>    (dump_path / <span class="hljs-string">&#x27;_memory.json&#x27;</span>).<span class="hljs-title function_">write_text</span>(memory_info, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    logger.<span class="hljs-title function_">info</span>(f<span class="hljs-string">&#x27;dump _memory.json end&#x27;</span>)<br><br>    # 设置过滤黑名单 符合下面条件的跳过dump<br>    black_list = &#123;<br>        <span class="hljs-string">&#x27;startswith&#x27;</span>: [<span class="hljs-string">&#x27;/dev&#x27;</span>, <span class="hljs-string">&#x27;/system/fonts&#x27;</span>, <span class="hljs-string">&#x27;/dmabuf&#x27;</span>],<br>        <span class="hljs-string">&#x27;endswith&#x27;</span>: [<span class="hljs-string">&#x27;(deleted)&#x27;</span>, <span class="hljs-string">&#x27;.apk&#x27;</span>, <span class="hljs-string">&#x27;.odex&#x27;</span>, <span class="hljs-string">&#x27;.vdex&#x27;</span>, <span class="hljs-string">&#x27;.dex&#x27;</span>, <span class="hljs-string">&#x27;.jar&#x27;</span>, <span class="hljs-string">&#x27;.art&#x27;</span>, <span class="hljs-string">&#x27;.oat&#x27;</span>, <span class="hljs-string">&#x27;.art]&#x27;</span>],<br>        <span class="hljs-string">&#x27;includes&#x27;</span>: [],<br>    &#125;<br>    # 设置单个内存分段dump大小上限<br>    max_seg_size = <span class="hljs-number">64</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span><br><br>    # dump内存<br>    process = exe_ctx.<span class="hljs-title class_">GetProcess</span>() # <span class="hljs-attr">type</span>: <span class="hljs-title class_">SBProcess</span><br>    segments = <span class="hljs-title function_">dump_memory</span>(process, dump_path, black_list, max_seg_size)<br>    context = &#123;<br>        <span class="hljs-string">&#x27;arch&#x27;</span>: arch_long,<br>        <span class="hljs-string">&#x27;regs&#x27;</span>: regs,<br>        <span class="hljs-string">&#x27;segments&#x27;</span>: segments,<br>    &#125;<br><br>    # 保存内存信息<br>    context_config = json.<span class="hljs-title function_">dumps</span>(context, ensure_ascii=<span class="hljs-title class_">False</span>, indent=<span class="hljs-number">4</span>)<br>    (dump_path / <span class="hljs-string">&#x27;_index.json&#x27;</span>).<span class="hljs-title function_">write_text</span>(context_config, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    logger.<span class="hljs-title function_">info</span>(f<span class="hljs-string">&#x27;dump _index.json end&#x27;</span>)<br><br>    # 打包临时文件夹<br>    <span class="hljs-title function_">archive</span>(dump_path)<br>    logger.<span class="hljs-title function_">info</span>(f<span class="hljs-string">&#x27;archive &#123;dump_path&#125; end&#x27;</span>)<br><br>def <span class="hljs-title function_">helloworld</span>(<span class="hljs-attr">debugger</span>: <span class="hljs-string">&#x27;SBDebugger&#x27;</span>, <span class="hljs-attr">command</span>: str, <span class="hljs-attr">exe_ctx</span>: <span class="hljs-string">&#x27;SBExecutionContext&#x27;</span>, <span class="hljs-attr">result</span>: <span class="hljs-string">&#x27;SBCommandReturnObject&#x27;</span>, <span class="hljs-attr">internal_dict</span>: dict):<br>    <span class="hljs-title function_">print</span>(<span class="hljs-string">&#x27;helloWorld debugger:&#x27;</span>, <span class="hljs-keyword">debugger</span>)<br>    <span class="hljs-title function_">print</span>(<span class="hljs-string">&#x27;helloWorld command:&#x27;</span>, command)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/06/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/6.%20dump%E5%86%85%E5%AD%98+%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/1.%20%E7%8E%AF%E5%A2%83/"/>
    <url>/blog/2025/05/06/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/6.%20dump%E5%86%85%E5%AD%98+%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/1.%20%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<ul><li>参考：<a href="https://blog.seeflower.dev/archives/165/">https://blog.seeflower.dev/archives/165/</a></li></ul><h1 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h1><ol><li>注意： <ol><li>手机最好选择64位 </li><li>root手机</li></ol></li><li>下载最新版termux：<a href="https://github.com/termux/termux-app/releases/tag/v0.118.0">https://github.com/termux/termux-app/releases/tag/v0.118.0</a></li><li>下载安装后打开termux，先安装几个必要的软件（普通用户下安装）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">pkg install nano<br>pkg install openssl<br>pkg install lrzsz<br>pkg install lldb<br>pkg install ttyd<br></code></pre></td></tr></table></figure></li></ol><ul><li>官方源太慢，可以通过<code>termux-change-repo</code>选择国内源，推荐选择<code>ustc</code>的源</li></ul><ol start="4"><li>简要说明 <ol><li>nano 用于编辑文件 </li><li>lrzsz 用于传输文件，搭配ttyd会比较方便，再也不用adb pull了 <ol><li>下载文件：lsz file.zip </li><li>上传文件：lrz</li></ol></li><li>openssl 是避免某些操作的时候可能出现library “libssl.so.3” not found的情况 <ol><li>如果还是出现了library “libssl.so.3” not found之类的问题，请执行pkg upgrade更新下整个termux环境</li></ol></li><li>lldb 当然是用来dump内存 </li><li>ttyd 远程连接：ttyd bash <ol><li>如果想调整字体大小，颜色配置等，可以参考执行下面的命令<blockquote><p>ttyd -t fontSize&#x3D;22 -t ‘theme&#x3D;{“background”: “#282A36”, “foreground”: “#F8F8F2”, “cursor”: “#F8F8F2”, “selection”: “#44475A”}’ bash</p></blockquote></li></ol></li></ol></li><li>然后就可以在PC上通过http:&#x2F;&#x2F;{手机ip}:7681访问手机的shell了，可以多开</li></ol><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><ul><li>通过adb方式或者ttyd方式，现在已经可以在PC端方便操作了</li><li>先切换到su<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">export SHELL=/data/data/com.termux/files/usr/bin/bash<br>export COLORTERM=truecolor<br>export HISTCONTROL=ignoreboth<br>export PREFIX=/data/data/com.termux/files/usr<br>export TERMUX_IS_DEBUGGABLE_BUILD=1<br>export TERMUX_MAIN_PACKAGE_FORMAT=debian<br>export PWD=/data/data/com.termux/files/home<br>export TERMUX_VERSION=0.118.0<br>export EXTERNAL_STORAGE=/sdcard<br>export LD_PRELOAD=/data/data/com.termux/files/usr/lib/libtermux-exec.so<br>export HOME=/data/data/com.termux/files/home<br>export LANG=en_US.UTF-8<br>export TERMUX_APK_RELEASE=GITHUB<br>export TMPDIR=/data/data/com.termux/files/usr/tmp<br>export TERM=xterm-256color<br>export SHLVL=2<br>export PATH=/data/data/com.termux/files/usr/bin:$PATH<br></code></pre></td></tr></table></figure></li><li>将上述内容写入到一个文件中，比如<code>env.sh</code> 文件放到<code>/data/data/com.termux/files/home</code>目录下</li><li>记得进入shell后先切换su，使用如下命令即可一次性设置好环境变量<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /data/data/com.termux/files/home<br>source env.sh<br></code></pre></td></tr></table></figure></li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>source env.sh 出现 <code>not found EXECUTABLE &quot;ls&quot;: library &quot;/data/data/com.termux/files/usr/lib/libtermux-exec.so</code>  删除 <code>export LD_PRELOAD=/data/data/com.termux/files/usr/lib/libtermux-exec.so</code>这一行</li><li>在执行lldb命令后，请通过<code>platform shell pwd</code>检查lldb的工作目录；如果不是<code>/data/data/com.termux/files/home</code>目录，那么使用下面的命令切换工作目录<blockquote><p>platform settings -w settings -w &#x2F;data&#x2F;data&#x2F;com.termux&#x2F;files&#x2F;home</p></blockquote><ol><li>通常情况下，在设置环境变量后，shell会自动切换到&#x2F;data&#x2F;data&#x2F;com.termux&#x2F;files&#x2F;home</li><li>但是为了确保后续操作不出问题，每次进入lldb后务必执行platform shell pwd检查一下</li></ol></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/5.%20%E8%A1%A5%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/%E8%A1%A5%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E5%AE%9E%E7%8E%B0/uname%E5%AE%9E%E7%8E%B0/"/>
    <url>/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/5.%20%E8%A1%A5%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/%E8%A1%A5%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E5%AE%9E%E7%8E%B0/uname%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<ul><li>参考：<a href="https://www.yuque.com/lilac-2hqvv/xdwlsg/mh6re2qy0xg421ho#">https://www.yuque.com/lilac-2hqvv/xdwlsg/mh6re2qy0xg421ho#</a></li></ul><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>它会返回一系列关于主机系统的标识信息</p><h3 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a>函数原型</h3><blockquote><p>int uname(struct utsname *buf);</p></blockquote><ul><li>具体看看 utsname 结构体，Android 对它的注释相当详细和好懂。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/** The information returned by uname(). */</span><br>struct utsname &#123;<br>  <span class="hljs-comment">/** The OS name. &quot;Linux&quot; on Android. */</span><br>  char sysname[<span class="hljs-variable constant_">SYS_NMLN</span>];<br>  <span class="hljs-comment">/** The name on the network. Typically &quot;localhost&quot; on Android. */</span><br>  char nodename[<span class="hljs-variable constant_">SYS_NMLN</span>];<br>  <span class="hljs-comment">/** The OS release. Typically something like &quot;4.4.115-g442ad7fba0d&quot; on Android. */</span><br>  char release[<span class="hljs-variable constant_">SYS_NMLN</span>];<br>  <span class="hljs-comment">/** The OS version. Typically something like &quot;#1 SMP PREEMPT&quot; on Android. */</span><br>  char version[<span class="hljs-variable constant_">SYS_NMLN</span>];<br>  <span class="hljs-comment">/** The hardware architecture. Typically &quot;aarch64&quot; on Android. */</span><br>  char machine[<span class="hljs-variable constant_">SYS_NMLN</span>];<br>  <span class="hljs-comment">/** The domain name set by setdomainname(). Typically &quot;localdomain&quot; on Android. */</span><br>  char domainname[<span class="hljs-variable constant_">SYS_NMLN</span>];<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h3 id="补环境"><a href="#补环境" class="headerlink" title="补环境"></a>补环境</h3><ul><li>我们可以在 adb shell 里通过uname命令获取这些信息（毫无疑问，这个命令的底层也依赖于 uname 系统调用），除了不重要的 domainname。</li><li>来看看 ExAndroidNativeEmu 的实现，依然是那个风格，找个真机的 uname 信息一顿填充</li><li>再看看 Unidbg 的处理</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript">protected int <span class="hljs-title function_">uname</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator</span>) &#123;<br>    <span class="hljs-title class_">Pointer</span> buf = <span class="hljs-title class_">UnidbgPointer</span>.<span class="hljs-title function_">register</span>(emulator, <span class="hljs-title class_">ArmConst</span>.<span class="hljs-property">UC_ARM_REG_R0</span>);<br>    <span class="hljs-keyword">if</span> (log.<span class="hljs-title function_">isDebugEnabled</span>()) &#123;<br>        log.<span class="hljs-title function_">debug</span>(<span class="hljs-string">&quot;uname buf=&quot;</span> + buf);<br>    &#125;<br><br>    final int <span class="hljs-variable constant_">SYS_NMLN</span> = <span class="hljs-number">65</span>;<br><br>    <span class="hljs-title class_">Pointer</span> sysname = buf.<span class="hljs-title function_">share</span>(<span class="hljs-number">0</span>);<br>    sysname.<span class="hljs-title function_">setString</span>(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;Linux&quot;</span>);<br><br>    <span class="hljs-title class_">Pointer</span> nodename = sysname.<span class="hljs-title function_">share</span>(<span class="hljs-variable constant_">SYS_NMLN</span>);<br>    nodename.<span class="hljs-title function_">setString</span>(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;localhost&quot;</span>);<br><br>    <span class="hljs-title class_">Pointer</span> release = nodename.<span class="hljs-title function_">share</span>(<span class="hljs-variable constant_">SYS_NMLN</span>);<br>    release.<span class="hljs-title function_">setString</span>(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;1.0.0-unidbg&quot;</span>);<br><br>    <span class="hljs-title class_">Pointer</span> version = release.<span class="hljs-title function_">share</span>(<span class="hljs-variable constant_">SYS_NMLN</span>);<br>    version.<span class="hljs-title function_">setString</span>(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;#1 SMP PREEMPT Thu Apr 19 14:36:58 CST 2018&quot;</span>);<br><br>    <span class="hljs-title class_">Pointer</span> machine = version.<span class="hljs-title function_">share</span>(<span class="hljs-variable constant_">SYS_NMLN</span>);<br>    machine.<span class="hljs-title function_">setString</span>(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;armv7l&quot;</span>);<br><br>    <span class="hljs-title class_">Pointer</span> domainname = machine.<span class="hljs-title function_">share</span>(<span class="hljs-variable constant_">SYS_NMLN</span>);<br>    domainname.<span class="hljs-title function_">setString</span>(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;localdomain&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>其中发行版 “1.0.0-unidbg”是一个醒目的特征。Unidbg 无意隐藏自身环境，Qiling 也没有做隐藏</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/5.%20%E8%A1%A5%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/%E8%A1%A5%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E5%AE%9E%E7%8E%B0/sysinfo%E5%AE%9E%E7%8E%B0/"/>
    <url>/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/5.%20%E8%A1%A5%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/%E8%A1%A5%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E5%AE%9E%E7%8E%B0/sysinfo%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<ul><li>参考：<a href="https://www.yuque.com/lilac-2hqvv/xdwlsg/mh6re2qy0xg421ho#">https://www.yuque.com/lilac-2hqvv/xdwlsg/mh6re2qy0xg421ho#</a></li></ul><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li>它用于获取各种各样的系统统计信息</li></ul><h3 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a>函数原型</h3><blockquote><p>int sysinfo(struct sysinfo *info);</p></blockquote><p>返回信息填充在 sysinfo 结构体里</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript">struct sysinfo &#123;<br>  long uptime;             <span class="hljs-comment">// 启动到现在经过的时间</span><br>  unsigned long loads[<span class="hljs-number">3</span>];  <span class="hljs-comment">// I/O 在 1/5/15 分钟内执行的平均时间</span><br>  unsigned long totalram;  <span class="hljs-comment">// 总的可用内存</span><br>  unsigned long freeram;   <span class="hljs-comment">// 还未被使用的内存信息</span><br>  unsigned long sharedram; <span class="hljs-comment">// 共享存储器的大小</span><br>  unsigned long bufferram; <span class="hljs-comment">// 缓冲区大小</span><br>  unsigned long totalswap; <span class="hljs-comment">// 交换区大小</span><br>  unsigned long freeswap;  <span class="hljs-comment">// 可用的交换区大小</span><br>  unsigned short procs;    <span class="hljs-comment">// 当前进程数目</span><br>  unsigned short pad;      <span class="hljs-comment">// 填充</span><br>  unsigned long totalhigh; <span class="hljs-comment">// 高内存大小</span><br>  unsigned long freehigh;  <span class="hljs-comment">// 可用的高内存大小</span><br>  unsigned int mem_unit;   <span class="hljs-comment">// 内存单元大小</span><br>  char _f[<span class="hljs-number">20</span> - <span class="hljs-number">2</span> * <span class="hljs-title function_">sizeof</span>(unsigned long) - <span class="hljs-title function_">sizeof</span>(unsigned int)];<br>&#125;;<br></code></pre></td></tr></table></figure><p>这些信息很有用的，不管是单纯信息收集还是检测与对抗都能用得到。在实际场景中，往往会使用它的同名库函数，这一点和<code>getrusage</code>库函数类似。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript">#include &lt;stdio.<span class="hljs-property">h</span>&gt;<br>#include &lt;sys/sysinfo.<span class="hljs-property">h</span>&gt;<br><br>int <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-keyword">void</span></span>)<br>&#123;<br>    struct sysinfo info;<br><br>    <span class="hljs-title function_">sysinfo</span>(&amp;info);<br><br>    <span class="hljs-title function_">printf</span>(<span class="hljs-string">&quot;uptime = %ld\n&quot;</span>,info.<span class="hljs-property">uptime</span>);<br>    <span class="hljs-title function_">printf</span>(<span class="hljs-string">&quot;loads = %ld %ld %ld\n&quot;</span>,info.<span class="hljs-property">loads</span>[<span class="hljs-number">0</span>],info.<span class="hljs-property">loads</span>[<span class="hljs-number">1</span>],info.<span class="hljs-property">loads</span>[<span class="hljs-number">2</span>]);<br>    <span class="hljs-title function_">printf</span>(<span class="hljs-string">&quot;totalram = %lx\n&quot;</span>,info.<span class="hljs-property">totalram</span>*info.<span class="hljs-property">mem_unit</span>);<br>    <span class="hljs-title function_">printf</span>(<span class="hljs-string">&quot;freeram = %lx\n&quot;</span>,info.<span class="hljs-property">freeram</span>*info.<span class="hljs-property">mem_unit</span>);<br>    <span class="hljs-title function_">printf</span>(<span class="hljs-string">&quot;sharedram = %lx\n&quot;</span>,info.<span class="hljs-property">sharedram</span>*info.<span class="hljs-property">mem_unit</span>);<br>    <span class="hljs-title function_">printf</span>(<span class="hljs-string">&quot;bufferram = %lx\n&quot;</span>,info.<span class="hljs-property">bufferram</span>*info.<span class="hljs-property">mem_unit</span>);<br>    <span class="hljs-title function_">printf</span>(<span class="hljs-string">&quot;totalswap = %lx\n&quot;</span>,info.<span class="hljs-property">totalswap</span>*info.<span class="hljs-property">mem_unit</span>);<br>    <span class="hljs-title function_">printf</span>(<span class="hljs-string">&quot;freeswap = %lx\n&quot;</span>,info.<span class="hljs-property">freeswap</span>*info.<span class="hljs-property">mem_unit</span>);<br>    <span class="hljs-title function_">printf</span>(<span class="hljs-string">&quot;procs = %d\n&quot;</span>,info.<span class="hljs-property">procs</span>);<br>    <span class="hljs-title function_">printf</span>(<span class="hljs-string">&quot;totalhigh = %lx\n&quot;</span>,info.<span class="hljs-property">totalhigh</span>*info.<span class="hljs-property">mem_unit</span>);<br>    <span class="hljs-title function_">printf</span>(<span class="hljs-string">&quot;freehigh = %lx\n&quot;</span>,info.<span class="hljs-property">freehigh</span>*info.<span class="hljs-property">mem_unit</span>);<br>    <span class="hljs-title function_">printf</span>(<span class="hljs-string">&quot;mem_unit = %d\n&quot;</span>,info.<span class="hljs-property">mem_unit</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="补环境"><a href="#补环境" class="headerlink" title="补环境"></a>补环境</h3><ul><li>它的具体使用如下面这样，调用 sysinfo 库函数获取 uptime，即系统启动了多少秒，然后根据当前时间戳计算出设备开机的时间。</li><li><font color=#FF000 >如何模拟 sysinfo 系统调用。最简单的办法就是从真机获取一份信息，直接硬编码过来。</font></li><li><a href="https://github.com/maiyao1988/ExAndroidNativeEmu">ExAndroidNativeEmu</a> 就是这么做的，但对 uptime 这个相对敏感和重要的信息做了动态处理</li><li><a href="https://github.com/qilingframework/qiling">Qiling</a> 也是这么做的，而且 uptime 也是硬编码。</li><li><code>我们当然也可以在 Unidbg 里获取结构体指针，向对应的的地址写入这些值</code>。但 Unidbg 在处理上更好那么一些。<code>首先因为 long 的定义在 32/64 位上大小不同，所以分为了 SysInfo32 和 SysInfo64</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">private int <span class="hljs-title function_">sysinfo</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator</span>) &#123;<br>    <span class="hljs-title class_">Arm32RegisterContext</span> context = emulator.<span class="hljs-title function_">getContext</span>();<br>    <span class="hljs-title class_">Pointer</span> info = context.<span class="hljs-title function_">getR0Pointer</span>();<br>    <span class="hljs-keyword">if</span> (log.<span class="hljs-title function_">isDebugEnabled</span>()) &#123;<br>        log.<span class="hljs-title function_">debug</span>(<span class="hljs-string">&quot;sysinfo info=&quot;</span> + info);<br>    &#125;<br>    <span class="hljs-title class_">SysInfo32</span> sysInfo32 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SysInfo32</span>(info);<br>    sysInfo32.<span class="hljs-title function_">pack</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>Sysinfo32 类如下，它就是 sysinfo 结构体，Unidbg 将它封装为对应的类。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript">package com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">linux</span>.<span class="hljs-property">struct</span>;<br><br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">pointer</span>.<span class="hljs-property">UnidbgStructure</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">sun</span>.<span class="hljs-property">jna</span>.<span class="hljs-property">Pointer</span>;<br><br><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">Arrays</span>;<br><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">List</span>;<br><br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">SysInfo32</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">UnidbgStructure</span> &#123;<br><br>    public <span class="hljs-title class_">SysInfo32</span>(<span class="hljs-title class_">Pointer</span> p) &#123;<br>        <span class="hljs-variable language_">super</span>(p);<br>    &#125;<br><br>    public int uptime;<br>    public int[] loads = <span class="hljs-keyword">new</span> int[<span class="hljs-number">3</span>];<br>    public int totalRam;<br>    public int freeRam;<br>    public int sharedRam;<br>    public int bufferRam;<br>    public int totalSwap;<br>    public int freeSwap;<br>    public short procs;<br>    public short pad;<br>    public int totalHigh;<br>    public int freeHigh;<br>    public int mem_unit;<br>    public byte[] _f = <span class="hljs-keyword">new</span> byte[<span class="hljs-number">8</span>];<br><br>    @<span class="hljs-title class_">Override</span><br>    protected <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">getFieldOrder</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Arrays</span>.<span class="hljs-title function_">asList</span>(<span class="hljs-string">&quot;uptime&quot;</span>, <span class="hljs-string">&quot;loads&quot;</span>, <span class="hljs-string">&quot;totalRam&quot;</span>, <span class="hljs-string">&quot;freeRam&quot;</span>, <span class="hljs-string">&quot;sharedRam&quot;</span>, <span class="hljs-string">&quot;bufferRam&quot;</span>, <span class="hljs-string">&quot;totalSwap&quot;</span>, <span class="hljs-string">&quot;freeSwap&quot;</span>, <span class="hljs-string">&quot;procs&quot;</span>, <span class="hljs-string">&quot;pad&quot;</span>, <span class="hljs-string">&quot;totalHigh&quot;</span>, <span class="hljs-string">&quot;freeHigh&quot;</span>, <span class="hljs-string">&quot;mem_unit&quot;</span>, <span class="hljs-string">&quot;_f&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>Unidbg 默认返回空结构体，交由读者对这个结构体做填充，比如像下面这样<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">private int <span class="hljs-title function_">sysinfo</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator</span>) &#123;<br>    <span class="hljs-title class_">Arm32RegisterContext</span> context = emulator.<span class="hljs-title function_">getContext</span>();<br>    <span class="hljs-title class_">Pointer</span> info = context.<span class="hljs-title function_">getR0Pointer</span>();<br>    <span class="hljs-keyword">if</span> (log.<span class="hljs-title function_">isDebugEnabled</span>()) &#123;<br>        log.<span class="hljs-title function_">debug</span>(<span class="hljs-string">&quot;sysinfo info=&quot;</span> + info);<br>    &#125;<br>    <span class="hljs-title class_">SysInfo32</span> sysInfo32 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SysInfo32</span>(info);<br>    <span class="hljs-comment">// 自定义</span><br>    sysInfo32.<span class="hljs-property">uptime</span> = <span class="hljs-number">1234</span>;<br>    sysInfo32.<span class="hljs-property">bufferRam</span> = <span class="hljs-number">0x125600</span>;<br>    sysInfo32.<span class="hljs-title function_">pack</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/5.%20%E8%A1%A5%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/%E8%A1%A5%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E5%AE%9E%E7%8E%B0/stat64%E8%A7%A3%E6%9E%90/"/>
    <url>/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/5.%20%E8%A1%A5%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/%E8%A1%A5%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E5%AE%9E%E7%8E%B0/stat64%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<ul><li>参考：<a href="https://www.yuque.com/lilac-2hqvv/xdwlsg/ip3v0qlg5b8y620f">https://www.yuque.com/lilac-2hqvv/xdwlsg/ip3v0qlg5b8y620f</a></li></ul><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><ul><li><p>stat64是用于获取文件属性的系统调用</p></li><li><p>原型：</p><blockquote><p>int stat(const char *path, struct stat *buf);</p></blockquote></li><li><p>每个文件都有各种各样的属性，包括下面这些。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript">struct stat &#123;<br>    dev_t     st_dev;     <span class="hljs-comment">/* ID of device containing file */</span><br>    ino_t     st_ino;     <span class="hljs-comment">/* inode number */</span><br>    mode_t    st_mode;    <span class="hljs-comment">/* protection */</span><br>    nlink_t   st_nlink;   <span class="hljs-comment">/* number of hard links */</span><br>    uid_t     st_uid;     <span class="hljs-comment">/* user ID of owner */</span><br>    gid_t     st_gid;     <span class="hljs-comment">/* group ID of owner */</span><br>    dev_t     st_rdev;    <span class="hljs-comment">/* device ID (if special file) */</span><br>    off_t     st_size;    <span class="hljs-comment">/* total size, in bytes */</span><br>    blksize_t st_blksize; <span class="hljs-comment">/* blocksize for file system I/O */</span><br>    blkcnt_t  st_blocks;  <span class="hljs-comment">/* number of 512B blocks allocated */</span><br>    time_t    st_atime;   <span class="hljs-comment">/* time of last access */</span><br>    time_t    st_mtime;   <span class="hljs-comment">/* time of last modification */</span><br>    time_t    st_ctime;   <span class="hljs-comment">/* time of last status change */</span><br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>这些文件属性可用作信息收集、设备标识等用途。</p></li></ul><h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Find</span> native <span class="hljs-keyword">function</span> <span class="hljs-title class_">Java</span>_com_kuaishou_dfp_envdetect_jni_Watermelon_jniCommand =&gt; <span class="hljs-variable constant_">RX</span>@<span class="hljs-number">0x40004951</span>[libksse.<span class="hljs-property">so</span>]<span class="hljs-number">0x4951</span><br>file <span class="hljs-attr">open</span>:<span class="hljs-regexp">/data/</span>system<br>[<span class="hljs-number">22</span>:<span class="hljs-number">28</span>:<span class="hljs-number">42</span> <span class="hljs-number">815</span>]  <span class="hljs-variable constant_">INFO</span> [com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">linux</span>.<span class="hljs-property">ARM32SyscallHandler</span>] (<span class="hljs-title class_">ARM32SyscallHandler</span>:<span class="hljs-number">1120</span>) - stat64 pathname=<span class="hljs-regexp">/data/</span>system, <span class="hljs-variable constant_">LR</span>=<span class="hljs-variable constant_">RX</span>@<span class="hljs-number">0x4001990d</span>[libksse.<span class="hljs-property">so</span>]<span class="hljs-number">0x1990d</span><br>file <span class="hljs-attr">open</span>:<span class="hljs-regexp">/data/</span>data/<br>[<span class="hljs-number">22</span>:<span class="hljs-number">28</span>:<span class="hljs-number">42</span> <span class="hljs-number">819</span>]  <span class="hljs-variable constant_">INFO</span> [com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">linux</span>.<span class="hljs-property">ARM32SyscallHandler</span>] (<span class="hljs-title class_">ARM32SyscallHandler</span>:<span class="hljs-number">1120</span>) - stat64 pathname=<span class="hljs-regexp">/data/</span>data/, <span class="hljs-variable constant_">LR</span>=<span class="hljs-variable constant_">RX</span>@<span class="hljs-number">0x4001990d</span>[libksse.<span class="hljs-property">so</span>]<span class="hljs-number">0x1990d</span><br>file <span class="hljs-attr">open</span>:<span class="hljs-regexp">/data/</span>data/com.<span class="hljs-property">android</span>.<span class="hljs-property">shell</span><br>[<span class="hljs-number">22</span>:<span class="hljs-number">28</span>:<span class="hljs-number">42</span> <span class="hljs-number">823</span>]  <span class="hljs-variable constant_">INFO</span> [com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">linux</span>.<span class="hljs-property">ARM32SyscallHandler</span>] (<span class="hljs-title class_">ARM32SyscallHandler</span>:<span class="hljs-number">1120</span>) - stat64 pathname=<span class="hljs-regexp">/data/</span>data/com.<span class="hljs-property">android</span>.<span class="hljs-property">shell</span>, <span class="hljs-variable constant_">LR</span>=<span class="hljs-variable constant_">RX</span>@<span class="hljs-number">0x4001990d</span>[libksse.<span class="hljs-property">so</span>]<span class="hljs-number">0x1990d</span><br>file <span class="hljs-attr">open</span>:<span class="hljs-regexp">/data/</span>system/install_sessions<br>[<span class="hljs-number">22</span>:<span class="hljs-number">28</span>:<span class="hljs-number">42</span> <span class="hljs-number">823</span>]  <span class="hljs-variable constant_">INFO</span> [com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">linux</span>.<span class="hljs-property">ARM32SyscallHandler</span>] (<span class="hljs-title class_">ARM32SyscallHandler</span>:<span class="hljs-number">1120</span>) - stat64 pathname=<span class="hljs-regexp">/data/</span>system/install_sessions, <span class="hljs-variable constant_">LR</span>=<span class="hljs-variable constant_">RX</span>@<span class="hljs-number">0x4001990d</span>[libksse.<span class="hljs-property">so</span>]<span class="hljs-number">0x1990d</span><br>file <span class="hljs-attr">open</span>:<span class="hljs-regexp">/data/</span>data/com.<span class="hljs-property">google</span>.<span class="hljs-property">android</span>.<span class="hljs-property">webview</span><br>[<span class="hljs-number">22</span>:<span class="hljs-number">28</span>:<span class="hljs-number">42</span> <span class="hljs-number">823</span>]  <span class="hljs-variable constant_">INFO</span> [com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">linux</span>.<span class="hljs-property">ARM32SyscallHandler</span>] (<span class="hljs-title class_">ARM32SyscallHandler</span>:<span class="hljs-number">1120</span>) - stat64 pathname=<span class="hljs-regexp">/data/</span>data/com.<span class="hljs-property">google</span>.<span class="hljs-property">android</span>.<span class="hljs-property">webview</span>, <span class="hljs-variable constant_">LR</span>=<span class="hljs-variable constant_">RX</span>@<span class="hljs-number">0x4001990d</span>[libksse.<span class="hljs-property">so</span>]<span class="hljs-number">0x1990d</span><br><span class="hljs-title class_">JNIEnv</span>-&gt;<span class="hljs-title class_">FindClass</span>(java/lang/<span class="hljs-title class_">String</span>) was called <span class="hljs-keyword">from</span> <span class="hljs-variable constant_">RX</span>@<span class="hljs-number">0x40037b87</span>[libksse.<span class="hljs-property">so</span>]<span class="hljs-number">0x37b87</span><br><span class="hljs-title class_">JNIEnv</span>-&gt;<span class="hljs-title class_">GetMethodID</span>(java/lang/<span class="hljs-title class_">String</span>.&lt;init&gt;([<span class="hljs-title class_">BLjava</span>/lang/<span class="hljs-title class_">String</span>;)V) =&gt; <span class="hljs-number">0x782c535e</span> was called <span class="hljs-keyword">from</span> <span class="hljs-variable constant_">RX</span>@<span class="hljs-number">0x40037b9d</span>[libksse.<span class="hljs-property">so</span>]<span class="hljs-number">0x37b9d</span><br><span class="hljs-title class_">JNIEnv</span>-&gt;<span class="hljs-title class_">NewByteArray</span>(<span class="hljs-number">19</span>) was called <span class="hljs-keyword">from</span> <span class="hljs-variable constant_">RX</span>@<span class="hljs-number">0x40037bb3</span>[libksse.<span class="hljs-property">so</span>]<span class="hljs-number">0x37bb3</span><br><span class="hljs-title class_">JNIEnv</span>-&gt;<span class="hljs-title class_">SetByteArrayRegion</span>([B@4de5031f, <span class="hljs-number">0</span>, <span class="hljs-number">19</span>, <span class="hljs-variable constant_">RW</span>@<span class="hljs-number">0x40223040</span>) was called <span class="hljs-keyword">from</span> <span class="hljs-variable constant_">RX</span>@<span class="hljs-number">0x40037bc7</span>[libksse.<span class="hljs-property">so</span>]<span class="hljs-number">0x37bc7</span><br><span class="hljs-title class_">JNIEnv</span>-&gt;<span class="hljs-title class_">NewStringUTF</span>(<span class="hljs-string">&quot;utf-8&quot;</span>) was called <span class="hljs-keyword">from</span> <span class="hljs-variable constant_">RX</span>@<span class="hljs-number">0x40037bd5</span>[libksse.<span class="hljs-property">so</span>]<span class="hljs-number">0x37bd5</span><br><span class="hljs-title class_">JNIEnv</span>-&gt;<span class="hljs-title class_">NewObjectV</span>(<span class="hljs-keyword">class</span> <span class="hljs-title class_">java</span>/lang/<span class="hljs-title class_">String</span>, &lt;init&gt;<span class="hljs-function">(<span class="hljs-params">[B@4de5031f, <span class="hljs-string">&quot;utf-8&quot;</span></span>) =&gt;</span> <span class="hljs-string">&quot;nnn|nnn|nnn|nnn|nnn&quot;</span>) was called <span class="hljs-keyword">from</span> <span class="hljs-variable constant_">RX</span>@<span class="hljs-number">0x40018283</span>[libksse.<span class="hljs-property">so</span>]<span class="hljs-number">0x18283</span><br><span class="hljs-attr">ret</span>:nnn|nnn|nnn|nnn|nnn<br></code></pre></td></tr></table></figure><ul><li>打开file读写，可看到系统调用stat64被调用，用于访问指定文件</li><li>按要求补一下这些文件后发现return的结果变成了0::0|0::0|0::0|0::0|0::0</li></ul><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><ol><li>这是不合理的，虽然我们补的是空文件夹，<code>但它同样有自己的文件属性，怎么会返回全 0 呢？说明stat64调用了每个文件的上述某些属性值</code></li><li>通过stat 文件夹名 查看对应属性和值做对比，看看是哪些属性值被stat64调用<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">polaris</span>:<span class="hljs-regexp">/ $ stat /</span>data/data/com.<span class="hljs-property">google</span>.<span class="hljs-property">android</span>.<span class="hljs-property">webview</span><br>  <span class="hljs-title class_">File</span>: <span class="hljs-regexp">/data/</span>data/com.<span class="hljs-property">google</span>.<span class="hljs-property">android</span>.<span class="hljs-property">webview</span><br>  <span class="hljs-title class_">Size</span>: <span class="hljs-number">4096</span>     <span class="hljs-title class_">Blocks</span>: <span class="hljs-number">16</span>      <span class="hljs-variable constant_">IO</span> <span class="hljs-title class_">Blocks</span>: <span class="hljs-number">512</span> directory<br><span class="hljs-title class_">Device</span>: 10305h/66309d    <span class="hljs-title class_">Inode</span>: <span class="hljs-number">1024007</span>  <span class="hljs-title class_">Links</span>: <span class="hljs-number">7</span><br><span class="hljs-title class_">Access</span>: (<span class="hljs-number">0700</span>/drwx------)       <span class="hljs-title class_">Uid</span>: (<span class="hljs-number">10176</span>/ u0_a176)   <span class="hljs-title class_">Gid</span>: (<span class="hljs-number">10176</span>/ u0_a176)<br><span class="hljs-title class_">Access</span>: <span class="hljs-number">2022</span>-<span class="hljs-number">04</span>-<span class="hljs-number">22</span> <span class="hljs-number">16</span>:<span class="hljs-number">08</span>:<span class="hljs-number">51.936423786</span> +<span class="hljs-number">0800</span><br><span class="hljs-title class_">Modify</span>: <span class="hljs-number">2022</span>-<span class="hljs-number">11</span>-<span class="hljs-number">09</span> <span class="hljs-number">10</span>:<span class="hljs-number">15</span>:<span class="hljs-number">38.954950840</span> +<span class="hljs-number">0800</span><br><span class="hljs-title class_">Change</span>: <span class="hljs-number">2022</span>-<span class="hljs-number">11</span>-<span class="hljs-number">09</span> <span class="hljs-number">10</span>:<span class="hljs-number">15</span>:<span class="hljs-number">38.954950840</span> +<span class="hljs-number">0800</span><br></code></pre></td></tr></table></figure></li><li>结果全为0的原因</li></ol><ul><li>Unidbg 在文件属性这方面的模拟处理上做的不够好</li><li>对于普通文件，Unidbg 的文件属性编码如下<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript">@<span class="hljs-title class_">Override</span><br>public int <span class="hljs-title function_">fstat</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator, StatStructure stat</span>) &#123;<br>    int st_mode;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable constant_">IO</span>.<span class="hljs-property">STDOUT</span>.<span class="hljs-title function_">equals</span>(file.<span class="hljs-title function_">getName</span>())) &#123;<br>        st_mode = <span class="hljs-variable constant_">IO</span>.<span class="hljs-property">S_IFCHR</span> | <span class="hljs-number">0x777</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-title class_">Files</span>.<span class="hljs-title function_">isSymbolicLink</span>(file.<span class="hljs-title function_">toPath</span>())) &#123;<br>        st_mode = <span class="hljs-variable constant_">IO</span>.<span class="hljs-property">S_IFLNK</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        st_mode = <span class="hljs-variable constant_">IO</span>.<span class="hljs-property">S_IFREG</span>;<br>    &#125;<br>    stat.<span class="hljs-property">st_dev</span> = <span class="hljs-number">1</span>;<br>    stat.<span class="hljs-property">st_mode</span> = st_mode;<br>    stat.<span class="hljs-property">st_uid</span> = <span class="hljs-number">0</span>;<br>    stat.<span class="hljs-property">st_gid</span> = <span class="hljs-number">0</span>;<br>    stat.<span class="hljs-property">st_size</span> = file.<span class="hljs-title function_">length</span>();<br>    stat.<span class="hljs-property">st_blksize</span> = emulator.<span class="hljs-title function_">getPageAlign</span>();<br>    stat.<span class="hljs-property">st_ino</span> = <span class="hljs-number">1</span>;<br>    stat.<span class="hljs-property">st_blocks</span> = ((file.<span class="hljs-title function_">length</span>() + emulator.<span class="hljs-title function_">getPageAlign</span>() - <span class="hljs-number">1</span>) / emulator.<span class="hljs-title function_">getPageAlign</span>());<br>    stat.<span class="hljs-title function_">setLastModification</span>(file.<span class="hljs-title function_">lastModified</span>());<br>    stat.<span class="hljs-title function_">pack</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>看起来还不错，对时间做了处理，但 inode、dev 这些没法看，比如 inode 竟然硬编码为 1。</li><li>对于文件夹或者说目录的处理，可以说几乎没处理，可见<code>src/main/java/com/github/unidbg/linux/file/DirectoryFileIO.java</code>。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">@<span class="hljs-title class_">Override</span><br>public int <span class="hljs-title function_">fstat</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator, StatStructure stat</span>) &#123;<br>    stat.<span class="hljs-property">st_mode</span> = <span class="hljs-variable constant_">IO</span>.<span class="hljs-property">S_IFDIR</span>;<br>    stat.<span class="hljs-property">st_dev</span> = <span class="hljs-number">0</span>;<br>    stat.<span class="hljs-property">st_size</span> = <span class="hljs-number">0</span>;<br>    stat.<span class="hljs-property">st_blksize</span> = <span class="hljs-number">0</span>;<br>    stat.<span class="hljs-property">st_ino</span> = <span class="hljs-number">0</span>;<br>    stat.<span class="hljs-title function_">pack</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>除了文件类型设置为目录外，其余全部置空，这就是返回0::0|0::0|0::0|0::0|0::0的原因</li><li>这里可以做验证，胡乱设置一下 Access 时间<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">public int <span class="hljs-title function_">fstat</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator, StatStructure stat</span>) &#123;<br>    stat.<span class="hljs-property">st_mode</span> = <span class="hljs-variable constant_">IO</span>.<span class="hljs-property">S_IFDIR</span>;<br>    stat.<span class="hljs-property">st_dev</span> = <span class="hljs-number">0</span>;<br>    stat.<span class="hljs-property">st_size</span> = <span class="hljs-number">0</span>;<br>    stat.<span class="hljs-property">st_blksize</span> = <span class="hljs-number">0</span>;<br>    stat.<span class="hljs-property">st_ino</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// test</span><br>    stat.<span class="hljs-title function_">setSt_atim</span>(<span class="hljs-number">12345678</span>, <span class="hljs-number">9999</span>);<br>    stat.<span class="hljs-title function_">pack</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>重新运行<blockquote><p>ret:999900876::54321|999900876::54321|999900876::54321|999900876::54321|999900876::54321</p></blockquote></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/5.%20%E8%A1%A5%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/%E8%A1%A5%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E5%AE%9E%E7%8E%B0/gettimeofday%E5%AE%9E%E7%8E%B0/"/>
    <url>/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/5.%20%E8%A1%A5%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/%E8%A1%A5%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E5%AE%9E%E7%8E%B0/gettimeofday%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>参考: <a href="https://www.yuque.com/lilac-2hqvv/xdwlsg/wsww25qka54fbnur">https://www.yuque.com/lilac-2hqvv/xdwlsg/wsww25qka54fbnur</a></p><ul><li>gettimeofday在 Unidbg 里的实现略有问题。</li></ul><h2 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a>函数原型</h2><ul><li><p>它的调用原型如下，返回 0 代表调用成功，返回 -1 表示失败。</p><blockquote><p>int gettimeofday(struct timeval *tv, struct timezone *tz);</p></blockquote></li><li><p>tv 是一个指向 timeval 结构体的指针</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">struct timeval &#123;<br>  long tv_sec; 秒时间戳<br>  long tv_usec; 余下的微秒<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>只想获取秒级时间戳时，通常像下面这样写代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">long <span class="hljs-title function_">gettime</span>(<span class="hljs-params"></span>)&#123;<br>    struct timeval t&#123;&#125;;<br>    <span class="hljs-title function_">gettimeofday</span>(&amp;t, nullptr);<br>    long sec = t.<span class="hljs-property">tv_sec</span>;<br>    <span class="hljs-keyword">return</span> sec;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>想获取毫秒时间戳的时候，则要考虑 tv_usec。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">long long <span class="hljs-title function_">gettime2</span>(<span class="hljs-params"></span>)&#123;<br>    struct timeval t&#123;&#125;;<br>    <span class="hljs-title function_">gettimeofday</span>(&amp;t, nullptr);<br>    long sec = t.<span class="hljs-property">tv_sec</span>;<br>    long usec = t.<span class="hljs-property">tv_usec</span>;<br>    <span class="hljs-keyword">return</span> (sec * <span class="hljs-number">1000</span>) + (usec / <span class="hljs-number">1000</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>因为 long 类型在 32&#x2F;64 位架构上分别占据 4&#x2F;8 字节，所以 Unidbg 分别实现了 gettimeofday 以及 gettimeofday64，其中的差异仅在于 TimeVal 结构体的表示。</p></li><li><p>TimeVal32 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript">public <span class="hljs-keyword">class</span> <span class="hljs-title class_">TimeVal32</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">UnidbgStructure</span> &#123;<br><br>    public <span class="hljs-title class_">TimeVal32</span>(<span class="hljs-title class_">Pointer</span> p) &#123;<br>        <span class="hljs-variable language_">super</span>(p);<br>    &#125;<br><br>    public int tv_sec;<br>    public int tv_usec;<br><br>    @<span class="hljs-title class_">Override</span><br>    protected <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">getFieldOrder</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Arrays</span>.<span class="hljs-title function_">asList</span>(<span class="hljs-string">&quot;tv_sec&quot;</span>, <span class="hljs-string">&quot;tv_usec&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>TimeVal64</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript">public <span class="hljs-keyword">class</span> <span class="hljs-title class_">TimeVal64</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">UnidbgStructure</span> &#123;<br><br>    public <span class="hljs-title class_">TimeVal64</span>(<span class="hljs-title class_">Pointer</span> p) &#123;<br>        <span class="hljs-variable language_">super</span>(p);<br>    &#125;<br><br>    public long tv_sec;<br>    public long tv_usec;<br><br>    @<span class="hljs-title class_">Override</span><br>    protected <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">getFieldOrder</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Arrays</span>.<span class="hljs-title function_">asList</span>(<span class="hljs-string">&quot;tv_sec&quot;</span>, <span class="hljs-string">&quot;tv_usec&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>再说说 tz ，它是一个指向 timezone 结构体的指针，可用它获取系统的时区信息。Unidbg 在模拟gettimeofday时，认为 tv 总是不为空指针，所以只对 tz 做判空处理，具体代码如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript">protected int <span class="hljs-title function_">gettimeofday</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator, Pointer tv, Pointer tz</span>) &#123;<br>    long currentTimeMillis = <span class="hljs-title class_">System</span>.<span class="hljs-title function_">currentTimeMillis</span>();<br>    long tv_sec = currentTimeMillis / <span class="hljs-number">1000</span>;<br>    long tv_usec = (currentTimeMillis % <span class="hljs-number">1000</span>) * <span class="hljs-number">1000</span>;<br>    <span class="hljs-title class_">TimeVal32</span> timeVal = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TimeVal32</span>(tv);<br>    timeVal.<span class="hljs-property">tv_sec</span> = (int) tv_sec;<br>    timeVal.<span class="hljs-property">tv_usec</span> = (int) tv_usec;<br>    timeVal.<span class="hljs-title function_">pack</span>();<br><br>    <span class="hljs-keyword">if</span> (tz != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-title class_">Calendar</span> calendar = <span class="hljs-title class_">Calendar</span>.<span class="hljs-title function_">getInstance</span>();<br>        int tz_minuteswest = -(calendar.<span class="hljs-title function_">get</span>(<span class="hljs-title class_">Calendar</span>.<span class="hljs-property">ZONE_OFFSET</span>) + calendar.<span class="hljs-title function_">get</span>(<span class="hljs-title class_">Calendar</span>.<span class="hljs-property">DST_OFFSET</span>)) / (<span class="hljs-number">60</span> * <span class="hljs-number">1000</span>);<br>        <span class="hljs-title class_">TimeZone</span> timeZone = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TimeZone</span>(tz);<br>        timeZone.<span class="hljs-property">tz_minuteswest</span> = tz_minuteswest;<br>        timeZone.<span class="hljs-property">tz_dsttime</span> = <span class="hljs-number">0</span>;<br>        timeZone.<span class="hljs-title function_">pack</span>();<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>这么做是不妥当的，在多个样本上，都可以遇到 tv 为空，专注于使用 tz 获取时区信息的代码实况，如果你也遇到了这种情况，需要对 tv 做一下判空。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript">@<span class="hljs-title class_">Override</span><br>protected int <span class="hljs-title function_">gettimeofday</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator, Pointer tv, Pointer tz</span>) &#123;<br>    long currentTimeMillis = <span class="hljs-title class_">System</span>.<span class="hljs-title function_">currentTimeMillis</span>();<br>    long tv_sec = currentTimeMillis / <span class="hljs-number">1000</span>;<br>    long tv_usec = (currentTimeMillis % <span class="hljs-number">1000</span>) * <span class="hljs-number">1000</span>;<br>    <span class="hljs-keyword">if</span> (tv != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-title class_">TimeVal32</span> timeVal = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TimeVal32</span>(tv);<br>        timeVal.<span class="hljs-property">tv_sec</span> = (int) tv_sec;<br>        timeVal.<span class="hljs-property">tv_usec</span> = (int) tv_usec;<br>        timeVal.<span class="hljs-title function_">pack</span>();<br>    &#125;<br>    <span class="hljs-keyword">if</span> (tz != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-title class_">Calendar</span> calendar = <span class="hljs-title class_">Calendar</span>.<span class="hljs-title function_">getInstance</span>();<br>        int tz_minuteswest = -(calendar.<span class="hljs-title function_">get</span>(<span class="hljs-title class_">Calendar</span>.<span class="hljs-property">ZONE_OFFSET</span>) + calendar.<span class="hljs-title function_">get</span>(<span class="hljs-title class_">Calendar</span>.<span class="hljs-property">DST_OFFSET</span>)) / (<span class="hljs-number">60</span> * <span class="hljs-number">1000</span>);<br>        <span class="hljs-title class_">TimeZone</span> timeZone = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TimeZone</span>(tz);<br>        timeZone.<span class="hljs-property">tz_minuteswest</span> = tz_minuteswest;<br>        timeZone.<span class="hljs-property">tz_dsttime</span> = <span class="hljs-number">0</span>;<br>        timeZone.<span class="hljs-title function_">pack</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/5.%20%E8%A1%A5%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/%E8%A1%A5%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E5%AE%9E%E7%8E%B0/getrusage%E5%AE%9E%E7%8E%B0/"/>
    <url>/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/5.%20%E8%A1%A5%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/%E8%A1%A5%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E5%AE%9E%E7%8E%B0/getrusage%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<ul><li>参考：<a href="https://www.yuque.com/lilac-2hqvv/xdwlsg/mh6re2qy0xg421ho#">https://www.yuque.com/lilac-2hqvv/xdwlsg/mh6re2qy0xg421ho#</a></li><li>getrusage： NR&#x3D;77<ARM32> | NR&#x3D;165<ARM64></li></ul><h1 id="getrusage介绍"><a href="#getrusage介绍" class="headerlink" title="getrusage介绍"></a>getrusage介绍</h1><ul><li>这个系统调用用于<code>查看进程资源消耗情况</code>，具体介绍如下。</li><li>每个进程都会消耗诸如内存和 CPU 时间之类的系统资源，<code>getrusage 系统调用允许一个进程监控自己及其子进程已经用掉的资源</code>。</li></ul><h3 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a>函数原型</h3><blockquote><p>int getrusage(int who, struct rusage *usage);</p></blockquote><ul><li><p>参数who，它有四个可选值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> RUSAGE_SELF 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> RUSAGE_CHILDREN (- 1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> RUSAGE_BOTH (- 2)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> RUSAGE_THREAD 1</span><br><br><span class="hljs-number">0</span> 表示查看当前进程，<br><span class="hljs-number">-1</span> 表示查看所有子进程，<br><span class="hljs-number">-2</span> 表示查看当前进程以及所有子进程 ，<br><span class="hljs-number">1</span> 表示查看当前线程。<br>其中 <span class="hljs-number">0</span> 使用的最多。<br></code></pre></td></tr></table></figure></li><li><p>参数usage是一个指向rusage结构体的指针，资源消耗情况会返回和填充到这个结构体里。</p></li><li><p>返回值：执行成功返回 0，发生错误返回 -1。</p></li></ul><h3 id="rusage-结构体"><a href="#rusage-结构体" class="headerlink" title="rusage 结构体"></a>rusage 结构体</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript">struct rusage &#123;<br>    struct timeval ru_utime; <span class="hljs-comment">/* user CPU time used */</span><br>    struct timeval ru_stime; <span class="hljs-comment">/* system CPU time used */</span><br>    long   ru_maxrss;        <span class="hljs-comment">/* maximum resident set size */</span><br>    long   ru_ixrss;         <span class="hljs-comment">/* integral shared memory size */</span><br>    long   ru_idrss;         <span class="hljs-comment">/* integral unshared data size */</span><br>    long   ru_isrss;         <span class="hljs-comment">/* integral unshared stack size */</span><br>    long   ru_minflt;        <span class="hljs-comment">/* page reclaims (soft page faults) */</span><br>    long   ru_majflt;        <span class="hljs-comment">/* page faults (hard page faults) */</span><br>    long   ru_nswap;         <span class="hljs-comment">/* swaps */</span><br>    long   ru_inblock;       <span class="hljs-comment">/* block input operations */</span><br>    long   ru_oublock;       <span class="hljs-comment">/* block output operations */</span><br>    long   ru_msgsnd;        <span class="hljs-comment">/* IPC messages sent */</span><br>    long   ru_msgrcv;        <span class="hljs-comment">/* IPC messages received */</span><br>    long   ru_nsignals;      <span class="hljs-comment">/* signals received */</span><br>    long   ru_nvcsw;         <span class="hljs-comment">/* voluntary context switches */</span><br>    long   ru_nivcsw;        <span class="hljs-comment">/* involuntary context switches */</span><br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>这个系统调用使用场景不太多，所以这里简单说一下。</li><li>首先是 ru_utime，它表示进程在用户模式下的 CPU 使用时长，返回一个 timeval 结构体。</li><li>然后是 ru_stime，它表示进程在系统模式下的 CPU 使用时长，同样返回 timeval 结构体。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">struct timeval &#123;<br>  long tv_sec;<br>  long tv_usec;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li>不管是 ru_utime 还是 ru_stime，又或者两者相加，都不等价于这个进程的已打开时间，它仅仅是 CPU 在当前进程上的时间开销的一种度量。</li><li>接下来更简略的提一下其他信息 <ul><li>ru_maxrss：返回最大驻留集的大小，单位为kb。不太懂是个啥。 </li><li>ru_ixrss、ru_idrss、ru_isrss：目前不支持 </li><li>ru_minflt：缺页中断的次数，且处理这些中断不需要进行I&#x2F;O </li><li>ru_majflt：缺页中断的次数，且处理这些中断需要进行I&#x2F;O </li><li>ru_nswap：目前不支持 </li><li>ru_inblock：文件系统需要进行输入操作的次数。 </li><li>ru_oublock：文件系统需要进行输出操作的次数。 </li><li>ru_msgsnd、ru_msgrcv、ru_nsignals：目前不支持 </li><li>ru_nvcsw：因进程自愿放弃处理器时间片而导致的上下文切换的次数（通常是为了等待请求的资源）。 </li><li>ru_nivcsw：因进程时间片使用完毕或被高优先级进程抢断导致的上下文切换的次数。</li></ul></li><li>应该说，它确实返回了很多进程相关的资源消耗信息，但具体如何使用，其实还是不太好用的</li></ul><h1 id="补流程"><a href="#补流程" class="headerlink" title="补流程"></a>补流程</h1><h2 id="基于真实环境-hook、dump-出来一份"><a href="#基于真实环境-hook、dump-出来一份" class="headerlink" title="基于真实环境 hook、dump 出来一份"></a>基于真实环境 hook、dump 出来一份</h2><ul><li>frida<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// frida</span><br><span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(<span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findExportByName</span>(<span class="hljs-string">&quot;libc.so&quot;</span>, <span class="hljs-string">&quot;getrusage&quot;</span>), &#123;<br>  <span class="hljs-attr">onEnter</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">args</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">rusage</span> = args[<span class="hljs-number">1</span>]<br>  &#125;,<br>  <span class="hljs-attr">onLeave</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">retval</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">hexdump</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">rusage</span>))<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure></li><li>LLDB<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// LLDB</span><br>(lldb) memory read &amp;usage --count <span class="hljs-number">72</span><br><span class="hljs-number">0xfff1565c</span>: <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> a0 bb 0d <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">70</span> <span class="hljs-number">82</span> <span class="hljs-number">03</span> <span class="hljs-number">00</span>  ............p...<br><span class="hljs-number">0xfff1566c</span>: <span class="hljs-number">88</span> a1 <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  ................<br><span class="hljs-number">0xfff1567c</span>: 8b <span class="hljs-number">36</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  <span class="hljs-number">.6</span>..............<br><span class="hljs-number">0xfff1568c</span>: <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  ................<br><span class="hljs-number">0xfff1569c</span>: <span class="hljs-number">14</span> <span class="hljs-number">06</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> 5e <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>                          ....^...<br>(lldb) p <span class="hljs-title function_">usage</span><br>(rusage) $3 = &#123;<br>  ru_utime = (tv_sec = <span class="hljs-number">1</span>, tv_usec = <span class="hljs-number">900000</span>)<br>  ru_stime = (tv_sec = <span class="hljs-number">0</span>, tv_usec = <span class="hljs-number">230000</span>)<br>  ru_maxrss = <span class="hljs-number">106888</span><br>  ru_ixrss = <span class="hljs-number">0</span><br>  ru_idrss = <span class="hljs-number">0</span><br>  ru_isrss = <span class="hljs-number">0</span><br>  ru_minflt = <span class="hljs-number">13963</span><br>  ru_majflt = <span class="hljs-number">0</span><br>  ru_nswap = <span class="hljs-number">0</span><br>  ru_inblock = <span class="hljs-number">0</span><br>  ru_oublock = <span class="hljs-number">0</span><br>  ru_msgsnd = <span class="hljs-number">0</span><br>  ru_msgrcv = <span class="hljs-number">0</span><br>  ru_nsignals = <span class="hljs-number">0</span><br>  ru_nvcsw = <span class="hljs-number">1556</span><br>  ru_nivcsw = <span class="hljs-number">350</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>最好还是确定结构体的长度，方便打印，这里只考虑 64 位<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript">struct rusage &#123;<br>    struct timeval ru_utime; <span class="hljs-comment">/* user CPU time used */</span><br>    struct timeval ru_stime; <span class="hljs-comment">/* system CPU time used */</span><br>    long   ru_maxrss;        <span class="hljs-comment">/* maximum resident set size */</span><br>    long   ru_ixrss;         <span class="hljs-comment">/* integral shared memory size */</span><br>    long   ru_idrss;         <span class="hljs-comment">/* integral unshared data size */</span><br>    long   ru_isrss;         <span class="hljs-comment">/* integral unshared stack size */</span><br>    long   ru_minflt;        <span class="hljs-comment">/* page reclaims (soft page faults) */</span><br>    long   ru_majflt;        <span class="hljs-comment">/* page faults (hard page faults) */</span><br>    long   ru_nswap;         <span class="hljs-comment">/* swaps */</span><br>    long   ru_inblock;       <span class="hljs-comment">/* block input operations */</span><br>    long   ru_oublock;       <span class="hljs-comment">/* block output operations */</span><br>    long   ru_msgsnd;        <span class="hljs-comment">/* IPC messages sent */</span><br>    long   ru_msgrcv;        <span class="hljs-comment">/* IPC messages received */</span><br>    long   ru_nsignals;      <span class="hljs-comment">/* signals received */</span><br>    long   ru_nvcsw;         <span class="hljs-comment">/* voluntary context switches */</span><br>    long   ru_nivcsw;        <span class="hljs-comment">/* involuntary context switches */</span><br>&#125;;<br></code></pre></td></tr></table></figure></li><li>timeval 是两个 long，也就是 16 字节。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">struct timeval &#123;<br>  long tv_sec;<br>  long tv_usec;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li>16 * 2 + 14 * 8 &#x3D; 144 字节</li></ul><h2 id="方案1：硬编码"><a href="#方案1：硬编码" class="headerlink" title="方案1：硬编码"></a>方案1：硬编码</h2><ol><li>硬编码到 Unidbg getrusage 实现里。首先我用 <a href="https://gchq.github.io/CyberChef/#recipe=From_Hexdump()To_Hex('None',0)&input=N2ZlMGY3NTMyOCAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgOWYgNGEgMGIgMDAgMDAgMDAgMDAgMDAgIC4uLi4uLi4uLkouLi4uLi4KN2ZlMGY3NTMzOCAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgYzUgZTEgMDEgMDAgMDAgMDAgMDAgMDAgIC4uLi4uLi4uLi4uLi4uLi4KN2ZlMGY3NTM0OCAgOTAgNTIgMDEgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgIC5SLi4uLi4uLi4uLi4uLi4KN2ZlMGY3NTM1OCAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgIC4uLi4uLi4uLi4uLi4uLi4KN2ZlMGY3NTM2OCAgMjUgNWUgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgICVeLi4uLi4uLi4uLi4uLi4KN2ZlMGY3NTM3OCAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgIC4uLi4uLi4uLi4uLi4uLi4KN2ZlMGY3NTM4OCAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgIC4uLi4uLi4uLi4uLi4uLi4KN2ZlMGY3NTM5OCAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgIC4uLi4uLi4uLi4uLi4uLi4KN2ZlMGY3NTNhOCAgMGQgMDIgMDAgMDAgMDAgMDAgMDAgMDAgZDMgMDAgMDAgMDAgMDAgMDAgMDAgMDAgIC4uLi4uLi4uLi4uLi4uLi4">Cyberchef</a> 把 hexdump 出的内容转成十六进制字符串</li><li>填充<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs javascript">package com.<span class="hljs-property">example</span>;<br><br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">Emulator</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">linux</span>.<span class="hljs-property">ARM64SyscallHandler</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">memory</span>.<span class="hljs-property">SvcMemory</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">pointer</span>.<span class="hljs-property">UnidbgPointer</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">sun</span>.<span class="hljs-property">jna</span>.<span class="hljs-property">Pointer</span>;<br><span class="hljs-keyword">import</span> unicorn.<span class="hljs-property">Arm64Const</span>;<br><br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoARM64SyscallHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">ARM64SyscallHandler</span> &#123;<br>    public <span class="hljs-title class_">DemoARM64SyscallHandler</span>(<span class="hljs-title class_">SvcMemory</span> svcMemory) &#123;<br>        <span class="hljs-variable language_">super</span>(svcMemory);<br>    &#125;<br><br>    <span class="hljs-comment">// 处理尚未模拟实现的系统调用</span><br>    @<span class="hljs-title class_">Override</span><br>    protected boolean <span class="hljs-title function_">handleUnknownSyscall</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator, int NR</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable constant_">NR</span> == <span class="hljs-number">165</span>) &#123;<br>            <span class="hljs-title function_">getrusage</span>(emulator);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">super</span>.<span class="hljs-title function_">handleUnknownSyscall</span>(emulator, <span class="hljs-variable constant_">NR</span>);<br>    &#125;<br><br>    private <span class="hljs-keyword">void</span> <span class="hljs-title function_">getrusage</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator</span>)&#123;<br>        <span class="hljs-title class_">Pointer</span> rusage = <span class="hljs-title class_">UnidbgPointer</span>.<span class="hljs-title function_">register</span>(emulator, <span class="hljs-title class_">Arm64Const</span>.<span class="hljs-property">UC_ARM64_REG_X1</span>);<br>        byte[] rusageContent = <span class="hljs-title function_">hexStringToByteArray</span>(<span class="hljs-string">&quot;00000000000000009f4a0b00000000000000000000000000c5e10100000000009052010000000000000000000000000000000000000000000000000000000000255e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d02000000000000d300000000000000&quot;</span>);<br>        <span class="hljs-keyword">for</span>(int i = <span class="hljs-number">0</span>;i&lt; rusageContent.<span class="hljs-property">length</span>;i++)&#123;<br>            rusage.<span class="hljs-title function_">setByte</span>(i, rusageContent[i]);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/* s must be an even-length string. */</span><br>    public <span class="hljs-keyword">static</span> byte[] <span class="hljs-title function_">hexStringToByteArray</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> s</span>) &#123;<br>        int len = s.<span class="hljs-title function_">length</span>();<br>        byte[] data = <span class="hljs-keyword">new</span> byte[len / <span class="hljs-number">2</span>];<br>        <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt; len; i += <span class="hljs-number">2</span>) &#123;<br>            data[i / <span class="hljs-number">2</span>] = (byte) ((<span class="hljs-title class_">Character</span>.<span class="hljs-title function_">digit</span>(s.<span class="hljs-title function_">charAt</span>(i), <span class="hljs-number">16</span>) &lt;&lt; <span class="hljs-number">4</span>)<br>                                  + <span class="hljs-title class_">Character</span>.<span class="hljs-title function_">digit</span>(s.<span class="hljs-title function_">charAt</span>(i+<span class="hljs-number">1</span>), <span class="hljs-number">16</span>));<br>        &#125;<br>        <span class="hljs-keyword">return</span> data;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="方案2：用户自己填充"><a href="#方案2：用户自己填充" class="headerlink" title="方案2：用户自己填充"></a>方案2：用户自己填充</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    00 00 00 00 00 00 00 00 9f 4a 0b 00 00 00 00 00  .........J......</span><br><span class="hljs-comment">    00 00 00 00 00 00 00 00 c5 e1 01 00 00 00 00 00  ................</span><br><span class="hljs-comment">    90 52 01 00 00 00 00 00 00 00 00 00 00 00 00 00  .R..............</span><br><span class="hljs-comment">    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="hljs-comment">    25 5e 00 00 00 00 00 00 00 00 00 00 00 00 00 00  %^..............</span><br><span class="hljs-comment">    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="hljs-comment">    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="hljs-comment">    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="hljs-comment">    0d 02 00 00 00 00 00 00 d3 00 00 00 00 00 00 00  ................</span><br><span class="hljs-comment">     */</span><br>    private <span class="hljs-keyword">void</span> <span class="hljs-title function_">getrusage</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator</span>)&#123;<br>       <span class="hljs-comment">// EditableArm32RegisterContext context = (EditableArm32RegisterContext) emulator.getContext();</span><br>       <span class="hljs-comment">//UnidbgPointer rusage = context.getPointerArg(1);</span><br>        <span class="hljs-title class_">Pointer</span> rusage = <span class="hljs-title class_">UnidbgPointer</span>.<span class="hljs-title function_">register</span>(emulator, <span class="hljs-title class_">Arm64Const</span>.<span class="hljs-property">UC_ARM64_REG_X1</span>);<br>        rusage.<span class="hljs-title function_">setLong</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        rusage.<span class="hljs-title function_">setLong</span>(<span class="hljs-number">8</span>, 0xB4A9FL);<br>        rusage.<span class="hljs-title function_">setLong</span>(<span class="hljs-number">16</span>, <span class="hljs-number">0</span>);<br>        rusage.<span class="hljs-title function_">setLong</span>(<span class="hljs-number">24</span>, 0x1E1C5L);<br>        rusage.<span class="hljs-title function_">setLong</span>(<span class="hljs-number">32</span>, 0x15290L);<br>        <span class="hljs-comment">// 继续往下</span><br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/5.%20%E8%A1%A5%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/%E8%A1%A5%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E5%AE%9E%E7%8E%B0/clock_gettime%E5%AE%9E%E7%8E%B0/"/>
    <url>/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/5.%20%E8%A1%A5%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/%E8%A1%A5%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E5%AE%9E%E7%8E%B0/clock_gettime%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>参考：<a href="https://www.yuque.com/lilac-2hqvv/xdwlsg/wsww25qka54fbnur">https://www.yuque.com/lilac-2hqvv/xdwlsg/wsww25qka54fbnur</a></p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><code>clock_gettime</code>的语义和功能相当丰富，<code>可以获取真实时间，进程时间等多种类型的时间</code>，其函数原型如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">int <span class="hljs-title function_">clock_gettime</span>(clockid_t __clock, struct timespec* __ts);<br></code></pre></td></tr></table></figure><p>timespec 结构体</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">struct timespec &#123;<br>    long tv_sec; <span class="hljs-comment">// 秒时间戳</span><br>    long tv_nsec; <span class="hljs-comment">// 余下的纳秒时间戳</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>如果想获取毫秒级时间戳，可以像下面这样写。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">long long <span class="hljs-title function_">gettime3</span>(<span class="hljs-params"></span>)&#123;<br>    struct timespec t = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-title function_">clock_gettime</span>(<span class="hljs-variable constant_">CLOCK_REALTIME</span>, &amp;t);<br>    <span class="hljs-keyword">return</span> (t.<span class="hljs-property">tv_sec</span>*<span class="hljs-number">1000</span>) + (t.<span class="hljs-property">tv_nsec</span>/<span class="hljs-number">1000000</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>参数 1 clockid 即所谓的时钟类型，<code>CLOCK_REALTIME</code>是真实时间信息，此时效果和 gettimeofday 一致，但时间精度更高。除了真实时间外，还有许多其他时钟，列举如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">#define <span class="hljs-variable constant_">CLOCK_REALTIME</span> <span class="hljs-number">0</span><br>#define <span class="hljs-variable constant_">CLOCK_MONOTONIC</span> <span class="hljs-number">1</span><br>#define <span class="hljs-variable constant_">CLOCK_PROCESS_CPUTIME_ID</span> <span class="hljs-number">2</span><br>#define <span class="hljs-variable constant_">CLOCK_THREAD_CPUTIME_ID</span> <span class="hljs-number">3</span><br>#define <span class="hljs-variable constant_">CLOCK_MONOTONIC_RAW</span> <span class="hljs-number">4</span><br>#define <span class="hljs-variable constant_">CLOCK_REALTIME_COARSE</span> <span class="hljs-number">5</span><br>#define <span class="hljs-variable constant_">CLOCK_MONOTONIC_COARSE</span> <span class="hljs-number">6</span><br>#define <span class="hljs-variable constant_">CLOCK_BOOTTIME</span> <span class="hljs-number">7</span><br>#define <span class="hljs-variable constant_">CLOCK_REALTIME_ALARM</span> <span class="hljs-number">8</span><br>#define <span class="hljs-variable constant_">CLOCK_BOOTTIME_ALARM</span> <span class="hljs-number">9</span><br>#define <span class="hljs-variable constant_">CLOCK_SGI_CYCLE</span> <span class="hljs-number">10</span><br>#define <span class="hljs-variable constant_">CLOCK_TAI</span> <span class="hljs-number">11</span><br></code></pre></td></tr></table></figure><ul><li><code>CLOCK_MONOTONIC</code>开头的几个时钟表示从某个不确定的点开始计时的时间，这个不确定的点可能是设备启动，也可能是开机后的某个时间，所以叫它不确定的点。</li><li><code>CLOCK_BOOTTIME</code>开头的几个时钟表示从设备启动开始计时，即开机时间。</li><li><code>CLOCK_PROCESS_CPUTIME_ID</code> 、<code>CLOCK_THREAD_CPUTIME_ID</code>表示 CPU 在当前进程&#x2F;线程上的耗时，相比较进程&#x2F;线程的真实持续时间，这会是一个很小的数字。</li><li>简而言之，时钟可以分为真实时间、CPU 时间、开机时间、从不确定的某个时间点开始计时这四大类</li></ul><h1 id="如何补"><a href="#如何补" class="headerlink" title="如何补"></a>如何补</h1><ol><li>首先要知道unidbg有实现clock_gettime，但是传入的clk_id逻辑实现不全</li><li>根据报错了解是哪个clk_id实现不全<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-attr">[23:56:45 138]</span>  WARN <span class="hljs-selector-attr">[com.github.unidbg.linux.ARM32SyscallHandler]</span> (ARM32SyscallHandler:<span class="hljs-number">532</span>) - handleInterrupt intno=<span class="hljs-number">2</span>, NR=<span class="hljs-number">263</span>, svcNumber=<span class="hljs-number">0</span>x0, PC=RX@<span class="hljs-number">0</span>x40117b88<span class="hljs-selector-attr">[libc.so]</span><span class="hljs-number">0</span>x40b88, LR=RX@<span class="hljs-number">0</span>x400f0ef3<span class="hljs-selector-attr">[libc.so]</span><span class="hljs-number">0</span>x19ef3, syscall=null<br>java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.UnsupportedOperationException</span>: clk_id=<span class="hljs-number">2</span><br>at com<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.unidbg</span><span class="hljs-selector-class">.linux</span><span class="hljs-selector-class">.ARM32SyscallHandler</span><span class="hljs-selector-class">.clock_gettime</span>(ARM32SyscallHandler<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1746</span>)<br>at com<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.unidbg</span><span class="hljs-selector-class">.linux</span><span class="hljs-selector-class">.ARM32SyscallHandler</span><span class="hljs-selector-class">.hook</span>(ARM32SyscallHandler<span class="hljs-selector-class">.java</span>:<span class="hljs-number">409</span>)<br>at com<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.unidbg</span><span class="hljs-selector-class">.arm</span><span class="hljs-selector-class">.backend</span>.Unicorn2Backend$<span class="hljs-number">11</span><span class="hljs-selector-class">.hook</span>(Unicorn2Backend<span class="hljs-selector-class">.java</span>:<span class="hljs-number">347</span>)<br>at com<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.unidbg</span><span class="hljs-selector-class">.arm</span><span class="hljs-selector-class">.backend</span><span class="hljs-selector-class">.unicorn</span>.Unicorn<span class="hljs-variable">$NewHook</span><span class="hljs-selector-class">.onInterrupt</span>(Unicorn<span class="hljs-selector-class">.java</span>:<span class="hljs-number">109</span>)<br>at com<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.unidbg</span><span class="hljs-selector-class">.arm</span><span class="hljs-selector-class">.backend</span><span class="hljs-selector-class">.unicorn</span><span class="hljs-selector-class">.Unicorn</span><span class="hljs-selector-class">.emu_start</span>(Native Method)<br>at com<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.unidbg</span><span class="hljs-selector-class">.arm</span><span class="hljs-selector-class">.backend</span><span class="hljs-selector-class">.unicorn</span><span class="hljs-selector-class">.Unicorn</span><span class="hljs-selector-class">.emu_start</span>(Unicorn<span class="hljs-selector-class">.java</span>:<span class="hljs-number">312</span>)<br>at com<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.unidbg</span><span class="hljs-selector-class">.arm</span><span class="hljs-selector-class">.backend</span><span class="hljs-selector-class">.Unicorn2Backend</span><span class="hljs-selector-class">.emu_start</span>(Unicorn2Backend<span class="hljs-selector-class">.java</span>:<span class="hljs-number">384</span>)<br>at com<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.unidbg</span><span class="hljs-selector-class">.AbstractEmulator</span><span class="hljs-selector-class">.emulate</span>(AbstractEmulator<span class="hljs-selector-class">.java</span>:<span class="hljs-number">380</span>)<br></code></pre></td></tr></table></figure></li></ol><h3 id="方式1"><a href="#方式1" class="headerlink" title="方式1"></a>方式1</h3><ul><li>要么直接在报错位置即ARM32SyscallHandler函数的clock_gettime位置补全<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">switch</span> (clk_id) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-attr">CLOCK_REALTIME</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-attr">CLOCK_MONOTONIC</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-attr">CLOCK_MONOTONIC_RAW</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-attr">CLOCK_MONOTONIC_COARSE</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-attr">CLOCK_BOOTTIME</span>:<br>        tp.<span class="hljs-title function_">setInt</span>(<span class="hljs-number">0</span>, (int) tv_sec);<br>        tp.<span class="hljs-title function_">setInt</span>(<span class="hljs-number">4</span>, (int) tv_nsec);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-attr">CLOCK_THREAD_CPUTIME_ID</span>:<br>    <span class="hljs-comment">// 新增未实现的clk_id</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        tp.<span class="hljs-title function_">setInt</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        tp.<span class="hljs-title function_">setInt</span>(<span class="hljs-number">4</span>, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="方式2"><a href="#方式2" class="headerlink" title="方式2"></a>方式2</h3><ul><li>自实现SyscallHandler并绑定<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript">package com.<span class="hljs-property">shizhuang</span>.<span class="hljs-property">duapp</span>;<br><br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">Emulator</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">arm</span>.<span class="hljs-property">backend</span>.<span class="hljs-property">Backend</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">linux</span>.<span class="hljs-property">ARM32SyscallHandler</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">memory</span>.<span class="hljs-property">SvcMemory</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">pointer</span>.<span class="hljs-property">UnidbgPointer</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">sun</span>.<span class="hljs-property">jna</span>.<span class="hljs-property">Pointer</span>;<br><span class="hljs-keyword">import</span> unicorn.<span class="hljs-property">ArmConst</span>;<br><br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">deWuSyscallHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">ARM32SyscallHandler</span> &#123;<br>    public <span class="hljs-title function_">deWuSyscallHandler</span>(<span class="hljs-params">SvcMemory svcMemory</span>) &#123;<br>        <span class="hljs-variable language_">super</span>(svcMemory);<br>    &#125;<br><span class="hljs-comment">//    java.lang.UnsupportedOperationException: clk_id=2</span><br>    @<span class="hljs-title class_">Override</span><br>    protected int <span class="hljs-title function_">clock_gettime</span>(<span class="hljs-params">Backend backend, Emulator&lt;?&gt; emulator</span>) &#123;<br>        int clk_id = backend.<span class="hljs-title function_">reg_read</span>(<span class="hljs-title class_">ArmConst</span>.<span class="hljs-property">UC_ARM_REG_R0</span>).<span class="hljs-title function_">intValue</span>();<br>        <span class="hljs-title class_">Pointer</span> tp = <span class="hljs-title class_">UnidbgPointer</span>.<span class="hljs-title function_">register</span>(emulator, <span class="hljs-title class_">ArmConst</span>.<span class="hljs-property">UC_ARM_REG_R1</span>);<br>        <span class="hljs-keyword">if</span> (clk_id == <span class="hljs-number">2</span>) &#123;<br>            tp.<span class="hljs-title function_">setInt</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>            tp.<span class="hljs-title function_">setInt</span>(<span class="hljs-number">4</span>, <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">super</span>.<span class="hljs-title function_">clock_gettime</span>(backend, emulator);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/5.%20%E8%A1%A5%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/%E8%A1%A5%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E5%AE%9E%E7%8E%B0/loctl%E5%AE%9E%E7%8E%B0/"/>
    <url>/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/5.%20%E8%A1%A5%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/%E8%A1%A5%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E5%AE%9E%E7%8E%B0/loctl%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<ul><li><p>参考: <a href="https://www.yuque.com/lilac-2hqvv/xdwlsg/wsww25qka54fbnur">https://www.yuque.com/lilac-2hqvv/xdwlsg/wsww25qka54fbnur</a></p></li><li><p>不熟悉 ioctl 的读者可以看<a href="https://segmentfault.com/a/1190000005138358">这篇文章</a> ，在 Android Native 里，它<code>常用来获取 MAC 地址</code>。</p></li><li><p>它的参数 2 <code>request</code>用于指令操作类型，对于各种各样的文件和需求，有不同的<code>request</code>，Unidbg 实现了其中的一部分，但这里报错的 0x8927 尚未处理。</p></li><li><p>一个最简单的处理办法就是来到报错点<code>com.github.unidbg.file.AbstractFileIO.ioctl(AbstractFileIO.java:64)</code>，将抛出异常改为直接返回 -1，即函数调用失败之意。摆烂可耻但有用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">@<span class="hljs-title class_">Override</span><br>public int <span class="hljs-title function_">ioctl</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator, long request, long argp</span>) &#123;<br>    <span class="hljs-keyword">if</span> (log.<span class="hljs-title function_">isTraceEnabled</span>()) &#123;<br>        emulator.<span class="hljs-title function_">attach</span>().<span class="hljs-title function_">debug</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/5.%20%E8%A1%A5%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/%E8%A1%A5%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E5%AE%9E%E7%8E%B0/popen/"/>
    <url>/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/5.%20%E8%A1%A5%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/%E8%A1%A5%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E5%AE%9E%E7%8E%B0/popen/</url>
    
    <content type="html"><![CDATA[<p>参考：<a href="https://www.yuque.com/lilac-2hqvv/xdwlsg/wsww25qka54fbnur">https://www.yuque.com/lilac-2hqvv/xdwlsg/wsww25qka54fbnur</a></p><blockquote><p>通过libc.so的<code>popen()</code>管道从shell中获取系统属性，其效果可以理解成在NDK中使用adb shell。popen参数一就是shell命令，<code>返回值是一个fd文件描述符</code>，可以read其内容。system函数也可以做这一件事，<code>两者在底层都依赖于execve系统调用</code></p></blockquote><h1 id="什么场景下需要popen"><a href="#什么场景下需要popen" class="headerlink" title="什么场景下需要popen"></a>什么场景下需要popen</h1><ol><li>当发现调用号是vfork | dup X；其实是和popen相关</li><li><font color="#dc143c"> com.github.unidbg.linux.file.PipedWriteFileIO</font>报错，那么就应该直接转入处理popen的逻辑</li><li>没有提示没有报错但是不出来结果也需要酌情考虑</li></ol><h1 id="为什么会有上述现象"><a href="#为什么会有上述现象" class="headerlink" title="为什么会有上述现象"></a>为什么会有上述现象</h1><blockquote><p>popen 在底层原理上是创建了一个新进程，然后通过管道去做通信，返回数据。但 Unidbg 在多进程相关的系统调用处理上十分不完善，无法支撑popen正常的执行它的底层逻辑。</p></blockquote><h1 id="固定处理流程"><a href="#固定处理流程" class="headerlink" title="固定处理流程"></a>固定处理流程</h1><h2 id="1-获取到-popen-的-command"><a href="#1-获取到-popen-的-command" class="headerlink" title="1. 获取到 popen 的 command"></a>1. 获取到 popen 的 command</h2><h3 id="方式1"><a href="#方式1" class="headerlink" title="方式1"></a>方式1</h3><blockquote><p>用 Dobby 或任意 Hook 工具，在库函数的层面 Hook 获取到 popen 的 command，放到 emulator 的全局变量里</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript">public <span class="hljs-keyword">void</span> <span class="hljs-title function_">hookPopen</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title class_">IxHook</span> xHook = <span class="hljs-title class_">XHookImpl</span>.<span class="hljs-title function_">getInstance</span>(emulator);<br>        xHook.<span class="hljs-title function_">register</span>(<span class="hljs-string">&quot;libszstone.so&quot;</span>, <span class="hljs-string">&quot;popen&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReplaceCallback</span>() &#123;<br>            @<span class="hljs-title class_">Override</span><br>            public <span class="hljs-title class_">HookStatus</span> <span class="hljs-title function_">onCall</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator, HookContext context, long originFunction</span>) &#123;<br>                <span class="hljs-title class_">RegisterContext</span> registerContext = emulator.<span class="hljs-title function_">getContext</span>();<br>                <span class="hljs-title class_">String</span> command = registerContext.<span class="hljs-title function_">getPointerArg</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_">getString</span>(<span class="hljs-number">0</span>);<br>                emulator.<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;command&quot;</span>, command);<br>                <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;command:&quot;</span>+command);<br>                <span class="hljs-keyword">return</span> <span class="hljs-title class_">HookStatus</span>.<span class="hljs-title function_">RET</span>(emulator, originFunction);<br>            &#125;<br>        &#125;, <span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">// 使其生效</span><br>        xHook.<span class="hljs-title function_">refresh</span>();<br>    &#125;<br>    <br>public <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>) &#123;<br>        dewuNew dewuNew = <span class="hljs-keyword">new</span> <span class="hljs-title function_">dewuNew</span>();<br>        dewuNew.<span class="hljs-title function_">hookPopen</span>();<br>        dewuNew.<span class="hljs-title function_">call_fun</span>();<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="方式2"><a href="#方式2" class="headerlink" title="方式2"></a>方式2</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-comment">// 注意：在加载目标so前，先去加载libc.so，hook时机会早一点，省得遗漏。</span><br> <span class="hljs-comment">// 但须注意：它并非毫无副作用，我们的样本SO的基地址就并非0x40000000了，做算法分析时需要注意一下。</span><br><span class="hljs-title class_">DalvikModule</span> dmLibc = vm.<span class="hljs-title function_">loadLibrary</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;unidbg-android/src/main/resources/android/sdk23/lib/libc.so&quot;</span>), <span class="hljs-literal">true</span>);<br><span class="hljs-title class_">Module</span> moduleLibc = dmLibc.<span class="hljs-title function_">getModule</span>();<br><span class="hljs-comment">// HOOK popen</span><br>int popenAddress = (int) moduleLibc.<span class="hljs-title function_">findSymbolByName</span>(<span class="hljs-string">&quot;popen&quot;</span>).<span class="hljs-title function_">getAddress</span>();<br><span class="hljs-comment">// 函数原型：FILE *popen(const char *command, const char *type);</span><br>emulator.<span class="hljs-title function_">attach</span>().<span class="hljs-title function_">addBreakPoint</span>(popenAddress, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BreakPointCallback</span>() &#123;<br>    @<span class="hljs-title class_">Override</span><br>    public boolean <span class="hljs-title function_">onHit</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator, long address</span>) &#123;<br>        <span class="hljs-title class_">RegisterContext</span> registerContext = emulator.<span class="hljs-title function_">getContext</span>();<br>        <span class="hljs-title class_">String</span> command = registerContext.<span class="hljs-title function_">getPointerArg</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_">getString</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;lilac popen command:&quot;</span>+command);<br>        emulator.<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;command&quot;</span>,  command);           <span class="hljs-comment">// 如果传值，需要加上这句配合下面的方式 </span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="2-adb-shell里打印获取的command"><a href="#2-adb-shell里打印获取的command" class="headerlink" title="2. adb shell里打印获取的command"></a>2. adb shell里打印获取的command</h2><h2 id="3-系统调用端处理"><a href="#3-系统调用端处理" class="headerlink" title="3. 系统调用端处理"></a>3. 系统调用端处理</h2><blockquote><p>实现自己的ARM32SyscallHandler，方便给popen指定值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">Emulator</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">arm</span>.<span class="hljs-property">context</span>.<span class="hljs-property">EditableArm32RegisterContext</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">linux</span>.<span class="hljs-property">ARM32SyscallHandler</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">linux</span>.<span class="hljs-property">file</span>.<span class="hljs-property">ByteArrayFileIO</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">linux</span>.<span class="hljs-property">file</span>.<span class="hljs-property">DumpFileIO</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">memory</span>.<span class="hljs-property">SvcMemory</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">sun</span>.<span class="hljs-property">jna</span>.<span class="hljs-property">Pointer</span>;<br><br><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">concurrent</span>.<span class="hljs-property">ThreadLocalRandom</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MySyscallHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">ARM32SyscallHandler</span> &#123;<br><br>    public <span class="hljs-title class_">MySyscallHandler</span>(<span class="hljs-title class_">SvcMemory</span> svcMemory) &#123;<br>        <span class="hljs-variable language_">super</span>(svcMemory);<br>    &#125;<br><br>    @<span class="hljs-title class_">Override</span><br>    protected boolean <span class="hljs-title function_">handleUnknownSyscall</span>(<span class="hljs-params">Emulator emulator, int NR</span>) &#123;<br>        <span class="hljs-keyword">switch</span> (<span class="hljs-variable constant_">NR</span>) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">190</span>:<br>                <span class="hljs-title function_">vfork</span>(emulator);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">114</span>:<br>                <span class="hljs-title function_">wait4</span>(emulator);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><span class="hljs-comment">// case 359:</span><br><span class="hljs-comment">//                pipe2(emulator);</span><br><span class="hljs-comment">//                return true;</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">super</span>.<span class="hljs-title function_">handleUnknownSyscall</span>(emulator, <span class="hljs-variable constant_">NR</span>);<br>    &#125;<br><br>    private <span class="hljs-keyword">void</span> <span class="hljs-title function_">vfork</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator</span>) &#123;<br>        <span class="hljs-comment">// emulator.getUnwinder().unwind();  //打印调用栈</span><br>        <span class="hljs-title class_">EditableArm32RegisterContext</span> context = (<span class="hljs-title class_">EditableArm32RegisterContext</span>) emulator.<span class="hljs-title function_">getContext</span>();<br>        int childPid = emulator.<span class="hljs-title function_">getPid</span>() + <span class="hljs-title class_">ThreadLocalRandom</span>.<span class="hljs-title function_">current</span>().<span class="hljs-title function_">nextInt</span>(<span class="hljs-number">256</span>);<br>        int r0 = childPid;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;vfork pid=&quot;</span> + r0);<br>        context.<span class="hljs-title function_">setR0</span>(r0);<br>    &#125;<br><br>    private <span class="hljs-keyword">void</span> <span class="hljs-title function_">wait4</span>(<span class="hljs-params">Emulator emulator</span>) &#123;<br>        <span class="hljs-title class_">EditableArm32RegisterContext</span> context = (<span class="hljs-title class_">EditableArm32RegisterContext</span>) emulator.<span class="hljs-title function_">getContext</span>();<br>        int pid = context.<span class="hljs-title function_">getR0Int</span>();<br>        <span class="hljs-title class_">Pointer</span> wstatus = context.<span class="hljs-title function_">getR1Pointer</span>();<br>        int options = context.<span class="hljs-title function_">getR2Int</span>();<br>        <span class="hljs-title class_">Pointer</span> rusage = context.<span class="hljs-title function_">getR3Pointer</span>();<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;wait4 pid=&quot;</span> + pid + <span class="hljs-string">&quot;, wstatus=&quot;</span> + wstatus + <span class="hljs-string">&quot;, options=0x&quot;</span> + <span class="hljs-title class_">Integer</span>.<span class="hljs-title function_">toHexString</span>(options) + <span class="hljs-string">&quot;, rusage=&quot;</span> + rusage);<br>    &#125;<br><br>    protected int <span class="hljs-title function_">pipe2</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator</span>) &#123;<br>        <span class="hljs-title class_">EditableArm32RegisterContext</span> context = (<span class="hljs-title class_">EditableArm32RegisterContext</span>) emulator.<span class="hljs-title function_">getContext</span>();<br>        <span class="hljs-title class_">Pointer</span> pipefd = context.<span class="hljs-title function_">getPointerArg</span>(<span class="hljs-number">0</span>);<br>        int flags = context.<span class="hljs-title function_">getIntArg</span>(<span class="hljs-number">1</span>);<br>        int write = <span class="hljs-title function_">getMinFd</span>();<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">fdMap</span>.<span class="hljs-title function_">put</span>(write, <span class="hljs-keyword">new</span> <span class="hljs-title class_">DumpFileIO</span>(write));<br>        int read = <span class="hljs-title function_">getMinFd</span>();<br>        <span class="hljs-title class_">String</span> stdout = <span class="hljs-string">&quot;\n&quot;</span>;<br>        <span class="hljs-comment">// stdout中写入popen command 应该返回的结果</span><br>        <span class="hljs-title class_">String</span> command = emulator.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;command&quot;</span>);<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;command:&quot;</span> + command);<br>        <span class="hljs-keyword">switch</span> (command)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;cat /proc/sys/kernel/random/boot_id&quot;</span>:&#123;<br>                stdout = <span class="hljs-string">&quot;9ab5f193-ca2a-4d7e-8dc2-09e0ff1f257f\n&quot;</span>;<br>            &#125;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;ps&quot;</span>:&#123;<br>                <span class="hljs-title class_">String</span> psString = <span class="hljs-title function_">readToString</span>(<span class="hljs-string">&quot;unidbg-android/src/test/resources/tongdun/proc/ps&quot;</span>);<br>         stdout = psString + <span class="hljs-string">&quot;\n&quot;</span>;        <br>            &#125;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;uname -a&quot;</span>:&#123;<br>                stdout = <span class="hljs-string">&quot;Linux localhost 4.9.186-perf-gd3d6708 #1 SMP PREEMPT Wed Nov 4 01:05:59 CST 2020 aarch64\n&quot;</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;cd /system/bin &amp;&amp; ls -l&quot;</span>:&#123;<br>                stdout = <span class="hljs-string">&quot;total 25152\n&quot;</span> +<br>                        <span class="hljs-string">&quot;-rwxr-xr-x 1 root   shell     128688 2009-01-01 08:00 abb\n&quot;</span> +<br>                        <span class="hljs-string">&quot;lrwxr-xr-x 1 root   shell          6 2009-01-01 08:00 acpi -&gt; toybox\n&quot;</span> +<br>                        <span class="hljs-string">&quot;-rwxr-xr-x 1 root   shell      30240 2009-01-01 08:00 adbd\n&quot;</span> +<br>                        <span class="hljs-string">&quot;-rwxr-xr-x 1 root   shell        207 2009-01-01 08:00 am\n&quot;</span> +<br>                        <span class="hljs-string">&quot;-rwxr-xr-x 1 root   shell     456104 2009-01-01 08:00 apexd\n&quot;</span> +<br>                        <span class="hljs-string">&quot;lrwxr-xr-x 1 root   shell         13 2009-01-01 08:00 app_process -&gt; app_process64\n&quot;</span> +<br>                        <span class="hljs-string">&quot;-rwxr-xr-x 1 root   shell      25212 2009-01-01 08:00 app_process32\n&quot;</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;stat /root&quot;</span>:&#123;<br>                stdout = <span class="hljs-string">&quot;stat: &#x27;/root&#x27;: No such file or directory\n&quot;</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>            <span class="hljs-attr">default</span>:<br>                <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;command do not match!&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">fdMap</span>.<span class="hljs-title function_">put</span>(read, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayFileIO</span>(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;pipe2_read_side&quot;</span>, stdout.<span class="hljs-title function_">getBytes</span>()));<br>        pipefd.<span class="hljs-title function_">setInt</span>(<span class="hljs-number">0</span>, read);<br>        pipefd.<span class="hljs-title function_">setInt</span>(<span class="hljs-number">4</span>, write);<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;pipe2 pipefd=&quot;</span> + pipefd + <span class="hljs-string">&quot;, flags=0x&quot;</span> + flags + <span class="hljs-string">&quot;, read=&quot;</span> + read + <span class="hljs-string">&quot;, write=&quot;</span> + write + <span class="hljs-string">&quot;, stdout=&quot;</span> + stdout);<br>        context.<span class="hljs-title function_">setR0</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    public <span class="hljs-title class_">String</span> <span class="hljs-title function_">readToString</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> fileName</span>) &#123;<br>        <span class="hljs-title class_">String</span> encoding = <span class="hljs-string">&quot;UTF-8&quot;</span>;<br>        <span class="hljs-title class_">File</span> file = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(fileName);<br>        <span class="hljs-title class_">Long</span> filelength = file.<span class="hljs-title function_">length</span>();<br>        byte[] filecontent = <span class="hljs-keyword">new</span> byte[filelength.<span class="hljs-title function_">intValue</span>()];<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-title class_">FileInputStream</span> <span class="hljs-keyword">in</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);<br>            <span class="hljs-keyword">in</span>.<span class="hljs-title function_">read</span>(filecontent);<br>            <span class="hljs-keyword">in</span>.<span class="hljs-title function_">close</span>();<br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">IOException</span> e) &#123;<br>            e.<span class="hljs-title function_">printStackTrace</span>();<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(filecontent, encoding);<br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">UnsupportedEncodingException</span> e) &#123;<br>            <span class="hljs-title class_">System</span>.<span class="hljs-property">err</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;The OS does not support &quot;</span> + encoding);<br>            e.<span class="hljs-title function_">printStackTrace</span>();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-让emulator使用我们自定义的syscallHandler"><a href="#4-让emulator使用我们自定义的syscallHandler" class="headerlink" title="4. 让emulator使用我们自定义的syscallHandler"></a>4. 让emulator使用我们自定义的syscallHandler</h2><blockquote><p>接下来让我们的emulator使用我们自己的syscallHandler，<code>emulator = new AndroidARMEmulator(new File(&quot;target/rootfs&quot;))</code>; 由如下洋洋洒洒十来行取代。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">AndroidEmulatorBuilder</span> builder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AndroidEmulatorBuilder</span>(<span class="hljs-literal">false</span>) &#123;<br>        public <span class="hljs-title class_">AndroidEmulator</span> <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AndroidARMEmulator</span>(processName, rootDir,backendFactories) &#123;<br>                @<span class="hljs-title class_">Override</span><br>                protected <span class="hljs-title class_">UnixSyscallHandler</span>&lt;<span class="hljs-title class_">AndroidFileIO</span>&gt; <span class="hljs-title function_">createSyscallHandler</span>(<span class="hljs-params">SvcMemory svcMemory</span>) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MySyscallHandler</span>(svcMemory);<br>                &#125;<br>            &#125;;<br>        &#125;<br>    &#125;;<br>    emulator = builder<br>        .<span class="hljs-title function_">setRootDir</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;unidbg-android/src/test/resources/dewu/rootfs&quot;</span>))<br>        .<span class="hljs-title function_">addBackendFactory</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Unicorn2Factory</span>(<span class="hljs-literal">true</span>))<br>        .<span class="hljs-title function_">build</span>();<br></code></pre></td></tr></table></figure><h1 id="其他场景汇总"><a href="#其他场景汇总" class="headerlink" title="其他场景汇总"></a>其他场景汇总</h1><ul><li>注：下面的只是对知识补充，真实解决使用popen就行，因为这些问题都是popen衍生出来的。</li></ul><h2 id="NR-190：vfork"><a href="#NR-190：vfork" class="headerlink" title="NR&#x3D;190：vfork"></a>NR&#x3D;190：vfork</h2><ol><li>到<a href="https://chromium.googlesource.com/chromiumos/docs/+/master/constants/syscalls.md#arm-32_bit_EABI">https://chromium.googlesource.com/chromiumos/docs/+/master/constants/syscalls.md#arm-32_bit_EABI</a></li><li>以上这些NR值都是代表某一种系统掉用<br><img src="/blog/../../../../../../../../images/android/%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/1746524778414.jpg"></li><li>查看NR&#x3D;190代表什么，发现代表vfork</li><li>实现vfork<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">Emulator</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">arm</span>.<span class="hljs-property">context</span>.<span class="hljs-property">EditableArm32RegisterContext</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">linux</span>.<span class="hljs-property">ARM32SyscallHandler</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">memory</span>.<span class="hljs-property">SvcMemory</span>;<br><br><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">concurrent</span>.<span class="hljs-property">ThreadLocalRandom</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 我们的vfork只做了一件事，随机返回一个进程号，但我们啥都没有做，那个进程屁都没有。我们只能期待样本没有在新进程里做什么事，否则等待我们的只有报错，没办法，哎。</span><br><span class="hljs-comment">*/</span><br><br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyARM32SyscallHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">ARM32SyscallHandler</span> &#123;<br>    public <span class="hljs-title class_">MyARM32SyscallHandler</span>(<span class="hljs-title class_">SvcMemory</span> svcMemory) &#123;<br>        <span class="hljs-variable language_">super</span>(svcMemory);<br>    &#125;<br><br>    @<span class="hljs-title class_">Override</span><br>    protected boolean <span class="hljs-title function_">handleUnknownSyscall</span>(<span class="hljs-params">Emulator emulator, int NR</span>) &#123;<br>        <span class="hljs-keyword">switch</span> (<span class="hljs-variable constant_">NR</span>) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">190</span>:<br>                <span class="hljs-title function_">vfork</span>(emulator);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">super</span>.<span class="hljs-title function_">handleUnknownSyscall</span>(emulator, <span class="hljs-variable constant_">NR</span>);<br>    &#125;<br><br>    private <span class="hljs-keyword">void</span> <span class="hljs-title function_">vfork</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator</span>) &#123;<br>        <span class="hljs-title class_">EditableArm32RegisterContext</span> context = (<span class="hljs-title class_">EditableArm32RegisterContext</span>) emulator.<span class="hljs-title function_">getContext</span>();<br>        int childPid = emulator.<span class="hljs-title function_">getPid</span>() + <span class="hljs-title class_">ThreadLocalRandom</span>.<span class="hljs-title function_">current</span>().<span class="hljs-title function_">nextInt</span>(<span class="hljs-number">256</span>);<br>        int r0 = childPid;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;vfork pid=&quot;</span> + r0);<br>        context.<span class="hljs-title function_">setR0</span>(r0);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">shumei</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// 创建模拟器实例</span><br><span class="hljs-comment">//        emulator = AndroidEmulatorBuilder</span><br><span class="hljs-comment">//                .for32Bit()</span><br><span class="hljs-comment">//                .setRootDir(new File(&quot;target/rootfs&quot;))</span><br><span class="hljs-comment">//                .build();</span><br><br>        <span class="hljs-title class_">AndroidEmulatorBuilder</span> builder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AndroidEmulatorBuilder</span>(<span class="hljs-literal">false</span>) &#123;<br>            @<span class="hljs-title class_">Override</span><br>            public <span class="hljs-title class_">AndroidEmulator</span> <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AndroidARMEmulator</span>(processName, rootDir, backendFactories) &#123;<br>                    @<span class="hljs-title class_">Override</span><br>                    protected <span class="hljs-title class_">UnixSyscallHandler</span>&lt;<span class="hljs-title class_">AndroidFileIO</span>&gt; <span class="hljs-title function_">createSyscallHandler</span>(<span class="hljs-params">SvcMemory svcMemory</span>) &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyARM32SyscallHandler</span>(svcMemory);<br>                    &#125;<br>                &#125;;<br>            &#125;<br>            ;<br>        &#125;;<br>        emulator = builder.<span class="hljs-title function_">setRootDir</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;target/rootfs&quot;</span>)).<span class="hljs-title function_">build</span>();<br>        <span class="hljs-comment">// 获取模拟器的内存操作接口</span><br>        final <span class="hljs-title class_">Memory</span> memory = emulator.<span class="hljs-title function_">getMemory</span>();<br>        ....<br></code></pre></td></tr></table></figure><h2 id="dup2"><a href="#dup2" class="headerlink" title="dup2"></a>dup2</h2><p><img src="/blog/../../../../../../../../images/android/%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/1746524785946.jpg"></p><ul><li><p>都是NR&#x3D;190？</p></li><li><p>dup2用于复制一个文件描述符，它还有一些姊妹，可以看这篇文章<a href="https://blog.csdn.net/LOVETEDA/article/details/89021019">https://blog.csdn.net/LOVETEDA/article/details/89021019</a></p></li><li><p>报错的大意是com.github.unidbg.linux.file.PipedWriteFileIO没有实现这个dup2方法</p></li><li><p>那么有其他类型的文件形式实现了这个接口吗？可以借鉴一下吗？我们参考dumpfileIO，<strong>return this</strong> 完事儿。</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/5.%20%E8%A1%A5%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/2.%20%E8%A1%A5%E7%B3%BB%E7%BB%9F%E5%B1%9E%E6%80%A7/"/>
    <url>/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/5.%20%E8%A1%A5%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/2.%20%E8%A1%A5%E7%B3%BB%E7%BB%9F%E5%B1%9E%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="样本获取系统属性的方式"><a href="#样本获取系统属性的方式" class="headerlink" title="样本获取系统属性的方式"></a>样本获取系统属性的方式</h1><h3 id="方式1：JNI调用"><a href="#方式1：JNI调用" class="headerlink" title="方式1：JNI调用"></a>方式1：JNI调用</h3><ul><li>通过JNI调用JAVA方法获取本机的属性和信息，是最常见的做法，除了<code>Build类</code>，常见的还有<code>System.getProperty</code>和<code>Systemproperties.get</code>等API<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">@<span class="hljs-title class_">Override</span><br>public <span class="hljs-title class_">DvmObject</span>&lt;?&gt; <span class="hljs-title function_">getStaticObjectField</span>(<span class="hljs-params">BaseVM vm, DvmClass dvmClass, <span class="hljs-built_in">String</span> signature</span>) &#123;<br>    <span class="hljs-keyword">switch</span> (signature) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;android/os/Build-&gt;SERIAL:Ljava/lang/String;&quot;</span>:<br>            <span class="hljs-comment">// serial 的值</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringObject</span>(vm, <span class="hljs-string">&quot;xxxx&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">super</span>.<span class="hljs-title function_">getStaticObjectField</span>(vm, dvmClass, signature);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="方式2：system-property-get"><a href="#方式2：system-property-get" class="headerlink" title="方式2：system_property_get"></a>方式2：system_property_get</h3><ul><li>通过<code>system_property_get</code> 函数获取系统属性。这类环境缺失容易被大家忽视，因为没有日志提示，即使<code>src/test/resources/log4j.properties</code>中日志全开，也不会打印相关信息。有一些调用不用管，具体查看md文档</li><li>注：当样本通过__system_property_get 获取相关属性时，如果我们不做自定义的处理，它会试图从这个文件中读取，如果获取的属性在该文件中找不到，就返回空值</li></ul><p><img src="/blog/../../../../../../../images/android/%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/1746445818058.jpg"></p><ul><li>**<em>ro.debuggable 和 ro.secure 都非常重要，用来检测是否是root以及debug模式</em>**。<ul><li>secure为0时即root，</li><li>debuggable为1时即全局可调试，</li><li>我们返回相反的情况，伪装成无root无调试的机器。</li></ul></li></ul><h4 id="在使用上的注意点有两个"><a href="#在使用上的注意点有两个" class="headerlink" title="在使用上的注意点有两个"></a>在使用上的注意点有两个</h4><ol><li>是很多人会忘记<code>memory.addHookListener(systemPropertyHook);</code>这一步，不添加监听器拦截就不会生效，绝不能漏。 </li><li>放的时机晚于 <code>loadlibrary</code>，同样不会生效。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">SystemPropertyHook</span> systemPropertyHook = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SystemPropertyHook</span>(emulator);<br>systemPropertyHook.<span class="hljs-title function_">setPropertyProvider</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SystemPropertyProvider</span>() &#123;<br>    @<span class="hljs-title class_">Override</span><br>    public <span class="hljs-title class_">String</span> <span class="hljs-title function_">getProperty</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> key</span>) &#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;lilac Systemkey:&quot;</span>+key);<br>        <span class="hljs-keyword">switch</span> (key)&#123;&#125; <span class="hljs-comment">// 值可以通过getprop获取&lt;adb shell getprop&gt;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-comment">// throw new UnsupportedOperationException(key);  加上这个可以清楚看到漏了什么</span><br>    &#125;;<br>&#125;);<br>memory.<span class="hljs-title function_">addHookListener</span>(systemPropertyHook);<br></code></pre></td></tr></table></figure></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">String</span> propertyPath = <span class="hljs-string">&quot;unidbg-android/src/test/resources/greenTree/files/adbgetprop1.txt&quot;</span>;<br><span class="hljs-title class_">Map</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">String</span>&gt; propertyMapList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><span class="hljs-keyword">try</span> &#123;<br>    propertyMapList = <span class="hljs-title function_">getPropertyMap</span>(propertyPath);<br>&#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">IOException</span> e) &#123;<br>    e.<span class="hljs-title function_">printStackTrace</span>();<br>&#125;<br><span class="hljs-title class_">SystemPropertyHook</span> systemPropertyHook = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SystemPropertyHook</span>(emulator);<br>final <span class="hljs-title class_">Map</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">String</span>&gt; finalPropertyMapList = propertyMapList;<br>systemPropertyHook.<span class="hljs-title function_">setPropertyProvider</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SystemPropertyProvider</span>() &#123;<br>    @<span class="hljs-title class_">Override</span><br>    public <span class="hljs-title class_">String</span> <span class="hljs-title function_">getProperty</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> key</span>) &#123;<br>        <span class="hljs-comment">// 这里lib 会获取一些系统属性</span><br>        <span class="hljs-comment">// ro.kernel.qemu 和 libc.debug.malloc不用管</span><br>        <span class="hljs-comment">// 通过adb shell getprop 可以获得全部所需信息</span><br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;fuck key:&quot;</span>+key);<br>        <span class="hljs-keyword">return</span> finalPropertyMapList.<span class="hljs-title function_">get</span>(key);<br>    &#125;<br>&#125;);<br>emulator.<span class="hljs-title function_">getMemory</span>().<span class="hljs-title function_">addHookListener</span>(systemPropertyHook);<br><br>private <span class="hljs-title class_">Map</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">getPropertyMap</span>(<span class="hljs-title class_">String</span> path) throws <span class="hljs-title class_">IOException</span> &#123;<br>        <span class="hljs-title class_">File</span> file = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path);<br>        <span class="hljs-keyword">if</span> (!file.<span class="hljs-title function_">exists</span>())<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Not File!&quot;</span>);<br>        <span class="hljs-title class_">BufferedReader</span> br = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(file));<br>        <span class="hljs-title class_">String</span> str;<br>        <span class="hljs-title class_">Map</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">String</span>&gt; m = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">while</span> ((str = br.<span class="hljs-title function_">readLine</span>()) != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">//                System.out.println(str);</span><br>                <span class="hljs-title class_">String</span>[] splitStr = str.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;: &quot;</span>);<br>                <span class="hljs-title class_">String</span> key = splitStr[<span class="hljs-number">0</span>].<span class="hljs-title function_">replaceAll</span>(<span class="hljs-string">&quot;\\[|\\]&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>                <span class="hljs-title class_">String</span> value = splitStr[<span class="hljs-number">1</span>].<span class="hljs-title function_">replaceAll</span>(<span class="hljs-string">&quot;\\[|\\]&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>                m.<span class="hljs-title function_">put</span>(key, value);<br>            &#125;<span class="hljs-keyword">catch</span> (<span class="hljs-title class_">Exception</span> ignored) &#123;&#125;<br>        &#125;;<br>        <span class="hljs-keyword">return</span> m;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="方式3：文件访问"><a href="#方式3：文件访问" class="headerlink" title="方式3：文件访问"></a>方式3：文件访问</h3><ul><li>比如读取&#x2F;proc&#x2F;pid&#x2F;maps，参考文件访问笔记</li></ul><h3 id="方式4：getenv"><a href="#方式4：getenv" class="headerlink" title="方式4：getenv"></a>方式4：getenv</h3><ul><li>通过 getenv函数 获取进程环境变量，参考pdf文档的四种方式</li></ul><h3 id="方式5：系统调用"><a href="#方式5：系统调用" class="headerlink" title="方式5：系统调用"></a>方式5：系统调用</h3><ul><li>使用系统调用获取相关属性，<code>不管是通过syscall函数还是内联汇编，都属此类</code>。日志全开的情况下，系统调用的相关调用会被全部打印，大家看仔细一些就没什么问题。常见的比如uname系统调用。Unidbg的uname系统调用实现是个很好也很简单的检测点，十分规范的表明了自己是Unidbg</li></ul><p></p><h3 id="方式6：ioctl-问题"><a href="#方式6：ioctl-问题" class="headerlink" title="方式6：ioctl 问题"></a>方式6：ioctl 问题</h3><ul><li>ioctl 问题。即样本通过 ioctl 获取硬件地址等数据，但Unidbg中并不支持相关特性。事实上，我们也没必要给程序返回这部分数据，所以直接hook ioctl，返回 -1即可。参考patch ioctl</li></ul><h3 id="方式7：popen-管道"><a href="#方式7：popen-管道" class="headerlink" title="方式7：popen()管道"></a>方式7：popen()管道</h3><ul><li>通过<code>libc.so的popen()管道从shell中获取系统属性，其效果可以理解成在NDK中使用adb shell</code>。<strong>popen参数一就是shell命令，返回值是一个fd文件描述符</strong>，可以read其内容。system函数也可以做这一件事，<strong>两者在底层都依赖于execve系统调用</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 注意：在加载目标so前，先去加载libc.so，hook时机会早一点，省得遗漏。</span><br> <span class="hljs-comment">// 但须注意：它并非毫无副作用，我们的样本SO的基地址就并非0x40000000了，做算法分析时需要注意一下。</span><br><span class="hljs-title class_">DalvikModule</span> dmLibc = vm.<span class="hljs-title function_">loadLibrary</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;unidbg-android/src/main/resources/android/sdk23/lib/libc.so&quot;</span>), <span class="hljs-literal">true</span>);<br><span class="hljs-title class_">Module</span> moduleLibc = dmLibc.<span class="hljs-title function_">getModule</span>();<br><span class="hljs-comment">// HOOK popen</span><br>int popenAddress = (int) moduleLibc.<span class="hljs-title function_">findSymbolByName</span>(<span class="hljs-string">&quot;popen&quot;</span>).<span class="hljs-title function_">getAddress</span>();<br><span class="hljs-comment">// 函数原型：FILE *popen(const char *command, const char *type);</span><br>emulator.<span class="hljs-title function_">attach</span>().<span class="hljs-title function_">addBreakPoint</span>(popenAddress, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BreakPointCallback</span>() &#123;<br>    @<span class="hljs-title class_">Override</span><br>    public boolean <span class="hljs-title function_">onHit</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator, long address</span>) &#123;<br>        <span class="hljs-title class_">RegisterContext</span> registerContext = emulator.<span class="hljs-title function_">getContext</span>();<br>        <span class="hljs-title class_">String</span> command = registerContext.<span class="hljs-title function_">getPointerArg</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_">getString</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;lilac popen command:&quot;</span>+command);<br>        emulator.<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;command&quot;</span>,  command);           <span class="hljs-comment">// 如果传值，需要加上这句配合下面的方式 </span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure></li><li>实现自己的ARM32SyscallHandler，方便给popen指定值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">Emulator</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">arm</span>.<span class="hljs-property">context</span>.<span class="hljs-property">EditableArm32RegisterContext</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">linux</span>.<span class="hljs-property">ARM32SyscallHandler</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">linux</span>.<span class="hljs-property">file</span>.<span class="hljs-property">ByteArrayFileIO</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">linux</span>.<span class="hljs-property">file</span>.<span class="hljs-property">DumpFileIO</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">memory</span>.<span class="hljs-property">SvcMemory</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">sun</span>.<span class="hljs-property">jna</span>.<span class="hljs-property">Pointer</span>;<br><br><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">concurrent</span>.<span class="hljs-property">ThreadLocalRandom</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MySyscallHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">ARM32SyscallHandler</span> &#123;<br><br>    public <span class="hljs-title class_">MySyscallHandler</span>(<span class="hljs-title class_">SvcMemory</span> svcMemory) &#123;<br>        <span class="hljs-variable language_">super</span>(svcMemory);<br>    &#125;<br><br>    @<span class="hljs-title class_">Override</span><br>    protected boolean <span class="hljs-title function_">handleUnknownSyscall</span>(<span class="hljs-params">Emulator emulator, int NR</span>) &#123;<br>        <span class="hljs-keyword">switch</span> (<span class="hljs-variable constant_">NR</span>) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">190</span>:<br>                <span class="hljs-title function_">vfork</span>(emulator);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">114</span>:<br>                <span class="hljs-title function_">wait4</span>(emulator);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><span class="hljs-comment">// case 359:</span><br><span class="hljs-comment">//                pipe2(emulator);</span><br><span class="hljs-comment">//                return true;</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">super</span>.<span class="hljs-title function_">handleUnknownSyscall</span>(emulator, <span class="hljs-variable constant_">NR</span>);<br>    &#125;<br><br>    private <span class="hljs-keyword">void</span> <span class="hljs-title function_">vfork</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator</span>) &#123;<br>        <span class="hljs-comment">// emulator.getUnwinder().unwind();  //打印调用栈</span><br>        <span class="hljs-title class_">EditableArm32RegisterContext</span> context = (<span class="hljs-title class_">EditableArm32RegisterContext</span>) emulator.<span class="hljs-title function_">getContext</span>();<br>        int childPid = emulator.<span class="hljs-title function_">getPid</span>() + <span class="hljs-title class_">ThreadLocalRandom</span>.<span class="hljs-title function_">current</span>().<span class="hljs-title function_">nextInt</span>(<span class="hljs-number">256</span>);<br>        int r0 = childPid;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;vfork pid=&quot;</span> + r0);<br>        context.<span class="hljs-title function_">setR0</span>(r0);<br>    &#125;<br><br>    private <span class="hljs-keyword">void</span> <span class="hljs-title function_">wait4</span>(<span class="hljs-params">Emulator emulator</span>) &#123;<br>        <span class="hljs-title class_">EditableArm32RegisterContext</span> context = (<span class="hljs-title class_">EditableArm32RegisterContext</span>) emulator.<span class="hljs-title function_">getContext</span>();<br>        int pid = context.<span class="hljs-title function_">getR0Int</span>();<br>        <span class="hljs-title class_">Pointer</span> wstatus = context.<span class="hljs-title function_">getR1Pointer</span>();<br>        int options = context.<span class="hljs-title function_">getR2Int</span>();<br>        <span class="hljs-title class_">Pointer</span> rusage = context.<span class="hljs-title function_">getR3Pointer</span>();<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;wait4 pid=&quot;</span> + pid + <span class="hljs-string">&quot;, wstatus=&quot;</span> + wstatus + <span class="hljs-string">&quot;, options=0x&quot;</span> + <span class="hljs-title class_">Integer</span>.<span class="hljs-title function_">toHexString</span>(options) + <span class="hljs-string">&quot;, rusage=&quot;</span> + rusage);<br>    &#125;<br><br>    protected int <span class="hljs-title function_">pipe2</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator</span>) &#123;<br>        <span class="hljs-title class_">EditableArm32RegisterContext</span> context = (<span class="hljs-title class_">EditableArm32RegisterContext</span>) emulator.<span class="hljs-title function_">getContext</span>();<br>        <span class="hljs-title class_">Pointer</span> pipefd = context.<span class="hljs-title function_">getPointerArg</span>(<span class="hljs-number">0</span>);<br>        int flags = context.<span class="hljs-title function_">getIntArg</span>(<span class="hljs-number">1</span>);<br>        int write = <span class="hljs-title function_">getMinFd</span>();<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">fdMap</span>.<span class="hljs-title function_">put</span>(write, <span class="hljs-keyword">new</span> <span class="hljs-title class_">DumpFileIO</span>(write));<br>        int read = <span class="hljs-title function_">getMinFd</span>();<br>        <span class="hljs-title class_">String</span> stdout = <span class="hljs-string">&quot;\n&quot;</span>;<br>        <span class="hljs-comment">// stdout中写入popen command 应该返回的结果</span><br>        <span class="hljs-title class_">String</span> command = emulator.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;command&quot;</span>);<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;command:&quot;</span> + command);<br>        <span class="hljs-keyword">switch</span> (command)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;cat /proc/sys/kernel/random/boot_id&quot;</span>:&#123;<br>                stdout = <span class="hljs-string">&quot;9ab5f193-ca2a-4d7e-8dc2-09e0ff1f257f\n&quot;</span>;<br>            &#125;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;ps&quot;</span>:&#123;<br>                <span class="hljs-title class_">String</span> psString = <span class="hljs-title function_">readToString</span>(<span class="hljs-string">&quot;unidbg-android/src/test/resources/tongdun/proc/ps&quot;</span>);<br>         stdout = psString + <span class="hljs-string">&quot;\n&quot;</span>;        <br>            &#125;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;uname -a&quot;</span>:&#123;<br>                stdout = <span class="hljs-string">&quot;Linux localhost 4.9.186-perf-gd3d6708 #1 SMP PREEMPT Wed Nov 4 01:05:59 CST 2020 aarch64\n&quot;</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;cd /system/bin &amp;&amp; ls -l&quot;</span>:&#123;<br>                stdout = <span class="hljs-string">&quot;total 25152\n&quot;</span> +<br>                        <span class="hljs-string">&quot;-rwxr-xr-x 1 root   shell     128688 2009-01-01 08:00 abb\n&quot;</span> +<br>                        <span class="hljs-string">&quot;lrwxr-xr-x 1 root   shell          6 2009-01-01 08:00 acpi -&gt; toybox\n&quot;</span> +<br>                        <span class="hljs-string">&quot;-rwxr-xr-x 1 root   shell      30240 2009-01-01 08:00 adbd\n&quot;</span> +<br>                        <span class="hljs-string">&quot;-rwxr-xr-x 1 root   shell        207 2009-01-01 08:00 am\n&quot;</span> +<br>                        <span class="hljs-string">&quot;-rwxr-xr-x 1 root   shell     456104 2009-01-01 08:00 apexd\n&quot;</span> +<br>                        <span class="hljs-string">&quot;lrwxr-xr-x 1 root   shell         13 2009-01-01 08:00 app_process -&gt; app_process64\n&quot;</span> +<br>                        <span class="hljs-string">&quot;-rwxr-xr-x 1 root   shell      25212 2009-01-01 08:00 app_process32\n&quot;</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;stat /root&quot;</span>:&#123;<br>                stdout = <span class="hljs-string">&quot;stat: &#x27;/root&#x27;: No such file or directory\n&quot;</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>            <span class="hljs-attr">default</span>:<br>                <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;command do not match!&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">fdMap</span>.<span class="hljs-title function_">put</span>(read, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayFileIO</span>(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;pipe2_read_side&quot;</span>, stdout.<span class="hljs-title function_">getBytes</span>()));<br>        pipefd.<span class="hljs-title function_">setInt</span>(<span class="hljs-number">0</span>, read);<br>        pipefd.<span class="hljs-title function_">setInt</span>(<span class="hljs-number">4</span>, write);<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;pipe2 pipefd=&quot;</span> + pipefd + <span class="hljs-string">&quot;, flags=0x&quot;</span> + flags + <span class="hljs-string">&quot;, read=&quot;</span> + read + <span class="hljs-string">&quot;, write=&quot;</span> + write + <span class="hljs-string">&quot;, stdout=&quot;</span> + stdout);<br>        context.<span class="hljs-title function_">setR0</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    public <span class="hljs-title class_">String</span> <span class="hljs-title function_">readToString</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> fileName</span>) &#123;<br>        <span class="hljs-title class_">String</span> encoding = <span class="hljs-string">&quot;UTF-8&quot;</span>;<br>        <span class="hljs-title class_">File</span> file = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(fileName);<br>        <span class="hljs-title class_">Long</span> filelength = file.<span class="hljs-title function_">length</span>();<br>        byte[] filecontent = <span class="hljs-keyword">new</span> byte[filelength.<span class="hljs-title function_">intValue</span>()];<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-title class_">FileInputStream</span> <span class="hljs-keyword">in</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);<br>            <span class="hljs-keyword">in</span>.<span class="hljs-title function_">read</span>(filecontent);<br>            <span class="hljs-keyword">in</span>.<span class="hljs-title function_">close</span>();<br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">IOException</span> e) &#123;<br>            e.<span class="hljs-title function_">printStackTrace</span>();<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(filecontent, encoding);<br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">UnsupportedEncodingException</span> e) &#123;<br>            <span class="hljs-title class_">System</span>.<span class="hljs-property">err</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;The OS does not support &quot;</span> + encoding);<br>            e.<span class="hljs-title function_">printStackTrace</span>();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>接下来让我们的emulator使用我们自己的syscallHandler，emulator &#x3D; new AndroidARMEmulator(new File(“target&#x2F;rootfs”)); 由如下洋洋洒洒十来行取代。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">AndroidEmulatorBuilder</span> builder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AndroidEmulatorBuilder</span>(<span class="hljs-literal">false</span>) &#123;<br>    public <span class="hljs-title class_">AndroidEmulator</span> <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AndroidARMEmulator</span>(processName, rootDir, backendFactories) &#123;<br>            @<span class="hljs-title class_">Override</span><br>            protected <span class="hljs-title class_">UnixSyscallHandler</span>&lt;<span class="hljs-title class_">AndroidFileIO</span>&gt;<br>            <span class="hljs-title function_">createSyscallHandler</span>(<span class="hljs-params">SvcMemory svcMemory</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MySyscallHandler</span>(svcMemory);<br>            &#125;<br>        &#125;;<br>    &#125;<br>&#125;;<br><br>emulator = builder.<span class="hljs-title function_">setRootDir</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;target/rootfs&quot;</span>)).<span class="hljs-title function_">build</span>();<br></code></pre></td></tr></table></figure></li></ul><h1 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h1><blockquote><p>png &gt; pdf: <img src="/blog/../../../../../../../images/android/%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E5%B1%9E%E6%80%A7%E6%80%8E%E4%B9%88%E8%A1%A5.png"></p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/5.%20%E8%A1%A5%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/1.%20%E8%A1%A5%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%B5%81%E7%A8%8B/"/>
    <url>/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/5.%20%E8%A1%A5%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/1.%20%E8%A1%A5%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="通用流程"><a href="#通用流程" class="headerlink" title="通用流程"></a>通用流程</h1><ol><li><code>判断是否为系统调用</code>：看报错，当svcNumber&#x3D;0；intro&#x3D;2&lt;svc 软中断&gt;，syscall还为null考虑需要补系统调用</li><li><code>判断是什么系统调用</code>：NR值去对<a href="https://chromium.googlesource.com/chromiumos/docs/+/master/constants/syscalls.md#arm64-64_bit">系统调用对照表64位</a> | <a href="https://chromium.googlesource.com/chromiumos/docs/+/master/constants/syscalls.md#arm-32_bit_EABI">系统调用对照表32位</a>  查看是什么系统调用</li><li>查看PC 和 LR, 分别看看<code>样本方调用位置&lt;LR&gt;</code>，<code>库函数方调用位置&lt;PC&gt;</code><blockquote><p>举例：</p><p>PC 是 libc 的 0x6a3d4 地址处，将src&#x2F;main&#x2F;resources&#x2F;android&#x2F;sdk23&#x2F;lib64&#x2F;libc.so从 Unidbg 里拷贝出来，放到 IDA 里解析（千万不要从手机里 pull 出 libc 然后分析，这是明朝的剑斩清朝的官）。</p><p>LR 是我们的样例，地址是 0x770</p><p>这件事其实很清楚，涉及到三方。</p><p>首先是样本方，它其实就是访问了一个库函数，叫getrusage，通过它获取了一些数据。</p><p>其次是库函数方，libc 调用getrusage，发现它其实只是对同名系统调用getrusage的简单包装。</p><p>最后是 Unidbg 方，它需要模拟执行 getruage 函数，但是这个函数没有模拟。对应unidbg实现其他系统调用的位置： <strong><code>unidbg-android/src/main/java/com/github/unidbg/linux/ARM32SyscallHandler.java</code></strong></p></blockquote></li><li>补系统调用</li></ol><ul><li>实现系统调用方法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript">package com.<span class="hljs-property">example</span>;<br><br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">Emulator</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">linux</span>.<span class="hljs-property">ARM64SyscallHandler</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">memory</span>.<span class="hljs-property">SvcMemory</span>;<br><br><span class="hljs-comment">// 我们的样例是 64 位的，所以这里继承自ARM64SyscallHandler，否则应该继承ARM32SyscallHandler</span><br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoARM64SyscallHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">ARM64SyscallHandler</span> &#123;<br>    public <span class="hljs-title class_">DemoARM64SyscallHandler</span>(<span class="hljs-title class_">SvcMemory</span> svcMemory) &#123;<br>        <span class="hljs-variable language_">super</span>(svcMemory);<br>    &#125;<br>    <span class="hljs-comment">// 处理尚未模拟实现的系统调用</span><br>    @<span class="hljs-title class_">Override</span><br>    protected boolean <span class="hljs-title function_">handleUnknownSyscall</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator, int NR</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable constant_">NR</span> == <span class="hljs-number">165</span>) &#123;<br>            <span class="hljs-title function_">getrusage</span>(emulator);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">super</span>.<span class="hljs-title function_">handleUnknownSyscall</span>(emulator, <span class="hljs-variable constant_">NR</span>);<br>    &#125;<br>    private <span class="hljs-keyword">void</span> <span class="hljs-title function_">getrusage</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator</span>)&#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>接下来在目标类里做一些修改，使用我们自己的<code>DemoARM64SyscallHandler</code>。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript">public <span class="hljs-title class_">Demo</span>() &#123;<br>        <span class="hljs-comment">// 创建模拟器实例</span><br>        <span class="hljs-title class_">AndroidEmulatorBuilder</span> builder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AndroidEmulatorBuilder</span>(<span class="hljs-literal">true</span>)&#123;<br>            @<span class="hljs-title class_">Override</span><br>            public <span class="hljs-title class_">AndroidEmulator</span> <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AndroidARM64Emulator</span>(processName,rootDir,backendFactories) &#123;<br>                    @<span class="hljs-title class_">Override</span><br>                    protected <span class="hljs-title class_">UnixSyscallHandler</span>&lt;<span class="hljs-title class_">AndroidFileIO</span>&gt; <span class="hljs-title function_">createSyscallHandler</span>(<span class="hljs-params">SvcMemory svcMemory</span>) &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DemoARM64SyscallHandler</span>(svcMemory);<br>                    &#125;<br>                &#125;;<br>            &#125;<br>        &#125;;<br><br><span class="hljs-comment">/*      // arm32位需要这么写</span><br><span class="hljs-comment">        AndroidEmulatorBuilder builder = new AndroidEmulatorBuilder(false)&#123;</span><br><span class="hljs-comment">            @Override</span><br><span class="hljs-comment">            public AndroidEmulator build() &#123;</span><br><span class="hljs-comment">                return new AndroidARMEmulator(processName,rootDir,backendFactories) &#123;</span><br><span class="hljs-comment">                    @Override</span><br><span class="hljs-comment">                    protected UnixSyscallHandler&lt;AndroidFileIO&gt; createSyscallHandler(SvcMemory svcMemory) &#123;</span><br><span class="hljs-comment">                        return new DemoARM64SyscallHandler(svcMemory);</span><br><span class="hljs-comment">                    &#125;</span><br><span class="hljs-comment">                &#125;;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">        &#125;;*/</span><br><br>        emulator = builder<br>                .<span class="hljs-title function_">addBackendFactory</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Unicorn2Factory</span>(<span class="hljs-literal">true</span>))<br>                .<span class="hljs-title function_">build</span>();<br></code></pre></td></tr></table></figure></li><li>然后实现各系统调用逻辑<blockquote><p>对于补动态的、实时变化的系统调用数据如getrusage，模拟其实没有什么好办法去处理。随机返回值可以带来动态，但它又会缺少合理性。因此事实上，在实现这类系统调用时，往往会选择“摆烂”: </p><ol><li><p>从真机 dump 下来一份数据，然后硬编码返回，参考：uname&#x2F;sysinfo</p></li><li><p>给与一定的灵活性，由用户自己填充这个结构体；参考：sysinfo&#x2F;uname</p></li></ol><p>具体两种思路的实现可以参考getrusage实现</p><p>参考：<a href="https://www.yuque.com/lilac-2hqvv/xdwlsg/mh6re2qy0xg421ho#">https://www.yuque.com/lilac-2hqvv/xdwlsg/mh6re2qy0xg421ho#</a></p></blockquote></li></ul><h1 id="案例解析"><a href="#案例解析" class="headerlink" title="案例解析"></a>案例解析</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Find</span> native <span class="hljs-keyword">function</span> <span class="hljs-title class_">Java</span>_com_example_demo_MainActivity_stringFromJNI =&gt; <span class="hljs-variable constant_">RX</span>@<span class="hljs-number">0x4000073c</span>[libdemo.<span class="hljs-property">so</span>]<span class="hljs-number">0x73c</span><br>[<span class="hljs-number">00</span>:<span class="hljs-number">46</span>:<span class="hljs-number">49</span> <span class="hljs-number">186</span>]  <span class="hljs-variable constant_">WARN</span> [com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">linux</span>.<span class="hljs-property">ARM64SyscallHandler</span>] (<span class="hljs-title class_">ARM64SyscallHandler</span>:<span class="hljs-number">399</span>) - handleInterrupt intno=<span class="hljs-number">2</span>, <span class="hljs-variable constant_">NR</span>=<span class="hljs-number">165</span>, svcNumber=<span class="hljs-number">0x0</span>, <span class="hljs-variable constant_">PC</span>=<span class="hljs-variable constant_">RX</span>@<span class="hljs-number">0x401ba3d4</span>[libc.<span class="hljs-property">so</span>]<span class="hljs-number">0x6a3d4</span>, <span class="hljs-variable constant_">LR</span>=<span class="hljs-variable constant_">RX</span>@<span class="hljs-number">0x40000770</span>[libdemo.<span class="hljs-property">so</span>]<span class="hljs-number">0x770</span>, syscall=<span class="hljs-literal">null</span><br>exit <span class="hljs-keyword">with</span> <span class="hljs-attr">code</span>: <span class="hljs-number">1</span><br><span class="hljs-attr">FORTIFY</span>: <span class="hljs-attr">vsprintf</span>: prevented write past end <span class="hljs-keyword">of</span> buffer<br>[crash]A/<span class="hljs-attr">libc</span>: <span class="hljs-attr">FORTIFY</span>: <span class="hljs-attr">vsprintf</span>: prevented write past end <span class="hljs-keyword">of</span> buffer<br><span class="hljs-title class_">Exception</span> <span class="hljs-keyword">in</span> thread <span class="hljs-string">&quot;main&quot;</span> java.<span class="hljs-property">lang</span>.<span class="hljs-property">NullPointerException</span>: <span class="hljs-title class_">Cannot</span> invoke <span class="hljs-string">&quot;com.github.unidbg.linux.android.dvm.DvmObject.getValue()&quot;</span> because the <span class="hljs-keyword">return</span> value <span class="hljs-keyword">of</span> <span class="hljs-string">&quot;com.github.unidbg.linux.android.dvm.DvmObject.callJniMethodObject(com.github.unidbg.Emulator, String, Object[])&quot;</span> is <span class="hljs-literal">null</span><br>at com.<span class="hljs-property">example</span>.<span class="hljs-property">Demo</span>.<span class="hljs-title function_">call</span>(<span class="hljs-title class_">Demo</span>.<span class="hljs-property">java</span>:<span class="hljs-number">38</span>)<br>at com.<span class="hljs-property">example</span>.<span class="hljs-property">Demo</span>.<span class="hljs-title function_">main</span>(<span class="hljs-title class_">Demo</span>.<span class="hljs-property">java</span>:<span class="hljs-number">43</span>)<br></code></pre></td></tr></table></figure><ul><li>遇到报错必须得从上往下看，因为下面报错可能是“果”，上面的报错是“因”。因此顶部WARN才是最首先的报错</li></ul><h3 id="涉及字段解析"><a href="#涉及字段解析" class="headerlink" title="涉及字段解析"></a>涉及字段解析</h3><h4 id="intno"><a href="#intno" class="headerlink" title="intno"></a>intno</h4><ul><li>into是异常类型，异常有很多种，比如未定义的指令，软中断、软断点等等，Unidbg 或者说 Unicorn 里对它们的定义如下：<blockquote><p>int EXCP_UDEF &#x3D; 1; &#x2F;* undefined instruction &#x2F;</p><p>int EXCP_SWI &#x3D; 2; &#x2F; software interrupt &#x2F;</p><p>int EXCP_BKPT &#x3D; 7; &#x2F; software breakpoint *&#x2F;</p></blockquote></li><li>**<code>SVC指令就是软中断</code>**，对应于定义里的EXCP_SWI，我们熟悉的系统调用就是通过它发起。因此<code>如果into的值是 2，就说明这是一个软中断，也就是系统调用。</code></li><li>如果是其他中断类型，即未定义的指令或者软件中断，在 Unidbg 里会直接断下，交由用户处置，但很少碰到这两种情况。</li></ul><h4 id="NR"><a href="#NR" class="headerlink" title="NR"></a>NR</h4><ul><li><font color=#FF000 >NR 就是所谓的调用号，32 位存在 R7 寄存器，64 位存在 X8 寄存器</font></li><li>在更多时候，<code>我们都需要根据这个值查看系统调用表，以便确定到底是哪个系统调用出了问题</code>。比如这里是 64 位下的 165 调用号。访问系统调用对照表，确认它是 getrusage 这个系统调用</li></ul><h4 id="svcNumber"><a href="#svcNumber" class="headerlink" title="svcNumber"></a>svcNumber</h4><ul><li><p>svcNumber，是SVC指令后面跟着的数字；这个值有什么用：</p></li><li><p>在前文我们说过，SVC后面跟着的值，也就是SWI，它并无实际意义，而且约定俗成为 0。</p></li><li><p>那么为什么 Unidbg 还要解析出这个值呢？</p><ul><li>事实上，这是因为 Unidbg 并不仅仅用SVC指令去处理系统调用。</li><li>它还用 SVC 指令去做 JNI 跳板函数以及函数 Hook，其中 JNI 跳板函数这一块用到了SWI；</li><li><font color=#FF000>解析SWI，如果这个立即数不为 0 ，那么就是一处 JNI 跳板函数而非系统调用</font></li></ul></li><li><p>判断WARN是JNI调用还是系统调用: JNI 报错以及系统调用都报错于xxxSyscallHandler的原因，分辨两者也很简单。 </p><ul><li><code>是svcNumber是否为 0，解析SWI，如果这个立即数不为 0 ，那么就是一处 JNI 跳板函数而非系统调用</code>，然后根据立即数的具体值确定是哪一个 JNI 函数。换句话说，在 Unidbg 里，JNI 调用被“提升”到了和系统调用相同的级别，这就可以解释为什么 JNI 报错也发生在 syscallHandler 这件事了。 </li><li>是xxxSyscallHandler报错后面是否跟着来自AbstractJni 的经典异常</li></ul></li></ul><h4 id="PC-LR"><a href="#PC-LR" class="headerlink" title="PC&#x2F;LR"></a>PC&#x2F;LR</h4><ul><li>PC 和 LR 自不必说，即报错所对应的 SO 中的发生地址以及这个地址所处函数的返回地址。</li></ul><h4 id="syscall"><a href="#syscall" class="headerlink" title="syscall"></a>syscall</h4><ul><li>syscall字段用于记录发起了什么系统调用，但unidbg没有列出很多的系统调用，所以报错时候大部分这里为null</li></ul><p><font color=#FF000 >红色</font><br><font color=#008000 >绿色</font><br><font color=#FFFF00 >黄色</font></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/4.%20%E8%A1%A5%E5%BA%93%E5%87%BD%E6%95%B0/%E8%A1%A5%E5%BA%93%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0/getEnv/"/>
    <url>/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/4.%20%E8%A1%A5%E5%BA%93%E5%87%BD%E6%95%B0/%E8%A1%A5%E5%BA%93%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0/getEnv/</url>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>_Android是基于Linux内核的操作系统，存在系统环境变量这一概念_，如下通过adb shell 查看系统环境变量的key和value。<br>_每个Android进程会继承系统环境变量_，除此之外，也可以通过如下API增删环境变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// java层</span><br>public <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setenv</span>(<span class="hljs-title class_">String</span> name, <span class="hljs-title class_">String</span> value, boolean overwrite);<br>public <span class="hljs-keyword">static</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getenv</span>(<span class="hljs-title class_">String</span> name);<br><span class="hljs-comment">// so层</span><br>int <span class="hljs-title function_">setenv</span>(<span class="hljs-keyword">const</span> char *name, <span class="hljs-keyword">const</span> char *value, int overwrite);<br>char *<span class="hljs-title function_">getenv</span>(<span class="hljs-keyword">const</span> char *name);<br></code></pre></td></tr></table></figure><p>我们可以<code>设置进程环境变量，在目标函数中检测或使用此环境变量，如果不存在，说明目标函数的执行环境就存在问题</code>，有可能由Unidbg执行或者重打包SO 单独Call。</p><h1 id="现象总结"><a href="#现象总结" class="headerlink" title="现象总结"></a>现象总结</h1><ul><li>getenv()用来取得参数envvar环境变量的内容。参数为环境变量的名称，如果该变量存在则会返回指向该内容的指针，如果不存在则返回null。</li><li>此处就是getenv没取到值，但样本的程序里没有考虑取不到值的情况，所以strlen(null)报错。</li><li>为什么会我们取不到值呢？<ul><li>Android存在一些默认的系统环境变量，除此之外我们还可以自己增加环境变量。</li><li>但是Unidbg没有这些环境变量，这就导致得不到结果啦。我们可以通过adb 查看自己机子的环境变量</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs shell">C:\Users\pr0214&gt;adb shell<br>bullhead:/ $ export<br>ANDROID_ASSETS<br>ANDROID_BOOTLOGO<br>ANDROID_DATA<br>ANDROID_ROOT<br>ANDROID_SOCKET_adbd<br>ANDROID_STORAGE<br>ASEC_MOUNTPOINT<br>BOOTCLASSPATH<br>DOWNLOAD_CACHE<br>EXTERNAL_STORAGE<br>HOME<br>HOSTNAME<br>LOGNAME<br>PATH<br>SHELL<br>SYSTEMSERVERCLASSPATH<br>TERM<br>TMPDIR<br>USER<br>bullhead:/ $ echo $HOME<br>/<br>bullhead:/ $ echo $ANDROID_DATA<br>/data<br>bullhead:/ $ echo $SYSTEMSERVERCLASSPATH<br>/system/framework/services.jar:/system/framework/ethernet-service.jar:/system/framework/wifi-service.jar:/system/framework/com.android.location.provider.jar<br>bullhead:/ $ echo $PATH<br>/sbin:/system/sbin:/system/bin:/system/xbin:/vendor/bin:/vendor/xbin<br>bullhead:/ $<br></code></pre></td></tr></table></figure><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ol><li><p>方式1：在 <code>src/main/java/com/github/unidbg/linux/AndroidElfLoader.java</code> 中增加系统环境变量是最简单的办法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">public <span class="hljs-title class_">AndroidElfLoader</span>(<span class="hljs-title class_">Emulator</span>&lt;<span class="hljs-title class_">AndroidFileIO</span>&gt; emulator, <span class="hljs-title class_">UnixSyscallHandler</span>&lt;<span class="hljs-title class_">AndroidFileIO</span>&gt; syscallHandler) &#123;<br>    <span class="hljs-variable language_">super</span>(emulator, syscallHandler);<br><br>    <span class="hljs-comment">// init stack</span><br>    stackSize = <span class="hljs-variable constant_">STACK_SIZE_OF_PAGE</span> * emulator.<span class="hljs-title function_">getPageAlign</span>();<br>    backend.<span class="hljs-title function_">mem_map</span>(<span class="hljs-variable constant_">STACK_BASE</span> - stackSize, stackSize, <span class="hljs-title class_">UnicornConst</span>.<span class="hljs-property">UC_PROT_READ</span> | <span class="hljs-title class_">UnicornConst</span>.<span class="hljs-property">UC_PROT_WRITE</span>);<br><br>    <span class="hljs-title function_">setStackPoint</span>(<span class="hljs-variable constant_">STACK_BASE</span>);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">environ</span> = <span class="hljs-title function_">initializeTLS</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123;<br>            <span class="hljs-string">&quot;ANDROID_DATA=/data&quot;</span>,<br>            <span class="hljs-string">&quot;ANDROID_ROOT=/system&quot;</span>,<br>            <span class="hljs-string">&quot;PATH=/sbin:/vendor/bin:/system/sbin:/system/bin:/system/xbin&quot;</span><br>    &#125;);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setErrno</span>(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure></li><li><p>方式2：call setenv 添加环境变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">public <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEnv</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title class_">Symbol</span> setenv = <span class="hljs-variable language_">module</span>.<span class="hljs-title function_">findSymbolByName</span>(<span class="hljs-string">&quot;setenv&quot;</span>, <span class="hljs-literal">true</span>);<br>        setenv.<span class="hljs-title function_">call</span>(emulator, <span class="hljs-string">&quot;PATH&quot;</span>, <span class="hljs-string">&quot;/sbin:/system/sbin:/system/bin:/system/xbin:/vendor/bin:/vendor/xbin&quot;</span>, <span class="hljs-number">0</span>);<br>    &#125;;<br></code></pre></td></tr></table></figure></li><li><p>方式3：hook getenv 返回正确环境变量</p></li></ol><ul><li>但考虑一个问题，如果没有setenv函数怎么办，毕竟不是所有的get都有对应的set。所以方法二就是Hook了。即Hook getEnv函数，将返回值改成正确的。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript">public <span class="hljs-keyword">void</span> <span class="hljs-title function_">hookgetEnv</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title class_">IHookZz</span> hookZz = <span class="hljs-title class_">HookZz</span>.<span class="hljs-title function_">getInstance</span>(emulator);<br><br>    hookZz.<span class="hljs-title function_">wrap</span>(<span class="hljs-variable language_">module</span>.<span class="hljs-title function_">findSymbolByName</span>(<span class="hljs-string">&quot;getenv&quot;</span>), <span class="hljs-keyword">new</span> <span class="hljs-title class_">WrapCallback</span>&lt;<span class="hljs-title class_">EditableArm32RegisterContext</span>&gt;() &#123;<br>        <span class="hljs-title class_">String</span> name;<br>        @<span class="hljs-title class_">Override</span><br>        public <span class="hljs-keyword">void</span> <span class="hljs-title function_">preCall</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator, EditableArm32RegisterContext ctx, HookEntryInfo info</span>) &#123;<br>            name = ctx.<span class="hljs-title function_">getPointerArg</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_">getString</span>(<span class="hljs-number">0</span>);<br>        &#125;<br>        @<span class="hljs-title class_">Override</span><br>        public <span class="hljs-keyword">void</span> <span class="hljs-title function_">postCall</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator, EditableArm32RegisterContext ctx, HookEntryInfo info</span>) &#123;<br>            <span class="hljs-keyword">switch</span> (name)&#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;PATH&quot;</span>:&#123;<br>                    <span class="hljs-title class_">MemoryBlock</span> replaceBlock = memory.<span class="hljs-title function_">malloc</span>(<span class="hljs-number">0x100</span>, <span class="hljs-literal">true</span>);<br>                    <span class="hljs-title class_">UnidbgPointer</span> replacePtr = replaceBlock.<span class="hljs-title function_">getPointer</span>();<br>                    <span class="hljs-title class_">String</span> pathValue = <span class="hljs-string">&quot;/sbin:/system/sbin:/system/bin:/system/xbin:/vendor/bin:/vendor/xbin&quot;</span>;<br>                    replacePtr.<span class="hljs-title function_">write</span>(<span class="hljs-number">0</span>, pathValue.<span class="hljs-title function_">getBytes</span>(<span class="hljs-title class_">StandardCharsets</span>.<span class="hljs-property">UTF_8</span>), <span class="hljs-number">0</span>, pathValue.<span class="hljs-title function_">length</span>());<br>                    ctx.<span class="hljs-title function_">setR0</span>(replacePtr.<span class="hljs-title function_">toIntPeer</span>());<br>                &#125;<br>            &#125;<br><br>        &#125;<br>    &#125;);<br>&#125;;<br><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/4.%20%E8%A1%A5%E5%BA%93%E5%87%BD%E6%95%B0/%E8%A1%A5%E5%BA%93%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0/dladdr/"/>
    <url>/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/4.%20%E8%A1%A5%E5%BA%93%E5%87%BD%E6%95%B0/%E8%A1%A5%E5%BA%93%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0/dladdr/</url>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> ( <span class="hljs-title function_">dladdr</span>(&amp;__system_property_get, &amp;v21) )<br>    &#123;<br>      v3 = v21;<br>      <span class="hljs-keyword">if</span> ( !v21 || !*v21 )<br>        v3 = <span class="hljs-string">&quot;/system/lib/libc.so&quot;</span>;<br>      <span class="hljs-title function_">sub_49F8</span>((int)v23, v3);<br>    &#125;<br></code></pre></td></tr></table></figure><ul><li><p><code>dladdr</code>函数用于<code>获取某个地址的符号信息</code>，地址address的符号信息返回在dlip这个Dl_info结构体中。</p><blockquote><p>int dladdr(void *address, Dl_info *dlip);</p></blockquote></li><li><p>来看一下Dl_info结构体的定义</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">struct &#123;<br><span class="hljs-keyword">const</span> char *dli_fname;　　<span class="hljs-comment">//address所位于的SO文件其路径名</span><br><span class="hljs-keyword">void</span> *dli_fbase;<br><span class="hljs-keyword">const</span> char *dli_sname;<br><span class="hljs-keyword">void</span> *dli_saddr;<br>size_t dli_size; <span class="hljs-comment">/* ELF only */</span><br>int dli_bind; <span class="hljs-comment">/* ELF only */</span><br>int dli_type;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>那么代码逻辑即在获取__system_property_get函数所处的模块路径名，其字符串赋给v3，如果dladdr调用失败，则v3赋值为”&#x2F;system&#x2F;lib&#x2F;libc.so”。</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/4.%20%E8%A1%A5%E5%BA%93%E5%87%BD%E6%95%B0/%E8%A1%A5%E5%BA%93%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0/sysinfo/"/>
    <url>/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/4.%20%E8%A1%A5%E5%BA%93%E5%87%BD%E6%95%B0/%E8%A1%A5%E5%BA%93%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0/sysinfo/</url>
    
    <content type="html"><![CDATA[<h1 id="sysinfo函数"><a href="#sysinfo函数" class="headerlink" title="sysinfo函数"></a>sysinfo函数</h1><ul><li>作用：<code>函数功能为获取系统信息，信息返回在入参sysinfo结构体中</code>。</li><li>函数声明和原型：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/sysinfo.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sysinfo</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> sysinfo *info)</span></span>;<br></code></pre></td></tr></table></figure></li><li>sysinfo结构体<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript">struct sysinfo &#123;<br>  __kernel_long_t uptime;  <span class="hljs-comment">// uptime为开机至今经过的秒数</span><br>  __kernel_ulong_t loads[<span class="hljs-number">3</span>];<br>  __kernel_ulong_t totalram;<br>  __kernel_ulong_t freeram;<br>  __kernel_ulong_t sharedram;<br>  __kernel_ulong_t bufferram;<br>  __kernel_ulong_t totalswap;<br>  __kernel_ulong_t freeswap;<br>  __u16 procs;<br>  __u16 pad;<br>  __kernel_ulong_t totalhigh;<br>  __kernel_ulong_t freehigh;<br>  __u32 mem_unit;<br>  char _f[<span class="hljs-number">20</span> - <span class="hljs-number">2</span> * <span class="hljs-title function_">sizeof</span>(__kernel_ulong_t) - <span class="hljs-title function_">sizeof</span>(__u32)];<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h2 id="case"><a href="#case" class="headerlink" title="case"></a>case</h2><ul><li>sub_11AB0调用了sysinfo后，使用了结构体中的uptime字段，uptime为开机至今经过的秒数。 sub_11AB0又调用time函数获取了当前时间戳，减去uptime后，即启动时的时间戳。 逻辑搞清楚了，那么在Unidbg中存在什么问题呢？</li><li><code>sysinfo函数在底层依赖于同名sysinfo系统调用</code>，在Unidbg中实现如下<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">private int <span class="hljs-title function_">sysinfo</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator</span>) &#123;<br>    <span class="hljs-title class_">Arm32RegisterContext</span> context = emulator.<span class="hljs-title function_">getContext</span>();<br>    <span class="hljs-title class_">Pointer</span> info = context.<span class="hljs-title function_">getR0Pointer</span>();<br>    <span class="hljs-keyword">if</span> (log.<span class="hljs-title function_">isDebugEnabled</span>()) &#123;<br>        log.<span class="hljs-title function_">debug</span>(<span class="hljs-string">&quot;sysinfo info=&quot;</span> + info);<br>    &#125;<br>    <span class="hljs-title class_">SysInfo32</span> sysInfo32 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SysInfo32</span>(info);<br>    <span class="hljs-comment">// 写入sysinfo结构体</span><br>    sysInfo32.<span class="hljs-title function_">pack</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>动态调试可以发现，Sysinfo32结构体并没有初始化，全部填充0。</li><li>因此如果什么都不做，Unidbg中获取到的设备开机时间总是当前时刻，这显然是不合理的。</li><li>修改<code>src/main/java/com/github/unidbg/linux/struct/SysInfo32</code>文件，uptime赋值如下:<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript">package com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">linux</span>.<span class="hljs-property">struct</span>;<br><br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">pointer</span>.<span class="hljs-property">UnidbgStructure</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">sun</span>.<span class="hljs-property">jna</span>.<span class="hljs-property">Pointer</span>;<br><br><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">Arrays</span>;<br><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">List</span>;<br><br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">SysInfo32</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">UnidbgStructure</span> &#123;<br><br>    public <span class="hljs-title class_">SysInfo32</span>(<span class="hljs-title class_">Pointer</span> p) &#123;<br>        <span class="hljs-variable language_">super</span>(p);<br>    &#125;<br><br>    <span class="hljs-comment">// 启动至今3600秒</span><br>    public int uptime = <span class="hljs-number">3600</span>;<br>    public int[] loads = <span class="hljs-keyword">new</span> int[<span class="hljs-number">3</span>];<br>    public int totalRam;<br>    public int freeRam;<br>    public int sharedRam;<br>    public int bufferRam;<br>    public int totalSwap;<br>    public int freeSwap;<br>    public short procs;<br>    public short pad;<br>    public int totalHigh;<br>    public int freeHigh;<br>    public int mem_unit;<br>    public byte[] _f = <span class="hljs-keyword">new</span> byte[<span class="hljs-number">8</span>];<br><br>    @<span class="hljs-title class_">Override</span><br>    protected <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">getFieldOrder</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Arrays</span>.<span class="hljs-title function_">asList</span>(<span class="hljs-string">&quot;uptime&quot;</span>, <span class="hljs-string">&quot;loads&quot;</span>, <span class="hljs-string">&quot;totalRam&quot;</span>, <span class="hljs-string">&quot;freeRam&quot;</span>, <span class="hljs-string">&quot;sharedRam&quot;</span>, <span class="hljs-string">&quot;bufferRam&quot;</span>, <span class="hljs-string">&quot;totalSwap&quot;</span>, <span class="hljs-string">&quot;freeSwap&quot;</span>, <span class="hljs-string">&quot;procs&quot;</span>, <span class="hljs-string">&quot;pad&quot;</span>, <span class="hljs-string">&quot;totalHigh&quot;</span>, <span class="hljs-string">&quot;freeHigh&quot;</span>, <span class="hljs-string">&quot;mem_unit&quot;</span>, <span class="hljs-string">&quot;_f&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/4.%20%E8%A1%A5%E5%BA%93%E5%87%BD%E6%95%B0/%E8%A1%A5%E5%BA%93%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0/pthread_create/"/>
    <url>/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/4.%20%E8%A1%A5%E5%BA%93%E5%87%BD%E6%95%B0/%E8%A1%A5%E5%BA%93%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0/pthread_create/</url>
    
    <content type="html"><![CDATA[<h1 id="pthread-create"><a href="#pthread-create" class="headerlink" title="pthread_create"></a>pthread_create</h1><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul><li>多线程创建函数pthread_create</li></ul><h3 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h3><ul><li>运行代码，可以看到飘红报错<blockquote><p>[main]W&#x2F;libc: pthread_create failed: clone failed: Out of memory</p></blockquote></li><li>如果样本调用了<code>多线程创建函数pthread_create</code>，但 Unidbg 未开启多线程处理逻辑，就会报这个错。所以打开多线程逻辑即可</li></ul><h3 id="这个报错背后的原理"><a href="#这个报错背后的原理" class="headerlink" title="这个报错背后的原理"></a>这个报错背后的原理</h3><ul><li>事实上，样本在调用pthread_create创建新线程时，会最终走到clone系统调用，在 Unidbg 中对应于 bionic_clone 函数，对应于下面这段逻辑。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (threadDispatcherEnabled) &#123;<br>    <span class="hljs-keyword">if</span> (verbose) &#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">printf</span>(<span class="hljs-string">&quot;bionic_clone fn=%s%n&quot;</span>, fn);<br>    &#125;<br>    emulator.<span class="hljs-title function_">getThreadDispatcher</span>().<span class="hljs-title function_">addThread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MarshmallowThread</span>(emulator, fn, arg, ctid, threadId));<br>    ctid.<span class="hljs-title function_">setInt</span>(<span class="hljs-number">0</span>, threadId);<br>    <span class="hljs-keyword">return</span> threadId;<br>&#125;<br>emulator.<span class="hljs-title function_">getMemory</span>().<span class="hljs-title function_">setErrno</span>(<span class="hljs-title class_">UnixEmulator</span>.<span class="hljs-property">ENOMEM</span>);<br><span class="hljs-keyword">return</span> -<span class="hljs-title class_">UnixEmulator</span>.<span class="hljs-property">ENOMEM</span>;<br></code></pre></td></tr></table></figure></li><li>即如果打开了多线程，就添加新线程，进入调度逻辑，否则就设置错误码为ENOMEM，它进而导致Out of memory的报错，提醒我们开启多线程处理逻辑。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript">public interface <span class="hljs-title class_">UnixEmulator</span> &#123;<br>    int <span class="hljs-variable constant_">EPERM</span> = <span class="hljs-number">1</span>; <span class="hljs-comment">/* Operation not permitted */</span><br>    int <span class="hljs-variable constant_">ENOENT</span> = <span class="hljs-number">2</span>; <span class="hljs-comment">/* No such file or directory */</span><br>    int <span class="hljs-variable constant_">ESRCH</span> = <span class="hljs-number">3</span>; <span class="hljs-comment">/* No such process */</span><br>    int <span class="hljs-variable constant_">EINTR</span> = <span class="hljs-number">4</span>; <span class="hljs-comment">/* Interrupted system call */</span><br>    int <span class="hljs-variable constant_">EBADF</span> = <span class="hljs-number">9</span>; <span class="hljs-comment">/* Bad file descriptor */</span><br>    int <span class="hljs-variable constant_">EAGAIN</span> = <span class="hljs-number">11</span>; <span class="hljs-comment">/* Resource temporarily unavailable */</span><br>    int <span class="hljs-variable constant_">ENOMEM</span> = <span class="hljs-number">12</span>; <span class="hljs-comment">/* Cannot allocate memory */</span><br>    int <span class="hljs-variable constant_">EACCES</span> = <span class="hljs-number">13</span>; <span class="hljs-comment">/* Permission denied */</span><br>    int <span class="hljs-variable constant_">EFAULT</span> = <span class="hljs-number">14</span>; <span class="hljs-comment">/* Bad address */</span><br>    int <span class="hljs-variable constant_">EEXIST</span> = <span class="hljs-number">17</span>; <span class="hljs-comment">/* File exists */</span><br>    int <span class="hljs-variable constant_">ENOTDIR</span> = <span class="hljs-number">20</span>; <span class="hljs-comment">/* Not a directory */</span><br>    int <span class="hljs-variable constant_">EINVAL</span> = <span class="hljs-number">22</span>; <span class="hljs-comment">/* Invalid argument */</span><br>    int <span class="hljs-variable constant_">ENOTTY</span> = <span class="hljs-number">25</span>; <span class="hljs-comment">/* Inappropriate ioctl for device */</span><br>    int <span class="hljs-variable constant_">ENOSYS</span> = <span class="hljs-number">38</span>; <span class="hljs-comment">/* Function not implemented */</span><br>    int <span class="hljs-variable constant_">ENOATTR</span> = <span class="hljs-number">93</span>; <span class="hljs-comment">/* Attribute not found */</span><br>    int <span class="hljs-variable constant_">EOPNOTSUPP</span> = <span class="hljs-number">95</span>; <span class="hljs-comment">/* Operation not supported on transport endpoint */</span><br>    int <span class="hljs-variable constant_">EAFNOSUPPORT</span> = <span class="hljs-number">97</span>; <span class="hljs-comment">/* Address family not supported by protocol family */</span><br>    int <span class="hljs-variable constant_">EADDRINUSE</span> = <span class="hljs-number">98</span>; <span class="hljs-comment">/* Address already in use */</span><br>    int <span class="hljs-variable constant_">ECONNREFUSED</span> = <span class="hljs-number">111</span>; <span class="hljs-comment">/* Connection refused */</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/4.%20%E8%A1%A5%E5%BA%93%E5%87%BD%E6%95%B0/%E8%A1%A5%E5%BA%93%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0/munmap/"/>
    <url>/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/4.%20%E8%A1%A5%E5%BA%93%E5%87%BD%E6%95%B0/%E8%A1%A5%E5%BA%93%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0/munmap/</url>
    
    <content type="html"><![CDATA[<ul><li><p>参考：<a href="https://www.yuque.com/lilac-2hqvv/xdwlsg/bzoykwvuim3hkz2o">https://www.yuque.com/lilac-2hqvv/xdwlsg/bzoykwvuim3hkz2o</a></p></li><li><p>munmap ，它的实现位于<code>src/main/java/com/github/unidbg/spi/AbstractLoader.java</code>。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">if</span> (segment == <span class="hljs-keyword">null</span> || segment.<span class="hljs-keyword">size</span> &lt; aligned) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(<span class="hljs-string">&quot;munmap aligned=0x&quot;</span> + <span class="hljs-keyword">Long</span>.toHexString(aligned) + <span class="hljs-string">&quot;, start=0x&quot;</span> + <span class="hljs-keyword">Long</span>.toHexString(start));<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>如果在上面这个位置抛出异常，直接注释掉throw即可，在很多时候可以解决问题</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/4.%20%E8%A1%A5%E5%BA%93%E5%87%BD%E6%95%B0/%E8%A1%A5%E5%BA%93%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0/ioctl/"/>
    <url>/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/4.%20%E8%A1%A5%E5%BA%93%E5%87%BD%E6%95%B0/%E8%A1%A5%E5%BA%93%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0/ioctl/</url>
    
    <content type="html"><![CDATA[<ul><li>思路1：详见补系统调用</li></ul><ol><li>hook&lt;推荐&gt;<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">public <span class="hljs-keyword">void</span> <span class="hljs-title function_">hookioctl</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">//获取 HookZz 实例</span><br>    <span class="hljs-title class_">HookZz</span> hookZz = <span class="hljs-title class_">HookZz</span>.<span class="hljs-title function_">getInstance</span>(emulator);<br>    <span class="hljs-comment">//创建 replace 回调</span><br>    <span class="hljs-title class_">ReplaceCallback</span> replaceCallback = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReplaceCallback</span>() &#123;<br>        @<span class="hljs-title class_">Override</span><br>        public <span class="hljs-title class_">HookStatus</span> <span class="hljs-title function_">onCall</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator, HookContext context, long originFunction</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-title class_">HookStatus</span>.<span class="hljs-title function_">LR</span>(emulator, -<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;;<br>    hookZz.<span class="hljs-title function_">replace</span>(<span class="hljs-variable language_">module</span>.<span class="hljs-title function_">findSymbolByName</span>(<span class="hljs-string">&quot;ioctl&quot;</span>), replaceCallback);<br>&#125;<br></code></pre></td></tr></table></figure></li><li>patch<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript">public <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleIoctl</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title class_">Symbol</span> ioctlSymbol = <span class="hljs-variable language_">module</span>.<span class="hljs-title function_">findSymbolByName</span>(<span class="hljs-string">&quot;ioctl&quot;</span>);<br>    emulator.<span class="hljs-title function_">attach</span>().<span class="hljs-title function_">addBreakPoint</span>(ioctlSymbol.<span class="hljs-title function_">getAddress</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">BreakPointCallback</span>() &#123;<br>        @<span class="hljs-title class_">Override</span><br>        public boolean <span class="hljs-title function_">onHit</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator, long address</span>) &#123;<br>            <span class="hljs-comment">// 顺利则返回0</span><br>            <span class="hljs-title class_">RegisterContext</span> registerContext = emulator.<span class="hljs-title function_">getContext</span>();<br>            int requestId = registerContext.<span class="hljs-title function_">getIntByReg</span>(<span class="hljs-title class_">ArmConst</span>.<span class="hljs-property">UC_ARM_REG_R1</span>);<br>            <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;requestID:&quot;</span>+<span class="hljs-title class_">Integer</span>.<span class="hljs-title function_">toHexString</span>(requestId));<br>            <span class="hljs-comment">// #define SIOCGIFHWADDR 0x8927 /* Get hardware address */</span><br>            <span class="hljs-keyword">if</span>(requestId==<span class="hljs-number">0x8927</span>)&#123;<br>                emulator.<span class="hljs-title function_">getBackend</span>().<span class="hljs-title function_">reg_write</span>(<span class="hljs-title class_">ArmConst</span>.<span class="hljs-property">UC_ARM_REG_R0</span>, -<span class="hljs-number">1</span>);<br>                emulator.<span class="hljs-title function_">getBackend</span>().<span class="hljs-title function_">reg_write</span>(<span class="hljs-title class_">ArmConst</span>.<span class="hljs-property">UC_ARM_REG_PC</span>, registerContext.<span class="hljs-title function_">getLRPointer</span>().<span class="hljs-property">peer</span>);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/4.%20%E8%A1%A5%E5%BA%93%E5%87%BD%E6%95%B0/%E8%A1%A5%E5%BA%93%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0/getuid/"/>
    <url>/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/4.%20%E8%A1%A5%E5%BA%93%E5%87%BD%E6%95%B0/%E8%A1%A5%E5%BA%93%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0/getuid/</url>
    
    <content type="html"><![CDATA[<ul><li>参考同盾项目</li></ul><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-comment">// 获取uid</span><br><span class="hljs-comment">// https://blog.csdn.net/huilin9960/article/details/81530568</span><br><span class="hljs-comment">// unidbg输出是0，所以要改</span><br><span class="hljs-keyword">long</span> getuidAddress = mymodule.findSymbolByName(<span class="hljs-string">&quot;getuid&quot;</span>).getAddress();<br>emulator.attach().addBreakPoint(getuidAddress, <span class="hljs-keyword">new</span> BreakPointCallback() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">onHit</span><span class="hljs-params">(Emulator&lt;?&gt; emulator, <span class="hljs-keyword">long</span> address)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> uid = <span class="hljs-number">10256</span>;<br>        System.out.println(<span class="hljs-string">&quot;getuid:&quot;</span>+uid);<br>        emulator.getBackend().reg_write(ArmConst.UC_ARM_REG_PC, registerContext.getLRPointer().peer);<br>        emulator.getBackend().reg_write(ArmConst.UC_ARM_REG_R0, uid);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/4.%20%E8%A1%A5%E5%BA%93%E5%87%BD%E6%95%B0/%E8%A1%A5%E5%BA%93%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0/free/"/>
    <url>/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/4.%20%E8%A1%A5%E5%BA%93%E5%87%BD%E6%95%B0/%E8%A1%A5%E5%BA%93%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0/free/</url>
    
    <content type="html"><![CDATA[<ul><li>参考：<a href="https://www.yuque.com/lilac-2hqvv/xdwlsg/bzoykwvuim3hkz2o">https://www.yuque.com/lilac-2hqvv/xdwlsg/bzoykwvuim3hkz2o</a></li></ul><h3 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a>函数原型</h3><ul><li>free 函数是重要的内存释放函数，原型如下。<blockquote><p>void free(void *ptr)</p></blockquote></li></ul><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li>Unidbg 在内存管理方面存在一些问题，在内存的释放上尤为明显，munmap 以及 free 都有不低的出错概率。先讨论 free，常见报错如下。<figure class="highlight irpf90"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs irpf90">Invalid address <span class="hljs-number">0</span>x40175000 passed to <span class="hljs-keyword">free</span>: <span class="hljs-keyword">value</span> not <span class="hljs-built_in">allocated</span><br>[crash]A/libc: Invalid address <span class="hljs-number">0</span>x40175000 passed to <span class="hljs-keyword">free</span>: <span class="hljs-keyword">value</span> not <span class="hljs-built_in">allocated</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>这个时候最简单的处理办法就是 hook free 函数，替换它的实现，让它什么都不做就直接返回。这里我用 Whale 来实现，让它直接返回，且返回值是 0，即释放成功之意。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">public <span class="hljs-keyword">void</span> <span class="hljs-title function_">patchFree</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title class_">IWhale</span> whale = <span class="hljs-title class_">Whale</span>.<span class="hljs-title function_">getInstance</span>(emulator);<br>    <span class="hljs-title class_">Symbol</span> free = emulator.<span class="hljs-title function_">getMemory</span>().<span class="hljs-title function_">findModule</span>(<span class="hljs-string">&quot;libc.so&quot;</span>).<span class="hljs-title function_">findSymbolByName</span>(<span class="hljs-string">&quot;free&quot;</span>);<br>    whale.<span class="hljs-title function_">inlineHookFunction</span>(free, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReplaceCallback</span>() &#123;<br>        @<span class="hljs-title class_">Override</span><br>        public <span class="hljs-title class_">HookStatus</span> <span class="hljs-title function_">onCall</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator, long originFunction</span>) &#123;<br>            <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;WInlineHookFunction free=&quot;</span> + emulator.<span class="hljs-title function_">getContext</span>().<span class="hljs-title function_">getPointerArg</span>(<span class="hljs-number">0</span>));<br>            <span class="hljs-keyword">return</span> <span class="hljs-title class_">HookStatus</span>.<span class="hljs-title function_">LR</span>(emulator, <span class="hljs-number">0</span>);<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure></li><li>你可能会觉得这么做有一些浪费，很多应该释放的内存没有得到释放，那么也可以根据报错，对报错的待释放内存做处理，比如只有指针地址是 0x40175000、0x40176000 的两处释放失败时，代码如下。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript">public <span class="hljs-keyword">void</span> <span class="hljs-title function_">patchFree</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title class_">IWhale</span> whale = <span class="hljs-title class_">Whale</span>.<span class="hljs-title function_">getInstance</span>(emulator);<br>    <span class="hljs-title class_">Symbol</span> free = emulator.<span class="hljs-title function_">getMemory</span>().<span class="hljs-title function_">findModule</span>(<span class="hljs-string">&quot;libc.so&quot;</span>).<span class="hljs-title function_">findSymbolByName</span>(<span class="hljs-string">&quot;free&quot;</span>);<br>    whale.<span class="hljs-title function_">inlineHookFunction</span>(free, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReplaceCallback</span>() &#123;<br>        @<span class="hljs-title class_">Override</span><br>        public <span class="hljs-title class_">HookStatus</span> <span class="hljs-title function_">onCall</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator, long originFunction</span>) &#123;<br>            <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;WInlineHookFunction free=&quot;</span> + emulator.<span class="hljs-title function_">getContext</span>().<span class="hljs-title function_">getPointerArg</span>(<span class="hljs-number">0</span>));<br>            long addr = emulator.<span class="hljs-title function_">getContext</span>().<span class="hljs-title function_">getPointerArg</span>(<span class="hljs-number">0</span>).<span class="hljs-property">peer</span>;<br>            <span class="hljs-keyword">if</span>(addr == <span class="hljs-number">0x40175000</span> | addr == <span class="hljs-number">0x40176000</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-title class_">HookStatus</span>.<span class="hljs-title function_">LR</span>(emulator, <span class="hljs-number">0</span>);<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-title class_">HookStatus</span>.<span class="hljs-title function_">RET</span>(emulator, originFunction);<br>            &#125;<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/4.%20%E8%A1%A5%E5%BA%93%E5%87%BD%E6%95%B0/%E8%A1%A5%E5%BA%93%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0/gethostbyname/"/>
    <url>/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/4.%20%E8%A1%A5%E5%BA%93%E5%87%BD%E6%95%B0/%E8%A1%A5%E5%BA%93%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0/gethostbyname/</url>
    
    <content type="html"><![CDATA[<h1 id="case-引入"><a href="#case-引入" class="headerlink" title="case 引入"></a>case 引入</h1><ul><li>我们可以通过IP查主机名，或者反之，通过主机名查IP。<br><img src="/blog/../../../../../../../../images/android/%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/1746445141550.jpg"></li><li>Android 基于Linux，可以使用Linux的API实现等效功能，在DEMO中，先通过IP得到雅虎的域名，再用雅虎的域名获取IP。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs javascript">#include &lt;jni.<span class="hljs-property">h</span>&gt;<br>#include &lt;string&gt;<br>#include &lt;android/log.<span class="hljs-property">h</span>&gt;<br>#include &lt;arpa/inet.<span class="hljs-property">h</span>&gt;<br>#include &lt;netdb.<span class="hljs-property">h</span>&gt;<br><br>#define <span class="hljs-title function_">LOGE</span>(...) <span class="hljs-title function_">__android_log_print</span>(<span class="hljs-variable constant_">ANDROID_LOG_ERROR</span>,<span class="hljs-string">&quot;Lilac&quot;</span> ,__VA_ARGS__)<br><br>extern <span class="hljs-string">&quot;C&quot;</span><br><span class="hljs-variable constant_">JNIEXPORT</span> <span class="hljs-keyword">void</span> <span class="hljs-variable constant_">JNICALL</span><br><span class="hljs-title class_">Java</span>_com_example_hostnameandip_MainActivity_hostnameandip(<span class="hljs-title class_">JNIEnv</span> *env, jobject thiz) &#123;<br>  int i;<br>  struct hostent *host;<br>  struct sockaddr_in addr&#123;&#125;;<br><br>  <span class="hljs-comment">// struct hostent * gethostbyaddr(const char *addr, socklen_t len, int family);</span><br>  <span class="hljs-comment">// addr: 含有IP地址信息的in_addr结构体指针</span><br>  <span class="hljs-title function_">memset</span>(&amp;addr, <span class="hljs-number">0</span>, <span class="hljs-title function_">sizeof</span>(addr));<br>  addr.<span class="hljs-property">sin_addr</span>.<span class="hljs-property">s_addr</span> = <span class="hljs-title function_">inet_addr</span>(<span class="hljs-string">&quot;180.222.102.202&quot;</span>);<br><br>  host = <span class="hljs-title function_">gethostbyaddr</span>((<span class="hljs-keyword">const</span> char*)&amp;addr.<span class="hljs-property">sin_addr</span>, <span class="hljs-number">4</span>, <span class="hljs-variable constant_">AF_INET</span>);<br><br>  <span class="hljs-title function_">LOGE</span>(<span class="hljs-string">&quot;Hostname %s \n&quot;</span>,host -&gt; h_name);<br><br>  char *name = host -&gt; h_name;<br>  <span class="hljs-comment">//INET_ADDRSTRLEN值为16，用来标识ipv4地址长度</span><br>  char str[<span class="hljs-variable constant_">INET_ADDRSTRLEN</span>];<br>  <span class="hljs-comment">//根据主机名获取ip</span><br>  struct hostent *hptr = <span class="hljs-title function_">gethostbyname</span>(name);<br><br>  <span class="hljs-keyword">if</span>(hptr == nullptr)<br>   &#123;<br>    <span class="hljs-title function_">hstrerror</span>(h_errno);<br>   &#125;<br><br>  <span class="hljs-comment">//hostent中的h_addr_list是一个数组</span><br>  char **pptr = hptr-&gt;h_addr_list;<br>  <span class="hljs-keyword">for</span>(; *pptr != nullptr; pptr++)<br>   &#123;<br>    <span class="hljs-comment">//打印所有IP</span><br>    <span class="hljs-title function_">LOGE</span>(<span class="hljs-string">&quot;%s&quot;</span>, <span class="hljs-title function_">inet_ntop</span>(hptr-&gt;h_addrtype, *pptr, str, <span class="hljs-title function_">sizeof</span>(str)));<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>观察发现，代码中使用 <code>gethostbyname</code> 以及 <code>gethostbyaddr</code> 函数<code>实现了主机名和IP地址之间的转换</code>。</li></ul><h2 id="首先看-gethostbyname"><a href="#首先看-gethostbyname" class="headerlink" title="首先看 gethostbyname"></a>首先看 gethostbyname</h2><blockquote><p>struct hostent *gethostbyname(const char *name);</p></blockquote><ul><li><p>入参是指向主机名的指针，返回值是由主机相关信息组成的 hostent 结构体的指针，gethostbyaddr API 所获取的也是这个结构体，只不过一个使用主机名来获取，另一个通过IP地址来获取。（这两个函数都比较老了，现在还可以用 getaddrinfo 和 getnameinfo 函数。）</p></li><li><p>hostent  结构体长这样</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">hostent</span> &#123;<br>  <span class="hljs-type">char</span> *h_name;      <span class="hljs-comment">/* official name of host */</span><br>  <span class="hljs-type">char</span> **h_aliases;     <span class="hljs-comment">/* alias list */</span><br>  <span class="hljs-type">int</span>  h_addrtype;    <span class="hljs-comment">/* host address type */</span><br>  <span class="hljs-type">int</span>  h_length;     <span class="hljs-comment">/* length of address */</span><br>  <span class="hljs-type">char</span> **h_addr_list;    <span class="hljs-comment">/* list of addresses */</span><br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> h_addr h_addr_list[0] <span class="hljs-comment">/* for backward compatibility */</span></span><br><br><span class="hljs-type">char</span> *h_name 表示的是主机的规范名。例如 www.google.com 的规范名其实是 www.l.google.com 。<br><span class="hljs-type">char</span>  h_aliases 表示的是主机的别名。 www.google.com 就是google他自己的别名。有的时候，有的主机可能有好几个别名，这些，其实都是为了易于用户记忆而为自己的网站多取的名字。<br><span class="hljs-type">int</span>  h_addrtype 表示的是主机ip地址的类型，到底是<span class="hljs-built_in">ipv4</span>(AF_INET)，还是<span class="hljs-built_in">ipv6</span>(AF_INET6)<br><span class="hljs-type">int</span>  h_length 表示的是主机ip地址的长度<br><span class="hljs-type">int</span>  h_addr_lisst 表示的是主机的ip地址，注意，这个是以网络字节序存储的，通过调用<span class="hljs-built_in">inet_ntop</span>()展示这个IP地址。<br></code></pre></td></tr></table></figure></li><li><p>接下来使用Unidbg 模拟执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs javascript">package com.<span class="hljs-property">lessionpro</span>.<span class="hljs-property">lession2</span>;<br><br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">AndroidEmulator</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">Emulator</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">Module</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">arm</span>.<span class="hljs-property">context</span>.<span class="hljs-property">RegisterContext</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">hook</span>.<span class="hljs-property">hookzz</span>.<span class="hljs-property">HookEntryInfo</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">hook</span>.<span class="hljs-property">hookzz</span>.<span class="hljs-property">HookZz</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">hook</span>.<span class="hljs-property">hookzz</span>.<span class="hljs-property">IHookZz</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">hook</span>.<span class="hljs-property">hookzz</span>.<span class="hljs-property">InstrumentCallback</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">linux</span>.<span class="hljs-property">android</span>.<span class="hljs-property">AndroidEmulatorBuilder</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">linux</span>.<span class="hljs-property">android</span>.<span class="hljs-property">AndroidResolver</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">linux</span>.<span class="hljs-property">android</span>.<span class="hljs-property">dvm</span>.<span class="hljs-property">DalvikModule</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">linux</span>.<span class="hljs-property">android</span>.<span class="hljs-property">dvm</span>.<span class="hljs-property">DvmClass</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">linux</span>.<span class="hljs-property">android</span>.<span class="hljs-property">dvm</span>.<span class="hljs-property">DvmObject</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">linux</span>.<span class="hljs-property">android</span>.<span class="hljs-property">dvm</span>.<span class="hljs-property">VM</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">memory</span>.<span class="hljs-property">Memory</span>;<br><br><span class="hljs-keyword">import</span> java.<span class="hljs-property">io</span>.<span class="hljs-property">File</span>;<br><br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">HostNameAndIp</span>&#123;<br>  private final <span class="hljs-title class_">AndroidEmulator</span> emulator;<br>  private final <span class="hljs-variable constant_">VM</span> vm;<br>  private final <span class="hljs-title class_">Module</span> <span class="hljs-variable language_">module</span>;<br><br>  <span class="hljs-title class_">HostNameAndIp</span>() &#123;<br><br>    <span class="hljs-comment">// 创建模拟器实例</span><br>    emulator = <span class="hljs-title class_">AndroidEmulatorBuilder</span>.<span class="hljs-title function_">for32Bit</span>().<span class="hljs-title function_">build</span>();<br><br>    <span class="hljs-comment">// 模拟器的内存操作接口</span><br>    final <span class="hljs-title class_">Memory</span> memory = emulator.<span class="hljs-title function_">getMemory</span>();<br>    <span class="hljs-comment">// 设置系统类库解析</span><br>    memory.<span class="hljs-title function_">setLibraryResolver</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AndroidResolver</span>(<span class="hljs-number">23</span>));<br>    <span class="hljs-comment">// 创建Android虚拟机</span><br>    vm = emulator.<span class="hljs-title function_">createDalvikVM</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;unidbg-android/src/test/resources/lessionpro/lession2/app-debug.apk&quot;</span>));<br><br><br>    <span class="hljs-comment">// 加载so到虚拟内存</span><br>    <span class="hljs-title class_">DalvikModule</span> dm = vm.<span class="hljs-title function_">loadLibrary</span>(<span class="hljs-string">&quot;hostnameandip&quot;</span>, <span class="hljs-literal">true</span>);<br>    <span class="hljs-comment">// 加载好的 libhookinunidbg.so对应为一个模块</span><br>    <span class="hljs-variable language_">module</span> = dm.<span class="hljs-title function_">getModule</span>();<br><br>    <span class="hljs-comment">// 执行JNIOnLoad（如果有的话）</span><br>    dm.<span class="hljs-title function_">callJNI_OnLoad</span>(emulator);<br><br>   &#125;<br><br><br>  public <span class="hljs-keyword">void</span> <span class="hljs-title function_">call</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title class_">DvmClass</span> dvmClass = vm.<span class="hljs-title function_">resolveClass</span>(<span class="hljs-string">&quot;com/example/hostnameandip/MainActivity&quot;</span>);<br>    <span class="hljs-title class_">String</span> methodSign = <span class="hljs-string">&quot;hostnameandip()V&quot;</span>;<br>    <span class="hljs-title class_">DvmObject</span>&lt;?&gt; dvmObject = dvmClass.<span class="hljs-title function_">newObject</span>(<span class="hljs-literal">null</span>);<br><br>    dvmObject.<span class="hljs-title function_">callJniMethodObject</span>(emulator, methodSign);<br><br>   &#125;<br><br>  public <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>) &#123;<br>    <span class="hljs-title class_">HostNameAndIp</span> demo2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HostNameAndIp</span>();<br>    demo2.<span class="hljs-title function_">call</span>();<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>从日志可以发现，gethostbyaddr 顺利执行，但 gethostbyname 报错， 点开报错点发现，Unidbg没有实现 gethostbyname 的逻辑。只有getaddrinfo 和 gethostbyaddr，而上面提到过的 gethostbyname以及 getnameinfo 这两个API尚未实现。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-comment">// src/main/java/com/github/unidbg/linux/file/DnsProxyDaemon.java</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">byte</span>[] handle(<span class="hljs-keyword">byte</span>[] request) <span class="hljs-keyword">throws</span> IOException &#123;<br>  baos.write(request);<br>  <span class="hljs-keyword">byte</span>[] data = baos.toByteArray();<br>  <span class="hljs-keyword">int</span> endIndex = <span class="hljs-number">-1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; data.length; i++) &#123;<br>    <span class="hljs-keyword">if</span> (data[i] == <span class="hljs-number">0</span>) &#123;<br>      endIndex = i;<br>      <span class="hljs-keyword">break</span>;<br>     &#125;<br>   &#125;<br>  <span class="hljs-keyword">if</span> (endIndex == <span class="hljs-number">-1</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>   &#125;<br>  baos.reset();<br>  String command = <span class="hljs-keyword">new</span> String(data, <span class="hljs-number">0</span>, endIndex);<br>  <span class="hljs-keyword">if</span> (command.startsWith(<span class="hljs-string">&quot;getaddrinfo&quot;</span>)) &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">return</span> <span class="hljs-title">getaddrinfo</span><span class="hljs-params">(command)</span></span>;<br>   &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (command.startsWith(<span class="hljs-string">&quot;gethostbyaddr&quot;</span>)) &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">return</span> <span class="hljs-title">gethostbyaddr</span><span class="hljs-params">(command)</span></span>;<br>   &#125;<br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AbstractMethodError(command);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ul><li>这个样例的两种办法，其内在逻辑并不一致，感兴趣的可以独立复现一下嗷。</li></ul><h3 id="方案一：修改Unidbg源码，增加-gethostbyname-功能"><a href="#方案一：修改Unidbg源码，增加-gethostbyname-功能" class="headerlink" title="方案一：修改Unidbg源码，增加 gethostbyname 功能"></a>方案一：修改Unidbg源码，增加 gethostbyname 功能</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs javascript">@<span class="hljs-title class_">Override</span><br>public byte[] <span class="hljs-title function_">handle</span>(byte[] request) throws <span class="hljs-title class_">IOException</span> &#123;<br>  baos.<span class="hljs-title function_">write</span>(request);<br>  byte[] data = baos.<span class="hljs-title function_">toByteArray</span>();<br>  int endIndex = -<span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt; data.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span> (data[i] == <span class="hljs-number">0</span>) &#123;<br>      endIndex = i;<br>      <span class="hljs-keyword">break</span>;<br>     &#125;<br>   &#125;<br>  <span class="hljs-keyword">if</span> (endIndex == -<span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>   &#125;<br>  baos.<span class="hljs-title function_">reset</span>();<br>  <span class="hljs-title class_">String</span> command = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(data, <span class="hljs-number">0</span>, endIndex);<br>  <span class="hljs-keyword">if</span> (command.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&quot;getaddrinfo&quot;</span>)) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">getaddrinfo</span>(command);<br>   &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (command.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&quot;gethostbyaddr&quot;</span>)) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">gethostbyaddr</span>(command);<br>   &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(command.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&quot;gethostbyname&quot;</span>))&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">gethostbyname</span>(command);<br>   &#125;<br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AbstractMethodError</span>(command);<br>&#125;<br><br>private byte[] <span class="hljs-title function_">gethostbyname</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> command</span>) &#123;<br>  <span class="hljs-title class_">ByteBuffer</span> buffer = <span class="hljs-title class_">ByteBuffer</span>.<span class="hljs-title function_">allocate</span>(<span class="hljs-number">1024</span>);<br><br>  <span class="hljs-title class_">String</span>[] tokens = command.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;\\s&quot;</span>);<br>  <span class="hljs-title class_">String</span> host = tokens[<span class="hljs-number">2</span>];<br><br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-title class_">InetAddress</span> address = <span class="hljs-title class_">InetAddress</span>.<span class="hljs-title function_">getByName</span>(host);<br>    byte[] addr = address.<span class="hljs-title function_">getAddress</span>();<br><br>    <span class="hljs-keyword">if</span> (addr == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnknownHostException</span>();<br>     &#125; <span class="hljs-keyword">else</span> &#123;<br>      buffer.<span class="hljs-title function_">put</span>((<span class="hljs-title class_">DnsProxyQueryResult</span> + <span class="hljs-string">&quot;\0&quot;</span>).<span class="hljs-title function_">getBytes</span>());<br>      byte[] bytes = host.<span class="hljs-title function_">getBytes</span>(<span class="hljs-title class_">StandardCharsets</span>.<span class="hljs-property">UTF_8</span>);<br>      buffer.<span class="hljs-title function_">putInt</span>(bytes.<span class="hljs-property">length</span> + <span class="hljs-number">1</span>);<br>      buffer.<span class="hljs-title function_">put</span>(bytes);<br>      buffer.<span class="hljs-title function_">put</span>((byte) <span class="hljs-number">0</span>); <span class="hljs-comment">// NULL-terminated string</span><br><br>      buffer.<span class="hljs-title function_">putInt</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">// null to indicate we&#x27;re done aliases</span><br><br>      buffer.<span class="hljs-title function_">putInt</span>(<span class="hljs-title class_">SocketIO</span>.<span class="hljs-property">AF_INET</span>); <span class="hljs-comment">// addrtype</span><br>      buffer.<span class="hljs-title function_">putInt</span>(<span class="hljs-number">4</span>); <span class="hljs-comment">// unknown length</span><br><br>      buffer.<span class="hljs-title function_">putInt</span>(<span class="hljs-number">0x10</span>);<br>      buffer.<span class="hljs-title function_">put</span>(addr);<br>      buffer.<span class="hljs-title function_">putInt</span>(<span class="hljs-number">0</span>);<br>      buffer.<span class="hljs-title function_">putInt</span>(<span class="hljs-number">0</span>);<br>      buffer.<span class="hljs-title function_">putInt</span>(<span class="hljs-number">0</span>);<br>      buffer.<span class="hljs-title function_">putInt</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">// null to indicate we&#x27;re done addr_list</span><br>     &#125;<br>   &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">UnknownHostException</span> e) &#123;<br>    buffer.<span class="hljs-title function_">put</span>((<span class="hljs-title class_">DnsProxyOperationFailed</span> + <span class="hljs-string">&quot;\0&quot;</span>).<span class="hljs-title function_">getBytes</span>());<br>    buffer.<span class="hljs-title function_">putInt</span>(<span class="hljs-number">0</span>);<br>   &#125;<br><br>  buffer.<span class="hljs-title function_">flip</span>();<br>  byte[] response = <span class="hljs-keyword">new</span> byte[buffer.<span class="hljs-title function_">remaining</span>()];<br>  buffer.<span class="hljs-title function_">get</span>(response);<br>  <span class="hljs-keyword">if</span> (log.<span class="hljs-title function_">isDebugEnabled</span>()) &#123;<br>    <span class="hljs-title class_">Inspector</span>.<span class="hljs-title function_">inspect</span>(response, <span class="hljs-string">&quot;gethostbyname&quot;</span>);<br>   &#125;<br>  <span class="hljs-keyword">return</span> response;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs javascript">package com.<span class="hljs-property">lessionpro</span>.<span class="hljs-property">lession2</span>;<br><br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">AndroidEmulator</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">Emulator</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">Module</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">arm</span>.<span class="hljs-property">HookStatus</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">arm</span>.<span class="hljs-property">context</span>.<span class="hljs-property">RegisterContext</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">hook</span>.<span class="hljs-property">HookContext</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">hook</span>.<span class="hljs-property">ReplaceCallback</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">hook</span>.<span class="hljs-property">hookzz</span>.<span class="hljs-property">HookEntryInfo</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">hook</span>.<span class="hljs-property">hookzz</span>.<span class="hljs-property">HookZz</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">hook</span>.<span class="hljs-property">hookzz</span>.<span class="hljs-property">IHookZz</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">hook</span>.<span class="hljs-property">hookzz</span>.<span class="hljs-property">InstrumentCallback</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">linux</span>.<span class="hljs-property">android</span>.<span class="hljs-property">AndroidEmulatorBuilder</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">linux</span>.<span class="hljs-property">android</span>.<span class="hljs-property">AndroidResolver</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">linux</span>.<span class="hljs-property">android</span>.<span class="hljs-property">dvm</span>.<span class="hljs-property">DalvikModule</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">linux</span>.<span class="hljs-property">android</span>.<span class="hljs-property">dvm</span>.<span class="hljs-property">DvmClass</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">linux</span>.<span class="hljs-property">android</span>.<span class="hljs-property">dvm</span>.<span class="hljs-property">DvmObject</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">linux</span>.<span class="hljs-property">android</span>.<span class="hljs-property">dvm</span>.<span class="hljs-property">VM</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">memory</span>.<span class="hljs-property">Memory</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">memory</span>.<span class="hljs-property">MemoryBlock</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">pointer</span>.<span class="hljs-property">UnidbgPointer</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">utils</span>.<span class="hljs-property">Inspector</span>;<br><span class="hljs-keyword">import</span> unicorn.<span class="hljs-property">ArmConst</span>;<br><br><span class="hljs-keyword">import</span> java.<span class="hljs-property">io</span>.<span class="hljs-property">File</span>;<br><br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">HostNameAndIp</span>&#123;<br>  private final <span class="hljs-title class_">AndroidEmulator</span> emulator;<br>  private final <span class="hljs-variable constant_">VM</span> vm;<br>  private final <span class="hljs-title class_">Module</span> <span class="hljs-variable language_">module</span>;<br><br>  <span class="hljs-title class_">HostNameAndIp</span>() &#123;<br><br>    <span class="hljs-comment">// 创建模拟器实例</span><br>    emulator = <span class="hljs-title class_">AndroidEmulatorBuilder</span>.<span class="hljs-title function_">for32Bit</span>().<span class="hljs-title function_">build</span>();<br><br>    <span class="hljs-comment">// 模拟器的内存操作接口</span><br>    final <span class="hljs-title class_">Memory</span> memory = emulator.<span class="hljs-title function_">getMemory</span>();<br>    <span class="hljs-comment">// 设置系统类库解析</span><br>    memory.<span class="hljs-title function_">setLibraryResolver</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AndroidResolver</span>(<span class="hljs-number">23</span>));<br>    <span class="hljs-comment">// 创建Android虚拟机</span><br>    vm = emulator.<span class="hljs-title function_">createDalvikVM</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;unidbg-android/src/test/resources/lessionpro/lession2/app-debug.apk&quot;</span>));<br><br><br>    <span class="hljs-comment">// 加载so到虚拟内存</span><br>    <span class="hljs-title class_">DalvikModule</span> dm = vm.<span class="hljs-title function_">loadLibrary</span>(<span class="hljs-string">&quot;hostnameandip&quot;</span>, <span class="hljs-literal">true</span>);<br>    <span class="hljs-comment">// 加载好的 libhookinunidbg.so对应为一个模块</span><br>    <span class="hljs-variable language_">module</span> = dm.<span class="hljs-title function_">getModule</span>();<br><br>    <span class="hljs-comment">// 执行JNIOnLoad（如果有的话）</span><br>    dm.<span class="hljs-title function_">callJNI_OnLoad</span>(emulator);<br><br>   &#125;<br><br><br>  public <span class="hljs-keyword">void</span> <span class="hljs-title function_">call</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title class_">DvmClass</span> dvmClass = vm.<span class="hljs-title function_">resolveClass</span>(<span class="hljs-string">&quot;com/example/hostnameandip/MainActivity&quot;</span>);<br>    <span class="hljs-title class_">String</span> methodSign = <span class="hljs-string">&quot;hostnameandip()V&quot;</span>;<br>    <span class="hljs-title class_">DvmObject</span>&lt;?&gt; dvmObject = dvmClass.<span class="hljs-title function_">newObject</span>(<span class="hljs-literal">null</span>);<br><br>    dvmObject.<span class="hljs-title function_">callJniMethodObject</span>(emulator, methodSign);<br><br>   &#125;<br><br>  public <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>) &#123;<br>    <span class="hljs-title class_">HostNameAndIp</span> demo2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HostNameAndIp</span>();<br>    demo2.<span class="hljs-title class_">ReplaceGetrusage</span>();<br>    demo2.<span class="hljs-title function_">call</span>();<br>   &#125;<br><br>  public <span class="hljs-keyword">void</span> <span class="hljs-title class_">ReplaceGetrusage</span>() &#123;<br>    final <span class="hljs-title class_">HookZz</span> hook = <span class="hljs-title class_">HookZz</span>.<span class="hljs-title function_">getInstance</span>(emulator);<br>    hook.<span class="hljs-title function_">replace</span>(<span class="hljs-variable language_">module</span>.<span class="hljs-title function_">findSymbolByName</span>(<span class="hljs-string">&quot;gethostbyname&quot;</span>), <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReplaceCallback</span>() &#123;<br>      @<span class="hljs-title class_">Override</span><br>      public <span class="hljs-title class_">HookStatus</span> <span class="hljs-title function_">onCall</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator, HookContext context, long originFunction</span>) &#123;<br>        <span class="hljs-title class_">MemoryBlock</span> memoryBlock = emulator.<span class="hljs-title function_">getMemory</span>().<span class="hljs-title function_">malloc</span>(<span class="hljs-number">20</span>, <span class="hljs-literal">true</span>);<br>        <span class="hljs-title class_">UnidbgPointer</span> host = memoryBlock.<span class="hljs-title function_">getPointer</span>();<br><br>        <span class="hljs-comment">// h_name</span><br>        <span class="hljs-title class_">String</span> h_name = <span class="hljs-string">&quot;media-router-fp74.prod.media.vip.tp2.yahoo.com &quot;</span>;<br>        int h_name_length = h_name.<span class="hljs-title function_">length</span>();<br>        <span class="hljs-title class_">MemoryBlock</span> h_name_block = emulator.<span class="hljs-title function_">getMemory</span>().<span class="hljs-title function_">malloc</span>(h_name_length+<span class="hljs-number">1</span>, <span class="hljs-literal">true</span>);<br>        <span class="hljs-title class_">UnidbgPointer</span> h_name_ptr=h_name_block.<span class="hljs-title function_">getPointer</span>();<br>        h_name_ptr.<span class="hljs-title function_">write</span>(h_name.<span class="hljs-title function_">getBytes</span>());<br><br>        host.<span class="hljs-title function_">setPointer</span>(<span class="hljs-number">0</span>, h_name_ptr);<br><br>        <span class="hljs-comment">// h_aliases</span><br>        <span class="hljs-title class_">MemoryBlock</span> h_aliases_block = emulator.<span class="hljs-title function_">getMemory</span>().<span class="hljs-title function_">malloc</span>(<span class="hljs-number">4</span>, <span class="hljs-literal">true</span>);<br>        host.<span class="hljs-title function_">setPointer</span>(<span class="hljs-number">4</span>, h_aliases_block.<span class="hljs-title function_">getPointer</span>());<br><br>        <span class="hljs-comment">// h_addrtype</span><br>        host.<span class="hljs-title function_">setInt</span>(<span class="hljs-number">8</span>, <span class="hljs-number">2</span>);<br><br>        <span class="hljs-comment">// h_length</span><br>        host.<span class="hljs-title function_">setInt</span>(<span class="hljs-number">12</span>, <span class="hljs-number">4</span>);<br><br>        <span class="hljs-comment">// h_addr_list</span><br>        <span class="hljs-title class_">MemoryBlock</span> h_addr_list_block = emulator.<span class="hljs-title function_">getMemory</span>().<span class="hljs-title function_">malloc</span>(<span class="hljs-number">4</span>, <span class="hljs-literal">true</span>);<br>        host.<span class="hljs-title function_">setPointer</span>(<span class="hljs-number">16</span>, h_addr_list_block.<span class="hljs-title function_">getPointer</span>());<br><br>        <span class="hljs-title class_">MemoryBlock</span> h_addr_block = emulator.<span class="hljs-title function_">getMemory</span>().<span class="hljs-title function_">malloc</span>(<span class="hljs-number">4</span>, <span class="hljs-literal">true</span>);<br>        h_addr_block.<span class="hljs-title function_">getPointer</span>().<span class="hljs-title function_">setInt</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0xCA66DEB4</span>);<br>        h_addr_list_block.<span class="hljs-title function_">getPointer</span>().<span class="hljs-title function_">setPointer</span>(<span class="hljs-number">0</span>, h_addr_block.<span class="hljs-title function_">getPointer</span>());<br><br>        emulator.<span class="hljs-title function_">getBackend</span>().<span class="hljs-title function_">reg_write</span>(<span class="hljs-title class_">ArmConst</span>.<span class="hljs-property">UC_ARM_REG_R0</span>, host.<span class="hljs-property">peer</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">HookStatus</span>.<span class="hljs-title function_">RET</span>(emulator, context.<span class="hljs-title function_">getLR</span>());<br>       &#125;<br><br>     &#125;, <span class="hljs-literal">false</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/4.%20%E8%A1%A5%E5%BA%93%E5%87%BD%E6%95%B0/%E8%A1%A5%E5%BA%93%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0/getrusage/"/>
    <url>/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/4.%20%E8%A1%A5%E5%BA%93%E5%87%BD%E6%95%B0/%E8%A1%A5%E5%BA%93%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0/getrusage/</url>
    
    <content type="html"><![CDATA[<h1 id="getrusage介绍"><a href="#getrusage介绍" class="headerlink" title="getrusage介绍"></a>getrusage介绍</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ul><li>每个进程都会消耗诸如内存和 CPU 时间之类的系统资源，<code>getrusage 函数用于查看当前进程及子进程已经用掉的资源</code>。在Android中，getrusage 是一个库函数，位于Libc，但它只是对系统调用的简单封装。<br><img src="/blog/../../../../../../../../images/android/%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/1746444258228.jpg"></li></ul><h2 id="getrusage-函数"><a href="#getrusage-函数" class="headerlink" title="getrusage 函数"></a>getrusage 函数</h2><ul><li>接下来仔细了解 getrusage 函数，函数定义如下<blockquote><p>int getrusage(int who, struct rusage *usage)</p></blockquote></li></ul><ol><li>参数1 who 代表统计的范围， 0代表只关注当前进程，-1为当前进程的所有子进程，-2为当前进程以及其所有子进程 ，1是当前线程。</li><li>参数2 是一个指向 rusage 结构的指针，资源消耗情况返回到该指针指向的结构体。至于函数的返回值，执行成功则返回0，发生错误返回 -1。</li></ol><h3 id="rusage-结构体定义如下"><a href="#rusage-结构体定义如下" class="headerlink" title="rusage 结构体定义如下"></a>rusage 结构体定义如下</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript">struct rusage &#123;<br>      struct timeval ru_utime; <span class="hljs-comment">/* user CPU time used */</span><br>      struct timeval ru_stime; <span class="hljs-comment">/* system CPU time used */</span><br>      long ru_maxrss; <span class="hljs-comment">/* maximum resident set size */</span><br>      long ru_ixrss; <span class="hljs-comment">/* integral shared memory size */</span><br>      long ru_idrss; <span class="hljs-comment">/* integral unshared data size */</span><br>      long ru_isrss; <span class="hljs-comment">/* integral unshared stack size */</span><br>      long ru_minflt; <span class="hljs-comment">/* page reclaims (soft page faults) */</span><br>      long ru_majflt; <span class="hljs-comment">/* page faults (hard page faults) */</span><br>      long ru_nswap; <span class="hljs-comment">/* swaps */</span><br>      long ru_inblock; <span class="hljs-comment">/* block input operations */</span><br>      long ru_oublock; <span class="hljs-comment">/* block output operations */</span><br>      long ru_msgsnd; <span class="hljs-comment">/* IPC messages sent */</span><br>      long ru_msgrcv; <span class="hljs-comment">/* IPC messages received */</span><br>      long ru_nsignals; <span class="hljs-comment">/* signals received */</span><br>      long ru_nvcsw; <span class="hljs-comment">/* voluntary context switches */</span><br>      long ru_nivcsw; <span class="hljs-comment">/* involuntary context switches */</span><br>&#125;;<br></code></pre></td></tr></table></figure><ol><li>首先是ru_utime，它代表进程在用户模式下已执行的时间，以 timeval 结构的形式返回,  tv_sec 是秒，tv_usec 是微秒。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">struct timeval &#123;<br>     long tv_sec;<br>     long tv_usec;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>ru_stime 代表进程在内核模式下的执行时间，同样以 timeval 结构的形式返回。</li><li>需要注意的是<ol><li>两者都不代表App进程已存在的时间，两者相加也远小于App进程的运行时长。</li><li>但这并不意味着它俩毫无用处，比如基于执行时间的反调试检测就可以选择使用它。在关键函数前后调用 getrusage 获取执行时间，差值如果大于某个阈值则判定函数执行时间远超常理，极有可能在函数内进行了诸如IDA 动态调试或者Codetrace之类的恶意分析。</li></ol></li><li>其他参数<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-type">ru_maxrss</span>：返回最大驻留集的大小，单位为<span class="hljs-variable">kb</span>。不太懂是个啥。<br><span class="hljs-type">ru_ixrss</span>、<span class="hljs-type">ru_idrss</span>、<span class="hljs-type">ru_isrss</span>：目前不支持<br><span class="hljs-type">ru_minflt</span>：缺页中断的次数，且处理这些中断不需要进行<span class="hljs-built_in">I</span><span class="hljs-operator">/</span><span class="hljs-built_in">O</span><br><span class="hljs-type">ru_majflt</span>：缺页中断的次数，且处理这些中断需要进行<span class="hljs-built_in">I</span><span class="hljs-operator">/</span><span class="hljs-built_in">O</span><br><span class="hljs-type">ru_nswap</span>：目前不支持<br><span class="hljs-type">ru_inblock</span>：文件系统需要进行输入操作的次数。<br><span class="hljs-type">ru_oublock</span>：文件系统需要进行输出操作的次数。<br><span class="hljs-type">ru_msgsnd</span>、<span class="hljs-type">ru_msgrcv</span>、<span class="hljs-type">ru_nsignals</span>：目前不支持<br><span class="hljs-type">ru_nvcsw</span>：因进程自愿放弃处理器时间片而导致的上下文切换的次数（通常是为了等待请求的资<br>源）。<br><span class="hljs-type">ru_nivcsw</span>：因进程时间片使用完毕或被高优先级进程抢断导致的上下文切换的次数。<br></code></pre></td></tr></table></figure></li><li>反映了内存、IO等资源的消耗情况。我们写一个DEMO，使用它获取用户和内核模式下耗时之和。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript">#include &lt;jni.<span class="hljs-property">h</span>&gt;<br>#include &lt;string&gt;<br>#include &lt;sys/resource.<span class="hljs-property">h</span>&gt;<br>#include &lt;android/log.<span class="hljs-property">h</span>&gt;<br>#include &lt;unistd.<span class="hljs-property">h</span>&gt;<br>#include &lt;arpa/inet.<span class="hljs-property">h</span>&gt;<br>#include &lt;netdb.<span class="hljs-property">h</span>&gt;<br><br>#define <span class="hljs-title function_">LOGE</span>(...) <span class="hljs-title function_">__android_log_print</span>(<span class="hljs-variable constant_">ANDROID_LOG_ERROR</span>,<span class="hljs-string">&quot;Lilac&quot;</span> ,__VA_ARGS__)<br><br>extern <span class="hljs-string">&quot;C&quot;</span><br><span class="hljs-variable constant_">JNIEXPORT</span> <span class="hljs-keyword">void</span> <span class="hljs-variable constant_">JNICALL</span><br><span class="hljs-title class_">Java</span>_com_example_getrusage_MainActivity_callGetRusage(<span class="hljs-title class_">JNIEnv</span> *env, jobject thiz) &#123;<br>      struct rusage usage&#123;&#125;;<br>      <span class="hljs-title function_">getrusage</span>(<span class="hljs-variable constant_">RUSAGE_SELF</span>, &amp;usage);<br>      int t = usage.<span class="hljs-property">ru_utime</span>.<span class="hljs-property">tv_sec</span> + usage.<span class="hljs-property">ru_stime</span>.<span class="hljs-property">tv_sec</span>;<br>      <span class="hljs-title function_">LOGE</span>(<span class="hljs-string">&quot;call getrusage get time: %d s&quot;</span>, t);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h1 id="处理步骤"><a href="#处理步骤" class="headerlink" title="处理步骤"></a>处理步骤</h1><h2 id="1-先hook-dump出来结果"><a href="#1-先hook-dump出来结果" class="headerlink" title="1. 先hook | dump出来结果"></a>1. 先hook | dump出来结果</h2><ul><li>参考系统调用</li></ul><h2 id="2-再实现"><a href="#2-再实现" class="headerlink" title="2. 再实现"></a>2. 再实现</h2><ol><li>解决思路1：修改Unidbg <code>ARM32SyscallHandler</code>源码，增加<code>getrusage系统调用</code>，在其中简单填充并返回一个rusage结构体；<code>参考补系统调用</code></li><li>解决思路2：<code>在用户代码中拦截并替换对getrusage的访问，简单填充并返回一个rusage结构体</code>。（即Frida的Interceptor.replace，就是函数替换）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 方式1：</span><br>public <span class="hljs-keyword">void</span> <span class="hljs-title function_">hookGetRusage</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title class_">IxHook</span> xHook = <span class="hljs-title class_">XHookImpl</span>.<span class="hljs-title function_">getInstance</span>(emulator);<br>    xHook.<span class="hljs-title function_">register</span>(<span class="hljs-string">&quot;libdemo.so&quot;</span>, <span class="hljs-string">&quot;getrusage&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReplaceCallback</span>() &#123;<br>        @<span class="hljs-title class_">Override</span><br>        public <span class="hljs-title class_">HookStatus</span> <span class="hljs-title function_">onCall</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator, long originFunction</span>) &#123;<br>            <span class="hljs-title class_">Pointer</span> rusage = <span class="hljs-title class_">UnidbgPointer</span>.<span class="hljs-title function_">register</span>(emulator, <span class="hljs-title class_">Arm64Const</span>.<span class="hljs-property">UC_ARM64_REG_X1</span>);<br>            byte[] rusageContent = <span class="hljs-title function_">hexStringToByteArray</span>(<span class="hljs-string">&quot;00000000000000009f4a0b00000000000000000000000000c5e10100000000009052010000000000000000000000000000000000000000000000000000000000255e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d02000000000000d300000000000000&quot;</span>);<br>            <span class="hljs-keyword">for</span>(int i = <span class="hljs-number">0</span>;i&lt; rusageContent.<span class="hljs-property">length</span>;i++)&#123;<br>                rusage.<span class="hljs-title function_">setByte</span>(i, rusageContent[i]);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-title class_">HookStatus</span>.<span class="hljs-title function_">LR</span>(emulator, <span class="hljs-number">0</span>);<br>        &#125;<br>    &#125;);<br>    xHook.<span class="hljs-title function_">refresh</span>();<br>&#125;<br><br>public <span class="hljs-keyword">static</span> byte[] <span class="hljs-title function_">hexStringToByteArray</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> s</span>) &#123;<br>    int len = s.<span class="hljs-title function_">length</span>();<br>    byte[] data = <span class="hljs-keyword">new</span> byte[len / <span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt; len; i += <span class="hljs-number">2</span>) &#123;<br>        data[i / <span class="hljs-number">2</span>] = (byte) ((<span class="hljs-title class_">Character</span>.<span class="hljs-title function_">digit</span>(s.<span class="hljs-title function_">charAt</span>(i), <span class="hljs-number">16</span>) &lt;&lt; <span class="hljs-number">4</span>)<br>                + <span class="hljs-title class_">Character</span>.<span class="hljs-title function_">digit</span>(s.<span class="hljs-title function_">charAt</span>(i+<span class="hljs-number">1</span>), <span class="hljs-number">16</span>));<br>    &#125;<br>    <span class="hljs-keyword">return</span> data;<br>&#125;<br><br><span class="hljs-comment">//方式2：</span><br>public <span class="hljs-keyword">void</span> <span class="hljs-title class_">ReplaceGetrusage</span>() &#123;<br>  <span class="hljs-title class_">HookZz</span> hook = <span class="hljs-title class_">HookZz</span>.<span class="hljs-title function_">getInstance</span>(emulator);<br>  hook.<span class="hljs-title function_">replace</span>(<span class="hljs-variable language_">module</span>.<span class="hljs-title function_">findSymbolByName</span>(<span class="hljs-string">&quot;getrusage&quot;</span>), <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReplaceCallback</span>() &#123;<br>    @<span class="hljs-title class_">Override</span><br>    public <span class="hljs-title class_">HookStatus</span> <span class="hljs-title function_">onCall</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator, HookContext context, long originFunction</span>) &#123;<br>      <span class="hljs-title class_">UnidbgPointer</span> usagePtr = context.<span class="hljs-title function_">getPointerArg</span>(<span class="hljs-number">1</span>);<br><br>      <span class="hljs-comment">// 赋值的第一种方法</span><br>      usagePtr.<span class="hljs-title function_">setInt</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>      usagePtr.<span class="hljs-title function_">setInt</span>(<span class="hljs-number">4</span>, <span class="hljs-number">90000</span>);<br>      usagePtr.<span class="hljs-title function_">setInt</span>(<span class="hljs-number">8</span>, <span class="hljs-number">0</span>);<br>      usagePtr.<span class="hljs-title function_">setInt</span>(<span class="hljs-number">12</span>, <span class="hljs-number">230000</span>);<br>      usagePtr.<span class="hljs-title function_">setInt</span>(<span class="hljs-number">16</span>, <span class="hljs-number">106888</span>);<br>      usagePtr.<span class="hljs-title function_">setInt</span>(<span class="hljs-number">20</span>, <span class="hljs-number">0</span>);<br>      usagePtr.<span class="hljs-title function_">setInt</span>(<span class="hljs-number">24</span>, <span class="hljs-number">0</span>);<br>      usagePtr.<span class="hljs-title function_">setInt</span>(<span class="hljs-number">28</span>, <span class="hljs-number">0</span>);<br>      usagePtr.<span class="hljs-title function_">setInt</span>(<span class="hljs-number">32</span>, <span class="hljs-number">13963</span>);<br>      usagePtr.<span class="hljs-title function_">setInt</span>(<span class="hljs-number">36</span>, <span class="hljs-number">0</span>);<br>      usagePtr.<span class="hljs-title function_">setInt</span>(<span class="hljs-number">40</span>, <span class="hljs-number">0</span>);<br>      usagePtr.<span class="hljs-title function_">setInt</span>(<span class="hljs-number">44</span>, <span class="hljs-number">0</span>);<br>      usagePtr.<span class="hljs-title function_">setInt</span>(<span class="hljs-number">48</span>, <span class="hljs-number">0</span>);<br>      usagePtr.<span class="hljs-title function_">setInt</span>(<span class="hljs-number">52</span>, <span class="hljs-number">0</span>);<br>      usagePtr.<span class="hljs-title function_">setInt</span>(<span class="hljs-number">56</span>, <span class="hljs-number">0</span>);<br>      usagePtr.<span class="hljs-title function_">setInt</span>(<span class="hljs-number">60</span>, <span class="hljs-number">0</span>);<br>      usagePtr.<span class="hljs-title function_">setInt</span>(<span class="hljs-number">64</span>, <span class="hljs-number">1556</span>);<br>      usagePtr.<span class="hljs-title function_">setInt</span>(<span class="hljs-number">68</span>, <span class="hljs-number">350</span>);<br><br>      <span class="hljs-comment">// 给内存块赋值的第二种方法</span><br><span class="hljs-comment">//         byte[] hexData = &#123;</span><br><span class="hljs-comment">//           (byte)0x01, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0xA0, (byte)0xBB, (byte)0x0D, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x70, (byte)0x82, (byte)0x03, (byte)0x00,</span><br><span class="hljs-comment">//           (byte)0x88, (byte)0xA1, (byte)0x01, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00,</span><br><span class="hljs-comment">//           (byte)0x8B, (byte)0x36, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00,</span><br><span class="hljs-comment">//           (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00,</span><br><span class="hljs-comment">//           (byte)0x14, (byte)0x06, (byte)0x00, (byte)0x00, (byte)0x5E, (byte)0x01, (byte)0x00, (byte)0x00</span><br><span class="hljs-comment">//         &#125;;</span><br><span class="hljs-comment">//         emulator.getBackend().mem_write(usagePtr.peer, hexData);</span><br><br>      <span class="hljs-title class_">Inspector</span>.<span class="hljs-title function_">inspect</span>(usagePtr.<span class="hljs-title function_">getByteArray</span>(<span class="hljs-number">0</span>, <span class="hljs-number">72</span>), <span class="hljs-string">&quot;usage&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-title class_">HookStatus</span>.<span class="hljs-title function_">RET</span>(emulator, context.<span class="hljs-title function_">getLR</span>());<br>     &#125;<br>   &#125;, <span class="hljs-literal">false</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/4.%20%E8%A1%A5%E5%BA%93%E5%87%BD%E6%95%B0/%E8%A1%A5%E5%BA%93%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0/clock_gettime/"/>
    <url>/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/4.%20%E8%A1%A5%E5%BA%93%E5%87%BD%E6%95%B0/%E8%A1%A5%E5%BA%93%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0/clock_gettime/</url>
    
    <content type="html"><![CDATA[<h3 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a>函数原型</h3><blockquote><p>int clock_gettime(clockid_t __clock, struct timespec* __ts);</p></blockquote><ul><li><p>clock_gettime 用于获取有参数1 clock所指定的时钟的时间值，返回的时间值置于ts所指向的timespec结构中，函数的返回值为-1或者0，分别代表函数调用失败以及成功。</p></li><li><p>clock 有如下选项</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> CLOCK_REALTIME 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CLOCK_MONOTONIC 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CLOCK_PROCESS_CPUTIME_ID 2</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CLOCK_THREAD_CPUTIME_ID 3</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CLOCK_MONOTONIC_RAW 4</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CLOCK_REALTIME_COARSE 5</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CLOCK_MONOTONIC_COARSE 6</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CLOCK_BOOTTIME 7</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CLOCK_REALTIME_ALARM 8</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CLOCK_BOOTTIME_ALARM 9</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CLOCK_SGI_CYCLE 10</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CLOCK_TAI 11</span><br></code></pre></td></tr></table></figure></li><li><p>比如CLOCK_REALTIME （0）代表当前真实时间，CLOCK_MONOTONIC_RAW（4）代表开机时间。</p></li><li><p><code>比如处理CLOCK_MONOTONIC_RAW（4）。一般也只需处理这个</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs javascript">package com.<span class="hljs-property">weibo</span>;<br><br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">Emulator</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">arm</span>.<span class="hljs-property">backend</span>.<span class="hljs-property">Backend</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">linux</span>.<span class="hljs-property">ARM32SyscallHandler</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">memory</span>.<span class="hljs-property">SvcMemory</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">github</span>.<span class="hljs-property">unidbg</span>.<span class="hljs-property">pointer</span>.<span class="hljs-property">UnidbgPointer</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">sun</span>.<span class="hljs-property">jna</span>.<span class="hljs-property">Pointer</span>;<br><span class="hljs-keyword">import</span> unicorn.<span class="hljs-property">ArmConst</span>;<br><br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">WBARM32SyscallHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">ARM32SyscallHandler</span> &#123;<br><br>    public <span class="hljs-title class_">WBARM32SyscallHandler</span>(<span class="hljs-title class_">SvcMemory</span> svcMemory) &#123;<br>        <span class="hljs-variable language_">super</span>(svcMemory);<br>    &#125;<br><br>    private <span class="hljs-keyword">static</span> final int <span class="hljs-variable constant_">CLOCK_REALTIME</span> = <span class="hljs-number">0</span>;<br>    private <span class="hljs-keyword">static</span> final int <span class="hljs-variable constant_">CLOCK_MONOTONIC</span> = <span class="hljs-number">1</span>;<br>    private <span class="hljs-keyword">static</span> final int <span class="hljs-variable constant_">CLOCK_THREAD_CPUTIME_ID</span> = <span class="hljs-number">3</span>;<br>    private <span class="hljs-keyword">static</span> final int <span class="hljs-variable constant_">CLOCK_MONOTONIC_RAW</span> = <span class="hljs-number">4</span>;<br>    private <span class="hljs-keyword">static</span> final int <span class="hljs-variable constant_">CLOCK_MONOTONIC_COARSE</span> = <span class="hljs-number">6</span>;<br>    private <span class="hljs-keyword">static</span> final int <span class="hljs-variable constant_">CLOCK_BOOTTIME</span> = <span class="hljs-number">7</span>;<br><br>    private final long nanoTime = <span class="hljs-title class_">System</span>.<span class="hljs-title function_">nanoTime</span>() - (1000000000L * <span class="hljs-number">3600</span>);<br><br>    @<span class="hljs-title class_">Override</span><br>    protected int <span class="hljs-title function_">clock_gettime</span>(<span class="hljs-params">Backend backend, Emulator&lt;?&gt; emulator</span>) &#123;<br>        int clk_id = backend.<span class="hljs-title function_">reg_read</span>(<span class="hljs-title class_">ArmConst</span>.<span class="hljs-property">UC_ARM_REG_R0</span>).<span class="hljs-title function_">intValue</span>();<br>        <span class="hljs-title class_">Pointer</span> tp = <span class="hljs-title class_">UnidbgPointer</span>.<span class="hljs-title function_">register</span>(emulator, <span class="hljs-title class_">ArmConst</span>.<span class="hljs-property">UC_ARM_REG_R1</span>);<br>        long offset = clk_id == <span class="hljs-variable constant_">CLOCK_REALTIME</span> ? <span class="hljs-title class_">System</span>.<span class="hljs-title function_">currentTimeMillis</span>() * 1000000L : <span class="hljs-title class_">System</span>.<span class="hljs-title function_">nanoTime</span>() - nanoTime;<br>        long tv_sec = offset / 1000000000L;<br>        long tv_nsec = offset % 1000000000L;<br><br>        <span class="hljs-keyword">switch</span> (clk_id) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-attr">CLOCK_REALTIME</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-attr">CLOCK_MONOTONIC</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-attr">CLOCK_MONOTONIC_RAW</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-attr">CLOCK_MONOTONIC_COARSE</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-attr">CLOCK_BOOTTIME</span>:<br>                tp.<span class="hljs-title function_">setInt</span>(<span class="hljs-number">0</span>, (int) tv_sec);<br>                tp.<span class="hljs-title function_">setInt</span>(<span class="hljs-number">4</span>, (int) tv_nsec);<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-attr">CLOCK_THREAD_CPUTIME_ID</span>:<br>                tp.<span class="hljs-title function_">setInt</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>                tp.<span class="hljs-title function_">setInt</span>(<span class="hljs-number">4</span>, <span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>(<span class="hljs-string">&quot;clk_id=&quot;</span> + clk_id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/4.%20%E8%A1%A5%E5%BA%93%E5%87%BD%E6%95%B0/2.%20%E5%A4%84%E7%90%86%E5%BA%93%E5%87%BD%E6%95%B0%E6%80%9D%E8%B7%AF/"/>
    <url>/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/4.%20%E8%A1%A5%E5%BA%93%E5%87%BD%E6%95%B0/2.%20%E5%A4%84%E7%90%86%E5%BA%93%E5%87%BD%E6%95%B0%E6%80%9D%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="处理库函数常规思路"><a href="#处理库函数常规思路" class="headerlink" title="处理库函数常规思路"></a>处理库函数常规思路</h1><h3 id="1-通过so导出方法，确认so使用到的常用库函数"><a href="#1-通过so导出方法，确认so使用到的常用库函数" class="headerlink" title="1. 通过so导出方法，确认so使用到的常用库函数"></a>1. 通过so导出方法，确认so使用到的常用库函数</h3><ul><li>在IDA中可以看到，样本有一百五十多个导入函数，我们挑选出潜在的、可能出问题的导入函数即库函数。</li><li><code>dlopen/dlsym/clock_gettime/sigaction/socket/popen/uname/stat/statfs/getpid/syscall/dladdr/system_property_get/getrusage/sysinfo </code></li></ul><h3 id="2-总结"><a href="#2-总结" class="headerlink" title="2.总结"></a>2.总结</h3><ul><li>unidbg常用库函数调用的代码在： <code>src/main/java/com/github/unidbg/linux/ARM32SyscallHandler.java</code></li><li>详情参考“wind详细分析”文章</li></ul><h3 id="3-发现调用的库函数：每个常用库函数添加断点"><a href="#3-发现调用的库函数：每个常用库函数添加断点" class="headerlink" title="3.发现调用的库函数：每个常用库函数添加断点"></a>3.发现调用的库函数：每个常用库函数添加断点</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs javascript">public <span class="hljs-keyword">void</span> <span class="hljs-title function_">hookLibc</span>(<span class="hljs-params"></span>)&#123;<br>     <span class="hljs-title class_">Debugger</span> <span class="hljs-keyword">debugger</span> = emulator.<span class="hljs-title function_">attach</span>();<br>     <span class="hljs-keyword">debugger</span>.<span class="hljs-title function_">addBreakPoint</span>(<span class="hljs-variable language_">module</span>.<span class="hljs-title function_">findSymbolByName</span>(<span class="hljs-string">&quot;dlopen&quot;</span>).<span class="hljs-title function_">getAddress</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">BreakPointCallback</span>() &#123;<br>         @<span class="hljs-title class_">Override</span><br>         public boolean <span class="hljs-title function_">onHit</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator, long address</span>) &#123;<br>             <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;SO call dlopen&quot;</span>);<br>             <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>         &#125;<br>     &#125;);<br><br>     <span class="hljs-keyword">debugger</span>.<span class="hljs-title function_">addBreakPoint</span>(<span class="hljs-variable language_">module</span>.<span class="hljs-title function_">findSymbolByName</span>(<span class="hljs-string">&quot;dlsym&quot;</span>).<span class="hljs-title function_">getAddress</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">BreakPointCallback</span>() &#123;<br>         @<span class="hljs-title class_">Override</span><br>         public boolean <span class="hljs-title function_">onHit</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator, long address</span>) &#123;<br>             <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;SO call dlysm&quot;</span>);<br>             <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>         &#125;<br>     &#125;);<br><br>     <span class="hljs-keyword">debugger</span>.<span class="hljs-title function_">addBreakPoint</span>(<span class="hljs-variable language_">module</span>.<span class="hljs-title function_">findSymbolByName</span>(<span class="hljs-string">&quot;clock_gettime&quot;</span>).<span class="hljs-title function_">getAddress</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">BreakPointCallback</span>() &#123;<br>         @<span class="hljs-title class_">Override</span><br>         public boolean <span class="hljs-title function_">onHit</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator, long address</span>) &#123;<br>             <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;SO call clock_gettime&quot;</span>);<br>             <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>         &#125;<br>     &#125;);<br><br>     <span class="hljs-keyword">debugger</span>.<span class="hljs-title function_">addBreakPoint</span>(<span class="hljs-variable language_">module</span>.<span class="hljs-title function_">findSymbolByName</span>(<span class="hljs-string">&quot;sigaction&quot;</span>).<span class="hljs-title function_">getAddress</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">BreakPointCallback</span>() &#123;<br>         @<span class="hljs-title class_">Override</span><br>         public boolean <span class="hljs-title function_">onHit</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator, long address</span>) &#123;<br>             <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;SO call sigaction&quot;</span>);<br>             <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>         &#125;<br>     &#125;);<br><br>     <span class="hljs-keyword">debugger</span>.<span class="hljs-title function_">addBreakPoint</span>(<span class="hljs-variable language_">module</span>.<span class="hljs-title function_">findSymbolByName</span>(<span class="hljs-string">&quot;socket&quot;</span>).<span class="hljs-title function_">getAddress</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">BreakPointCallback</span>() &#123;<br>         @<span class="hljs-title class_">Override</span><br>         public boolean <span class="hljs-title function_">onHit</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator, long address</span>) &#123;<br>             <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;SO call socket&quot;</span>);<br>             <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>         &#125;<br>     &#125;);<br><br>     <span class="hljs-keyword">debugger</span>.<span class="hljs-title function_">addBreakPoint</span>(<span class="hljs-variable language_">module</span>.<span class="hljs-title function_">findSymbolByName</span>(<span class="hljs-string">&quot;popen&quot;</span>).<span class="hljs-title function_">getAddress</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">BreakPointCallback</span>() &#123;<br>         @<span class="hljs-title class_">Override</span><br>         public boolean <span class="hljs-title function_">onHit</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator, long address</span>) &#123;<br>             <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;SO call popen&quot;</span>);<br>             <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>         &#125;<br>     &#125;);<br><br>     <span class="hljs-keyword">debugger</span>.<span class="hljs-title function_">addBreakPoint</span>(<span class="hljs-variable language_">module</span>.<span class="hljs-title function_">findSymbolByName</span>(<span class="hljs-string">&quot;uname&quot;</span>).<span class="hljs-title function_">getAddress</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">BreakPointCallback</span>() &#123;<br>         @<span class="hljs-title class_">Override</span><br>         public boolean <span class="hljs-title function_">onHit</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator, long address</span>) &#123;<br>             <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;SO call uname&quot;</span>);<br>             <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>         &#125;<br>     &#125;);<br><br>     <span class="hljs-keyword">debugger</span>.<span class="hljs-title function_">addBreakPoint</span>(<span class="hljs-variable language_">module</span>.<span class="hljs-title function_">findSymbolByName</span>(<span class="hljs-string">&quot;stat&quot;</span>).<span class="hljs-title function_">getAddress</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">BreakPointCallback</span>() &#123;<br>         @<span class="hljs-title class_">Override</span><br>         public boolean <span class="hljs-title function_">onHit</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator, long address</span>) &#123;<br>             <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;SO call stat&quot;</span>);<br>             <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>         &#125;<br>     &#125;);<br><br>     <span class="hljs-keyword">debugger</span>.<span class="hljs-title function_">addBreakPoint</span>(<span class="hljs-variable language_">module</span>.<span class="hljs-title function_">findSymbolByName</span>(<span class="hljs-string">&quot;statfs&quot;</span>).<span class="hljs-title function_">getAddress</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">BreakPointCallback</span>() &#123;<br>         @<span class="hljs-title class_">Override</span><br>         public boolean <span class="hljs-title function_">onHit</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator, long address</span>) &#123;<br>             <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;SO call statfs&quot;</span>);<br>             <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>         &#125;<br>     &#125;);<br><br>     <span class="hljs-keyword">debugger</span>.<span class="hljs-title function_">addBreakPoint</span>(<span class="hljs-variable language_">module</span>.<span class="hljs-title function_">findSymbolByName</span>(<span class="hljs-string">&quot;getpid&quot;</span>).<span class="hljs-title function_">getAddress</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">BreakPointCallback</span>() &#123;<br>         @<span class="hljs-title class_">Override</span><br>         public boolean <span class="hljs-title function_">onHit</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator, long address</span>) &#123;<br>             <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;SO call getpid&quot;</span>);<br>             <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>         &#125;<br>     &#125;);<br><br>     <span class="hljs-keyword">debugger</span>.<span class="hljs-title function_">addBreakPoint</span>(<span class="hljs-variable language_">module</span>.<span class="hljs-title function_">findSymbolByName</span>(<span class="hljs-string">&quot;syscall&quot;</span>).<span class="hljs-title function_">getAddress</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">BreakPointCallback</span>() &#123;<br>         @<span class="hljs-title class_">Override</span><br>         public boolean <span class="hljs-title function_">onHit</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator, long address</span>) &#123;<br>             <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;SO call syscall&quot;</span>);<br>             <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>         &#125;<br>     &#125;);<br><br>     <span class="hljs-keyword">debugger</span>.<span class="hljs-title function_">addBreakPoint</span>(<span class="hljs-variable language_">module</span>.<span class="hljs-title function_">findSymbolByName</span>(<span class="hljs-string">&quot;dladdr&quot;</span>).<span class="hljs-title function_">getAddress</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">BreakPointCallback</span>() &#123;<br>         @<span class="hljs-title class_">Override</span><br>         public boolean <span class="hljs-title function_">onHit</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator, long address</span>) &#123;<br>             <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;SO call dladdr&quot;</span>);<br>             <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>         &#125;<br>     &#125;);<br><br>     <span class="hljs-keyword">debugger</span>.<span class="hljs-title function_">addBreakPoint</span>(<span class="hljs-variable language_">module</span>.<span class="hljs-title function_">findSymbolByName</span>(<span class="hljs-string">&quot;getrusage&quot;</span>).<span class="hljs-title function_">getAddress</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">BreakPointCallback</span>() &#123;<br>         @<span class="hljs-title class_">Override</span><br>         public boolean <span class="hljs-title function_">onHit</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator, long address</span>) &#123;<br>             <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;SO call getrusage&quot;</span>);<br>             <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>         &#125;<br>     &#125;);<br><br>     <span class="hljs-keyword">debugger</span>.<span class="hljs-title function_">addBreakPoint</span>(<span class="hljs-variable language_">module</span>.<span class="hljs-title function_">findSymbolByName</span>(<span class="hljs-string">&quot;sysinfo&quot;</span>).<span class="hljs-title function_">getAddress</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">BreakPointCallback</span>() &#123;<br>         @<span class="hljs-title class_">Override</span><br>         public boolean <span class="hljs-title function_">onHit</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator, long address</span>) &#123;<br>             <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;SO call sysinfo&quot;</span>);<br>             <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>         &#125;<br>     &#125;);<br><br> &#125;<br></code></pre></td></tr></table></figure><h3 id="4-补库函数"><a href="#4-补库函数" class="headerlink" title="4. 补库函数"></a>4. 补库函数</h3><ul><li>参考不同库函数的文件</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/4.%20%E8%A1%A5%E5%BA%93%E5%87%BD%E6%95%B0/1.%20%E5%BA%93%E5%87%BD%E6%95%B0%E4%BB%8B%E7%BB%8D/"/>
    <url>/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/4.%20%E8%A1%A5%E5%BA%93%E5%87%BD%E6%95%B0/1.%20%E5%BA%93%E5%87%BD%E6%95%B0%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<ul><li>参考: <a href="https://www.yuque.com/lilac-2hqvv/xdwlsg/usg3an5x2x78ug0b">https://www.yuque.com/lilac-2hqvv/xdwlsg/usg3an5x2x78ug0b</a></li></ul><p>在 Android Native 代码开发中，会使用各种各样的库函数，一部分依赖于底层系统调用，一部分依赖于系统环境，一部分依赖于其他库，另一部分什么都不依赖，只是单纯的工具函数，</p><h1 id="第一类：依赖于系统调用"><a href="#第一类：依赖于系统调用" class="headerlink" title="第一类：依赖于系统调用"></a>第一类：依赖于系统调用</h1><ul><li>以 <code>openat</code> 为代表的各类文件访问函数都依赖于系统调用<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">.<span class="hljs-property">text</span>:0004147C                 <span class="hljs-variable constant_">EXPORT</span> __openat<br>.<span class="hljs-property">text</span>:0004147C __openat                                ; <span class="hljs-variable constant_">CODE</span> <span class="hljs-attr">XREF</span>: j___openat+<span class="hljs-number">8</span>↑j<br>.<span class="hljs-property">text</span>:0004147C                                         ; <span class="hljs-variable constant_">DATA</span> <span class="hljs-attr">XREF</span>: <span class="hljs-attr">LOAD</span>:<span class="hljs-number">00002670</span>↑o ...<br>.<span class="hljs-property">text</span>:0004147C                 <span class="hljs-variable constant_">MOV</span>             <span class="hljs-variable constant_">R12</span>, <span class="hljs-variable constant_">R7</span><br>.<span class="hljs-property">text</span>:<span class="hljs-number">00041480</span>                 <span class="hljs-variable constant_">LDR</span>             <span class="hljs-variable constant_">R7</span>, =<span class="hljs-number">0x142</span><br>.<span class="hljs-property">text</span>:<span class="hljs-number">00041484</span>                 <span class="hljs-variable constant_">SVC</span>             <span class="hljs-number">0</span><br>.<span class="hljs-property">text</span>:<span class="hljs-number">00041488</span>                 <span class="hljs-variable constant_">MOV</span>             <span class="hljs-variable constant_">R7</span>, <span class="hljs-variable constant_">R12</span><br>.<span class="hljs-property">text</span>:0004148C                 <span class="hljs-variable constant_">CMN</span>             <span class="hljs-variable constant_">R0</span>, #<span class="hljs-number">0x1000</span><br>.<span class="hljs-property">text</span>:<span class="hljs-number">00041490</span>                 <span class="hljs-variable constant_">BXLS</span>            <span class="hljs-variable constant_">LR</span><br>.<span class="hljs-property">text</span>:<span class="hljs-number">00041494</span>                 <span class="hljs-variable constant_">RSB</span>             <span class="hljs-variable constant_">R0</span>, <span class="hljs-variable constant_">R0</span>, #<span class="hljs-number">0</span><br>.<span class="hljs-property">text</span>:<span class="hljs-number">00041498</span>                 B               j___set_errno_internal<br></code></pre></td></tr></table></figure></li><li>对于这一类库函数，它的执行逻辑是程序调用库函数，库函数调用操作系统的系统调用，进而实现具体功能。</li></ul><h1 id="第二类：依赖于系统环境和上下文"><a href="#第二类：依赖于系统环境和上下文" class="headerlink" title="第二类：依赖于系统环境和上下文"></a>第二类：依赖于系统环境和上下文</h1><ul><li><p>比如在 Android Native 上高频使用的<code>__system_property_get</code>函数，用于获取系统属性，函数原型如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* Look up a system property by name, copying its value and a</span><br><span class="hljs-comment">** \0 terminator to the provided pointer.  The total bytes</span><br><span class="hljs-comment">** copied will be no greater than PROP_VALUE_MAX.  Returns</span><br><span class="hljs-comment">** the string length of the value.  A property that is not</span><br><span class="hljs-comment">** defined is identical to a property with a length 0 value.</span><br><span class="hljs-comment">*/</span><br>int <span class="hljs-title function_">__system_property_get</span>(<span class="hljs-keyword">const</span> char *name, char *value);<br></code></pre></td></tr></table></figure></li><li><p>基本用例如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript">#include &lt;jni.<span class="hljs-property">h</span>&gt;<br>#include &lt;string&gt;<br>#include &lt;sys/system_properties.<span class="hljs-property">h</span>&gt;<br>#include &lt;stdexcept&gt;<br>#include &lt;android/log.<span class="hljs-property">h</span>&gt;<br><br><br>#define <span class="hljs-title function_">LOGE</span>(...) <span class="hljs-title function_">__android_log_print</span>(<span class="hljs-variable constant_">ANDROID_LOG_ERROR</span>,<span class="hljs-string">&quot;Lilac&quot;</span> ,__VA_ARGS__)<br>extern <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-variable constant_">JNIEXPORT</span> jstring <span class="hljs-variable constant_">JNICALL</span><br><span class="hljs-title class_">Java</span>_com_example_getprop_MainActivity_stringFromJNI(<br>        <span class="hljs-title class_">JNIEnv</span>* env,<br>        jobject <span class="hljs-comment">/* this */</span>) &#123;<br>    char temp[<span class="hljs-number">128</span>] = <span class="hljs-string">&quot;0&quot;</span>;<br>    <span class="hljs-title function_">__system_property_get</span>(<span class="hljs-string">&quot;ro.build.id&quot;</span>, temp);<br>    <span class="hljs-title function_">LOGE</span>(<span class="hljs-string">&quot;id:%s&quot;</span>,temp);<br>    <span class="hljs-title function_">__system_property_get</span>(<span class="hljs-string">&quot;ro.build.version.sdk&quot;</span>, temp);<br>    <span class="hljs-title function_">LOGE</span>(<span class="hljs-string">&quot;version:%s&quot;</span>,temp);<br>    <span class="hljs-title function_">__system_property_get</span>(<span class="hljs-string">&quot;ro.board.platform&quot;</span>, temp);<br>    <span class="hljs-title function_">LOGE</span>(<span class="hljs-string">&quot;platform:%s&quot;</span>,temp);<br>    <span class="hljs-title function_">__system_property_get</span>(<span class="hljs-string">&quot;ro.product.cpu.abi&quot;</span>, temp);<br>    <span class="hljs-title function_">LOGE</span>(<span class="hljs-string">&quot;abi2:%s&quot;</span>,temp);<br>    <span class="hljs-title function_">__system_property_get</span>(<span class="hljs-string">&quot;ro.product.model&quot;</span>, temp);<br>    <span class="hljs-title function_">LOGE</span>(<span class="hljs-string">&quot;model:%s&quot;</span>,temp);<br>    <span class="hljs-title function_">__system_property_get</span>(<span class="hljs-string">&quot;ro.product.brand&quot;</span>, temp);<br>    <span class="hljs-title function_">LOGE</span>(<span class="hljs-string">&quot;brand:%s&quot;</span>,temp);<br>    <span class="hljs-title function_">__system_property_get</span>(<span class="hljs-string">&quot;ro.product.manufacturer&quot;</span>, temp);<br>    <span class="hljs-title function_">LOGE</span>(<span class="hljs-string">&quot;manufacturer:%s&quot;</span>,temp);<br>    <span class="hljs-keyword">return</span> env-&gt;<span class="hljs-title class_">NewStringUTF</span>(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>这些属性信息的获取，在很大程度上来自于对<code>/dev/__properties__</code>文件的解析。</p></li><li><p><strong>比如getenv函数，它用于获取环境变量</strong>，具体而言，<strong>它搜索name所指向的环境字符串</strong>，并返回相关的值给字符串。</p><blockquote><p>char *getenv(const char *name)</p></blockquote></li><li><p>它和setenv用于对进程的环境变量做读和取的操作，虽然底层不依赖于系统调用，但它同样十分重要。</p></li></ul><h1 id="第三类，依赖其他库函数或底层处理"><a href="#第三类，依赖其他库函数或底层处理" class="headerlink" title="第三类，依赖其他库函数或底层处理"></a>第三类，依赖其他库函数或底层处理</h1><ul><li>比如 libandroid.so 这个库，就依赖于相当多的其他的模块，提供了大量 Android 资源的访问功能。</li><li>第四类不必说，几乎不用考虑它，没什么事。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/2.%20%E8%A1%A5%E6%96%87%E4%BB%B6/%E8%A1%A5%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6/"/>
    <url>/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/2.%20%E8%A1%A5%E6%96%87%E4%BB%B6/%E8%A1%A5%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>参考：</p><ul><li><a href="https://www.yuque.com/docs/share/1559bab0-90de-422c-a3fb-eb32e68f44e0">https://www.yuque.com/docs/share/1559bab0-90de-422c-a3fb-eb32e68f44e0</a></li><li><a href="https://www.yuque.com/docs/share/c5c3ceab-570c-4e2a-823d-0c0a275cca33">https://www.yuque.com/docs/share/c5c3ceab-570c-4e2a-823d-0c0a275cca33</a></li></ul><h1 id="文件常识-常用文件及作用"><a href="#文件常识-常用文件及作用" class="headerlink" title="文件常识-常用文件及作用"></a>文件常识-常用文件及作用</h1><ul><li><p>&#x2F;proc&#x2F;self&#x2F;maps：</p><blockquote><p>检测 frida&#x2F;xposed 等模块 </p><p>也可以查看系统运行了哪些库  </p><p>找到某个SO的地址等等</p></blockquote></li><li><p>&#x2F;proc&#x2F;pid&#x2F;status：见下面</p></li><li><p>&#x2F;proc&#x2F;self&#x2F;task: 该目录包含的是进程中的每一个线程.每一个目录的名字是以线程ID命名的(tid).在每一个tid下面的目录结构与&#x2F;proc&#x2F;pid下面的目录结构相同.</p><blockquote><p>&#x2F;proc&#x2F;pid&#x2F;status 和 &#x2F;proc&#x2F;pid&#x2F;task&#x2F;pid&#x2F;status：普通状态下，TracerPid这项应该为0；调试状态下为调试进程的PID。</p></blockquote></li><li><p>&#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;random&#x2F;boot_id: </p><blockquote><p>Linux&#x2F;Android 文件系统的知识：boot_id 文件在开机时生成，在设备关机前不会改变内容</p><p>对业务的经验：boot_id 常用于构建设备指纹或单纯的信息采集，需要补它</p></blockquote></li><li><p>&#x2F;proc&#x2F;net</p><ul><li>&#x2F;proc&#x2F;net&#x2F;tcp：检测 Frida、IDA的默认端口</li><li>&#x2F;proc&#x2F;net&#x2F;arp： 是网络相关的文件，读取本地Arp表获取当前局域网内其他设备信息</li><li>&#x2F;proc&#x2F;net&#x2F;unix</li><li>是Google 禁止普通进程访问该目录，这一规定对 Android 10 以及更高的版本均有效 </li><li>这个目录主要用于检测环境，比如 IDA&#x2F;Frida Server 的端口检测。将真机的对应文件一股脑 拷贝过来，还可能把风险信息和检测点带过来</li></ul></li><li><p>&#x2F;proc&#x2F;self&#x2F;mounts：是访问与Magisk检测有关</p></li><li><p>&#x2F;proc&#x2F;pid&#x2F;fd：是一个子目录,包含了当前进程打开的每一个文件.每一个条目都是一个文件描述符,是一个符号链接,指向的是实际打开的地址</p></li><li><p>&#x2F;proc&#x2F;version： 可以用来确认内核版本，这有助于检测系统是否原生&#x2F;被魔改</p></li><li><p>&#x2F;proc&#x2F;self&#x2F;auxv：auxv 是为了检测CPU是否支持特定指令集，通过flag和位掩码予以确认</p></li><li><p>&#x2F;proc&#x2F;sys&#x2F;fs&#x2F;binfmt_misc，功能是检测模拟器，检查目录内有无arm关键字相关文件名，基于QEMU的模拟器都有此特征</p></li><li><p>&#x2F;sys&#x2F;class&#x2F;thermal，检查CPU温度，真机下有thermal_zone文件，模拟器不具备这系列文件</p></li><li><p>system&#x2F;bin&#x2F;su | &#x2F;xbin&#x2F;su等： 这一类是检测是否设备是否Root</p></li><li><p>&#x2F;sys&#x2F;devices&#x2F;system&#x2F;cpu&#x2F;cpu0&#x2F;cpufreq&#x2F;cpuinfo_max_freq: cpu信息</p></li><li><p>&#x2F;sys&#x2F;class&#x2F;power_supply&#x2F;battery&#x2F;temp  |  &#x2F;sys&#x2F;class&#x2F;power_supply&#x2F;battery&#x2F;voltage_now：电池信息</p></li><li><p>&#x2F;data</p><blockquote><p>如果文件访问 &#x2F;data，判断是否有写权限，进而确认设备环境是否 Root 的话，我们需要手动处理让其访问失败</p><p>因为虚拟文件系统会自动生成 data 目录，进而访问成功</p></blockquote><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;/data&quot;</span>:&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">return</span> FileResult.<span class="hljs-title">failed</span><span class="hljs-params">(UnixEmulator.EACCES)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="补系统文件"><a href="#补系统文件" class="headerlink" title="补系统文件"></a>补系统文件</h1><ul><li>思路：当发现需要某文件，确定[<strong>google</strong>]该文件的功能作用，确定是属于不用补的文件，还是环境检测，还是信息获取，还是其他。再进行下一步操作</li><li>当某个文件访问发起时，有人会不清楚它是信息读取还是环境检测，那么可以从星球中找几个实例跑一下，看一下其中所发生的文件访问，然后对应着Google一番，就明白个七七八八了，总之多Google。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// google 发现是检测是否是阿里云OS的lemur虚拟机</span><br>    <span class="hljs-keyword">if</span>(pathname.<span class="hljs-title function_">equals</span>(<span class="hljs-string">&quot;/system/lib/libvmkid_lemur.so&quot;</span>))&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">FileResult</span>.<span class="hljs-title function_">failed</span>(<span class="hljs-number">13</span>);<br>    &#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="文件分类"><a href="#文件分类" class="headerlink" title="文件分类"></a>文件分类</h2><h3 id="不用补的文件"><a href="#不用补的文件" class="headerlink" title="不用补的文件"></a>不用补的文件</h3><ul><li>pathName:&#x2F;dev&#x2F;<strong>properties</strong><ul><li>一般用于<code>__system_property_get</code>库函数，从这里获取系统属性</li></ul></li><li>fuck systemkey:ro.kernel.qemu</li><li>fuck systemkey:libc.debug.malloc</li><li>pathName:&#x2F;proc&#x2F;stat</li><li><code>/proc/net 目录下文件</code>： <ul><li>一是 Google 禁止普通进程访问该目录，这一规定对 Android 10 以及更高的版本均有效 </li><li>二是这个目录主要用于检测环境，比如 IDA&#x2F;Frida Server 的端口检测。将真机的对应文件一股脑 拷贝过来，还可能把风险信息和检测点带过来</li><li>&#x2F;proc&#x2F;net&#x2F;arp</li><li>&#x2F;proc&#x2F;net&#x2F;tcp</li><li>&#x2F;proc&#x2F;net&#x2F;unix</li></ul></li><li>环境检测的文件</li></ul><h3 id="环境检测"><a href="#环境检测" class="headerlink" title="环境检测"></a>环境检测</h3><p>样本做环境检测相关的文件访问时，<code>主要检测这些文件是否存在，以及是否有权限</code></p><ul><li>Root检测（检测 su、Magisk、Riru，检测市面上的 Root 工具）</li><li>模拟器检测（检测 Qemu，检测各家模拟器，比如夜神、雷电、Mumu 等模拟器的文件特征、驱动特征等）</li><li>危险应用检测（各类多开助手、按键精灵、接码平台等）</li><li>云手机检测 （以各种云手机产品为主）</li><li>Hook框架（以 Xposed、Substrate、Frida 为主）</li><li>脱壳机（以 Fart、DexHunter、Youpk 三者为主）</li></ul><p><code>我们选择什么都不补就行，因为不管是自定义还是默认的文件处理器，以及虚拟文件系统里，都不会有这样内容，这正合我们的意</code>。就像下面，什么都不补就行了</p><h3 id="信息获取"><a href="#信息获取" class="headerlink" title="信息获取"></a>信息获取</h3><ul><li>遇到下面这些文件时，建议正常补，并且了解每个文件的用途，在生产环境上部分需要随机化<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-regexp">/proc/</span>meminfo<br><span class="hljs-regexp">/proc/</span>version<br><span class="hljs-regexp">/proc/</span>cpuinfo<br><span class="hljs-regexp">/proc/</span>stat<br><span class="hljs-regexp">/proc/</span>asound<span class="hljs-regexp">/cardX/</span>id<br><span class="hljs-regexp">/proc/</span><span class="hljs-keyword">self</span><span class="hljs-operator">/</span>exe<br></code></pre></td></tr></table></figure></li></ul><h2 id="补文件符号链接-fd"><a href="#补文件符号链接-fd" class="headerlink" title="补文件符号链接[fd]"></a>补文件符号链接[fd]</h2><ul><li>参考星球：Unidbg文件处理基本使用</li><li><code>我们说FD目录包含了当前进程中打开的每一个文件，那么其中必然有自身apk文件，因为进程需要通过apk来访问相关资源文件。那么我打算通过这个方式来获取APK全路径名（这可以用来检测自身SO是否运行在自己Apk中，或者做签名校验），这比通过JNI获取路径名的方式更隐蔽。</code></li><li>处理其他符号链接可能难办，但处理FD目录并不麻烦，因为Unidbg中对它做了处理。<figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-keyword">if</span> (pathname.<span class="hljs-keyword">startsWith</span>(<span class="hljs-string">&quot;/proc/&quot;</span> + emulator.getPid() + <span class="hljs-string">&quot;/fd/&quot;</span>) || pathname.<span class="hljs-keyword">startsWith</span>(<span class="hljs-string">&quot;/proc/self/fd/&quot;</span>)) &#123;<br>    <span class="hljs-keyword">int</span> fd = Integer.parseInt(pathname.<span class="hljs-keyword">substring</span>(pathname.lastIndexOf(<span class="hljs-string">&quot;/&quot;</span>) + <span class="hljs-number">1</span>));<br>    T <span class="hljs-keyword">file</span> = fdMap.get(fd);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">file</span> != null) &#123;<br>        <span class="hljs-keyword">return</span> FileResult.success(<span class="hljs-keyword">file</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>简而言之，只要你在Unidbg中打开了某个文件，那么对应的，FD中就可以访问和处理到它。</li></ul><ol><li><code>那么首先，我们通过SyscallHandler发起一个文件打开的操作，选择一个较早的时机即可。</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 新添加的代码</span><br>emulator.<span class="hljs-title function_">getSyscallHandler</span>().<span class="hljs-title function_">open</span>(emulator, <span class="hljs-string">&quot;/data/app/com.example.fddemo-ZNS4KZftr0zbBcMSmmYZHw==/base.apk&quot;</span>, <span class="hljs-number">0</span>);<br>vm = emulator.<span class="hljs-title function_">createDalvikVM</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;unidbg-android/src/test/resources/fddemo/app-debug.apk&quot;</span>));<br></code></pre></td></tr></table></figure></li><li>然后在resolve中对它做补文件操作<figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">if</span>(pathname.<span class="hljs-built_in">equals</span>(<span class="hljs-string">&quot;/data/app/com.example.fddemo-ZNS4KZftr0zbBcMSmmYZHw==/base.apk&quot;</span>))&#123;<br>    <span class="hljs-keyword">return</span> FileResult.success(<span class="hljs-keyword">new</span> SimpleFileIO(oflags, <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;unidbg-android/src/test/resources/fddemo/app-debug.apk&quot;</span>), pathname));<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="补设备文件"><a href="#补设备文件" class="headerlink" title="补设备文件"></a>补设备文件</h2><ul><li>所有硬件都有对应的文件，文件系统通过访问这些文件，去访问对应的设备。即从形式上看，设备文件和普通文件一样，但本质上，对设备文件的读写操作实际上与某个设备的输入输出操作关联在一起。</li><li>Unidbg中，对应于设备文件的概念叫 <code>DriverFileIO</code>，其中也做了一些处理<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript">public <span class="hljs-keyword">static</span> <span class="hljs-title class_">DriverFileIO</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator, int oflags, <span class="hljs-built_in">String</span> pathname</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;/dev/urandom&quot;</span>.<span class="hljs-title function_">equals</span>(pathname) || <span class="hljs-string">&quot;/dev/random&quot;</span>.<span class="hljs-title function_">equals</span>(pathname) || <span class="hljs-string">&quot;/dev/srandom&quot;</span>.<span class="hljs-title function_">equals</span>(pathname)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomFileIO</span>(emulator, pathname);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;/dev/alarm&quot;</span>.<span class="hljs-title function_">equals</span>(pathname) || <span class="hljs-string">&quot;/dev/null&quot;</span>.<span class="hljs-title function_">equals</span>(pathname)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DriverFileIO</span>(emulator, oflags, pathname);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;/dev/ashmem&quot;</span>.<span class="hljs-title function_">equals</span>(pathname)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Ashmem</span>(emulator, oflags, pathname);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;/dev/zero&quot;</span>.<span class="hljs-title function_">equals</span>(pathname)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZeroFileIO</span>(emulator, oflags, pathname);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>总体来说，我们几乎遇不到手动处理这类文件的需求。</li></ul><h2 id="补管道文件"><a href="#补管道文件" class="headerlink" title="补管道文件"></a>补管道文件</h2><ul><li>典型的情况就是库函数 popen，使用匿名管道传输数据。Unidbg中如何处理它，是一个高频问题，详见星球《wind详细分析》这一篇综合实例，或者笔记</li></ul><h2 id="补Socket文件"><a href="#补Socket文件" class="headerlink" title="补Socket文件"></a>补Socket文件</h2><h3 id="通过ioctl来获取设备mac地址"><a href="#通过ioctl来获取设备mac地址" class="headerlink" title="通过ioctl来获取设备mac地址"></a>通过ioctl来获取设备mac地址</h3><ul><li>常见问题是<code>通过ioctl来获取设备mac地址</code>，这个逻辑在Unidbg中尚未实现，建议patch，代码如下<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript">public <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleIoctl</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title class_">Symbol</span> ioctlSymbol = <span class="hljs-variable language_">module</span>.<span class="hljs-title function_">findSymbolByName</span>(<span class="hljs-string">&quot;ioctl&quot;</span>);<br>    emulator.<span class="hljs-title function_">attach</span>().<span class="hljs-title function_">addBreakPoint</span>(ioctlSymbol.<span class="hljs-title function_">getAddress</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">BreakPointCallback</span>() &#123;<br>        @<span class="hljs-title class_">Override</span><br>        public boolean <span class="hljs-title function_">onHit</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator, long address</span>) &#123;<br>              <span class="hljs-comment">// 顺利则返回0</span><br>              <span class="hljs-title class_">RegisterContext</span> registerContext = emulator.<span class="hljs-title function_">getContext</span>();<br>              int requestId = registerContext.<span class="hljs-title function_">getIntByReg</span>(<span class="hljs-title class_">ArmConst</span>.<span class="hljs-property">UC_ARM_REG_R1</span>);<br>              <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;requestID:&quot;</span>+<span class="hljs-title class_">Integer</span>.<span class="hljs-title function_">toHexString</span>(requestId));<br>              <span class="hljs-comment">// #define SIOCGIFHWADDR 0x8927 /* Get hardware address */</span><br>              <span class="hljs-keyword">if</span>(requestId==<span class="hljs-number">0x8927</span>)&#123;<br>                    emulator.<span class="hljs-title function_">getBackend</span>().<span class="hljs-title function_">reg_write</span>(<span class="hljs-title class_">ArmConst</span>.<span class="hljs-property">UC_ARM_REG_R0</span>, -<span class="hljs-number">1</span>);<br>                    emulator.<span class="hljs-title function_">getBackend</span>().<span class="hljs-title function_">reg_write</span>(<span class="hljs-title class_">ArmConst</span>.<span class="hljs-property">UC_ARM_REG_PC</span>, registerContext.<span class="hljs-title function_">getLRPointer</span>().<span class="hljs-property">peer</span>);<br>              &#125;<br>              <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>         &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="补proc伪文件系统"><a href="#补proc伪文件系统" class="headerlink" title="补proc伪文件系统"></a>补proc伪文件系统</h2><ul><li><code>proc文件系统由内核提供</code>，它是一个伪文件系统，_它只存在内存当中，而不占用外存空间_。_它以文件系统的方式为访问系统内核数据的操作提供接口_。<code>系统中当前运行的每一个进程都有对应的一个目录在 proc 下，以进程的 PID 号为目录名，它们是读取进程信息的接口</code>。</li><li>注意：假设 Unidbg 访问 &#x2F;proc&#x2F;1234&#x2F;maps或&#x2F;proc&#x2F;self&#x2F;maps<ul><li>你不应该通过 adb 在同样位置去找它，因为 Unidbg 和真实环境的 pid 显然没有对应关系</li><li>应该通过 ps | grep packageName找到目标 app 在真机上的 pid，然后去做对应的查看</li></ul></li></ul><h3 id="固定pid"><a href="#固定pid" class="headerlink" title="固定pid"></a>固定pid</h3><ul><li>修改了src&#x2F;main&#x2F;java&#x2F;com&#x2F;github&#x2F;unidbg&#x2F;AbstractEmulator.java中的如图位置，使PID固定</li><li>因为PID不停变动可能会影响后续分析，但这不是必须的操作。<code>如果Unidbg固定PID，很容易依此检测和对抗Unidbg</code></li></ul><h3 id="读取-proc-self-maps做什么"><a href="#读取-proc-self-maps做什么" class="headerlink" title="读取&#x2F;proc&#x2F;self&#x2F;maps做什么"></a>读取&#x2F;proc&#x2F;self&#x2F;maps做什么</h3><p>&#x2F;proc&#x2F;pid&#x2F;maps 包含了当前进程映射的内存区域以及他们的访问权限</p><ol><li>检测frida反调试</li><li>也可以查看系统运行了哪些库，</li><li>找到某个SO的地址等等</li></ol><p>注意：</p><ol><li><p>Unidbg 中对它做了专门的处理——如果在自定义 IOResolver 中没有得到处理，会返回Unidbg虚拟环境中已加载虚拟模块所构成的maps（它完全按照maps的格式生成，内容对应于Unidbg虚拟内存中的模块信息，我们叫它fakeMaps。）</p></li><li><p><code>这个fakeMaps可以解决和避免不少问题</code>。比如样本读取maps，检测其中是否有frida&#x2F;xposed&#x2F;substrate&#x2F;magisk&#x2F;riru 这些风险模块的信息。<code>因为 fakeMaps 很干净简洁，所以不会被检测出什么问题。相比较而言，从真机copy出maps，因为真机maps中存在frida等模块信息，反而带来了风险</code>。</p></li><li><p><code>事实上，fakemaps是有隐患的</code>。我们需要意识到 fakeMaps 和 真实maps 的关系——真实maps包含整个进程的模块信息，fakeMaps 仅包含当前所处理的SO及其依赖模块的信息，这是一种包含关系，后者包含了许多前者所不具有的信息。而在SO有一些逻辑里，需要获取进程中的信息（即下图在小框外的部分），那么就会出问题</p></li><li><p>有一套粗糙的流程，如果能走通那最好。 </p><ol><li>样本访问maps </li><li>先不补maps，即用Unidbg自生成的fakemaps </li><li>观察程序执行是否发生错误，比如明显的报错 </li><li>如果没有报错，那就当无事发生，fakeMaps直接过。 </li><li>如果出现问题，那么使用从真机获得的maps </li><li>如果没有报错，那就当无事发生，maps直接过。 </li><li>如果出现内存相关异常，具体分析</li></ol></li><li><p>需要在我们的resolve中用代码方式补maps，才能用上我们从测试机里pull的maps。**<em>对maps的读取常常是重要的反Frida战场</em>**</p></li><li><p><strong><em>如果使用&#x2F;proc&#x2F;self&#x2F;maps补环境没有效果，就使用&#x2F;proc&#x2F;<pid>&#x2F;maps 文件</em></strong></p></li></ol><h3 id="读取-proc-pid-cmdline做什么"><a href="#读取-proc-pid-cmdline做什么" class="headerlink" title="读取&#x2F;proc&#x2F;pid&#x2F;cmdline做什么"></a>读取&#x2F;proc&#x2F;pid&#x2F;cmdline做什么</h3><ul><li>在Android系统中，<code>进程的cmdline返回应用的进程名</code>。那么此处的目的就很明显了，<code>验证环境是否是”自己“的环境，防止应用被重打包</code>。当样本发现进程名和自身不符时，即说明自己可能被重打包了，就会直接退出或者引向错误逻辑。</li><li>我们最好做一下PID的固定，PID一直变动对我们补环境可能有影响，最好将其固定成测试机中真实运行的样本PID</li><li>src&#x2F;main&#x2F;java&#x2F;com&#x2F;github&#x2F;unidbg&#x2F;AbstractEmulator.java 修改进程号</li><li>结尾记得加上\0，这是 cmdline 的格式规范，不加的话在解析时存在出错的可能性<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs csharp">@Override<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> FileResult <span class="hljs-title">resolve</span>(<span class="hljs-params">Emulator emulator, String pathname, <span class="hljs-built_in">int</span> oflags</span>)</span> &#123;<br>       <span class="hljs-keyword">if</span> ((<span class="hljs-string">&quot;/proc/&quot;</span>+emulator.getPid()+<span class="hljs-string">&quot;/cmdline&quot;</span>).<span class="hljs-keyword">equals</span>(pathname) || (<span class="hljs-string">&quot;/proc/self/cmdline&quot;</span>).<span class="hljs-keyword">equals</span>(pathname)) &#123;<br>           <span class="hljs-comment">//我显式的补了\0，因为cmdline的格式默认以\0分割，如果不加\0，当样本以“逐个字节往后读，直到遇到\0”的逻辑解析时，会导致错误，记不住的可以老老实实补SimpleFileIO</span><br>            <span class="hljs-keyword">return</span> FileResult.success(<span class="hljs-keyword">new</span> ByteArrayFileIO(oflags, pathname, <span class="hljs-string">&quot;com.sina.weibo\0&quot;</span>.getBytes(StandardCharsets.UTF_8)));<br>           <span class="hljs-keyword">return</span> FileResult.success(<span class="hljs-keyword">new</span> ByteArrayFileIO(oflags, pathname, <span class="hljs-string">&quot;ctrip.android.view ×××&quot;</span>.getBytes()));<br>       &#125;<br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>   &#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="读取-proc-pid-status做什么"><a href="#读取-proc-pid-status做什么" class="headerlink" title="读取&#x2F;proc&#x2F;pid&#x2F;status做什么"></a>读取&#x2F;proc&#x2F;pid&#x2F;status做什么</h3><ul><li>该文件包含该进程的众多信息：可执行文件名、当前状态、PID 和 PPID、实际及有效的 UID 和 GID、内存使用情况、以及其他。</li><li>一般而言，<code>样本检测status是为了其中的TracerPid字段</code>，TracerPid为0说明样本没有被调试，不为0说明正在被调试，所以一般会检测TracePid，如果被调试则直接退出或者引向错误逻辑。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs javascript">@<span class="hljs-title class_">Override</span><br>    public <span class="hljs-title class_">FileResult</span> <span class="hljs-title function_">resolve</span>(<span class="hljs-params">Emulator emulator, <span class="hljs-built_in">String</span> pathname, int oflags</span>) &#123;<br>        <span class="hljs-keyword">if</span> ((<span class="hljs-string">&quot;/proc/&quot;</span>+emulator.<span class="hljs-title function_">getPid</span>()+<span class="hljs-string">&quot;/cmdline&quot;</span>).<span class="hljs-title function_">equals</span>(pathname) || (<span class="hljs-string">&quot;/proc/self/cmdline&quot;</span>).<span class="hljs-title function_">equals</span>(pathname)) &#123;<br><span class="hljs-comment">//            return FileResult.success(new ByteArrayFileIO(oflags, pathname, &quot;ctrip.android.view&quot;.getBytes()));</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-title class_">FileResult</span>.<span class="hljs-title function_">success</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleFileIO</span>(oflags, <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\unidbg-teach\\unidbg-android\\src\\test\\java\\com\\lession1\\cmdline&quot;</span>), pathname));<br>            &#125;<br>            <span class="hljs-comment">// 复制过来的status的文本要注意给里面代表pid的值和unidbg的pid一致            </span><br>        <span class="hljs-keyword">if</span> ((<span class="hljs-string">&quot;/proc/&quot;</span> + emulator.<span class="hljs-title function_">getPid</span>() + <span class="hljs-string">&quot;/status&quot;</span>).<span class="hljs-title function_">equals</span>(pathname) || (<span class="hljs-string">&quot;/proc/self/status&quot;</span>).<span class="hljs-title function_">equals</span>(pathname)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-title class_">FileResult</span>.<span class="hljs-title function_">success</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayFileIO</span>(oflags, pathname, (<span class="hljs-string">&quot;Name:   ip.android.view\n&quot;</span> +<br>                    <span class="hljs-string">&quot;State:  R (running)\n&quot;</span> +<br>                    <span class="hljs-string">&quot;Tgid:   &quot;</span>+emulator.<span class="hljs-title function_">getPid</span>()+<span class="hljs-string">&quot;\n&quot;</span> +<br>                    <span class="hljs-string">&quot;Pid:    &quot;</span>+emulator.<span class="hljs-title function_">getPid</span>()+<span class="hljs-string">&quot;\n&quot;</span> +<br>                    <span class="hljs-string">&quot;PPid:   17506\n&quot;</span> +<br>                    <span class="hljs-string">&quot;TracerPid:      0\n&quot;</span> +<br>                    <span class="hljs-string">&quot;Uid:    10148   10148   10148   10148\n&quot;</span> +<br>                    <span class="hljs-string">&quot;Gid:    10148   10148   10148   10148\n&quot;</span> +<br>                    <span class="hljs-string">&quot;FDSize: 512\n&quot;</span> +<br>                    <span class="hljs-string">&quot;Groups: 3002 3003 9997 20148 50148\n&quot;</span> +<br>                    <span class="hljs-string">&quot;VmPeak:  2224800 kB\n&quot;</span> +<br>                    <span class="hljs-string">&quot;VmSize:  2185240 kB\n&quot;</span> +<br>                    <span class="hljs-string">&quot;VmLck:         0 kB\n&quot;</span> +<br>                    <span class="hljs-string">&quot;VmPin:         0 kB\n&quot;</span> +<br>                    <span class="hljs-string">&quot;VmHWM:    354920 kB\n&quot;</span> +<br>                    <span class="hljs-string">&quot;VmRSS:    324572 kB\n&quot;</span> +<br>                    <span class="hljs-string">&quot;VmData:   379340 kB\n&quot;</span> +<br>                    <span class="hljs-string">&quot;VmStk:      8192 kB\n&quot;</span> +<br>                    <span class="hljs-string">&quot;VmExe:        20 kB\n&quot;</span> +<br>                    <span class="hljs-string">&quot;VmLib:    209888 kB\n&quot;</span> +<br>                    <span class="hljs-string">&quot;VmPTE:      2020 kB\n&quot;</span> +<br>                    <span class="hljs-string">&quot;VmSwap:     3012 kB\n&quot;</span> +<br>                    <span class="hljs-string">&quot;Threads:        127\n&quot;</span> +<br>                    <span class="hljs-string">&quot;SigQ:   2/6517\n&quot;</span> +<br>                    <span class="hljs-string">&quot;SigPnd: 0000000000000000\n&quot;</span> +<br>                    <span class="hljs-string">&quot;ShdPnd: 0000000000000000\n&quot;</span> +<br>                    <span class="hljs-string">&quot;SigBlk: 0000000000001204\n&quot;</span> +<br>                    <span class="hljs-string">&quot;SigIgn: 0000000000000000\n&quot;</span> +<br>                    <span class="hljs-string">&quot;SigCgt: 00000006400096fc\n&quot;</span> +<br>                    <span class="hljs-string">&quot;CapInh: 0000000000000000\n&quot;</span> +<br>                    <span class="hljs-string">&quot;CapPrm: 0000000000000000\n&quot;</span> +<br>                    <span class="hljs-string">&quot;CapEff: 0000000000000000\n&quot;</span> +<br>                    <span class="hljs-string">&quot;CapBnd: 0000000000000000\n&quot;</span> +<br>                    <span class="hljs-string">&quot;CapAmb: 0000000000000000\n&quot;</span> +<br>                    <span class="hljs-string">&quot;Seccomp:        2\n&quot;</span> +<br>                    <span class="hljs-string">&quot;Cpus_allowed:   0f\n&quot;</span> +<br>                    <span class="hljs-string">&quot;Cpus_allowed_list:      0-3\n&quot;</span> +<br>                    <span class="hljs-string">&quot;Mems_allowed:   1\n&quot;</span> +<br>                    <span class="hljs-string">&quot;Mems_allowed_list:      0\n&quot;</span> +<br>                    <span class="hljs-string">&quot;voluntary_ctxt_switches:        21102\n&quot;</span> +<br>                    <span class="hljs-string">&quot;nonvoluntary_ctxt_switches:     20849&quot;</span>).<span class="hljs-title function_">getBytes</span>()));<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h3><p><img src="/blog/../../../../../../../images/android/%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/proc%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/2.%20%E8%A1%A5%E6%96%87%E4%BB%B6/%E8%A1%A5so%E6%96%87%E4%BB%B6/"/>
    <url>/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/2.%20%E8%A1%A5%E6%96%87%E4%BB%B6/%E8%A1%A5so%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="判断场景"><a href="#判断场景" class="headerlink" title="判断场景"></a>判断场景</h1><ul><li>发现需要引入其他so，先判断是否是系统so， 还是app的so</li><li>日志报错提示找不到依赖库<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-attr">[08:13:48 753]</span>  INFO <span class="hljs-selector-attr">[com.github.unidbg.linux.AndroidElfLoader]</span> (AndroidElfLoader:<span class="hljs-number">474</span>) - libnet_crypto<span class="hljs-selector-class">.so</span> load dependency libandroid<span class="hljs-selector-class">.so</span> failed<br>libnet_crypto<span class="hljs-selector-class">.so</span> 试图加载 libandroid<span class="hljs-selector-class">.so</span> 这个依赖库，但没找到<br></code></pre></td></tr></table></figure></li><li><code>日志中可以看到”getAssets“等字眼且有错误信息，就应该想到系统so问题</code>。因为Android中通过libandroid.so对Assets资源文件进行操作</li></ul><h1 id="app的so"><a href="#app的so" class="headerlink" title="app的so"></a>app的so</h1><ul><li>如果是app的so，就导出该so文件，在之前引入即可<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">DalvikModule</span> <span class="hljs-variable">dm_shared</span> <span class="hljs-operator">=</span> vm.loadLibrary(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;unidbg-android/src/test/java/com/xunmeng/pinduoduo/libc++_shared.so&quot;</span>),<span class="hljs-literal">true</span>);<br>dm_shared.callJNI_OnLoad(emulator);<br><br><span class="hljs-type">DalvikModule</span> <span class="hljs-variable">dm_libUserEnv</span> <span class="hljs-operator">=</span> vm.loadLibrary(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;unidbg-android/src/test/java/com/xunmeng/pinduoduo/libUserEnv.so&quot;</span>),<span class="hljs-literal">true</span>);<br>dm_libUserEnv.callJNI_OnLoad(emulator);<br><br><span class="hljs-type">DalvikModule</span> <span class="hljs-variable">dm</span> <span class="hljs-operator">=</span> vm.loadLibrary(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;unidbg-android/src/test/java/com/xunmeng/pinduoduo/libpdd_secure.so&quot;</span>), <span class="hljs-literal">true</span>);<br><span class="hljs-keyword">module</span> = dm.getModule();<br></code></pre></td></tr></table></figure></li></ul><h1 id="系统的so"><a href="#系统的so" class="headerlink" title="系统的so"></a>系统的so</h1><h2 id="查看样本加载了哪些系统so文件"><a href="#查看样本加载了哪些系统so文件" class="headerlink" title="查看样本加载了哪些系统so文件"></a>查看样本加载了哪些系统so文件</h2><ol><li>在<code>src/main/java/com/github/unidbg/linux/AndroidElfLoader.java</code>加上代码<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">private</span> <span class="hljs-function">LinuxModule <span class="hljs-title">loadInternal</span><span class="hljs-params">(LibraryFile libraryFile)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;load so: &quot;</span> + libraryFile.getName());  <span class="hljs-comment">// 加上这句</span><br></code></pre></td></tr></table></figure></li><li>注: 这里只能打印unidbg支持加载的系统so，如果unidbg不支持，则不会打印。比如加载了libandroid.so, 但是unidbg不支持，这里不会打印。<code>但是可以和ida中加载的so列表对比，可看出来缺少哪个系统so</code></li></ol><h2 id="常见的系统so文件"><a href="#常见的系统so文件" class="headerlink" title="常见的系统so文件"></a>常见的系统so文件</h2><ul><li>libc.so是我们最熟悉的，它是C的标准函数库 </li><li>libstdc++ 是C++ 的标准函数库，NDK开发中，肯定得使用两者中的函数 </li><li>libm.so是C的数学(Math)标准库 </li><li>liblog.so顾名思义就是日志打印的库 </li><li>libdl.so则包含了dlopen,dlclose,dlsym,dlerror.这几个函数的实现，可以在程序中实现其他SO的加载和函数的执行。 </li><li>libandroid.so 则提供了一些对Android的访问API,搜索so的导入函数，包含asset则表示用到libandroid.so <ul><li>此处提示libandroid.so加载失败</li></ul></li><li>libmediandk.so<ul><li>MediaDrm 是数字音频版权框架，其在安卓架构中原生支持。</li><li>Media Drm ID是数字音频用于追踪，保护版权所需的唯一设备ID。和libandroid.so一样，很复杂，最新版unidbg已更新最常用三个接口的虚拟模块实现，或者参考：<a href="https://github.com/zhkl0228/unidbg/pull/435/files">Add a simple implementation of mediandk via VirtualModule by Pr0214 · Pull Request #435 · zhkl0228&#x2F;unidbg · GitHub</a></li></ul></li></ul><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>如果目标函数使用到了系统SO，那就麻烦了，我们就得直面这个问题， 这里面有三种情况：</p><ol><li>Unidbg可以顺利加载依赖SO，那就把它先于目标SO加载进来就行</li><li>Unidbg不能顺利加载依赖SO，但这个依赖SO以及其函数在目标函数中没使用，那就不用理睬</li><li>Unidbg不能顺利加载依赖SO，目标函数中使用到了这个依赖SO提供的函数</li></ol><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>针对需要使用这个so的方法一般有两种处理办法</p><ol><li>Patch&#x2F;Hook 掉这个不支持的SO所使用的函数，没什么技术含量，而且并不总是能用</li><li>hook实现该so。主要用这种<ol><li>我们可以在libscmain中hook libandroid.so的函数，或者不管三七二十一，直接把那个SO加载进来，然后hook 其中的各种函数，反正就是Hook，然后自己实现这些个函数的逻辑，给予正确的返回值。</li><li>使用<code>Unidbg VirtualModule</code>：目前 Unidbg 提供了  <code>libandroid.so、libjnigraphics.so、libmediandk.so</code> 三个库的虚拟模块</li></ol></li></ol><h3 id="VirtualModule"><a href="#VirtualModule" class="headerlink" title="VirtualModule"></a>VirtualModule</h3><ul><li>VirtualModule是Unidbg为此种情况所提供的官方解决方案，并在代码中提供了两个示例</li></ul><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><ul><li>unidbg如何实现一个VirtualModule？此类问题我们在更后面的文章去讨论它。需要注意的是，VirtualModule并不是一种真正意义上的加载SO，它本质上也是Hook，只不过实现了SO中少数几个函数罢了。</li></ul><h4 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h4><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-params">...</span><span class="hljs-params">...</span> <br>demo2()&#123;<br>       emulator = AndroidEmulatorBuilder.for32Bit().setProcessName(<span class="hljs-string">&quot;com.readAssets&quot;</span>).build(); <span class="hljs-comment">// 这句不用管</span><br>   <span class="hljs-params">...</span><span class="hljs-params">...</span><br>       <span class="hljs-literal">new</span> AndroidModule(emulator, vm).register(memory);  <span class="hljs-comment">// 加上这句</span><br>   <span class="hljs-params">...</span><span class="hljs-params">...</span><br>       dm.callJNI_OnLoad(emulator);<br>   &#125;<br></code></pre></td></tr></table></figure><ul><li>需要注意，<code>一定要在样本SO加载前加载它</code>，道理也很简单，系统SO肯定比用户SO加载早鸭。</li></ul><h4 id="特殊情况：VirtualModule没有此类方法，则需要重新写"><a href="#特殊情况：VirtualModule没有此类方法，则需要重新写" class="headerlink" title="特殊情况：VirtualModule没有此类方法，则需要重新写"></a>特殊情况：VirtualModule没有此类方法，则需要重新写</h4><ul><li>参考：<a href="https://www.yuque.com/lilac-2hqvv/xdwlsg/kbk25war5dc2pkfr">https://www.yuque.com/lilac-2hqvv/xdwlsg/kbk25war5dc2pkfr</a></li><li>下面实现了传感器seneor的各种api<blockquote><p>png -&gt; java: <img src="/blog/../../../../../../../images/android/%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/AndroidModule.png"></p></blockquote></li><li>样例代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xunmeng.pinduoduo.lilac;<br><br><span class="hljs-keyword">import</span> com.github.unidbg.Emulator;<br><span class="hljs-keyword">import</span> com.github.unidbg.arm.ArmSvc;<br><span class="hljs-keyword">import</span> com.github.unidbg.arm.context.RegisterContext;<br><span class="hljs-keyword">import</span> com.github.unidbg.linux.android.dvm.VM;<br><span class="hljs-keyword">import</span> com.github.unidbg.memory.MemoryBlock;<br><span class="hljs-keyword">import</span> com.github.unidbg.memory.SvcMemory;<br><span class="hljs-keyword">import</span> com.github.unidbg.pointer.UnidbgPointer;<br><span class="hljs-keyword">import</span> com.github.unidbg.virtualmodule.VirtualModule;<br><br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">// todo  学习</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserEnvModule</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">VirtualModule</span>&lt;VM&gt; &#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-title function_">UserEnvModule</span><span class="hljs-params">(Emulator&lt;?&gt; emulator)</span> &#123;<br>        <span class="hljs-built_in">super</span>(emulator, <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;libUserEnv.so&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onInitialize</span><span class="hljs-params">(Emulator&lt;?&gt; emulator, VM extra, Map&lt;String, UnidbgPointer&gt; symbols)</span> &#123;<br>        <span class="hljs-type">SvcMemory</span> <span class="hljs-variable">svcMemory</span> <span class="hljs-operator">=</span> emulator.getSvcMemory();<br>        symbols.put(<span class="hljs-string">&quot;GetUserEnvStr&quot;</span>, svcMemory.registerSvc(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArmSvc</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(Emulator&lt;?&gt; emulator)</span> &#123;<br>                <span class="hljs-type">RegisterContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> emulator.getContext();<br>                <span class="hljs-type">int</span> <span class="hljs-variable">arg0</span> <span class="hljs-operator">=</span> context.getIntArg(<span class="hljs-number">0</span>);<br>                <span class="hljs-type">int</span> <span class="hljs-variable">arg1</span> <span class="hljs-operator">=</span> context.getIntArg(<span class="hljs-number">1</span>);<br>                <span class="hljs-type">MemoryBlock</span> <span class="hljs-variable">replaceBlock</span> <span class="hljs-operator">=</span> emulator.getMemory().malloc(<span class="hljs-number">0x100</span>, <span class="hljs-literal">true</span>);<br>                <span class="hljs-type">UnidbgPointer</span> <span class="hljs-variable">replacePtr</span> <span class="hljs-operator">=</span> replaceBlock.getPointer();<br>                <span class="hljs-type">String</span> <span class="hljs-variable">pathValue</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;21m4UbAl6CYLAiRpLGYy/aogOApL8qwEb733+DsT9h/8mE/P2j8ii4Vk/oNCE3UDIhvJDTaaErIjobaaFhZPMzp33T8LVMDlUsgizw7t5rOz1xb7aQsXhgG6eSHFM8fqCJSOuA6DXHNlagqvNh5NxaTb2UxTa+isdWRGwZUIUdd/e83Jf5fw2IkS9iSkXb8p0FrgbRl75yk=&quot;</span>;<br>                replacePtr.write(<span class="hljs-number">0</span>, pathValue.getBytes(StandardCharsets.UTF_8), <span class="hljs-number">0</span>, pathValue.length());<br>                <span class="hljs-keyword">return</span> replacePtr.peer;<br>            &#125;;<br>        &#125;));<br>        symbols.put(<span class="hljs-string">&quot;FreeUserEnvStr&quot;</span>, svcMemory.registerSvc(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArmSvc</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(Emulator&lt;?&gt; emulator)</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;));<br>        symbols.put(<span class="hljs-string">&quot;InitUserEnv&quot;</span>, svcMemory.registerSvc(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArmSvc</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(Emulator&lt;?&gt; emulator)</span> &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>            &#125;<br>        &#125;));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/2.%20%E8%A1%A5%E6%96%87%E4%BB%B6/%E8%A1%A5%E6%96%87%E4%BB%B6%E6%B5%81%E7%A8%8B/"/>
    <url>/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/2.%20%E8%A1%A5%E6%96%87%E4%BB%B6/%E8%A1%A5%E6%96%87%E4%BB%B6%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="发现文件"><a href="#发现文件" class="headerlink" title="发现文件"></a>发现文件</h1><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ul><li>Unidbg 如何实现对所有文件操作的拦截接管，不管是库函数发起的文件操作还是系统调用</li><li>这是因为，<code>当使用库函数时，功能的实现也仍然依赖于系统调用，fopen 是对同名系统调用fopen的简单封装，open 是对同名系统调用 open 的简单封装</code>。</li><li>所以只需要拦截底层系统调用，就可以接管所有对文件的访问。而<code>对系统调用的拦截，是Unicorn等CPU引擎所提供的基本功能</code>。</li></ul><h3 id="打印访问路径"><a href="#打印访问路径" class="headerlink" title="打印访问路径"></a>打印访问路径</h3><ul><li>当样本做文件访问时，Unidbg重定向到本机的某个位置，进入 <code>unidbg-api/src/main/java/com/github/unidbg/file/BaseFileSystem.java</code><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span> BaseFileSystem(Emulator&lt;T&gt; emulator, File rootDir) &#123;<br>    <span class="hljs-keyword">this</span>.emulator = emulator;<br>    <span class="hljs-keyword">this</span>.rootDir = rootDir;<br>    <span class="hljs-comment">// 补一行打印</span><br>    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;virtual path: &quot;</span> + rootDir);<br>    <span class="hljs-keyword">try</span> &#123;<br>        initialize(<span class="hljs-keyword">this</span>.rootDir);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        <span class="hljs-keyword">throw</span> new IllegalStateException(<span class="hljs-string">&quot;initialize file system failed&quot;</span>, e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="代码流程"><a href="#代码流程" class="headerlink" title="代码流程"></a>代码流程</h3><ul><li>我们的类实现文件重定向的接口即可，只需要三个步骤，如下</li></ul><ol><li>implements IOResolver</li><li>emulator.getSyscallHandler().addIOResolver(this);</li><li>重载resolve方法</li></ol><ul><li>代码<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NBridge</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractJni</span> <span class="hljs-title">implements</span> <span class="hljs-title">IOResolver</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">AndroidEmulator</span> emulator;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">VM</span> vm;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Module</span> module;<br><br><br>    <span class="hljs-type">NBridge</span>()&#123;<br>    .....    <br>          <span class="hljs-comment">// 2</span><br>        emulator.getSyscallHandler().addIOResolver(<span class="hljs-keyword">this</span>);<br>        vm.setVerbose(<span class="hljs-literal">true</span>); <span class="hljs-comment">// 设置是否打印Jni调用细节</span><br>        ...<br>      <br>    &#125;<br><br>    <span class="hljs-comment">// 3</span><br>    <span class="hljs-meta">@Override</span><br>    public <span class="hljs-type">FileResult</span> resolve(<span class="hljs-type">Emulator</span> emulator, <span class="hljs-type">String</span> pathname, int oflags) &#123;<br>        <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;open file path: &quot;</span> + pathname);  <span class="hljs-comment">// 可以查看app打开了系统的哪些路径</span><br>        <span class="hljs-keyword">if</span> ((<span class="hljs-string">&quot;/data/app/com.sankuai.meituan-TEfTAIBttUmUzuVbwRK1DQ==/base.apk&quot;</span>).equals(pathname)) &#123;<br>            <span class="hljs-comment">// 填入想要重定位的文件</span><br>            <span class="hljs-comment">// 最外层是FileResult.&lt;AndroidFileIO&gt;success，我们可以返回任意 AndroidFileIO 类型的文件，这么说有点怪，这是因为 Unidbg 是一个 Android/IOS 双端的 Native 模拟器，除了 AndroidFileIO 还有对应于 IOS 的 DarwinFileIO，所以有此限制。</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-type">FileResult</span>.success(<span class="hljs-keyword">new</span> <span class="hljs-type">SimpleFileIO</span>(oflags, <span class="hljs-keyword">new</span> <span class="hljs-type">File</span>(<span class="hljs-string">&quot;unidbg-android\\src\\test\\java\\com\\lession10\\mt.apk&quot;</span>), pathname));<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="补文件"><a href="#补文件" class="headerlink" title="补文件"></a>补文件</h1><ul><li>正常情况下：只需要用 <code>SimpleFileIO</code>、<code>ByteArrayFileIO</code> 、<code>DirectoryFileIO</code>  以及虚拟文件系统去处理它</li><li><code>选型思路</code>：<ul><li>文件夹建议用虚拟文件系统，文件建议用实现IOResolve</li><li>简单样本可以直接addIOResolver(this)，复杂样本，可以逻辑分离，把 IOResolver  从主类中摘出去，如addIOResolver(new BiliIOResolver())</li></ul></li><li><code>执行顺序</code>：先依次进入用户自定义的 IOResolver A 和 B&lt;_**需要注意后添加IOResolver的优先级更高**_&gt;，然后是 AndroidResolver，最后是虚拟文件系统</li></ul><h3 id="SimpleFileIO-补充文件"><a href="#SimpleFileIO-补充文件" class="headerlink" title="SimpleFileIO: 补充文件"></a>SimpleFileIO: 补充文件</h3><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs wren">@<span class="hljs-title class_">Override</span><br><span class="hljs-variable">public</span> <span class="hljs-title class_">FileResult</span> <span class="hljs-title function_">resolve</span>(<span class="hljs-params">Emulator</span> <span class="hljs-params">emulator</span>, <span class="hljs-params">String</span> <span class="hljs-params">pathname</span>, <span class="hljs-params">int</span> <span class="hljs-params">oflags</span>) &#123;<br>    <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(<span class="hljs-string">&quot;open file path: &quot;</span> <span class="hljs-operator">+</span> <span class="hljs-variable">pathname</span>);  <span class="hljs-comment">// 可以查看app打开了系统的哪些路径</span><br>    <span class="hljs-keyword">if</span> ((<span class="hljs-string">&quot;/data/app/com.sankuai.meituan-TEfTAIBttUmUzuVbwRK1DQ==/base.apk&quot;</span>).<span class="hljs-property">equals</span>(<span class="hljs-variable">pathname</span>)) &#123;<br>        <span class="hljs-comment">// 填入想要重定位的文件</span><br>        <span class="hljs-comment">// 最外层是FileResult.&lt;AndroidFileIO&gt;success，我们可以返回任意 AndroidFileIO 类型的文件，这么说有点怪，这是因为 Unidbg 是一个 Android/IOS 双端的 Native 模拟器，除了 AndroidFileIO 还有对应于 IOS 的 DarwinFileIO，所以有此限制。</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">FileResult</span>.<span class="hljs-property">success</span>(<span class="hljs-variable">new</span> <span class="hljs-title class_">SimpleFile</span>IO(<span class="hljs-variable">oflags</span>, <span class="hljs-variable">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;unidbg-android<span class="hljs-char escape_">\\</span>src<span class="hljs-char escape_">\\</span>test<span class="hljs-char escape_">\\</span>java<span class="hljs-char escape_">\\</span>com<span class="hljs-char escape_">\\</span>lession10<span class="hljs-char escape_">\\</span>mt.apk&quot;</span>), <span class="hljs-variable">pathname</span>));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ByteArrayFileIO-补充内容"><a href="#ByteArrayFileIO-补充内容" class="headerlink" title="ByteArrayFileIO: 补充内容"></a>ByteArrayFileIO: 补充内容</h3><ul><li>有人可能会问，如果我不想传入文件，能不能只传入”字符串“，当然可以，从SimpleFileIO换成ByteArrayFileIO即可。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-title class_">FileResult</span> <span class="hljs-title function_">resolve</span>(<span class="hljs-params"><span class="hljs-title class_">Emulator</span> emulator, <span class="hljs-title class_">String</span> pathname, int oflags</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;/data/data/com.roysue.readsp/shared_prefs/two.xml&quot;</span>.<span class="hljs-title function_">equals</span>(pathname)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">FileResult</span>.<span class="hljs-title function_">success</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayFileIO</span>(oflags, pathname, <span class="hljs-string">&quot;mytest&quot;</span>.<span class="hljs-title function_">getBytes</span>()));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="DirectoryFileIO-样本访问目录"><a href="#DirectoryFileIO-样本访问目录" class="headerlink" title="DirectoryFileIO: 样本访问目录"></a>DirectoryFileIO: 样本访问目录</h3><ul><li>但对于文件夹访问而言，使用虚拟文件系统是更好的选择<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;/data/data/com.sankuai.meituan&quot;</span>:&#123;<br>    <span class="hljs-keyword">return</span> FileResult.&lt;AndroidFileIO&gt;success(<span class="hljs-keyword">new</span> DirectoryFileIO(oflags, pathname, <span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(<span class="hljs-string">&quot;unidbg-android/src/test/resources/meituan/data&quot;</span>)));<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="rootfs：虚拟文件系统"><a href="#rootfs：虚拟文件系统" class="headerlink" title="rootfs：虚拟文件系统"></a>rootfs：虚拟文件系统</h3><ul><li>使用Unidbg的Rootfs虚拟文件系统</li><li>使用虚拟文件系统，将样本中对Android文件系统的访问重定位到本机电脑的某个目录或者叫文件夹，按照Android系统中的层级关系将文件放到这个文件夹里就可以了。</li><li>初始化模拟器中的 setRootDir(new File(“target&#x2F;rootfs”)) 是指定当前项目的文件系统位置，运行测试你会在Unidbg目录中看到它。假设要访问tmp&#x2F;a.txt，你可以将电脑里的a.txt 通过adb pull出来，然后放在target&#x2F;rootfs&#x2F;tmp下，Unidbg即可完成该样本中对该文件的访问。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">emulator = <span class="hljs-title class_">AndroidEmulatorBuilder</span>.<span class="hljs-title function_">for32Bit</span>().<span class="hljs-title function_">setRootDir</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;target/rootfs&quot;</span>)).<span class="hljs-title function_">build</span>();<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/3.%20%E8%A1%A5JNI/%E8%A1%A5JNI%E5%9C%BA%E6%99%AF%E6%B1%87%E6%80%BB/"/>
    <url>/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/3.%20%E8%A1%A5JNI/%E8%A1%A5JNI%E5%9C%BA%E6%99%AF%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<ul><li>参考<ul><li><a href="https://blog.csdn.net/qq_38851536/article/details/117923970">https://blog.csdn.net/qq_38851536/article/details/117923970</a></li><li><a href="https://www.yuque.com/lilac-2hqvv/xdwlsg/avlc01hrko6yvr26">https://www.yuque.com/lilac-2hqvv/xdwlsg/avlc01hrko6yvr26</a></li></ul></li></ul><h1 id="getMethodId问题"><a href="#getMethodId问题" class="headerlink" title="getMethodId问题"></a>getMethodId问题</h1><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li>补JNI报错：<strong>com.github.unidbg.arm.backend.BackendException</strong></li></ul><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><img src="/blog/../../../../../../../images/android/%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/1746427588062.jpg"></p><ul><li>比如一个方法，getPackageName，通过context.getPackageName  |   application.getPackageName  |  activity.getPackageName等方式都可以调用到该方法。是因为上图的原因。application |  activity的超类是context的实现类contextWrapper。所以如果只构造一种类型，另一种类型就找不到该方法。</li></ul><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>两种思路二选一</li></ul><h4 id="构造目标类全部继承或接口"><a href="#构造目标类全部继承或接口" class="headerlink" title="构造目标类全部继承或接口"></a>构造目标类全部继承或接口</h4><ul><li>unidbg构造的目标类是否有继承或者接口等形式，全部找出来，以下面的形式来构造<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">list</span><span class="hljs-selector-class">.add</span>(vm.<span class="hljs-built_in">addLocalObject</span>(vm.<span class="hljs-built_in">resolveClass</span>(<span class="hljs-string">&quot;java/util/TreeMap&quot;</span>, vm.<span class="hljs-built_in">resolveClass</span>(<span class="hljs-string">&quot;java/util/AbstractMap&quot;</span>, vm.<span class="hljs-built_in">resolveClass</span>(<span class="hljs-string">&quot;java/util/Map&quot;</span>))).<span class="hljs-built_in">newObject</span>(keymap)));<br><span class="hljs-selector-tag">or</span><br><span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">vm</span><span class="hljs-selector-class">.resolveClass</span>(<span class="hljs-string">&quot;android/app/Application&quot;</span>, vm.<span class="hljs-built_in">resolveClass</span>(<span class="hljs-string">&quot;android/content/ContextWrapper&quot;</span>, vm.<span class="hljs-built_in">resolveClass</span>(<span class="hljs-string">&quot;android/content/Context&quot;</span>)))<span class="hljs-selector-class">.newObject</span>(signature);<br></code></pre></td></tr></table></figure></li></ul><h4 id="根据日志提示进行补全"><a href="#根据日志提示进行补全" class="headerlink" title="根据日志提示进行补全"></a>根据日志提示进行补全</h4><ol><li><p>提示报错位置&lt;src&#x2F;main&#x2F;java&#x2F;com&#x2F;github&#x2F;unidbg&#x2F;linux&#x2F;android&#x2F;dvm&#x2F;DalvikVM.java&gt;增加：</p><blockquote><p>throw new BackendException(“dvmObject&#x3D;” + dvmObject + “, dvmClass&#x3D;” + dvmClass + “, jmethodId&#x3D;” + jmethodID);</p></blockquote></li><li><p>打开日志打印开关</p></li><li><p>观察日志，复制methodIdId对所有日志进行搜索，搜到之后，复制对应的类签名即可。<br><img src="/blog/../../../../../../../images/android/%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/1746427582679.jpg"></p></li></ol><h1 id="构造return的时候不能加分号"><a href="#构造return的时候不能加分号" class="headerlink" title="构造return的时候不能加分号"></a>构造return的时候不能加分号</h1><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">正确：<span class="hljs-keyword">return</span> vm.resolveClass(<span class="hljs-string">&quot;android/content/Context&quot;</span>).newObject(<span class="hljs-literal">null</span>);<br>错误：<span class="hljs-keyword">return</span> vm.resolveClass(<span class="hljs-string">&quot;android/content/Context;&quot;</span>).newObject(<span class="hljs-literal">null</span>);<br>错误：<span class="hljs-keyword">return</span> vm.resolveClass(<span class="hljs-string">&quot;Landroid/content/Context;&quot;</span>).newObject(<span class="hljs-literal">null</span>);<br></code></pre></td></tr></table></figure><h1 id="传感器基本操作补环境"><a href="#传感器基本操作补环境" class="headerlink" title="传感器基本操作补环境"></a>传感器基本操作补环境</h1><ul><li>参考：<a href="https://www.yuque.com/lilac-2hqvv/xdwlsg/avlc01hrko6yvr26">https://www.yuque.com/lilac-2hqvv/xdwlsg/avlc01hrko6yvr26</a></li></ul><h1 id="allocObject"><a href="#allocObject" class="headerlink" title="allocObject"></a>allocObject</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.UnsupportedOperationException</span>: java/lang/StringBuilder-&gt;allocObject<br>at com<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.unidbg</span><span class="hljs-selector-class">.linux</span><span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.dvm</span><span class="hljs-selector-class">.AbstractJni</span><span class="hljs-selector-class">.allocObject</span>(AbstractJni<span class="hljs-selector-class">.java</span>:<span class="hljs-number">800</span>)<br>at com<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.unidbg</span><span class="hljs-selector-class">.linux</span><span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.dvm</span><span class="hljs-selector-class">.DvmClass</span><span class="hljs-selector-class">.allocObject</span>(DvmClass<span class="hljs-selector-class">.java</span>:<span class="hljs-number">74</span>)<br></code></pre></td></tr></table></figure><ul><li>分配一个 StringBuilder 对象，大家可能对 allocObject 这个 JNI 调用感到陌生，它用于分配对象，我们可以在 AbstractJNI 中得到参考。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-title class_">DvmObject</span>&lt;?&gt; <span class="hljs-title function_">allocObject</span>(<span class="hljs-params"><span class="hljs-title class_">BaseVM</span> vm, <span class="hljs-title class_">DvmClass</span> dvmClass, <span class="hljs-title class_">String</span> signature</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;java/util/HashMap-&gt;allocObject&quot;</span>.<span class="hljs-title function_">equals</span>(signature)) &#123;<br>        <span class="hljs-keyword">return</span> dvmClass.<span class="hljs-title function_">newObject</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;());<br>    &#125;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>(signature);<br>&#125;<br></code></pre></td></tr></table></figure></li><li>但按照前文所讨论的规范，StringBuilder 是 JDK 中的类库，使用ProxyDvmObject.createObject更好。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-title class_">DvmObject</span>&lt;?&gt; <span class="hljs-title function_">allocObject</span>(<span class="hljs-params"><span class="hljs-title class_">BaseVM</span> vm, <span class="hljs-title class_">DvmClass</span> dvmClass, <span class="hljs-title class_">String</span> signature</span>) &#123;<br>    <span class="hljs-keyword">switch</span> (signature)&#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;java/lang/StringBuilder-&gt;allocObject&quot;</span>:&#123;<br>            <span class="hljs-comment">//return dvmClass.newObject(new StringBuilder());</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-title class_">ProxyDvmObject</span>.<span class="hljs-title function_">createObject</span>(vm, <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>());<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">super</span>.<span class="hljs-title function_">allocObject</span>(vm, dvmClass, signature);<br>&#125;<br></code></pre></td></tr></table></figure></li><li>另一种情况最好不要这么做：<figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 前面遇到过一个 allocObject，你可能想如法炮制;</span><br><span class="hljs-comment">// 但最好不要再这么做了，这是有隐患的处理办法。FileInputStream 没有无参构造函数，它所需要的初始化参数在allocObject阶段并没有展露出来，在后续真正初始化的时候才有值。</span><br><span class="hljs-comment">//这里直接用空的dvmObject占位，这里的 dvmClass 等价于vm.resolveClass(&quot;java/io/FileInputStream&quot;)。</span><br><span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;java/io/FileInputStream-&gt;allocObject&quot;</span>.<span class="hljs-built_in">equals</span>(signature))&#123;<br>    <span class="hljs-keyword">return</span> dvmClass.newObject(signature);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="init"><a href="#init" class="headerlink" title="-&gt;init&gt;"></a>-&gt;init&gt;</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.UnsupportedOperationException</span>: java/lang/StringBuilder-&gt;&lt;init&gt;()V<br>at com<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.unidbg</span><span class="hljs-selector-class">.linux</span><span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.dvm</span><span class="hljs-selector-class">.AbstractJni</span><span class="hljs-selector-class">.callVoidMethodV</span>(AbstractJni<span class="hljs-selector-class">.java</span>:<span class="hljs-number">996</span>)<br>at com<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.unidbg</span><span class="hljs-selector-class">.linux</span><span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.dvm</span><span class="hljs-selector-class">.DvmMethod</span><span class="hljs-selector-class">.callVoidMethodA</span>(DvmMethod<span class="hljs-selector-class">.java</span>:<span class="hljs-number">237</span>)<br>at com<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.unidbg</span><span class="hljs-selector-class">.linux</span><span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.dvm</span>.DalvikVM$<span class="hljs-number">60</span><span class="hljs-selector-class">.handle</span>(DalvikVM<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1071</span>)<br></code></pre></td></tr></table></figure><ul><li><p>这里在做初始化，什么都不必处理。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">callVoidMethodV</span>(<span class="hljs-params"><span class="hljs-title class_">BaseVM</span> vm, <span class="hljs-title class_">DvmObject</span>&lt;?&gt; dvmObject, <span class="hljs-title class_">String</span> signature, <span class="hljs-title class_">VaList</span> vaList</span>) &#123;<br>    <span class="hljs-keyword">switch</span> (signature)&#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;java/lang/StringBuilder-&gt;&lt;init&gt;()V&quot;</span>:&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-variable language_">super</span>.<span class="hljs-title function_">callVoidMethodV</span>(vm, dvmObject, signature, vaList);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>另一种情况</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">case</span> &quot;java/io/FileInputStream-&gt;&lt;init&gt;(Ljava/lang/String;)V&quot;: &#123;<br>    String <span class="hljs-type">name</span> = vaList.getObjectArg(<span class="hljs-number">0</span>).getValue().toString();<br>    <span class="hljs-keyword">if</span> (<span class="hljs-type">name</span>.equals(&quot;/proc/cpuinfo&quot;)) &#123;<br>        <span class="hljs-type">name</span> = &quot;unidbg-android/src/test/resources/dianping/cpuinfo&quot;;<br>    &#125;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;FileInputStream:&quot; + <span class="hljs-type">name</span>);<br>    try &#123;<br>        fileInputStream = <span class="hljs-built_in">new</span> FileInputStream(<span class="hljs-type">name</span>);<br>    &#125; catch (FileNotFoundException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="getSystemService"><a href="#getSystemService" class="headerlink" title="getSystemService"></a>getSystemService</h1><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">java.lang.UnsupportedOperationException: </span><span class="hljs-keyword">android/content/Context-&gt;getSystemService(Ljava/lang/String;)Ljava/lang/Object;</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> com.github.unidbg.linux.<span class="hljs-keyword">android.dvm.AbstractJni.callObjectMethodV(AbstractJni.java:416)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> com.<span class="hljs-keyword">dianping.NBridge.callObjectMethodV(NBridge.java:125)</span><br></code></pre></td></tr></table></figure><ul><li>系统服务是 Android 所提供的一项重要服务，在 JNI 补环境中出现频率相当高， Unidbg 对它做了专门处理，可以参考 AbstractJni，其中有如下代码片段。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;android/app/Application-&gt;getSystemService(Ljava/lang/String;)Ljava/lang/Object;&quot;</span>: &#123;<br>    <span class="hljs-type">StringObject</span> <span class="hljs-variable">serviceName</span> <span class="hljs-operator">=</span> vaList.getObjectArg(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">assert</span> serviceName != <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SystemService</span>(vm, serviceName.getValue());<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="callVoidxxx系列"><a href="#callVoidxxx系列" class="headerlink" title="callVoidxxx系列"></a>callVoidxxx系列</h1><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">java.lang.UnsupportedOperationException: </span><span class="hljs-keyword">java/io/FileInputStream-&gt;&lt;init&gt;(Ljava/lang/String;)V</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> com.github.unidbg.linux.<span class="hljs-keyword">android.dvm.AbstractJni.callVoidMethodV(AbstractJni.java:996)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> com.<span class="hljs-keyword">dianping.NBridge.callVoidMethodV(NBridge.java:112)</span><br></code></pre></td></tr></table></figure><blockquote><p>这里的处理和java&#x2F;io&#x2F;FileInputStream-&gt;allocObject的处理相呼应 </p><p>因为callVoid系列 API 没有返回值，它的操作基于原先的占位dvmObject&lt;即java&#x2F;io&#x2F;FileInputStream-&gt;allocObject的处理&gt;，因为我们没法对它重新赋值，所以我声明为一个全局变量处理它以及后面的逻辑</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NBridge</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractJni</span> <span class="hljs-title">implements</span> <span class="hljs-title">IOResolver</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">AndroidEmulator</span> emulator;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">DvmObject</span>&lt;?&gt; <span class="hljs-type">SIUACollector</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">VM</span> vm;<br>    public <span class="hljs-type">FileInputStream</span> fileInputStream;<br>    public <span class="hljs-type">InputStreamReader</span> inputStreamReader;<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">case</span> &quot;java/io/FileInputStream-&gt;&lt;init&gt;(Ljava/lang/String;)V&quot;:&#123;<br>    String <span class="hljs-type">name</span> = vaList.getObjectArg(<span class="hljs-number">0</span>).getValue().toString();<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;FileInputStream:&quot;+<span class="hljs-type">name</span>);<br>    try &#123;<br>        fileInputStream = <span class="hljs-built_in">new</span> FileInputStream(<span class="hljs-type">name</span>);<br>    &#125; catch (FileNotFoundException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">case</span> &quot;java/io/InputStreamReader-&gt;&lt;init&gt;(Ljava/io/InputStream;)V&quot;:&#123;<br>    inputStreamReader = <span class="hljs-built_in">new</span> InputStreamReader(fileInputStream);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>运行发现有问题</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">FileInputStream:/proc/cpuinfo<br>[12:47:54 570]  WARN [com.github.unidbg.linux.ARM32SyscallHandler] (ARM32SyscallHandler:532) - handleInterrupt <span class="hljs-attribute">intno</span>=2, <span class="hljs-attribute">NR</span>=-1073744088, <span class="hljs-attribute">svcNumber</span>=0x13b, <span class="hljs-attribute">PC</span>=unidbg@0xfffe0444, <span class="hljs-attribute">LR</span>=RX@0x40030391[libmtguard.so]0x30391, <span class="hljs-attribute">syscall</span>=<span class="hljs-literal">null</span><br>java.lang.UnsupportedOperationException: java/io/FileInputStream-&gt;&lt;init&gt;(Ljava/lang/String;)V<br>    <br>java.io.FileNotFoundException: /proc/cpuinfo (系统找不到指定的路径。)<br>at java.base/java.io.FileInputStream.open0(Native Method)<br></code></pre></td></tr></table></figure></li><li><p>程序在访问 &#x2F;proc&#x2F;cpuinfo 文件，首先将 &#x2F;proc&#x2F;cpuinfo 文件拖到本地</p><blockquote><p>C:\Users\13352&gt;adb pull &#x2F;proc&#x2F;cpuinfo xxx\unidbg-labs\unidbg-android\src\test\resources\dianping\files&#x2F;proc&#x2F;cpuinfo: 1 file pulled, 0 skipped. 0.1 MB&#x2F;s (1716 bytes in 0.014s)</p></blockquote></li><li><p>然后做路径的重定位。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">case</span> &quot;java/io/FileInputStream-&gt;&lt;init&gt;(Ljava/lang/String;)V&quot;:&#123;<br>    String <span class="hljs-type">name</span> = vaList.getObjectArg(<span class="hljs-number">0</span>).getValue().toString();<br>    <span class="hljs-keyword">if</span>(<span class="hljs-type">name</span>.equals(&quot;/proc/cpuinfo&quot;))&#123;<br>        <span class="hljs-type">name</span> = &quot;unidbg-android/src/test/resources/dianping/files/cpuinfo&quot;;<br>    &#125;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;FileInputStream:&quot;+<span class="hljs-type">name</span>);<br>    try &#123;<br>        fileInputStream = <span class="hljs-built_in">new</span> FileInputStream(<span class="hljs-type">name</span>);<br>    &#125; catch (FileNotFoundException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><h1 id="注意：newObjectV的几种形式-dvmClass表示当前类即“-”前面的类"><a href="#注意：newObjectV的几种形式-dvmClass表示当前类即“-”前面的类" class="headerlink" title="注意：newObjectV的几种形式 &amp;&amp; dvmClass表示当前类即“-&gt;”前面的类"></a>注意：newObjectV的几种形式 &amp;&amp; dvmClass表示当前类即“-&gt;”前面的类</h1><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">DvmObject</span>&lt;<span class="hljs-string">?&gt;</span> newObjectV(<span class="hljs-title class_">Base</span>VM vm, <span class="hljs-title class_">DvmClass</span> dvmClass, <span class="hljs-title class_">String</span> signature, <span class="hljs-title class_">VaList</span> vaList) &#123;<br>        switch (signature)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;java/io/File-&gt;&lt;init&gt;(Ljava/lang/String;)V&quot;</span><span class="hljs-symbol">:</span>&#123;<br>                <span class="hljs-title class_">System</span>.out.println(<span class="hljs-string">&quot;file init args: &quot;</span> + vaList.getObjectArg(<span class="hljs-number">0</span>));<br>                <span class="hljs-keyword">return</span> dvmClass.newObject(vaList.getObjectArg(<span class="hljs-number">0</span>).getValue().toString());<br><span class="hljs-regexp">//</span>                <span class="hljs-keyword">return</span> dvmClass.newObject(new <span class="hljs-title class_">File</span>(vaList.getObjectArg(<span class="hljs-number">0</span>).getValue().toString()));<br><span class="hljs-regexp">//</span>                <span class="hljs-keyword">return</span> vm.resolveClass(<span class="hljs-string">&quot;java/io/File&quot;</span>).newObject(vaList.getObjectArg(<span class="hljs-number">0</span>).getValue().toString());<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">super</span>.newObjectV(vm, dvmClass, signature, vaList);<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="补JNI中文件路径相关"><a href="#补JNI中文件路径相关" class="headerlink" title="补JNI中文件路径相关"></a>补JNI中文件路径相关</h1><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-comment">// 怎么把文件和后续的path对应上，两个比较常见的办法</span><br><span class="hljs-comment">// 1是通过signature</span><br><span class="hljs-comment">// 2是通过emulator get/set</span><br><span class="hljs-comment">// 其他办法不是那么好，比如newObject里传真实file，逻辑复杂的话，处理很麻烦</span><br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;android/content/Context-&gt;getFilesDir()Ljava/io/File;&quot;</span>: &#123;<br>    <span class="hljs-keyword">return</span> vm.resolveClass(<span class="hljs-string">&quot;java/io/File&quot;</span>).newObject(signature);<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;java/io/File-&gt;getAbsolutePath()Ljava/lang/String;&quot;</span>: &#123;<br>    <span class="hljs-built_in">String</span> <span class="hljs-built_in">tag</span> = dvmObject.getValue().toString();<br>    switch (<span class="hljs-built_in">tag</span>) &#123;<br>        <span class="hljs-comment">// 对于这种官方API，不管是JNItrace看，还是查官方文档，或是写Demo测试，以及Frida Hook 目标函数，又或者Hook Native JNI函数返回值，都是可行的。</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;android/content/Context-&gt;getFilesDir()Ljava/io/File;&quot;</span>: &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">new</span> StringObject(vm, <span class="hljs-string">&quot;/data/user/0/com.dhgate.buyermob/files&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;android/os/Environment-&gt;getExternalStorageDirectory()Ljava/io/File;&quot;</span>: &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">new</span> StringObject(vm, <span class="hljs-string">&quot;/storage/emulated/0&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 获取app存在外部SD卡上的缓存目录</span><br><span class="hljs-comment">// https://blog.csdn.net/zhaoyanjun6/article/details/72283289</span><br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;android/content/Context-&gt;getExternalFilesDir(Ljava/lang/String;)Ljava/io/File;&quot;</span>: &#123;<br>    <span class="hljs-keyword">return</span> vm.resolveClass(<span class="hljs-string">&quot;java/io/File&quot;</span>).newObject(signature);<br>&#125;<br><br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;java/io/File-&gt;toString()Ljava/lang/String;&quot;</span>: &#123;<br>    <span class="hljs-built_in">String</span> <span class="hljs-built_in">tag</span> = dvmObject.getValue().toString();<br>    switch (<span class="hljs-built_in">tag</span>) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;android/content/Context-&gt;getExternalFilesDir(Ljava/lang/String;)Ljava/io/File;&quot;</span>: &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">new</span> StringObject(vm, <span class="hljs-string">&quot;/storage/emulated/0/Android/data/com.example.hookinunidbg/files&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="补一个空类"><a href="#补一个空类" class="headerlink" title="补一个空类"></a>补一个空类</h1><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-title class_">DvmObject</span>&lt;?&gt; <span class="hljs-title function_">callObjectMethodV</span>(<span class="hljs-params"><span class="hljs-title class_">BaseVM</span> vm, <span class="hljs-title class_">DvmObject</span>&lt;?&gt; dvmObject, <span class="hljs-title class_">String</span> signature, <span class="hljs-title class_">VaList</span> vaList</span>) &#123;<br>    <span class="hljs-keyword">switch</span> (signature) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;android/content/Context-&gt;getClass()Ljava/lang/Class;&quot;</span>:&#123;<br>            <span class="hljs-keyword">return</span> dvmObject.<span class="hljs-title function_">getObjectType</span>();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">super</span>.<span class="hljs-title function_">callObjectMethodV</span>(vm, dvmObject, signature, vaList);<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="缺少自定义的类或者方法"><a href="#缺少自定义的类或者方法" class="headerlink" title="缺少自定义的类或者方法"></a>缺少自定义的类或者方法</h1><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">java.lang.UnsupportedOperationException:</span> <span class="hljs-keyword">com</span>/bilibili/nativelibrary/SignedQuery-&gt;r(Ljava/util/Map<span class="hljs-comment">;)Ljava/lang/String;</span><br>at <span class="hljs-keyword">com</span>.github.unidbg.linux.android.dvm.AbstractJni.callStaticObjectMethod(AbstractJni.java:<span class="hljs-number">402</span>)<br>at <span class="hljs-keyword">com</span>.github.unidbg.linux.android.dvm.AbstractJni.callStaticObjectMethod(AbstractJni.java:<span class="hljs-number">397</span>)<br></code></pre></td></tr></table></figure><p><img src="/blog/../../../../../../../images/android/%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/1746428407489.jpg"></p><ul><li>新建一个util工具类，负责补充这个方法以及后续可能出现的各种方法。 </li><li>然后设置jni调用：<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">DvmObject</span>&lt;?&gt; <span class="hljs-title function_">callStaticObjectMethod</span>(<span class="hljs-params"><span class="hljs-title class_">BaseVM</span> vm, <span class="hljs-title class_">DvmClass</span> dvmClass, <span class="hljs-title class_">String</span> signature, <span class="hljs-title class_">VarArg</span> varArg</span>) &#123;<br>        <span class="hljs-keyword">switch</span> (signature)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;com/bilibili/nativelibrary/SignedQuery-&gt;r(Ljava/util/Map;)Ljava/lang/String;&quot;</span>:&#123;<br>                <span class="hljs-title class_">DvmObject</span>&lt;?&gt; mapObject = varArg.<span class="hljs-title function_">getObjectArg</span>(<span class="hljs-number">0</span>);<br>                <span class="hljs-title class_">TreeMap</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">String</span>&gt; mymap = (<span class="hljs-title class_">TreeMap</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">String</span>&gt;) mapObject.<span class="hljs-title function_">getValue</span>();<br>                <span class="hljs-title class_">String</span> result = utils.<span class="hljs-title function_">r</span>(mymap);<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringObject</span>(vm, result);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">super</span>.<span class="hljs-title function_">callStaticObjectMethod</span>(vm, dvmClass, signature, varArg);<br>    &#125;<br><br></code></pre></td></tr></table></figure></li><li>缺少类对象-搞一个简化版的内部类。构造类，初始化类<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">java.lang.UnsupportedOperationException:</span> <span class="hljs-keyword">com</span>/bilibili/nativelibrary/SignedQuery-&gt;&lt;init&gt;(Ljava/lang/String<span class="hljs-comment">;Ljava/lang/String;)V</span><br>at <span class="hljs-keyword">com</span>.github.unidbg.linux.android.dvm.AbstractJni.newObject(AbstractJni.java:<span class="hljs-number">678</span>)<br>at <span class="hljs-keyword">com</span>.github.unidbg.linux.android.dvm.AbstractJni.newObject(AbstractJni.java:<span class="hljs-number">659</span>)<br></code></pre></td></tr></table></figure><img src="/blog/../../../../../../../images/android/%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/1746428412553.jpg"><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> DvmObject&lt;?&gt; newObject(BaseVM vm, DvmClass dvmClass, <span class="hljs-keyword">String</span> signature, VarArg varArg) &#123;<br>    <span class="hljs-keyword">switch</span> (signature) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;com/bilibili/nativelibrary/SignedQuery-&gt;&lt;init&gt;(Ljava/lang/String;Ljava/lang/String;)V&quot;</span>:<span class="hljs-type"></span><br>            StringObject stringObject1 = varArg.getObjectArg(<span class="hljs-number">0</span>);<br>            StringObject stringObject2 = varArg.getObjectArg(<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">String</span> str1 = stringObject1.getValue();<br>            <span class="hljs-keyword">String</span> str2 = stringObject2.getValue();<br>            <span class="hljs-keyword">return</span> vm.resolveClass(<span class="hljs-string">&quot;com/bilibili/nativelibrary/SignedQuery&quot;</span>).newObject(<span class="hljs-keyword">new</span><span class="hljs-type"></span> SignedQuery(str1, str2));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.newObject(vm, dvmClass, signature, varArg);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title class_"><span class="hljs-keyword">class</span> <span class="hljs-title">SignedQuery</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">String</span> a;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">String</span> b;<br><br>    <span class="hljs-keyword">public</span> SignedQuery(<span class="hljs-keyword">String</span> str, <span class="hljs-keyword">String</span> str2) &#123;<br>        <span class="hljs-built_in">this</span>.a = str;<br>        <span class="hljs-built_in">this</span>.b = str2;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/3.%20%E8%A1%A5JNI/%E8%8E%B7%E5%8F%96JNI%E8%B0%83%E7%94%A8%E7%BB%93%E6%9E%9C/"/>
    <url>/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/3.%20%E8%A1%A5JNI/%E8%8E%B7%E5%8F%96JNI%E8%B0%83%E7%94%A8%E7%BB%93%E6%9E%9C/</url>
    
    <content type="html"><![CDATA[<ul><li>参考<ul><li><a href="https://www.yuque.com/lilac-2hqvv/xdwlsg/ybo3xo4kloaqc1xq">https://www.yuque.com/lilac-2hqvv/xdwlsg/ybo3xo4kloaqc1xq</a></li><li><a href="https://www.yuque.com/lilac-2hqvv/xdwlsg/td2t5cvohdedb878">https://www.yuque.com/lilac-2hqvv/xdwlsg/td2t5cvohdedb878</a></li></ul></li></ul><h1 id="获取JNI调用结果的方式"><a href="#获取JNI调用结果的方式" class="headerlink" title="获取JNI调用结果的方式"></a>获取JNI调用结果的方式</h1><h3 id="1-通过面向-Google-学习，-理解方法、字段的语义，返回合适的值"><a href="#1-通过面向-Google-学习，-理解方法、字段的语义，返回合适的值" class="headerlink" title="1. 通过面向 Google 学习， 理解方法、字段的语义，返回合适的值"></a>1. 通过面向 Google 学习， 理解方法、字段的语义，返回合适的值</h3><h3 id="2-ADB命令，比如通过wm-size命令获取屏幕的宽高-getprop获取属性"><a href="#2-ADB命令，比如通过wm-size命令获取屏幕的宽高-getprop获取属性" class="headerlink" title="2. ADB命令，比如通过wm size命令获取屏幕的宽高&#x2F;getprop获取属性"></a>2. ADB命令，比如通过wm size命令获取屏幕的宽高&#x2F;getprop获取属性</h3><h3 id="3-JADX-看逻辑"><a href="#3-JADX-看逻辑" class="headerlink" title="3. JADX 看逻辑"></a>3. JADX 看逻辑</h3><h3 id="4-项目里搜索参考代码如AbstractJni-java或其他项目写法"><a href="#4-项目里搜索参考代码如AbstractJni-java或其他项目写法" class="headerlink" title="4. 项目里搜索参考代码如AbstractJni.java或其他项目写法"></a>4. 项目里搜索参考代码如AbstractJni.java或其他项目写法</h3><h3 id="5-Frida-Hook-和-Call"><a href="#5-Frida-Hook-和-Call" class="headerlink" title="5. Frida Hook 和 Call"></a>5. Frida Hook 和 Call</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">function</span> hookAndroidID()&#123;<br>    Java.<span class="hljs-keyword">perform</span>(<span class="hljs-keyword">function</span>()&#123;<br>        var Secure = Java.use(&quot;android.provider.Settings$Secure&quot;);<br>        console.log(&quot;Android ID:&quot;+Secure.ANDROID_ID.<span class="hljs-keyword">value</span>);<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-使用-trace"><a href="#6-使用-trace" class="headerlink" title="6. 使用 trace"></a>6. 使用 trace</h3><h5 id="场景分类"><a href="#场景分类" class="headerlink" title="场景分类"></a>场景分类</h5><p>在补 JNI 时，我们并不预先确定样本会调用哪个或哪些类，但大体上可以分为两类</p><ul><li>1 是样本自定义的类库，比如com.meituan.android.common.mtguard.NBridge$SIUACollector</li><li>2 是 Android FrameWork 类库，比如android.hardware.Sensor</li></ul><h5 id="trace方式"><a href="#trace方式" class="headerlink" title="trace方式"></a>trace方式</h5><ul><li>r0tracer 十分适合处理前者，尤其是第三方安全 SDK，其 JAVA 逻辑都在一个固定的包里</li><li>JNITrace |  JTrace</li></ul><h3 id="7-自写-demo-app-做验证"><a href="#7-自写-demo-app-做验证" class="headerlink" title="7. 自写 demo app 做验证"></a>7. 自写 demo app 做验证</h3><h5 id="case：SharedPreferences"><a href="#case：SharedPreferences" class="headerlink" title="case：SharedPreferences"></a>case：SharedPreferences</h5><ul><li>SharedPreferences最好写一个小的 demo，实现 Android 中对 SP 的创建、打开、读取、修改、保存这些基本功能<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">import</span> com.<span class="hljs-property">alibaba</span>.<span class="hljs-property">fastjson</span>.<span class="hljs-property">JSON</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">alibaba</span>.<span class="hljs-property">fastjson</span>.<span class="hljs-property">JSONObject</span>;<br><span class="hljs-keyword">import</span> java.<span class="hljs-property">io</span>.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SharedPreferences</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">JSONObject</span> jsonObject;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> File mFile;<br><br>    <span class="hljs-title function_">SharedPreferences</span>(File file) &#123;<br>        mFile = file;<br>        jsonObject = <span class="hljs-literal">null</span>;<br>        <span class="hljs-title function_">loadFromDisk</span>();<br>    &#125;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadFromDisk</span>() &#123;<br>        <span class="hljs-keyword">if</span> (mFile.<span class="hljs-property">exists</span>() &amp;&amp; !mFile.<span class="hljs-property">canRead</span>()) &#123;<br>            System.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(<span class="hljs-string">&quot;Attempt to read preferences file &quot;</span> + mFile + <span class="hljs-string">&quot; without permission&quot;</span>);<br>        &#125;<br>        BufferedInputStream <span class="hljs-built_in">str</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-built_in">str</span> = <span class="hljs-keyword">new </span><span class="hljs-class title_">BufferedInputStream</span>(<span class="hljs-keyword">new </span><span class="hljs-class title_">FileInputStream</span>(mFile), <span class="hljs-number">16</span> * <span class="hljs-number">1024</span>);<br>            <span class="hljs-title function_">readSP</span>(<span class="hljs-built_in">str</span>);<br>        &#125; <span class="hljs-title function_">catch</span> (Exception e) &#123;<br>            System.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(<span class="hljs-string">&quot;getSharedPreferences:&quot;</span> + e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-title function_">getString</span>(<span class="hljs-built_in">String</span> <span class="hljs-built_in">key</span>, <span class="hljs-built_in">String</span> defValue) &#123;<br>        <span class="hljs-built_in">String</span> v = (<span class="hljs-built_in">String</span>)jsonObject.<span class="hljs-property">get</span>(<span class="hljs-built_in">key</span>);<br>        <span class="hljs-keyword">return</span> v != <span class="hljs-literal">null</span> ? v : defValue;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">putString</span>(<span class="hljs-built_in">String</span> <span class="hljs-built_in">key</span>, <span class="hljs-built_in">String</span> value)&#123;<br>        jsonObject.<span class="hljs-property">put</span>(<span class="hljs-built_in">key</span>, value);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readSP</span>(InputStream in)&#123;<br>        <span class="hljs-type">char</span>[] buf = <span class="hljs-keyword">new </span><span class="hljs-class title_">char</span>[<span class="hljs-number">16</span> * <span class="hljs-number">1024</span>];<br>        InputStreamReader input;<br>        <span class="hljs-keyword">try</span> &#123;<br>            input = <span class="hljs-keyword">new </span><span class="hljs-class title_">InputStreamReader</span>(in);<br>            <span class="hljs-type">int</span> len =input.<span class="hljs-property">read</span>(buf);<br>            <span class="hljs-built_in">String</span> <span class="hljs-built_in">text</span> =<span class="hljs-keyword">new </span><span class="hljs-class title_">String</span>(buf,<span class="hljs-number">0</span>, len);<br>            jsonObject = JSON.<span class="hljs-property">parseObject</span>(<span class="hljs-built_in">text</span>);<br>        &#125; <span class="hljs-title function_">catch</span> (IOException e) &#123;<br>            e.<span class="hljs-property">printStackTrace</span>();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>以及根据样本所操作的属性和方法，构建对应的类去描述它<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccessibilityServiceInfo</span> &#123;<br>    <span class="hljs-comment">// 指定您希望服务处理的无障碍事件所属的应用的软件包名称。如果省略此参数，则无障碍服务会被视为可用于处理任何应用的无障碍事件。</span><br>    <span class="hljs-comment">// 即当前无障碍服务作用于哪些app</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">String</span>[] packageNames;<br>    <span class="hljs-comment">// 当前无障碍服务的名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">String</span> name;<br>    <span class="hljs-comment">// 当前无障碍服务所属App的标签名</span><br>    <span class="hljs-keyword">public</span> CharSequence label;<br>    <span class="hljs-comment">// 当前无障碍服务所属App的包名</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">String</span> packageName;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AccessibilityServiceInfo</span><span class="hljs-params">(<span class="hljs-type">String</span> packageName, <span class="hljs-type">String</span> name, CharSequence label, <span class="hljs-type">String</span>[] packageNames)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.packageName = packageName;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.label = label;<br>        <span class="hljs-keyword">this</span>.packageNames = packageNames;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="case-android-base64翻译"><a href="#case-android-base64翻译" class="headerlink" title="case: android base64翻译"></a>case: android base64翻译</h5><blockquote><p>png -&gt; java:<br><img src="/blog/../../../../../../../images/android/%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Base64.png"></p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/3.%20%E8%A1%A5JNI/%E8%A1%A5JNI%E6%96%B9%E5%BC%8F/"/>
    <url>/blog/2025/05/05/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/3.%20%E8%A1%A5JNI/%E8%A1%A5JNI%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="结合补充JNI的方式来做"><a href="#结合补充JNI的方式来做" class="headerlink" title="结合补充JNI的方式来做"></a>结合补充JNI的方式来做</h1><ul><li>按照提示一步步的补充，可以使用多种方式</li><li>方式1：继承自AbstractJni，缺少的JNI在AbstractJni类中补充</li><li>方式2：不继承AbstractJni，新建JNI类补充，在主类中声明引用<blockquote><p>vm.setJni(new TongDunJNI(emulator));</p></blockquote></li></ul><h1 id="模拟Native调用JAVA的方式"><a href="#模拟Native调用JAVA的方式" class="headerlink" title="模拟Native调用JAVA的方式"></a>模拟Native调用JAVA的方式</h1><ul><li>缺啥补啥，其原理是JAVA的反射</li><li>主要两点改变 <ul><li>LibBili1 不继承自AbstractJni </li><li>vm.setJni(this);改成 vm.setDvmClassFactory(new ProxyClassFactory());</li></ul></li><li>case<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lession6;<br><br><span class="hljs-keyword">import</span> com.github.unidbg.AndroidEmulator;<br><span class="hljs-keyword">import</span> com.github.unidbg.Module;<br><span class="hljs-keyword">import</span> com.github.unidbg.linux.android.AndroidEmulatorBuilder;<br><span class="hljs-keyword">import</span> com.github.unidbg.linux.android.AndroidResolver;<br><span class="hljs-keyword">import</span> com.github.unidbg.linux.android.dvm.*;<br><span class="hljs-keyword">import</span> com.github.unidbg.linux.android.dvm.jni.ProxyClassFactory;<br><span class="hljs-keyword">import</span> com.github.unidbg.memory.Memory;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.TreeMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LibBili1</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> AndroidEmulator emulator;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> VM vm;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Module <span class="hljs-keyword">module</span>;<br><br>    LibBili1()&#123;<br>        emulator = AndroidEmulatorBuilder.for32Bit().setProcessName(<span class="hljs-string">&quot;com.bilibili.app&quot;</span>).build(); <span class="hljs-comment">// 创建模拟器实例</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Memory</span> <span class="hljs-variable">memory</span> <span class="hljs-operator">=</span> emulator.getMemory(); <span class="hljs-comment">// 模拟器的内存操作接口</span><br>        memory.setLibraryResolver(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AndroidResolver</span>(<span class="hljs-number">23</span>)); <span class="hljs-comment">// 设置系统类库解析</span><br><br>        vm = emulator.createDalvikVM(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;unidbg-android\\src\\test\\java\\com\\lession6\\bilibili.apk&quot;</span>)); <span class="hljs-comment">// 创建Android虚拟机</span><br>        vm.setDvmClassFactory(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProxyClassFactory</span>());<br>        vm.setVerbose(<span class="hljs-literal">true</span>); <span class="hljs-comment">// 设置是否打印Jni调用细节</span><br>        <span class="hljs-type">DalvikModule</span> <span class="hljs-variable">dm</span> <span class="hljs-operator">=</span> vm.loadLibrary(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;unidbg-android\\src\\test\\java\\com\\lession6\\libbili.so&quot;</span>), <span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">module</span> = dm.getModule(); <span class="hljs-comment">//</span><br>        dm.callJNI_OnLoad(emulator);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">s</span><span class="hljs-params">()</span>&#123;<br>        List&lt;Object&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(<span class="hljs-number">10</span>);<br>        list.add(vm.getJNIEnv()); <span class="hljs-comment">// 第一个参数是env</span><br>        list.add(<span class="hljs-number">0</span>); <span class="hljs-comment">// 第二个参数，实例方法是jobject，静态方法是jclazz，直接填0，一般用不到。</span><br><br>        TreeMap&lt;String, String&gt; keymap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;String, String&gt;();<br>        keymap.put(<span class="hljs-string">&quot;ad_extra&quot;</span>, <span class="hljs-string">&quotquot;</span>);<br>        keymap.put(<span class="hljs-string">&quot;appkey&quot;</span>, <span class="hljs-string">&quot;1d8b6e7d45233436&quot;</span>);<br>        keymap.put(<span class="hljs-string">&quot;autoplay_card&quot;</span>, <span class="hljs-string">&quot;11&quot;</span>);<br>        keymap.put(<span class="hljs-string">&quot;banner_hash&quot;</span>, <span class="hljs-string">&quot;10687342131252771522&quot;</span>);<br>        keymap.put(<span class="hljs-string">&quot;build&quot;</span>, <span class="hljs-string">&quot;6180500&quot;</span>);<br>        keymap.put(<span class="hljs-string">&quot;c_locale&quot;</span>, <span class="hljs-string">&quot;zh_CN&quot;</span>);<br>        keymap.put(<span class="hljs-string">&quot;channel&quot;</span>, <span class="hljs-string">&quot;shenma117&quot;</span>);<br>        keymap.put(<span class="hljs-string">&quot;column&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>);<br>        keymap.put(<span class="hljs-string">&quot;device_name&quot;</span>, <span class="hljs-string">&quot;MIX2S&quot;</span>);<br>        keymap.put(<span class="hljs-string">&quot;device_type&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>);<br>        keymap.put(<span class="hljs-string">&quot;flush&quot;</span>, <span class="hljs-string">&quot;6&quot;</span>);<br>        keymap.put(<span class="hljs-string">&quot;ts&quot;</span>, <span class="hljs-string">&quot;1612693177&quot;</span>);<br><br><br>        <span class="hljs-type">DvmClass</span> <span class="hljs-variable">Map</span> <span class="hljs-operator">=</span> vm.resolveClass(<span class="hljs-string">&quot;java/util/Map&quot;</span>);<br>        <span class="hljs-type">DvmClass</span> <span class="hljs-variable">AbstractMap</span> <span class="hljs-operator">=</span> vm.resolveClass(<span class="hljs-string">&quot;java/util/AbstractMap&quot;</span>,Map);<br>        DvmObject&lt;?&gt; input_map = vm.resolveClass(<span class="hljs-string">&quot;java/util/TreeMap&quot;</span>, AbstractMap).newObject(keymap);<br>        list.add(vm.addLocalObject(input_map));<br>        <span class="hljs-type">Number</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">module</span>.callFunction(emulator, <span class="hljs-number">0x1c97</span>, list.toArray())[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">DvmObject</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> vm.getObject(number.intValue());<br>    &#125;;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">LibBili1</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LibBili1</span>();<br>        System.out.println(<span class="hljs-string">&quot;Start call&quot;</span>);<br>        test.s();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>运行报错：<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.ClassNotFoundException</span>: com<span class="hljs-selector-class">.bilibili</span><span class="hljs-selector-class">.nativelibrary</span><span class="hljs-selector-class">.SignedQuery</span><br>at java.base/jdk<span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.loader</span><span class="hljs-selector-class">.BuiltinClassLoader</span><span class="hljs-selector-class">.loadClass</span>(BuiltinClassLoader<span class="hljs-selector-class">.java</span>:<span class="hljs-number">581</span>)<br>at java.base/jdk<span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.loader</span>.ClassLoaders<span class="hljs-variable">$AppClassLoader</span><span class="hljs-selector-class">.loadClass</span>(ClassLoaders<span class="hljs-selector-class">.java</span>:<span class="hljs-number">178</span>)<br>at java.base/java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.ClassLoader</span><span class="hljs-selector-class">.loadClass</span>(ClassLoader<span class="hljs-selector-class">.java</span>:<span class="hljs-number">521</span>)<br>at com<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.unidbg</span><span class="hljs-selector-class">.linux</span><span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.dvm</span><span class="hljs-selector-class">.jni</span><span class="hljs-selector-class">.ProxyClassLoader</span><span class="hljs-selector-class">.loadClass</span>(ProxyClassLoader<span class="hljs-selector-class">.java</span>:<span class="hljs-number">22</span>)<br></code></pre></td></tr></table></figure></li><li>接下来补充SIgnedQuery整个类以及其中涉及到的类，红框即为我们补充的三个类,运行后一步到位出结果<br><img src="/blog/../../../../../../../images/android/%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/1746427087210.jpg"></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/04/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/Anti-unidbg/Anti-Unidbg%E5%BC%80%E7%AF%87/"/>
    <url>/blog/2025/05/04/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/Anti-unidbg/Anti-Unidbg%E5%BC%80%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="Anti-Unidbg"><a href="#Anti-Unidbg" class="headerlink" title="Anti-Unidbg"></a>Anti-Unidbg</h1><h3 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h3><p><em>Unidbg是当前最强大的模拟执行Android SO框架，除此之外，得益于Unicorn提供的各种细粒度控制API，Unidbg也是当下最有力的逆向分析调试工具。如何检测和反制Unidbg，是SO保护的一个新议题。这一系列文章由浅入深，展开对Anti-Unidbg的讨论。</em></p><h3 id="二、Anti-Unidbg-的定义"><a href="#二、Anti-Unidbg-的定义" class="headerlink" title="二、Anti-Unidbg 的定义"></a>二、Anti-Unidbg 的定义</h3><blockquote><p>没有一种绝对安全的保护，逆向工程终将胜利。</p></blockquote><p>Anti-Unidbg 也面临一样的问题，不存在绝对完美的方案，我们所做的努力就是提高其分析成本，让分析者在时间蹉跎后崩溃和放弃。着重从下面两个思路展开：</p><ul><li>识别程序是否运行于Unidbg环境，识别过程尽可能隐蔽，最好<strong>无法感知</strong></li><li>使Unidbg无法跑通程序</li></ul><h3 id="三、Anti-Unidbg-具体方案"><a href="#三、Anti-Unidbg-具体方案" class="headerlink" title="三、Anti-Unidbg 具体方案"></a>三、Anti-Unidbg 具体方案</h3><p>主要有这几大类</p><ul><li>上文环境缺失（JAVA环境缺失&#x2F;Native环境缺失）</li><li>Unidbg尚未实现的常用Linux相关特性，如多线程、信号等机制</li><li>Unidbg尚未实现的JNI函数以及JNI相关问题</li></ul><p>之后的文章里，让我们一起探索Anti-Unidbg的详细策略。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/04/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/Anti-unidbg/%E6%A3%80%E6%B5%8BUnicorn/"/>
    <url>/blog/2025/05/04/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/Anti-unidbg/%E6%A3%80%E6%B5%8BUnicorn/</url>
    
    <content type="html"><![CDATA[<h1 id="检测Unicorn"><a href="#检测Unicorn" class="headerlink" title="检测Unicorn"></a>检测Unicorn</h1><h2 id="一、概览"><a href="#一、概览" class="headerlink" title="一、概览"></a>一、概览</h2><p><em>Unicorn</em>基于<em>QEMU</em>这款知名的开源虚拟机，它提取了<em>QEMU</em>中与CPU模拟相关的核心代码，并在外层进行了包装。因此也可以说，检测Unicorn，就是要在运行环境中找到QEMU在CPU模拟部分与真实Android系统相异的特征。</p><h2 id="二、阐述"><a href="#二、阐述" class="headerlink" title="二、阐述"></a>二、阐述</h2><p>首先要寻找<em>QEMU</em>在CPU模拟执行部分和真机是否有差异，以及差异点。这听起来有些奇怪，因为我们往往假定<em>QEMU</em>虚拟机可以完美执行指令系统，并且和真实系统的反馈一致。这种直观印象是如此的强烈，而且富有证据。既因为<em>QEMU</em> 是业内知名的开源虚拟机，而且有着极高的成熟度，也因为基于它的各种Android模拟器比如雷电、夜神等等，可以很好的运行各类应用，甚至处理手游这样的大型应用也毫无压力。如果<em>QEMU</em>在指令执行的层面上和真机的反馈不同，这种差异为什么没在上层应用中表现出来？又或者存在的BUG为什么没被修复？</p><p>事实上，依然有差异，主要指的下面几方面</p><ul><li>QEMU 自身存在某些BUG，或不支持某些极少见的特殊指令集中的部分指令，尽管可能已经修复了，但Unicorn所基于的QEMU版本较老，可能存在相应的问题。</li><li>某些指令操作在真机上有更强的约束或限制，比如ARM64上默认要求栈必须16字节对齐，而QEMU上不存在这一限制。[^ 1]</li><li>作为模拟执行方案，Unicorn在指令执行速度上会比真机慢，研究人员进一步发现，在某些指令集上（比如向量化计算指令集Neon），这种速度差异进一步放大，更加明显[^ 2]。即使和最差最老版本的Android真机相比，都显得逊色。这种指令执行速度差异，可以用于构建函数运行时间检测。需要注意，应该经过谨慎的调查、广泛的测试得出Unicorn执行检测函数的耗时所处的数量级，设置对应的检测运行时间阈值。这个范围不应该造成对性能较差的真机的误判，也不应该和另一种风险运行环境——正在Debug&#x2F;Hook&#x2F;TraceCode的测试机产生混淆，这种情况下执行速度会比Unicorn更慢。</li></ul><h2 id="三、举例"><a href="#三、举例" class="headerlink" title="三、举例"></a>三、举例</h2><p>以上面提到的第二个方案举例，如下arm64内联汇编中对栈进行了读写操作。理论上，在各种ARM64的运行环境上都不会出错。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">unicorn_test</span><span class="hljs-params">()</span> </span>&#123;<br>    __asm __volatile__ (<br>    <span class="hljs-string">&quot;add sp, sp, #16\n&quot;</span><br>    <span class="hljs-string">&quot;str x0, [sp]\n&quot;</span><br>    <span class="hljs-string">&quot;ldr x0, [sp]\n&quot;</span><br>    <span class="hljs-string">&quot;sub sp, sp, #16\n&quot;</span><br>    );<br>&#125;<br></code></pre></td></tr></table></figure><p>但如果内联汇编改成下面这样，不再满足SP至少16字节对齐的要求</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">unicorn_test</span><span class="hljs-params">()</span> </span>&#123;<br>    __asm __volatile__ (<br>    <span class="hljs-string">&quot;add sp, sp, #1\n&quot;</span><br>    <span class="hljs-string">&quot;str x0, [sp]\n&quot;</span><br>    <span class="hljs-string">&quot;ldr x0, [sp]\n&quot;</span><br>    <span class="hljs-string">&quot;sub sp, sp, #1\n&quot;</span><br>    );<br>&#125;<br></code></pre></td></tr></table></figure><p>那么在各种真实设备环境中，就会导致异常闪退，错误信号为SIGBUS下的BUS_ADRALN，即<strong>内存访问异常中的内存未对齐错误</strong>。但在Qemu虚拟机以及基于它的模拟器上（夜神&#x2F;雷电模拟器等），以及基于Qemu剪裁的Unicorn或基于Unicorn的Unidbg&#x2F;AndroidNativeEmu等运行环境中，却正常执行。</p><p>接下来将真机中的闪退处理一下，定义信号处理器，根据报错的信号以及报错的位置，确定报错来自于unicorn_test函数，然后执行某种逻辑，比如修改某个全局变量，或直接上报。进一步，根据这段逻辑是否执行，就可以区分和检测。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;jni.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;android/log.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;dlfcn.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;csignal&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ucontext.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;memory&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;mutex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;new&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;thread&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LOGE(...) __android_log_print(ANDROID_LOG_ERROR,<span class="hljs-string">&quot;Lilac&quot;</span> ,__VA_ARGS__);</span><br><span class="hljs-type">static</span> <span class="hljs-type">pid_t</span> sTidToDump;    <span class="hljs-comment">// guarded by sMutex</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> *sContext;<br><span class="hljs-type">static</span> std::mutex sMutex;<br><span class="hljs-type">static</span> std::condition_variable sCondition;<br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">DumpStacks</span><span class="hljs-params">(<span class="hljs-type">void</span>* context)</span></span>;<br><span class="hljs-type">int</span> detect = <span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">unicorn_test</span><span class="hljs-params">()</span> </span>&#123;<br>    __asm __volatile__ (<br>    <span class="hljs-string">&quot;add sp, sp, #1\n&quot;</span><br>    <span class="hljs-string">&quot;str x0, [sp]\n&quot;</span><br>    <span class="hljs-string">&quot;ldr x0, [sp]\n&quot;</span><br>    <span class="hljs-string">&quot;sub sp, sp, #1\n&quot;</span><br>    );<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">my_signal_handler</span><span class="hljs-params">(<span class="hljs-type">int</span> sig, <span class="hljs-type">siginfo_t</span> *siginfo, <span class="hljs-type">void</span> *context)</span></span>&#123;<br>    detect = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">DumpStacks</span>(context);<br>&#125;<br><br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-function">JNIEXPORT jstring JNICALL</span><br><span class="hljs-function"><span class="hljs-title">Java_com_example_testalign_MainActivity_stringFromJNI</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        JNIEnv* env,</span></span><br><span class="hljs-params"><span class="hljs-function">        jobject <span class="hljs-comment">/* this */</span>)</span> </span>&#123;<br><br>    <span class="hljs-type">stack_t</span> stack&#123;&#125;;<br>    stack.ss_sp = <span class="hljs-built_in">new</span>(std::nothrow) <span class="hljs-type">char</span>[SIGSTKSZ];<br><br>    <span class="hljs-keyword">if</span> (!stack.ss_sp) &#123;<br>        <span class="hljs-built_in">LOGE</span>(<span class="hljs-string">&quot;fail to alloc stack for crash catching&quot;</span>);<br>    &#125;<br>    stack.ss_size = SIGSTKSZ;<br>    stack.ss_flags = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (stack.ss_sp) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sigaltstack</span>(&amp;stack, <span class="hljs-literal">nullptr</span>) != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">LOGE</span>(<span class="hljs-string">&quot;fail to setup signal stack&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sigaction</span> sig_action = &#123;&#125;;<br>    sig_action.sa_sigaction = my_signal_handler;<br>    sig_action.sa_flags = SA_SIGINFO | SA_ONSTACK;<br>    <span class="hljs-built_in">sigaction</span>(SIGBUS, &amp;sig_action, <span class="hljs-literal">nullptr</span>);<br><br>    <span class="hljs-type">pthread_t</span> newthread;<br>    <span class="hljs-built_in">pthread_create</span>(&amp;newthread, <span class="hljs-literal">nullptr</span>, <span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">void</span> *(*)(<span class="hljs-type">void</span> *)&gt;(unicorn_test), <span class="hljs-literal">nullptr</span>);<br>    <span class="hljs-built_in">sleep</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span>(detect == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> env-&gt;<span class="hljs-built_in">NewStringUTF</span>(<span class="hljs-string">&quot;Unidbg detect&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> env-&gt;<span class="hljs-built_in">NewStringUTF</span>(<span class="hljs-string">&quot;invalid address alignment&quot;</span>);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">DumpStacks</span><span class="hljs-params">(<span class="hljs-type">void</span>* context)</span> </span>&#123;<br>    std::unique_lock&lt;std::mutex&gt; lock&#123;sMutex&#125;;<br>    sTidToDump = <span class="hljs-built_in">gettid</span>();<br>    sContext = context;<br>    sCondition.<span class="hljs-built_in">notify_one</span>();<br>    sCondition.<span class="hljs-built_in">wait</span>(lock, []&#123; <span class="hljs-keyword">return</span> sTidToDump == <span class="hljs-number">0</span>; &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>但也应当意识到，可以在基于Unicorn构建的运行环境中增加相关逻辑，禁止非对齐的内存访问，这是对应的反检测手段。</p><p>在检测到Qemu的这一特征后，还需要根据文件特征、任务调度、系统属性等特征的有无，确认这种运行环境是QEMU虚拟机以及其扩展，还是Unicorn环境。</p><p>总体而言，对Unicorn的检测并不容易，远没有对基于其构建的上层系统的检测来的方便，比如对Unidbg&#x2F;Qiling&#x2F;AndroidNativeEmu的检测。</p><h2 id="四、引用"><a href="#四、引用" class="headerlink" title="四、引用"></a>四、引用</h2><p>[^ 1]: Jiang, Muhui et al. “Automatically Locating ARM Instructions Deviation between Real Devices and CPU Emulators.” (2021).<br>[^ 2]: Jang, Daehee et al. “Rethinking anti-emulation techniques for large-scale software deployment.” <em>Comput. Secur.</em> 83 (2019): 182-200.</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/04/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/RPC%20Server/unidbg%20rpc%E5%A6%82%E4%BD%95%E6%8F%90%E9%80%9F/"/>
    <url>/blog/2025/05/04/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/RPC%20Server/unidbg%20rpc%E5%A6%82%E4%BD%95%E6%8F%90%E9%80%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul><li>Unidbg 在函数调用上存在一个非常大的问题，就是慢。Unicorn 模拟执行指令的速度，相较于CPU，慢了至少两个数量级。这意味着它执行一个函数所耗费的时间，甚至比 Android 4 的老机器都多得多。</li><li>辅助算法还原或监控观察这两个需求，对执行速度快一些或慢一些既不关切也不敏感，但用于RPC时却很要命。当跑一个重度Ollvm的函数时，Frida或Xposed RPC 只需要 10毫秒，Unidbg 竟然需要1秒甚至更久的时间，这对于RPC场景是完全不可接收的。</li></ul><h2 id="提速方案"><a href="#提速方案" class="headerlink" title="提速方案"></a>提速方案</h2><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><ul><li>多个线程同时生产算法，速度自然就更快，Unidbg中封装了一个基于线程池的多线程逻辑。代码位于 <strong><em>unidbg-api&#x2F;src&#x2F;main&#x2F;java&#x2F;com&#x2F;github&#x2F;unidbg&#x2F;worker</em></strong> 包下。对它的使用案例位于 <em><strong>src&#x2F;test&#x2F;java&#x2F;com&#x2F;bytedance&#x2F;frameworks&#x2F;core&#x2F;encrypt</strong></em> 包下（TTEncrypt是普通单线程版，TTEncryptWorker是多线程）</li><li>也可以使用 **<em>unidbg-boot-server</em>**，它是个更成熟的，支持多线程的一站式Unidbg RPC 解决方案。</li></ul><h3 id="提升底层执行引擎的速度"><a href="#提升底层执行引擎的速度" class="headerlink" title="提升底层执行引擎的速度"></a>提升底层执行引擎的速度</h3><ul><li>既然问题根源是Unicorn这个CPU模拟器的执行速度太慢，那么能不能让它快一些呢？经过一些探索，发现没有什么办法能让Unicorn更快（之前一直说Unicorn2会比Unicorn快很多，但目前看起来并没有明显差异），所以Unidbg增加了一些其他的底层CPU执行框架，分别<em><strong>是Dynarmic、KVM、Hypervisor</strong></em>。</li></ul><h4 id="Dynarmic"><a href="#Dynarmic" class="headerlink" title="Dynarmic"></a>Dynarmic</h4><ul><li>Dynarmic 和 Unicorn 一样，是模拟执行汇编指令的方案。但执行速度上比Unicorn快1-2个数量级。因此如果用于RPC函数调用，建议用Dynarmic，可以获得接近于老Android设备的执行速度，再配合上Unidbg-boot-server，这样速度就上来了。</li><li>既然Dynarmic 速度这么快，为什么不用它代替Unicorn ？因为Dynarmic不支持各种Hook和回调，采用Dynarmic的后端时，Unidbg在观察监控以及辅助算法分析上的能力大大削弱了，比如基本的Console debugger 都没法用了。因此建议在函数调用RPC时使用Dynarmic引擎，其余时候均使用Unicorn2后端。</li></ul><h4 id="KVM、Hypervisor-两者是虚拟化的方案，依赖宿主机"><a href="#KVM、Hypervisor-两者是虚拟化的方案，依赖宿主机" class="headerlink" title="KVM、Hypervisor 两者是虚拟化的方案，依赖宿主机"></a>KVM、Hypervisor 两者是虚拟化的方案，依赖宿主机</h4><ul><li><code>kvm虚拟化引擎</code>用于树莓派Raspberry Pi 4B，当我们希望把Unidbg项目跑在树莓派上，用以进一步降低设备成本时，可以考虑这个引擎。其简单使用教程可见 <em><code>unidbg-master\backend\kvm\README.md</code></em></li><li>_<code>hypervisor 引擎</code>_只适用于搭载了 <strong>Apple Silicon</strong> 的mac设备，**<em>且只支持ARM64指令的模拟执行。它的优势在于速度，它比Dynarmic更加的快</em>**，是Unidbg所支持的引擎中最快的。因此如果你的设备是新款Mac，而所要模拟执行的SO库是64位的，那么可以尝试Hypervisor。</li></ul><h4 id="综上总结"><a href="#综上总结" class="headerlink" title="综上总结"></a>综上总结</h4><ul><li><strong><code>unidbg-boot-server + Dynarmic 引擎</code></strong></li><li>unidbg-boot-server ：<a href="https://github.com/anjia0532/unidbg-boot-server">https://github.com/anjia0532/unidbg-boot-server</a></li><li>unidbg-boot-server零基础入门:  <a href="https://anjia0532.github.io/2021/11/01/unidbg-boot-server/">https://anjia0532.github.io/2021/11/01/unidbg-boot-server/</a></li><li>Dynarmic 引擎是为了更快的模拟执行；</li><li>Unicorn 是最强大最完善的模拟执行引擎，但它相比Dynarmic太慢了，同场景下，Dynarmic比Unicorn模拟执行快数倍甚至十数倍。如果使用Unidbg是为了实现生产环境下的模拟执行，速度最重要，那么Dynarmic + unidbg-boot-server 这个高并发server服务器，是完美之选。一般实操中，先使用 Unicorn 引擎跑通模拟执行代码，切换成Dynarmic无误后，直接上生产环境。</li><li>注意：<strong>使用Dynarmic后端以适用生产需求时，需要把Unicorn Hook 的代码改写为xHook或Dobby(HookZz)</strong></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/04/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/1.%20%E5%88%9D%E5%A7%8B%E5%8C%96/2.%20%E7%A1%AE%E5%AE%9A%E5%88%9D%E5%A7%8B%E5%8C%96%E6%B5%81%E7%A8%8B%E6%80%BB%E7%BB%93/"/>
    <url>/blog/2025/05/04/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/1.%20%E5%88%9D%E5%A7%8B%E5%8C%96/2.%20%E7%A1%AE%E5%AE%9A%E5%88%9D%E5%A7%8B%E5%8C%96%E6%B5%81%E7%A8%8B%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="确定初始化流程总结"><a href="#确定初始化流程总结" class="headerlink" title="确定初始化流程总结"></a>确定初始化流程总结</h1><ul><li>参考：<ul><li><a href="https://www.yuque.com/docs/share/1dce3d7c-fb24-4fe4-a3a7-2f9406ab517c#CCGfS">https://www.yuque.com/docs/share/1dce3d7c-fb24-4fe4-a3a7-2f9406ab517c#CCGfS</a></li><li><a href="https://www.yuque.com/lilac-2hqvv/lfssh8/gxwflx1eyiherqvo">https://www.yuque.com/lilac-2hqvv/lfssh8/gxwflx1eyiherqvo</a></li></ul></li></ul><h3 id="1-获取参数和返回值"><a href="#1-获取参数和返回值" class="headerlink" title="1. 获取参数和返回值"></a>1. 获取参数和返回值</h3><ul><li>Hook 得到目标函数基本的执行参数和返回值情况</li></ul><h3 id="2-验证"><a href="#2-验证" class="headerlink" title="2. 验证"></a>2. 验证</h3><ul><li>在附加进程的情况下 Frida Call ,验证返回结果是否无误，这步骤是为了确认 Call 代码是否正常无误</li></ul><h3 id="3-通过-Hook-判断目标函数是否有初始化函数-确定时机"><a href="#3-通过-Hook-判断目标函数是否有初始化函数-确定时机" class="headerlink" title="3. 通过 Hook 判断目标函数是否有初始化函数 &amp; 确定时机"></a>3. 通过 Hook 判断目标函数是否有初始化函数 &amp; 确定时机</h3><h4 id="判断目标函数是否有初始化函数"><a href="#判断目标函数是否有初始化函数" class="headerlink" title="判断目标函数是否有初始化函数"></a>判断目标函数是否有初始化函数</h4><ul><li>如果一个函数<code>不存在初始化函数</code>，那么<code>在 SO 顺利装载到内存中并执行完 JNI_OnLoad 之后，它就应该能正常执行了</code>，在之前分析 <a href="https://blog.csdn.net/qq_38851536/article/details/118000259?spm=1001.2014.3001.5501">美团</a> 的一篇文章里我们写了下面这样的 Frida 代码。&lt;在 JNI_OnLoad 结束的时机发起 Frida Call ,确认是否正常无误，如果有问题，比如报错、返回空字符串等等说明有初始化函数&gt;<figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> android_dlopen_ext = Module.findExportByName(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;android_dlopen_ext&quot;</span>);<br><span class="hljs-keyword">if</span> (android_dlopen_ext != <span class="hljs-literal">null</span>) &#123;<br>    Interceptor.attach(android_dlopen_ext, &#123;<br>        <span class="hljs-attr">onEnter</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">args</span>) &#123;<br>            this.hook = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">var</span> soName = args[<span class="hljs-number">0</span>].readCString();<br>            <span class="hljs-keyword">if</span> (soName.<span class="hljs-built_in">indexOf</span>(<span class="hljs-string">&quot;libmtguard.so&quot;</span>) !== <span class="hljs-number">-1</span>) &#123;<br>                this.hook = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;,<br>        <span class="hljs-attr">onLeave</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">retval</span>) &#123;<br>            <span class="hljs-keyword">if</span> (this.hook) &#123;<br>                <span class="hljs-keyword">var</span> jniOnload = Module.findExportByName(<span class="hljs-string">&quot;libmtguard.so&quot;</span>, <span class="hljs-string">&quot;JNI_OnLoad&quot;</span>);<br>                Interceptor.attach(jniOnload, &#123;<br>                    <span class="hljs-attr">onEnter</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">args</span>) &#123;<br>                        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;Enter Mtguard JNI OnLoad&quot;</span>);<br>                    &#125;,<br>                    <span class="hljs-attr">onLeave</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">retval</span>) &#123;<br>                        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;After Mtguard JNI OnLoad&quot;</span>);<br>                        call_mtgsig();<br>                    &#125;<br>                &#125;);<br>            &#125;<br>        &#125;<br>    &#125;);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">call_mtgsig</span>(<span class="hljs-params"></span>) &#123;<br>    Java.perform(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> jinteger = Java.use(<span class="hljs-string">&quot;java.lang.Integer&quot;</span>)<br>        <span class="hljs-keyword">var</span> jstring = Java.use(<span class="hljs-string">&quot;java.lang.String&quot;</span>);<br>        <span class="hljs-keyword">var</span> NBridge = Java.use(<span class="hljs-string">&quot;com.meituan.android.common.mtguard.NBridge&quot;</span>)<br>        <span class="hljs-keyword">var</span> objArr = [jstring.$<span class="hljs-keyword">new</span>(<span class="hljs-string">&quot;9b69f861-e054-4bc4-9daf-d36ae205ed3e&quot;</span>), jstring.$<span class="hljs-keyword">new</span>(<span class="hljs-string">&quot;GET /aggroup/homepage/display __reqTraceID=5ca01019-fafc-4f92-a80e-82ce1389aab7&amp;abStrategy=d&amp;allowToTrack=1&amp;ci=1&amp;cityId=1&amp;clearTimeStamp=-1&amp;clientName=android&amp;clientType=android&amp;firstPageAbtest=old&amp;globalId=&amp;limitForYouXuan=25&amp;msid=96E3002678491E51616650388270&amp;offsetForYouXuan=0&amp;os_version=8.1.0&amp;phone_model=Nexus%205X&amp;scene=youxuanZhuanqu&amp;showStyle=1&amp;topic_session_id=4324505e-ccc6-4f7a-9943-d65223bbb9a7&amp;userid=-1&amp;utm_campaign=AgroupBgroupC0E0Ghomepage&amp;utm_content=96E3002678491E5&amp;utm_medium=android&amp;utm_source=wandoujia&amp;utm_term=1100090405&amp;uuid=00000000000005FB514BD2BA040ABADC24C8D31AD4F18A162330366877733119&amp;version_name=11.9.405&amp;wifi-cur=0&amp;wifi-mac=02%3A00%3A00%3A00%3A00%3A00%08&amp;wifi-name=%3Cunknown%20ssid%3E%08&amp;wifi-strength=-10%08&amp;withRegion=0&quot;</span>).getBytes(), jinteger.valueOf(<span class="hljs-number">2</span>)]<br>        <span class="hljs-keyword">var</span> result = NBridge.main(<span class="hljs-number">203</span>, objArr);<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;result:&quot;</span>+result);<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="确定时机"><a href="#确定时机" class="headerlink" title="确定时机"></a>确定时机</h4><ul><li>JNI_OnLoad时机：如果一个函数<code>不存在初始化函数</code>，那么<code>在 SO 顺利装载到内存中并执行完 JNI_OnLoad 之后，它就应该能正常执行了</code>，在之前分析 <a href="https://blog.csdn.net/qq_38851536/article/details/118000259?spm=1001.2014.3001.5501">美团</a> 的一篇文章里我们写了下面这样的 Frida 代码。&lt;在 JNI_OnLoad 结束的时机发起 Frida Call ,确认是否正常无误，如果有问题，比如报错、返回空字符串等等说明有初始化函数&gt;</li><li>init_array时机：更早。有时候也要关注init_array之类的更早时机，参考同一路径下笔记:<a href="https://note.youdao.com/s/8tatZBf5">init_array初始化问题</a>。 当发现so执行结果不一致，需要考虑初始化问题，确定是否为init_array初始化问题。比如字符串混淆，一般在init_array做解密处理。eg: <a href="https://bbs.pediy.com/thread-249071.htm">孤挺花 字符串混淆</a></li></ul><h4 id="经验"><a href="#经验" class="headerlink" title="经验"></a>经验</h4><ul><li><p><strong>要在attach和spawn模式下都测试一遍， 尽量是测试机第一次安装app且第一次启动</strong></p><ul><li>call mtgsig 的参数来自于 Hook，在 attach 模式下函数返回符合预期的结果，但 spawn 模式下放在 JNI_Onload 刚执行完的时机去 call，结果如何？我们发现是 null，这说明它有初始化函数，对于其他样本也同理，如果 JNI_Onload 执行结束的时机不能正常 Call 出结果，那必然有初始化函数</li></ul></li><li><p>问题：就是 Frida Spawn Hook 这些函数经常会出错，没法捕捉到最早的那些执行流。这个问题有两个简单解法</p><ul><li>使用 Frida Native Hook，即对目标函数所对应的 Native 实现做 Hook，稳定性比 JAVA Hook 好很多，但缺点也不是没有—— Native Hook 在 Hook 代码编写、参数和返回值打印等方面都更复杂一些些。 </li><li>使用 Lsposed 或其他 JAVA Hook 框架，可以稳定准确不遗漏的 Hook 目标函数。r0ysue大佬对此出过一个很好的<a href="https://www.bilibili.com/video/BV1Lb4y1o7Y9/?spm_id_from=333.999.0.0">教学视频</a></li></ul></li></ul><h3 id="4-确定初始化函数"><a href="#4-确定初始化函数" class="headerlink" title="4. 确定初始化函数"></a>4. 确定初始化函数</h3><ul><li>在 JNI_OnLoad 结束的时机 Hook SO 中所有动静态绑定的 Java Native 函数，在其执行前或执行后调用目标函数，确认初始化函数; 一般初始化方法要么是动静态绑定函数，要么是自身依靠参数控制<blockquote><p><code>一般而言，初始化函数都是 SO 中的导出函数，否则很难介入和影响 SO 的内部环境，形成”初始化“的效果</code>，但这并非绝对，也可以在任意 JAVA&#x2F;Native 方法中修改目标 SO 的内存，实现初始化，但这种情况非常少见，我们不做讨论，只关注于初始化函数是 SO 中导出函数这种常见情况。</p><p>怎么确认初始化函数是哪一个？在那篇文章里，我们 Hook 目标 SO 的所有导出函数，然后在每个函数执行前（你也可以选择为执行后，并无差别）尝试调用我们的目标函数。</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">var</span> android_dlopen_ext = Module.findExportByName(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;android_dlopen_ext&quot;</span>);<br><span class="hljs-keyword">if</span> (android_dlopen_ext != <span class="hljs-literal">null</span>) &#123;<br>    Interceptor.attach(android_dlopen_ext, &#123;<br>        onEnter: function (args) &#123;<br>            <span class="hljs-keyword">this</span>.hook = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">var</span> soName = args[<span class="hljs-number">0</span>].readCString();<br>            <span class="hljs-keyword">if</span> (soName.indexOf(<span class="hljs-string">&quot;libmtguard.so&quot;</span>) !== -<span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">this</span>.hook = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;,<br>        onLeave: function (retval) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.hook) &#123;<br>                <span class="hljs-keyword">var</span> jniOnload = Module.findExportByName(<span class="hljs-string">&quot;libmtguard.so&quot;</span>, <span class="hljs-string">&quot;JNI_OnLoad&quot;</span>);<br>                Interceptor.attach(jniOnload, &#123;<br>                    onEnter: function (args) &#123;<br>                        console.log(<span class="hljs-string">&quot;Enter Mtguard JNI OnLoad&quot;</span>);<br>                    &#125;,<br>                    onLeave: function (retval) &#123;<br>                        console.log(<span class="hljs-string">&quot;After Mtguard JNI OnLoad&quot;</span>);<br>                        hook_mtso();<br>                    &#125;<br>                &#125;);<br>            &#125;<br>        &#125;<br>    &#125;);<br>&#125;<br><br><br>function hook_mtso() &#123;<br>    Java.perform(function () &#123;<br>        Java.use(<span class="hljs-string">&quot;com.meituan.android.common.mtguard.NBridge&quot;</span>).main.implementation = function(arg1, arg2) &#123;<br>            console.log(<span class="hljs-string">&quot;call com/meituan/android/common/mtguard/NBridge, main(I[Ljava/lang/Object;)[Ljava/lang/Object;&quot;</span>);<br>            call_mtgsig();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.main(arg1, arg2);<br>        &#125;<br><br>        Java.use(<span class="hljs-string">&quot;com.meituan.android.common.mtguard.NBridge<span class="hljs-variable">$SIUACollector</span>&quot;</span>).getHWProperty.implementation = function() &#123;<br>            console.log(<span class="hljs-string">&quot;com/meituan/android/common/mtguard/NBridge<span class="hljs-variable">$SIUACollector</span>, getHWProperty()Ljava/lang/String;&quot;</span>);<br>            call_mtgsig();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.getHWProperty();<br>        &#125;<br><br>        Java.use(<span class="hljs-string">&quot;com.meituan.android.common.mtguard.NBridge<span class="hljs-variable">$SIUACollector</span>&quot;</span>).getEnvironmentInfo.implementation = function() &#123;<br>            console.log(<span class="hljs-string">&quot;com/meituan/android/common/mtguard/NBridge<span class="hljs-variable">$SIUACollector</span>, getEnvironmentInfo()Ljava/lang/String;&quot;</span>);<br>            call_mtgsig();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.getEnvironmentInfo();<br>        &#125;<br><br>        Java.use(<span class="hljs-string">&quot;com.meituan.android.common.mtguard.NBridge<span class="hljs-variable">$SIUACollector</span>&quot;</span>).getEnvironmentInfoExtra.implementation = function() &#123;<br>            console.log(<span class="hljs-string">&quot;com/meituan/android/common/mtguard/NBridge<span class="hljs-variable">$SIUACollector</span>, getEnvironmentInfoExtra()Ljava/lang/String;&quot;</span>);<br>            call_mtgsig();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.getEnvironmentInfoExtra();<br>        &#125;<br><br>        Java.use(<span class="hljs-string">&quot;com.meituan.android.common.mtguard.NBridge<span class="hljs-variable">$SIUACollector</span>&quot;</span>).getHWStatus.implementation = function() &#123;<br>            console.log(<span class="hljs-string">&quot;com/meituan/android/common/mtguard/NBridge<span class="hljs-variable">$SIUACollector</span>, getHWStatus()Ljava/lang/String;&quot;</span>);<br>            call_mtgsig();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.getHWStatus();<br>        &#125;<br><br>        Java.use(<span class="hljs-string">&quot;com.meituan.android.common.mtguard.NBridge<span class="hljs-variable">$SIUACollector</span>&quot;</span>).getHWEquipmentInfo.implementation = function() &#123;<br>            console.log(<span class="hljs-string">&quot;com/meituan/android/common/mtguard/NBridge<span class="hljs-variable">$SIUACollector</span>, getHWEquipmentInfo()Ljava/lang/String;&quot;</span>);<br>            call_mtgsig();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.getHWEquipmentInfo();<br>        &#125;<br><br>        Java.use(<span class="hljs-string">&quot;com.meituan.android.common.mtguard.NBridge<span class="hljs-variable">$SIUACollector</span>&quot;</span>).getUserAction.implementation = function() &#123;<br>            console.log(<span class="hljs-string">&quot;com/meituan/android/common/mtguard/NBridge<span class="hljs-variable">$SIUACollector</span>, getUserAction()Ljava/lang/String;&quot;</span>);<br>            call_mtgsig();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.getUserAction();<br>        &#125;<br><br>        Java.use(<span class="hljs-string">&quot;com.meituan.android.common.mtguard.NBridge<span class="hljs-variable">$SIUACollector</span>&quot;</span>).getPlatformInfo.implementation = function() &#123;<br>            console.log(<span class="hljs-string">&quot;com/meituan/android/common/mtguard/NBridge<span class="hljs-variable">$SIUACollector</span>, getPlatformInfo()Ljava/lang/String;&quot;</span>);<br>            call_mtgsig();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.getPlatformInfo();<br>        &#125;<br><br>        Java.use(<span class="hljs-string">&quot;com.meituan.android.common.mtguard.NBridge<span class="hljs-variable">$SIUACollector</span>&quot;</span>).getLocationInfo.implementation = function() &#123;<br>            console.log(<span class="hljs-string">&quot;com/meituan/android/common/mtguard/NBridge<span class="hljs-variable">$SIUACollector</span>, getLocationInfo()Ljava/lang/String;&quot;</span>);<br>            call_mtgsig();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.getLocationInfo();<br>        &#125;<br><br>        Java.use(<span class="hljs-string">&quot;com.meituan.android.common.mtguard.NBridge<span class="hljs-variable">$SIUACollector</span>&quot;</span>).startCollection.implementation = function() &#123;<br>            console.log(<span class="hljs-string">&quot;com/meituan/android/common/mtguard/NBridge<span class="hljs-variable">$SIUACollector</span>, startCollection()Ljava/lang/String;&quot;</span>);<br>            call_mtgsig();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.startCollection();<br>        &#125;<br><br>        Java.use(<span class="hljs-string">&quot;com.meituan.android.common.mtguard.NBridge<span class="hljs-variable">$SIUACollector</span>&quot;</span>).getExternalEquipmentInfo.implementation = function() &#123;<br>            console.log(<span class="hljs-string">&quot;com/meituan/android/common/mtguard/NBridge<span class="hljs-variable">$SIUACollector</span>, getExternalEquipmentInfo()Ljava/lang/String;&quot;</span>);<br>            call_mtgsig();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.getExternalEquipmentInfo();<br>        &#125;<br>    &#125;)<br>&#125;<br><br><br>function call_mtgsig() &#123;<br>    Java.perform(function () &#123;<br>        <span class="hljs-keyword">var</span> jinteger = Java.use(<span class="hljs-string">&quot;java.lang.Integer&quot;</span>)<br>        <span class="hljs-keyword">var</span> jstring = Java.use(<span class="hljs-string">&quot;java.lang.String&quot;</span>);<br>        <span class="hljs-keyword">var</span> NBridge = Java.use(<span class="hljs-string">&quot;com.meituan.android.common.mtguard.NBridge&quot;</span>)<br>        <span class="hljs-keyword">var</span> objArr = [jstring.$new(<span class="hljs-string">&quot;9b69f861-e054-4bc4-9daf-d36ae205ed3e&quot;</span>), jstring.$new(<span class="hljs-string">&quot;GET /aggroup/homepage/display __reqTraceID=5ca01019-fafc-4f92-a80e-82ce1389aab7&amp;abStrategy=d&amp;allowToTrack=1&amp;ci=1&amp;cityId=1&amp;clearTimeStamp=-1&amp;clientName=android&amp;clientType=android&amp;firstPageAbtest=old&amp;globalId=&amp;limitForYouXuan=25&amp;msid=96E3002678491E51616650388270&amp;offsetForYouXuan=0&amp;os_version=8.1.0&amp;phone_model=Nexus%205X&amp;scene=youxuanZhuanqu&amp;showStyle=1&amp;topic_session_id=4324505e-ccc6-4f7a-9943-d65223bbb9a7&amp;userid=-1&amp;utm_campaign=AgroupBgroupC0E0Ghomepage&amp;utm_content=96E3002678491E5&amp;utm_medium=android&amp;utm_source=wandoujia&amp;utm_term=1100090405&amp;uuid=00000000000005FB514BD2BA040ABADC24C8D31AD4F18A162330366877733119&amp;version_name=11.9.405&amp;wifi-cur=0&amp;wifi-mac=02%3A00%3A00%3A00%3A00%3A00%08&amp;wifi-name=%3Cunknown%20ssid%3E%08&amp;wifi-strength=-10%08&amp;withRegion=0&quot;</span>).getBytes(), jinteger.valueOf(<span class="hljs-number">2</span>)]<br>        <span class="hljs-keyword">var</span> result = NBridge.main(<span class="hljs-number">203</span>, objArr);<br>        console.log(<span class="hljs-string">&quot;result:&quot;</span>+result);<br>    &#125;)<br>&#125;<br><br><span class="hljs-comment">// frida -U -f com.sankuai.meituan -l testOnJniOnLoad.js</span><br></code></pre></td></tr></table></figure></li><li>在某一个时机以后，目标函数会返回预期的结果。这个样本相对简单，前面只有一个函数就跑出了结果。如果前面有数个函数，比如 A- B -C -D -A - E - C - targetResult，那么需要多次测试，并且结合主动调用，区分出初始化函数和无关函数，如果对这些函数的模拟执行并不复杂，那么直接当成初始化函数去做模拟执行也无伤大雅</li></ul><h1 id="经验之谈"><a href="#经验之谈" class="headerlink" title="经验之谈"></a>经验之谈</h1><ol><li><p>对于简单样本而言，初始化函数往往是另一个函数，比如下面这样的经典代码</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-type">static</span> native <span class="hljs-type">String</span> <span class="hljs-title">nativeCall</span><span class="hljs-params">(<span class="hljs-type">String</span> arg1, <span class="hljs-type">int</span> arg2)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-type">static</span> native <span class="hljs-type">void</span> <span class="hljs-title">nativeInit</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-type">static</span> &#123;<br>    System.<span class="hljs-built_in">loadLibrary</span>(<span class="hljs-string">&quot;native-lib&quot;</span>);<br>    <span class="hljs-built_in">nativeInit</span>();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>但对于复杂样本而言，初始化函数往往是”自身“，就像下面这样。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-comment">// 函数有多个参数，或采用可变参数，其中某个入参充当”调用号“的作用，引导进入不同的分支和逻辑，其中一些充当初始化的作用，其他是不同的业务逻辑</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> <span class="hljs-built_in">Object</span> <span class="hljs-title function_">a</span>(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> i2, <span class="hljs-type">long</span> j, <span class="hljs-built_in">String</span> <span class="hljs-built_in">str</span>, <span class="hljs-built_in">Object</span> obj);<br></code></pre></td></tr></table></figure></li><li><p>在观测初始化函数这一场景时，<code>Frida 灵活方便，但从实际体验和过往经验看，使用 Lsposed Hook 是更好的选择，Frida 常常会遗漏流程，甚至无响应</code>，目前尚不清楚这是样本做了对应的 Anti ，还是其他的问题，但总体来说，如果读者使用 Frida 分析目标样本，无法得到符合预期的观测结果时，建议换 Lsposed 测试</p></li><li><p>4.一旦熟悉 Frida Native Call + Hook 这一套，再加上些许经验，你可能会感觉分析初始化函数不再能难倒你，这时候要警惕陷入机械式的分析，<code>三把斧中静态分析 JAVA 代码同样不可或缺，比如小红书的shield的so</code></p><blockquote><p>它的初始化函数是initializeNative和initialize，但 intercept 的第二个参数是 initialize 返回的指针，静态分析上述代码可以轻松意识到这一点。但如果仅通过 Frida Call&#x2F;Hook 去分析，认为参数 2 是固定值，那么在 Unidbg 中模拟执行一定会出问题。只关注参数的具体值，而不静态分析其语义，这就是一种机械式的分析思路，要避免</p></blockquote></li></ol><h1 id="补充：init-array时机-更早-流程"><a href="#补充：init-array时机-更早-流程" class="headerlink" title="补充：init_array时机[更早]流程"></a>补充：init_array时机[更早]流程</h1><ul><li>有时候也要关注init_array之类的更早时机，参考同一路径下笔记:<a href="https://note.youdao.com/s/8tatZBf5">init_array初始化问题</a></li></ul><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><ol><li>当发现so执行结果不一致，需要考虑初始化问题，确定是否为init_array初始化问题。比如字符串混淆，一般在init_array做解密处理。eg: <a href="https://bbs.pediy.com/thread-249071.htm">孤挺花 字符串混淆</a></li><li>通过以下unidbg和真机运行so结果对比，即可得知少运行了哪些so中方法</li><li>得到方法地址后，通过如下方式，让unidbg运行指定方法</li></ol><h3 id="unidbg运行指定方法"><a href="#unidbg运行指定方法" class="headerlink" title="unidbg运行指定方法"></a>unidbg运行指定方法</h3><ul><li>src&#x2F;main&#x2F;java&#x2F;com&#x2F;github&#x2F;unidbg&#x2F;linux&#x2F;AndroidElfLoader.java&lt;可通过debug运行断点在vm.loadLibrary方法处一步步跟&gt;<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs csharp">List&lt;InitFunction&gt; initFunctionList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>.....<br><span class="hljs-keyword">if</span> (elfFile.file_type == ElfFile.FT_DYN) &#123; <span class="hljs-comment">// not executable</span><br>    <span class="hljs-built_in">int</span> <span class="hljs-keyword">init</span> = dynamicStructure.getInit();<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">init</span> != <span class="hljs-number">0</span>) &#123;<br>        initFunctionList.<span class="hljs-keyword">add</span>(<span class="hljs-keyword">new</span> LinuxInitFunction(load_base, soName, <span class="hljs-keyword">init</span>));<br>    &#125;<br><br>    <span class="hljs-comment">// 添加init_array 需要执行so方法</span><br>    <span class="hljs-keyword">if</span>(soName.<span class="hljs-keyword">equals</span>(<span class="hljs-string">&quot;libshield.so&quot;</span>))&#123;<br>        <span class="hljs-built_in">int</span>[] addressList = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[]&#123;<span class="hljs-number">0xa0e1</span>, <span class="hljs-number">0xc0d5</span>&#125;;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> address: addressList)&#123;<br>            initFunctionList.<span class="hljs-keyword">add</span>(<span class="hljs-keyword">new</span> LinuxInitFunction(load_base, soName, address));<br>        &#125;<br>    &#125;<br> ...<br></code></pre></td></tr></table></figure></li></ul><h3 id="undibg和frida对比，找到缺少运行哪个方法"><a href="#undibg和frida对比，找到缺少运行哪个方法" class="headerlink" title="undibg和frida对比，找到缺少运行哪个方法"></a>undibg和frida对比，找到缺少运行哪个方法</h3><h4 id="unidbg查看init-Array运行了哪些初始化函数"><a href="#unidbg查看init-Array运行了哪些初始化函数" class="headerlink" title="unidbg查看init_Array运行了哪些初始化函数"></a>unidbg查看init_Array运行了哪些初始化函数</h4><ul><li>打开日志开关，运行后搜索”CallInitFunction”<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><br>&gt;&gt;&gt; <span class="hljs-attribute">SP</span>=0xbffff730 <span class="hljs-attribute">LR</span>=RX@0x4018911b[libc.so]0x4811b <span class="hljs-attribute">PC</span>=RX@0x40182284[libc.so]0x41284 cpsr: <span class="hljs-attribute">N</span>=0, <span class="hljs-attribute">Z</span>=0, <span class="hljs-attribute">C</span>=0, <span class="hljs-attribute">V</span>=0, <span class="hljs-attribute">T</span>=0, <span class="hljs-attribute">mode</span>=0b10000<br>&gt;&gt;&gt; <span class="hljs-attribute">d0</span>=0x0(0.0) <span class="hljs-attribute">d1</span>=0x3933312032203120(3.696225012140986E-33) <span class="hljs-attribute">d2</span>=0x3220302034203736(3.0022298612178987E-67) <span class="hljs-attribute">d3</span>=0x3436333832203235(3.536676186840298E-57) <span class="hljs-attribute">d4</span>=0x2030203020302030(1.2027122125173386E-153) <span class="hljs-attribute">d5</span>=0x2030203020302030(1.2027122125173386E-153) <span class="hljs-attribute">d6</span>=0x2030203020302030(1.2027122125173386E-153) <span class="hljs-attribute">d7</span>=0x2030203020302030(1.2027122125173386E-153)<br>&gt;&gt;&gt; <span class="hljs-attribute">d8</span>=0x0(0.0) <span class="hljs-attribute">d9</span>=0x0(0.0) <span class="hljs-attribute">d10</span>=0x0(0.0) <span class="hljs-attribute">d11</span>=0x0(0.0) <span class="hljs-attribute">d12</span>=0x0(0.0) <span class="hljs-attribute">d13</span>=0x0(0.0) <span class="hljs-attribute">d14</span>=0x0(0.0) <span class="hljs-attribute">d15</span>=0x0(0.0)<br>[16:40:42 528] <span class="hljs-built_in">DEBUG</span> [com.github.unidbg.linux.ARM32SyscallHandler] (ARM32SyscallHandler:1813) - mprotect <span class="hljs-attribute">address</span>=0x400ac000, <span class="hljs-attribute">alignedAddress</span>=0x400ac000, <span class="hljs-attribute">offset</span>=0, <span class="hljs-attribute">length</span>=4096, <span class="hljs-attribute">alignedLength</span>=4096, <span class="hljs-attribute">prot</span>=0x1<br>[16:40:42 529] <span class="hljs-built_in">DEBUG</span> [com.github.unidbg.AbstractEmulator] (AbstractEmulator:400) - emulate RX@0x40009e91[libshield.so]0x9e91 finished <span class="hljs-attribute">sp</span>=unidbg@0xbffff758, <span class="hljs-attribute">offset</span>=2ms<br>[16:40:42 532] <span class="hljs-built_in">DEBUG</span> [com.github.unidbg.linux.AbsoluteInitFunction] (AbsoluteInitFunction:44) - [libshield.so]CallInitFunction: <span class="hljs-attribute">address</span>=0x0, <span class="hljs-attribute">ptr</span>=RW@0x4009482c[libshield.so]0x9482c, <span class="hljs-attribute">func</span>=<span class="hljs-literal">null</span><br>[libshield.so]CallInitFunction: RX@0x40009b71[libshield.so]0x9b71, <span class="hljs-attribute">offset</span>=1ms<br>[libshield.so]CallInitFunction: RX@0x40009bc9[libshield.so]0x9bc9, <span class="hljs-attribute">offset</span>=1ms<br>[libshield.so]CallInitFunction: RX@0x40009c21[libshield.so]0x9c21, <span class="hljs-attribute">offset</span>=1ms<br>[libshield.so]CallInitFunction: RX@0x40009c79[libshield.so]0x9c79, <span class="hljs-attribute">offset</span>=0ms<br>[libshield.so]CallInitFunction: RX@0x40009c89[libshield.so]0x9c89, <span class="hljs-attribute">offset</span>=1ms<br>[libshield.so]CallInitFunction: RX@0x40009cd9[libshield.so]0x9cd9, <span class="hljs-attribute">offset</span>=1ms<br>[libshield.so]CallInitFunction: RX@0x40009db5[libshield.so]0x9db5, <span class="hljs-attribute">offset</span>=0ms<br>[libshield.so]CallInitFunction: RX@0x40009e91[libshield.so]0x9e91, <span class="hljs-attribute">offset</span>=2ms<br></code></pre></td></tr></table></figure></li></ul><h4 id="frida-查看真实样本init-array运行了哪些初始化函数"><a href="#frida-查看真实样本init-array运行了哪些初始化函数" class="headerlink" title="frida 查看真实样本init_array运行了哪些初始化函数"></a>frida 查看真实样本init_array运行了哪些初始化函数</h4><ul><li>参考：<a href="https://bbs.pediy.com/thread-267430.htm">https://bbs.pediy.com/thread-267430.htm</a><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* frida -U -f com.xingin.xhs -l hookInitArray.js --no-pause</span><br><span class="hljs-comment">* */</span><br><br>function hook_constructor() &#123;<br><br>    <span class="hljs-keyword">if</span> (Process.pointerSize == <span class="hljs-number">4</span>) &#123;<br>        <span class="hljs-keyword">var</span> linker = Process.findModuleByName(<span class="hljs-string">&quot;linker&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">var</span> linker = Process.findModuleByName(<span class="hljs-string">&quot;linker64&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">var</span> addr_call_function = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">var</span> addr_g_ld_debug_verbosity = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">var</span> addr_async_safe_format_log = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (linker) &#123;<br>        <span class="hljs-comment">//console.log(&quot;found linker&quot;);</span><br>        <span class="hljs-keyword">var</span> symbols = linker.enumerateSymbols();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; symbols.length; i++) &#123;<br>            <span class="hljs-keyword">var</span> name = symbols[i].name;<br>            <span class="hljs-keyword">if</span> (name.indexOf(<span class="hljs-string">&quot;call_function&quot;</span>) &gt;= <span class="hljs-number">0</span>) &#123;<br>                addr_call_function = symbols[i].address;<br>                <span class="hljs-comment">// console.log(&quot;call_function&quot;,JSON.stringify(symbols[i]));</span><br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (name.indexOf(<span class="hljs-string">&quot;g_ld_debug_verbosity&quot;</span>) &gt;= <span class="hljs-number">0</span>) &#123;<br>                addr_g_ld_debug_verbosity = symbols[i].address;<br><br>                ptr(addr_g_ld_debug_verbosity).writeInt(<span class="hljs-number">2</span>);<br><br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (name.indexOf(<span class="hljs-string">&quot;async_safe_format_log&quot;</span>) &gt;= <span class="hljs-number">0</span> &amp;&amp; name.indexOf(<span class="hljs-string">&#x27;va_list&#x27;</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// console.log(&quot;async_safe_format_log&quot;,JSON.stringify(symbols[i]));</span><br>                addr_async_safe_format_log = symbols[i].address;<br><br>            &#125;<br><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (addr_async_safe_format_log) &#123;<br>        Interceptor.attach(addr_async_safe_format_log, &#123;<br>            onEnter: function (args) &#123;<br>                <span class="hljs-keyword">this</span>.log_level = args[<span class="hljs-number">0</span>];<br>                <span class="hljs-keyword">this</span>.tag = ptr(args[<span class="hljs-number">1</span>]).readCString()<br>                <span class="hljs-keyword">this</span>.fmt = ptr(args[<span class="hljs-number">2</span>]).readCString()<br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.fmt.indexOf(<span class="hljs-string">&quot;c-tor&quot;</span>) &gt;= <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-keyword">this</span>.fmt.indexOf(<span class="hljs-string">&#x27;Done&#x27;</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">this</span>.function_type = ptr(args[<span class="hljs-number">3</span>]).readCString(), <span class="hljs-comment">// func_type</span><br>                        <span class="hljs-keyword">this</span>.so_path = ptr(args[<span class="hljs-number">5</span>]).readCString();<br>                    <span class="hljs-keyword">var</span> strs = new Array(); <span class="hljs-comment">//定义一数组</span><br>                    strs = <span class="hljs-keyword">this</span>.so_path.split(<span class="hljs-string">&quot;/&quot;</span>); <span class="hljs-comment">//字符分割</span><br>                    <span class="hljs-keyword">this</span>.so_name = strs.pop();<br>                    <span class="hljs-keyword">this</span>.func_offset = ptr(args[<span class="hljs-number">4</span>]).sub(Module.findBaseAddress(<span class="hljs-keyword">this</span>.so_name))<br>                    console.log(<span class="hljs-string">&quot;func_type:&quot;</span>, <span class="hljs-keyword">this</span>.function_type,<br>                        <span class="hljs-string">&#x27;\nso_name:&#x27;</span>, <span class="hljs-keyword">this</span>.so_name,<br>                        <span class="hljs-string">&#x27;\nso_path:&#x27;</span>, <span class="hljs-keyword">this</span>.so_path,<br>                        <span class="hljs-string">&#x27;\nfunc_offset:&#x27;</span>, <span class="hljs-keyword">this</span>.func_offset<br>                    );<br>                    console.warn(<span class="hljs-string">&quot;======================================================*&quot;</span>)<br>                    <span class="hljs-comment">// hook代码在这加</span><br>                &#125;<br>            &#125;,<br>            onLeave: function (retval) &#123;<br>            &#125;<br>        &#125;)<br>    &#125;<br><br><br>&#125;<br><br>hook_constructor()<br><br></code></pre></td></tr></table></figure></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs csharp">List&lt;InitFunction&gt; initFunctionList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>.....<br><span class="hljs-keyword">if</span> (elfFile.file_type == ElfFile.FT_DYN) &#123; <span class="hljs-comment">// not executable</span><br>    <span class="hljs-built_in">int</span> <span class="hljs-keyword">init</span> = dynamicStructure.getInit();<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">init</span> != <span class="hljs-number">0</span>) &#123;<br>        initFunctionList.<span class="hljs-keyword">add</span>(<span class="hljs-keyword">new</span> LinuxInitFunction(load_base, soName, <span class="hljs-keyword">init</span>));<br>    &#125;<br><br>    <span class="hljs-comment">// 添加init_array 需要执行so方法</span><br>    <span class="hljs-keyword">if</span>(soName.<span class="hljs-keyword">equals</span>(<span class="hljs-string">&quot;libshield.so&quot;</span>))&#123;<br>        <span class="hljs-built_in">int</span>[] addressList = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[]&#123;<span class="hljs-number">0xa0e1</span>, <span class="hljs-number">0xc0d5</span>&#125;;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> address: addressList)&#123;<br>            initFunctionList.<span class="hljs-keyword">add</span>(<span class="hljs-keyword">new</span> LinuxInitFunction(load_base, soName, address));<br>        &#125;<br>    &#125;<br> ...<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/04/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/1.%20%E5%88%9D%E5%A7%8B%E5%8C%96/1.%20%E6%80%BB%E7%BA%B2/"/>
    <url>/blog/2025/05/04/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/1.%20%E5%88%9D%E5%A7%8B%E5%8C%96/1.%20%E6%80%BB%E7%BA%B2/</url>
    
    <content type="html"><![CDATA[<ul><li>参考<ul><li><a href="https://www.yuque.com/lilac-2hqvv/lfssh8/ykorvd">https://www.yuque.com/lilac-2hqvv/lfssh8/ykorvd</a></li><li><a href="https://www.yuque.com/lilac-2hqvv/lfssh8/gxwflx1eyiherqvo">https://www.yuque.com/lilac-2hqvv/lfssh8/gxwflx1eyiherqvo</a></li></ul></li></ul><h3 id="为什么要做初始化"><a href="#为什么要做初始化" class="headerlink" title="为什么要做初始化"></a>为什么要做初始化</h3><ul><li><p>即在目标函数执行之前做了一些初始化动作，会<strong>导致目标函数执行结果不一致</strong>。</p></li><li><p><code>初始化可能在同一个so的另一个函数中做，也可以在JNI_Onload/Dopen之前做。</code></p></li><li><p><em>我们在<code>目标SO的JNIOnLoad刚执行完时再尝试一下call，如果存在初始化函数，这个时机点样本的初始化函数应该也还没来得及运行，call 应该是没有结果的</code></em></p></li><li><p>unidbg： so—loadLibrary(init_proc,init_array…) —-JNI_OnLoad  —-然后目标函数</p></li><li><p>frida ：so— Dlopen ——JNI_OnLoad  —call目标函数 </p></li><li><p>frida native call目标函数，如何得到正确的结果。需要满足两个条件：</p></li></ul><ol><li>是执行时机在JNIOnload&#x2F;Dopen后</li><li>尽量是测试机第一次安装app且第一次启动</li></ol><h3 id="确认是否是初始化-和-那个方法是初始化方法-的方案："><a href="#确认是否是初始化-和-那个方法是初始化方法-的方案：" class="headerlink" title="确认是否是初始化 和 那个方法是初始化方法 的方案："></a>确认是否是初始化 和 那个方法是初始化方法 的方案：</h3><ol><li><p>frida hook all java函数 + call目标函数</p></li><li><p>frida native hook + java call</p></li><li><p>frida native hook + native call</p></li><li><p>如果出现类加载器，需要考虑两种方案</p></li><li><p>循环类加载器，重置当前加载器</p></li><li><p>hook native层</p></li></ol><ul><li>bss节：未初始化的数据 或者 初始化为0的数据  存储在.bss节</li><li>.data段：全局变量和静态变量存储在.data段</li></ul><p></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/04/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/%E8%A1%A5%E7%8E%AF%E5%A2%83%E6%B5%81%E7%A8%8B/"/>
    <url>/blog/2025/05/04/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/%E8%A1%A5%E7%8E%AF%E5%A2%83/%E8%A1%A5%E7%8E%AF%E5%A2%83%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="补环境最严谨的流程"><a href="#补环境最严谨的流程" class="headerlink" title="补环境最严谨的流程"></a>补环境最严谨的流程</h3><ol><li>分析初始化函数</li><li>固定输入和输出 <ol><li>即达到输入固定，输出不变的效果，目的是确保Unidbg的结果与真机执行情况一致。 </li><li>常见的尝试是固定时间戳获取函数和固定随机数获取函数。</li></ol></li><li>检查目标SO中是否有多线程 <ol><li>如果目标存在多线程，Frida patch子线程的创建，是否影响目标函数的运算和结果？不影响则可以用Unidbg，否则不建议。</li></ol></li></ol><p>4.开始跑Unidbg，同时进行初始化的Hook，具体步骤在如下文章<br>5.通过JNItrace获取trace结果，根据它的指引补JNI环境，又根据JNI调用走向是否吻合，来判断整体环境是否OK，最终得到结果。</p><h3 id="如何补出好的结果，我们可能需要考虑五方面"><a href="#如何补出好的结果，我们可能需要考虑五方面" class="headerlink" title="如何补出好的结果，我们可能需要考虑五方面"></a>如何补出好的结果，我们可能需要考虑五方面</h3><ol><li>文件读写</li><li>JNI 调用</li><li>库函数访问</li><li>系统调用</li><li>函数调用链</li></ol><h3 id="补环境的三个层次"><a href="#补环境的三个层次" class="headerlink" title="补环境的三个层次"></a>补环境的三个层次</h3><p>我们可以将Unidbg模拟执行的结果粗略分成三个层次</p><ul><li>完美符合预期</li><li>功能等价于 Frida&#x2F;Xposed RPC调用</li><li>结果存在偏差、异常甚至错误</li></ul><p>举一些例子说明补环境是如何影响并导致结果属于哪一类</p><ul><li>当样本在检测Xposed等风险情况时<br><img src="/blog/../../../../../../images/android/%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/1746426505988.jpg"></li></ul><ol><li>如果我们能意识到这件事，并在Unidbg中不予返回，这就是倾向于第一类的补环境。</li><li>而如果完全依照真机情况进行补环境，比如下面，我们就将真机已连接ADB的相关信息，也代入到了Unidbg补环境中。那么补出来的结果就会和RPC类似，即Unidbg补环境和反馈和你的测试机一致。<br><img src="/blog/../../../../../../images/android/%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/1746426515690.jpg"></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/04/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/1.%20%E5%85%A5%E9%97%A8/"/>
    <url>/blog/2025/05/04/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/1.%20%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<ul><li>HookAllUnidbg.pdf: <img src="/blog/images/android/%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/HookAllInUnidbg.png"></li><li>github：<a href="https://github.com/zhkl0228/unidbg">https://github.com/zhkl0228/unidbg</a></li><li>实战undibg：<a href="https://gitee.com/yangyin_g/unidbg">https://gitee.com/yangyin_g/unidbg</a></li><li>入门参考：<ul><li><a href="https://www.yuque.com/lilac-2hqvv/xdwlsg/gmbn45b5n6g59kks">https://www.yuque.com/lilac-2hqvv/xdwlsg/gmbn45b5n6g59kks</a>?</li><li><a href="https://www.yuque.com/lilac-2hqvv/lfssh8/ibfh81">https://www.yuque.com/lilac-2hqvv/lfssh8/ibfh81</a>?</li></ul></li></ul><h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><h3 id="进程名"><a href="#进程名" class="headerlink" title="进程名"></a>进程名</h3><ul><li>setProcessName用于设置 App 进程名，<code>很多人 会忽略做这一设置，但最好设置一下，否则会带来风险</code>。<code>因为样本可以在代码中通过getprogname函数获取进程名</code></li><li>如果通过setProcessName设置了进程名，<code>那么getprogname会返回你所设置的进程名，而如果不设置进程名，Unidbg 会设置进程名为自身，这可不是很妙</code>。<blockquote><p>this.processName &#x3D; processName &#x3D;&#x3D; null ? “unidbg” : processName;</p></blockquote></li></ul><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><blockquote><p><code>addBackendFactory</code>用于设置后端执行引擎</p><p><code>Backend 扮演的角色是处理器</code>，承担模拟执行机器指令的任务。addBackendFactory用于设置使用哪一个后端Unidbg </p><p>目前支持五个 Backend，分别是 <code>Unicorn、Unicorn2、Dynarmic、Hypervisor、KVM</code>。如果不添加 BackendFactory，<code>默认使用 Unicorn Backend</code></p><p><code>各种 BackendFactory 的构造方法都要传入fallbackUnicorn参数</code>，它表示如果<strong>这个后端创建失败时如何处理</strong>。如果设置为 false，那么 backend 创建失败时直接报错；设置为 true，返回 null，最终使用默认的 Unicorn Backend。</p></blockquote><ul><li><code>如果是算法分析，选择Unicorn后端，因为 提供的各种强大 Hook</code></li><li>相比较 Unicorn 后端，Unidbg 基于 <code>Unicorn2 后端设计和处理了多线程的相关逻辑</code>，因此在 Unicorn 和 Unicorn2 之间，应该选择 Unicorn 2</li><li>如果是模拟执行用于<code>rpc，选择 Dynarmic 作为可选后端，速度快，但是不支持各种各样的 Hook</code></li><li>如果你使用 Unidbg 的意图是<code>模拟执行，替代 RPC，那么你仍然应该先试 Unicorn2 后端，因为 Unicorn2 在模拟执行指令上的能力更强，如果 Unicorn2 最终能顺利跑通、跑出预期结果，再切换为 Dynarmic 看是否也能处理成功</code>，<code>如果 Unicorn2 跑不通，那么 Dynarmic 引擎也必然无法成功</code>。需要强调的是，_使用 Dynarmic 引擎时，不可使用基于 Unicorn 的 各种 Hook，而应该用内置适配的 HookZz、xHook 等框架_。</li><li>关于速度：<ul><li>Unicorn 最慢，Dynarmic 比 Unicorn 快 50 -100 倍，真机比 Dynarmic 快 5 - 30 倍，因为测试机性能差异很大。</li><li>最后，为了提高效率，<code>光用 Dynarmic 是不够的，还会搭配 unidbg-boot-server</code></li><li>KVM 和 Hypervisor 都是虚拟化而非模拟执行方案，所以对宿主机有较高要求，KVM 可用于 Raspberry Pi B4 等环境 ，速度快。</li><li>Hypervisor 是 Mac M1上的虚拟化方案，是 Unidbg 上最快的后端。</li><li>KVM 和 Hypervisor 都很快很快，但受制于宿主机设备限制，在 Unidbg 实际使用中不多见</li></ul></li></ul><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ada">emulator = AndroidEmulatorBuilder.for32Bit()<br>        .addBackendFactory(<span class="hljs-keyword">new</span> Unicorn2Factory(<span class="hljs-literal">false</span>))<br>        //.addBackendFactory(<span class="hljs-keyword">new</span> DynarmicFactory(<span class="hljs-literal">true</span>))<br>        .setProcessName(<span class="hljs-string">&quot;test&quot;</span>)<br>        .build();<br></code></pre></td></tr></table></figure><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><ul><li>Unidbg 在 Unicorn2 后端上实现了相对完善的多线程处理逻辑，如果读者希望开启多线程，除了要将 Backend 设置为 Unicorn2 外，还需要在模拟器初始化后通过<code>setEnableThreadDispatcher</code>开启多线程调度，以及设置线程切换条件<code>registerEmuCountHook</code>。<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">emulator = AndroidEmulatorBuilder.for32Bit<span class="hljs-params">()</span><br>        <span class="hljs-string">.addBackendFactory</span><span class="hljs-params">(new Unicorn2Factory(false)</span>)<br>        <span class="hljs-string">.setProcessName</span><span class="hljs-params">(&quot;test&quot;)</span><br>        <span class="hljs-string">.build</span><span class="hljs-params">()</span>;<br><span class="hljs-string">//</span> 设置执行多少条指令切换一次线程<br>emulator.getBackend<span class="hljs-params">()</span><span class="hljs-string">.registerEmuCountHook</span><span class="hljs-params">(10000)</span>;<br><span class="hljs-string">//</span> 开启线程调度器<br>emulator.getSyscallHandler<span class="hljs-params">()</span><span class="hljs-string">.setEnableThreadDispatcher</span><span class="hljs-params">(true)</span>;<br></code></pre></td></tr></table></figure></li><li><code>个人建议在模拟执行相对复杂的样本时，就打开多线程；如果样本难度一般，就不必打开</code></li></ul><h3 id="日志系统"><a href="#日志系统" class="headerlink" title="日志系统"></a>日志系统</h3><ul><li>参考：<a href="https://www.yuque.com/lilac-2hqvv/xdwlsg/yaxqgh">https://www.yuque.com/lilac-2hqvv/xdwlsg/yaxqgh</a></li></ul><h4 id="常规日志"><a href="#常规日志" class="headerlink" title="常规日志"></a>常规日志</h4><ul><li>Unidbg 基于模块去管理输出，想了解哪部分日志，就指定具体的类为 DEBUG 等级<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> org.apache.log4j.<span class="hljs-keyword">Level</span>;<br><span class="hljs-keyword">import</span> org.apache.log4j.Logger;<br><br><span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br>    NetWork nw = <span class="hljs-built_in">new</span> NetWork();<br>    Logger.getLogger(ARM32SyscallHandler.<span class="hljs-keyword">class</span>).setLevel(<span class="hljs-keyword">Level</span>.<span class="hljs-keyword">DEBUG</span>);<br>    Logger.getLogger(AndroidSyscallHandler.<span class="hljs-keyword">class</span>).setLevel(<span class="hljs-keyword">Level</span>.<span class="hljs-keyword">DEBUG</span>);<br>    String result = nw.callSign();<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;call s result:&quot;+result);<br>&#125;<br></code></pre></td></tr></table></figure></li><li>如果你希望输出所有模块的日志，可以修改unidbg-android&#x2F;src&#x2F;test&#x2F;resources&#x2F;log4j.properties文件，将 unidbg 的日志等级从 INFO 改为 DEBUG；那么不管是系统调用、指针管理、多线程，还是多线程处理器等等，所有组件的日志都会打印出来</li></ul><h4 id="虚拟机日志"><a href="#虚拟机日志" class="headerlink" title="虚拟机日志"></a>虚拟机日志</h4><ul><li>除了常规日志，Unidbg 还有另一套日志输出，主要打印 JNI 、Syscall 调用相关的内容。它和常规日志的输出有重叠，但内容更详细一些； vm.setVerbose 开启或关闭它。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">WeiBo</span><span class="hljs-params">()</span> &#123;<br>    emulator = AndroidEmulatorBuilder<br>        .for32Bit()<br>        .addBackendFactory(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Unicorn2Factory</span>(<span class="hljs-literal">true</span>))<br>        .setProcessName(<span class="hljs-string">&quot;com.weico.international&quot;</span>)<br>        .build();<br>    <span class="hljs-type">Memory</span> <span class="hljs-variable">memory</span> <span class="hljs-operator">=</span> emulator.getMemory();<br>    memory.setLibraryResolver(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AndroidResolver</span>(<span class="hljs-number">23</span>));<br>    vm = emulator.createDalvikVM(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;unidbg-android/src/test/resources/weibo/sinaInternational.apk&quot;</span>));<br>    vm.setJni(<span class="hljs-built_in">this</span>);<br>    <span class="hljs-comment">// 设置是否打印以 JNI 为主的虚拟机调用细节</span><br>    vm.setVerbose(<span class="hljs-literal">false</span>);<br>    <span class="hljs-type">DalvikModule</span> <span class="hljs-variable">dm</span> <span class="hljs-operator">=</span> vm.loadLibrary(<span class="hljs-string">&quot;utility&quot;</span>, <span class="hljs-literal">true</span>);<br>    WeiboSecurityUtils = vm.resolveClass(<span class="hljs-string">&quot;com/sina/weibo/security/WeiboSecurityUtils&quot;</span>);<br>    dm.callJNI_OnLoad(emulator);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="加载模块"><a href="#加载模块" class="headerlink" title="加载模块"></a>加载模块</h1><h3 id="加载apk"><a href="#加载apk" class="headerlink" title="加载apk"></a>加载apk</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建虚拟机</span><br><span class="hljs-type">VM</span> <span class="hljs-variable">dalvikVM</span> <span class="hljs-operator">=</span> emulator.createDalvikVM();<br><span class="hljs-comment">//创建虚拟机并指定APK文件</span><br><span class="hljs-type">VM</span> <span class="hljs-variable">dalvikVM</span> <span class="hljs-operator">=</span> emulator.createDalvikVM(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;apk file path&quot;</span>));<br></code></pre></td></tr></table></figure><ul><li>Unidbg 加载 apk 做了什么<blockquote><p>一是解析 apk 信息，减少使用者在补 JNI 环境上的工作量。Unidbg 会解析版本名、版本号、包名等信息，如果样本通过 JNI 访问和获取这些信息，Unidbg 会替我们处理，不需要我们烦心</p><p>二是Unidbg 还会解析 Apk 签名，处理签名校验相关的 JNI 调用</p><p>三是对资源文件的处理，如果加载了 apk，就可以在 Unidbg 中访问 apk assets 目录下的文件</p><p>如果没有传入apk，这些需要我们手动补</p></blockquote></li></ul><h3 id="加载模块-1"><a href="#加载模块-1" class="headerlink" title="加载模块"></a>加载模块</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//参数一: 动态库或可执行ELF文件</span><br><span class="hljs-comment">//参数二: 是否强制执行 init_proc、init_array 初始化系列函数</span><br><span class="hljs-function">DalvikModule <span class="hljs-title">loadLibrary</span><span class="hljs-params">(<span class="hljs-built_in">File</span> elfFile, <span class="hljs-type">boolean</span> forceCallInit)</span></span>;<br><br><span class="hljs-comment">//参数一：动态库或可执行ELF文件名，比如 libkwsgmain.so 其名就是 kwsgmain，</span><br><span class="hljs-comment">//Unibdg 会在 apk lib 目录下找到和加载它</span><br><span class="hljs-comment">//参数二: 是否强制执行 init_proc、init_array 初始化系列函数</span><br><span class="hljs-function">DalvikModule <span class="hljs-title">loadLibrary</span><span class="hljs-params">(<span class="hljs-type">String</span> libname, <span class="hljs-type">boolean</span> forceCallInit)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="加载依赖"><a href="#加载依赖" class="headerlink" title="加载依赖"></a>加载依赖</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 模拟器的内存操作接口</span><br><span class="hljs-keyword">final</span> <span class="hljs-type">Memory</span> <span class="hljs-variable">memory</span> <span class="hljs-operator">=</span> emulator.getMemory();<br><span class="hljs-comment">// 设置系统类库解析</span><br>memory.setLibraryResolver(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AndroidResolver</span>(<span class="hljs-number">23</span>));<br></code></pre></td></tr></table></figure><ul><li>我们一般使用 sdk23，读者可能认为 Android 6.0 的运行库环境太低了，但事实上，对于 Native Runtime 而言，似乎已然够用，如果读者希望使用更高的版本，并非将真机的 SO 放到 Unidbg 就大功告成，Unidbg 为这两个 SDK 环境做了一些优化和 patch 处理，参考文档</li></ul><h1 id="发起调用"><a href="#发起调用" class="headerlink" title="发起调用"></a>发起调用</h1><ul><li>我们想对s发起调用，因为它的返回值是字符串，是对象，所以用callJniMethodObject，如果返回值是 int 就用callJniMethodInt</li><li>如果s是静态方法，那么自然不需要 newObject，调用则通过 callStaticJNIMethodXXX 系列函数</li></ul><h3 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h3><ul><li>参数传递 <ul><li>参数 1 是字符串，参数 2 是布尔值，直接传递即可，不需要做其他处理，两大类参数都可以直接传递。 </li><li>● 基本类型直接传递，int、long、boolean、double 等。 </li><li>● 下面几种对象类型也可以直接传递 <ul><li>○ String </li><li>○ byte 数组 </li><li>○ short 数组 </li><li>○ int 数组 </li><li>○ float 数组 </li><li>○ double 数组 </li><li>○ Enum 枚举类型</li></ul></li><li>除此之外还有许多种可能的参数，比如字符串数组、二维数组、Android Context&#x2F;Application、HashMap 等等，在大体上遵循两类处理办法。 <ul><li>如果是 JDK 中包含的类库和方法，比如二维数组、字符串数组、HashMap 等等，直接构造然后使用ProxyDvmObject.createObject(vm, obj);构造出对象。除此之外比如 Okhttp3 之类的第三方类库，导入到本地环境里，也可以使用这个办法。 </li><li>如果是 JDK 中无法包含的类库，比如 Android FrameWork 以及样本自定义的类库，通过resolveClass(className).newObject处理，就像本节的NativeApi那样处理。</li></ul></li></ul></li></ul><h3 id="调用so不同方法"><a href="#调用so不同方法" class="headerlink" title="调用so不同方法"></a>调用so不同方法</h3><ul><li>参考：<a href="https://blog.csdn.net/qq_38851536/article/details/117418582">https://blog.csdn.net/qq_38851536/article/details/117418582</a></li></ul><h4 id="通过伪造内存块，主动调用一个native-inline方法"><a href="#通过伪造内存块，主动调用一个native-inline方法" class="headerlink" title="通过伪造内存块，主动调用一个native inline方法"></a>通过伪造内存块，主动调用一个native inline方法</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-title">callMd5</span><span class="hljs-params">()</span></span>&#123;<br>    List&lt;Object&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(<span class="hljs-number">10</span>);<br><br>    <span class="hljs-comment">// arg1</span><br>    <span class="hljs-type">String</span> input = <span class="hljs-string">&quot;r0ysue&quot;</span>;<br>    <span class="hljs-comment">// malloc memory</span><br>    MemoryBlock memoryBlock1 = emulator.<span class="hljs-built_in">getMemory</span>().<span class="hljs-built_in">malloc</span>(<span class="hljs-number">16</span>, <span class="hljs-literal">false</span>);<br>    <span class="hljs-comment">// get memory pointer</span><br>    UnidbgPointer input_ptr=memoryBlock<span class="hljs-number">1.</span><span class="hljs-built_in">getPointer</span>();<br>    <span class="hljs-comment">// write plainText on it</span><br>    input_ptr.<span class="hljs-built_in">write</span>(input.<span class="hljs-built_in">getBytes</span>(StandardCharsets.UTF_8));<br><br>    <span class="hljs-comment">// arg2</span><br>    <span class="hljs-type">int</span> input_length = input.<span class="hljs-built_in">length</span>();<br><br>    <span class="hljs-comment">// arg3 -- buffer</span><br>    MemoryBlock memoryBlock2 = emulator.<span class="hljs-built_in">getMemory</span>().<span class="hljs-built_in">malloc</span>(<span class="hljs-number">16</span>, <span class="hljs-literal">false</span>);<br>    UnidbgPointer output_buffer=memoryBlock<span class="hljs-number">2.</span><span class="hljs-built_in">getPointer</span>();<br><br>    <span class="hljs-comment">// 填入参入</span><br>    list.<span class="hljs-built_in">add</span>(input_ptr);<br>    list.<span class="hljs-built_in">add</span>(input_length);<br>    list.<span class="hljs-built_in">add</span>(output_buffer);<br>    <span class="hljs-comment">// run</span><br>    <span class="hljs-keyword">module</span>.<span class="hljs-built_in">callFunction</span>(emulator, <span class="hljs-number">0x65540</span> + <span class="hljs-number">1</span>, list.<span class="hljs-built_in">toArray</span>());<br>    <span class="hljs-comment">// print arg3</span><br>    Inspector.<span class="hljs-built_in">inspect</span>(output_buffer.<span class="hljs-built_in">getByteArray</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0x10</span>), <span class="hljs-string">&quot;output&quot;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="通过执行so地址"><a href="#通过执行so地址" class="headerlink" title="通过执行so地址"></a>通过执行so地址</h4><ul><li>注意：地址方式调用，<code>ARM32有Thumb和ARM两种指令模式，此处是thumb模式，所以地址要在start基础上+1。</code></li><li>如何判断是thumb还是arm：<a href="https://note.youdao.com/s/YRqEYgZn">https://note.youdao.com/s/YRqEYgZn</a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lession1;<br><br><span class="hljs-comment">// 导入通用且标准的类库</span><br><span class="hljs-keyword">import</span> com.github.unidbg.linux.android.dvm.AbstractJni;<br><span class="hljs-keyword">import</span> com.github.unidbg.AndroidEmulator;<br><span class="hljs-keyword">import</span> com.github.unidbg.Module;<br><span class="hljs-keyword">import</span> com.github.unidbg.linux.android.AndroidEmulatorBuilder;<br><span class="hljs-keyword">import</span> com.github.unidbg.linux.android.AndroidResolver;<br><span class="hljs-keyword">import</span> com.github.unidbg.linux.android.dvm.*;<br><span class="hljs-keyword">import</span> com.github.unidbg.linux.android.dvm.array.ByteArray;<br><span class="hljs-keyword">import</span> com.github.unidbg.memory.Memory;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">// 继承AbstractJni类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">oasis</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractJni</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> AndroidEmulator emulator;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> VM vm;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Module <span class="hljs-keyword">module</span>;<br><br>    oasis() &#123;<br>        <span class="hljs-comment">// 创建模拟器实例,进程名建议依照实际进程名填写，可以规避针对进程名的校验</span><br>        emulator = AndroidEmulatorBuilder.for32Bit().setProcessName(<span class="hljs-string">&quot;com.sina.oasis&quot;</span>).build();<br>        <span class="hljs-comment">// 获取模拟器的内存操作接口</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Memory</span> <span class="hljs-variable">memory</span> <span class="hljs-operator">=</span> emulator.getMemory();<br>        <span class="hljs-comment">// 设置系统类库解析</span><br>        memory.setLibraryResolver(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AndroidResolver</span>(<span class="hljs-number">23</span>));<br>        <span class="hljs-comment">// 创建Android虚拟机,传入APK，Unidbg可以替我们做部分签名校验的工作</span><br>        vm = emulator.createDalvikVM(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;unidbg-android\\src\\test\\java\\com\\lession1\\lvzhou.apk&quot;</span>));<br>        <span class="hljs-comment">//</span><br><span class="hljs-comment">//        vm = emulator.createDalvikVM(null);</span><br><br>        <span class="hljs-comment">// 加载目标SO</span><br>        <span class="hljs-type">DalvikModule</span> <span class="hljs-variable">dm</span> <span class="hljs-operator">=</span> vm.loadLibrary(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;unidbg-android\\src\\test\\java\\com\\lession1\\liboasiscore.so&quot;</span>), <span class="hljs-literal">true</span>); <span class="hljs-comment">// 加载so到虚拟内存， 参数二设为false(即不执行init相关函数)</span><br>        <span class="hljs-comment">//获取本SO模块的句柄,后续需要用它</span><br>        <span class="hljs-keyword">module</span> = dm.getModule();<br>        vm.setJni(<span class="hljs-built_in">this</span>); <span class="hljs-comment">// 设置JNI</span><br>        vm.setVerbose(<span class="hljs-literal">true</span>); <span class="hljs-comment">// 打印日志</span><br><br>        dm.callJNI_OnLoad(emulator); <span class="hljs-comment">// 调用JNI OnLoad</span><br>    &#125;;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">oasis</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">oasis</span>();<br>        System.out.println(test.getS());<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getS</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// args list</span><br>        List&lt;Object&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(<span class="hljs-number">10</span>);<br>        <span class="hljs-comment">// arg1 env</span><br>        list.add(vm.getJNIEnv());<br>        <span class="hljs-comment">// arg2 jobject/jclazz 一般用不到，直接填0                </span><br>        list.add(<span class="hljs-number">0</span>);<br>        <span class="hljs-comment">// 如果用的第二个参数&lt;jObject/jClass&gt;, 则需要如此伪造。这里需要参考getmethodid问题</span><br>        <span class="hljs-comment">// 如果是静态方法，是jclass，即不需要new；</span><br>        <span class="hljs-comment">// DvmObject&lt;?&gt; cnative =  vm.resolveClass(&quot;com/roysue/testfindcalss/MainActivity&quot;);</span><br>        <span class="hljs-comment">// 不是静态，则jObject，需要new</span><br>        <span class="hljs-comment">//DvmObject&lt;?&gt; cnative =  vm.resolveClass(&quot;com/roysue/testfindcalss/MainActivity&quot;).newObject(null);</span><br>        <span class="hljs-comment">//list.add(cnative.hashCode());  |  list.add(vm.addLocalObject(cnative));  </span><br><br>        <span class="hljs-comment">// arg3 bytes</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;aid=01A-khBWIm48A079Pz_DMW6PyZR8&quot;</span>;<br>        <span class="hljs-type">byte</span>[] inputByte = input.getBytes(StandardCharsets.UTF_8);<br>        <span class="hljs-type">ByteArray</span> <span class="hljs-variable">inputByteArray</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArray</span>(vm,inputByte);<br>        <span class="hljs-comment">// 因为JNI调用java的话，非基础类型要加全局引用，所以都要使用addLocalObject</span><br>        list.add(vm.addLocalObject(inputByteArray));  <br>        <span class="hljs-comment">// arg4 ,boolean false 填入0</span><br>        list.add(<span class="hljs-number">0</span>);<br>        <span class="hljs-comment">// 参数准备完成</span><br>        <span class="hljs-comment">// call function</span><br>        <span class="hljs-type">Number</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">module</span>.callFunction(emulator, <span class="hljs-number">0xC365</span>, list.toArray())[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> vm.getObject(number.intValue()).getValue().toString();<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure></li></ul><h4 id="通过执行导出方法名"><a href="#通过执行导出方法名" class="headerlink" title="通过执行导出方法名"></a>通过执行导出方法名</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.issue;<br><br><span class="hljs-keyword">import</span> com.github.unidbg.AndroidEmulator;<br><span class="hljs-keyword">import</span> com.github.unidbg.linux.android.AndroidEmulatorBuilder;<br><span class="hljs-keyword">import</span> com.github.unidbg.linux.android.AndroidResolver;<br><span class="hljs-keyword">import</span> com.github.unidbg.linux.android.dvm.*;<br><span class="hljs-keyword">import</span> com.github.unidbg.linux.android.dvm.array.ArrayObject;<br><span class="hljs-keyword">import</span> com.github.unidbg.memory.Memory;<br><span class="hljs-keyword">import</span> com.github.unidbg.Module;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">day0801</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractJni</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> AndroidEmulator emulator;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> VM vm;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Module <span class="hljs-keyword">module</span>;<br><br>    day0801()&#123;<br><br>        <span class="hljs-comment">// 创建模拟器实例,进程名建议依照实际进程名填写，可以规避针对进程名的校验</span><br>        emulator = AndroidEmulatorBuilder.for32Bit().setProcessName(<span class="hljs-string">&quot;com.sankuai.meituan.meituanwaimaibusiness&quot;</span>).build();<br>        <span class="hljs-comment">// 获取模拟器的内存操作接口</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Memory</span> <span class="hljs-variable">memory</span> <span class="hljs-operator">=</span> emulator.getMemory();<br>        <span class="hljs-comment">// 设置系统类库解析</span><br>        memory.setLibraryResolver(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AndroidResolver</span>(<span class="hljs-number">23</span>));<br>        <span class="hljs-comment">// 创建Android虚拟机,传入APK，Unidbg可以替我们做部分签名校验的工作</span><br>        vm = emulator.createDalvikVM(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;unidbg-android\\src\\test\\resources\\example_binaries\\apk\\mtmj6.22.0.67.apk&quot;</span>));<br>        <span class="hljs-comment">// 加载目标SO</span><br>        <span class="hljs-type">DalvikModule</span> <span class="hljs-variable">dm</span> <span class="hljs-operator">=</span> vm.loadLibrary(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;unidbg-android\\src\\test\\resources\\example_binaries\\apk\\libPayRequestCrypt.so&quot;</span>), <span class="hljs-literal">true</span>); <span class="hljs-comment">// 加载so到虚拟内存</span><br>        <span class="hljs-comment">//获取本SO模块的句柄,后续需要用它</span><br>        <span class="hljs-keyword">module</span> = dm.getModule();<br>        vm.setJni(<span class="hljs-built_in">this</span>); <span class="hljs-comment">// 设置JNI</span><br>        vm.setVerbose(<span class="hljs-literal">true</span>); <span class="hljs-comment">// 打印日志</span><br>        dm.callJNI_OnLoad(emulator); <span class="hljs-comment">// 调用JNI OnLoad</span><br><br>    &#125;;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">callByAddress</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// args list</span><br>        List&lt;Object&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(<span class="hljs-number">10</span>);<br>        <span class="hljs-comment">// jnienv</span><br>        list.add(vm.getJNIEnv());<br>        <span class="hljs-comment">// jclazz</span><br>        list.add(<span class="hljs-number">0</span>);<br>        <span class="hljs-comment">// str1</span><br>        list.add(vm.addLocalObject(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringObject</span>(vm, <span class="hljs-string">&quot;str1&quot;</span>)));<br>        <span class="hljs-comment">// str2</span><br>        list.add(vm.addLocalObject(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringObject</span>(vm, <span class="hljs-string">&quot;str2&quot;</span>)));<br>        <span class="hljs-comment">// str3</span><br>        list.add(vm.addLocalObject(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringObject</span>(vm, <span class="hljs-string">&quot;str3&quot;</span>)));<br>        <span class="hljs-comment">// str4</span><br>        list.add(vm.addLocalObject(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringObject</span>(vm, <span class="hljs-string">&quot;str4&quot;</span>)));<br>        <span class="hljs-comment">// str5</span><br>        list.add(vm.addLocalObject(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringObject</span>(vm, <span class="hljs-string">&quot;str5&quot;</span>)));<br>        <span class="hljs-comment">// strArr 假设字符串包含两个字符串</span><br>        <span class="hljs-comment">// str6_1</span><br>        <span class="hljs-type">StringObject</span> <span class="hljs-variable">str6_1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringObject</span>(vm, <span class="hljs-string">&quot;str6_1&quot;</span>);<br>        vm.addLocalObject(str6_1);<br>        <span class="hljs-comment">// str6_2</span><br>        <span class="hljs-type">StringObject</span> <span class="hljs-variable">str6_2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringObject</span>(vm, <span class="hljs-string">&quot;str6_2&quot;</span>);<br>        vm.addLocalObject(str6_2);<br><br>        <span class="hljs-type">ArrayObject</span> <span class="hljs-variable">arrayObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayObject</span>(str6_1,str6_2);<br>        list.add(vm.addLocalObject(arrayObject));<br><br>        <span class="hljs-comment">// 最后的int</span><br>        list.add(<span class="hljs-number">1</span>);<br><br>        <span class="hljs-type">Number</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">module</span>.callFunction(emulator, <span class="hljs-number">0x2301</span>, list.toArray())[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">ArrayObject</span> <span class="hljs-variable">resultArr</span> <span class="hljs-operator">=</span> vm.getObject(number.intValue());<br>        System.out.println(<span class="hljs-string">&quot;result:&quot;</span>+resultArr);<br>    &#125;;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">callMethodByApi</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 1、需要调用函数所在的Java类完整路径，比如a/b/c/d等等，注意需要用/代替.</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">classPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com/roysue/testfindcalss/MainActivity&quot;</span>;<br>        <span class="hljs-comment">// 2、需要调用函数的函数签名，我这里调用EncryptUtils中的getGameKey方法，由于此方法没有参数列表，所以不需要传入</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">methodSign</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;testGetMethodId()Ljava/lang/String&quot;</span>;<br>        <span class="hljs-type">DvmClass</span> <span class="hljs-variable">RequestCryptUtils</span> <span class="hljs-operator">=</span> vm.resolveClass(classPath);<br>        System.out.println(RequestCryptUtils.callStaticJniMethodObject(emulator, methodSign, <span class="hljs-string">&quot;&quot;</span>));<br>&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">callByAPI</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">DvmClass</span> <span class="hljs-variable">RequestCryptUtils</span> <span class="hljs-operator">=</span> vm.resolveClass(<span class="hljs-string">&quot;com/meituan/android/payguard/RequestCryptUtils&quot;</span>);<br><br>        <span class="hljs-type">StringObject</span> <span class="hljs-variable">str6_1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringObject</span>(vm, <span class="hljs-string">&quot;str6_1&quot;</span>);<br>        vm.addLocalObject(str6_1);<br>        <span class="hljs-type">StringObject</span> <span class="hljs-variable">str6_2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringObject</span>(vm, <span class="hljs-string">&quot;str6_2&quot;</span>);<br>        vm.addLocalObject(str6_2);<br>        <span class="hljs-type">ArrayObject</span> <span class="hljs-variable">arrayObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayObject</span>(str6_1,str6_2);<br><br>        <span class="hljs-type">ArrayObject</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> RequestCryptUtils.callStaticJniMethodObject(emulator, <span class="hljs-string">&quot;encryptRequestWithRandom()&quot;</span>, <span class="hljs-string">&quot;str1&quot;</span>,<span class="hljs-string">&quot;str2&quot;</span>, <span class="hljs-string">&quot;str3&quot;</span>,<span class="hljs-string">&quot;str4&quot;</span>,<span class="hljs-string">&quot;str5&quot;</span>,arrayObject,<span class="hljs-number">1</span>);<br>        System.out.println(result);<br>    &#125;;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">day0801</span> <span class="hljs-variable">mt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">day0801</span>();<br>        mt.callByAPI();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bilibili;<br><br><span class="hljs-keyword">import</span> com.github.unidbg.AndroidEmulator;<br><span class="hljs-keyword">import</span> com.github.unidbg.arm.backend.Unicorn2Factory;<br><span class="hljs-keyword">import</span> com.github.unidbg.linux.android.AndroidEmulatorBuilder;<br><span class="hljs-keyword">import</span> com.github.unidbg.linux.android.AndroidResolver;<br><span class="hljs-keyword">import</span> com.github.unidbg.linux.android.dvm.AbstractJni;<br><span class="hljs-keyword">import</span> com.github.unidbg.linux.android.dvm.DalvikModule;<br><span class="hljs-keyword">import</span> com.github.unidbg.linux.android.dvm.DvmClass;<br><span class="hljs-keyword">import</span> com.github.unidbg.linux.android.dvm.VM;<br><span class="hljs-keyword">import</span> com.github.unidbg.memory.Memory;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">xvideo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractJni</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> AndroidEmulator emulator;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> DvmClass NativeApi;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> VM vm;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">xvideo</span><span class="hljs-params">()</span> &#123;<br>        emulator = AndroidEmulatorBuilder<br>                .for64Bit()<br>                <span class="hljs-comment">// 设置根目录</span><br>          .setRootDir(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;target/rootfs&quot;</span>))<br>                <span class="hljs-comment">// 后端：Unidbg 支持后端共五个Backed： Unicorn、Unicorn2、Dynarmic、Hypervisor、KVM。如果不添加 BackendFactory，默认使用 Unicorn Backend</span><br>                <span class="hljs-comment">// 各种 BackendFactory 的构造方法都要传入fallbackUnicorn，这是一个布尔型参数，它表示如果这个后端创建失败时如何处理——报错还是回退到Unicorn Backend</span><br>                <span class="hljs-comment">// 相比较 Unicorn，Unidbg 基于 Unicorn2 设计和实现了多线程的相关逻辑，因此在 Unicorn 和 Unicorn2 之间，应该选择 Unicorn2</span><br>                .addBackendFactory(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Unicorn2Factory</span>(<span class="hljs-literal">true</span>))<br>                <span class="hljs-comment">// 设置进程名；程序通过getprogname库函数获取进程名时，获取到的就是它；不设置则返回unidbg</span><br>                .setProcessName(<span class="hljs-string">&quot;com.sina.oasis&quot;</span>)  <br>                .build();<br><br>        <span class="hljs-comment">// 多线程：个人建议在模拟执行相对复杂的样本时，就打开多线程；如果样本难度一般，就不必打开。</span><br>        <span class="hljs-comment">// 设置执行多少条指令切换一次线程</span><br>        emulator.getBackend().registerEmuCountHook(<span class="hljs-number">10000</span>);<br>        <span class="hljs-comment">// 开启线程调度器</span><br>        emulator.getSyscallHandler().setEnableThreadDispatcher(<span class="hljs-literal">true</span>);<br>        <br>        <span class="hljs-type">Memory</span> <span class="hljs-variable">memory</span> <span class="hljs-operator">=</span> emulator.getMemory();<br>        memory.setLibraryResolver(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AndroidResolver</span>(<span class="hljs-number">23</span>));<br>        vm = emulator.createDalvikVM(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;unidbg-android/src/test/resources/bilibili/lvzhou.apk&quot;</span>));<br>        vm.setJni(<span class="hljs-built_in">this</span>);<br>        vm.setVerbose(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">DalvikModule</span> <span class="hljs-variable">dm</span> <span class="hljs-operator">=</span> vm.loadLibrary(<span class="hljs-string">&quot;oasiscore&quot;</span>, <span class="hljs-literal">true</span>);<br>        NativeApi = vm.resolveClass(<span class="hljs-string">&quot;com/weibo/xvideo/NativeApi&quot;</span>);<br>        dm.callJNI_OnLoad(emulator);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">calls</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">arg1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;aid=01A-khBWIm48A079Pz_DMW6PyZR8uyTumcCNm4e8awxyC2ANU.&amp;cfrom=28B5295010&amp;cuid=5999578300&amp;noncestr=46274W9279Hr1X49A5X058z7ZVz024&amp;platform=ANDROID&amp;timestamp=1621437643609&amp;ua=Xiaomi-MIX2S__oasis__3.5.8__Android__Android10&amp;version=3.5.8&amp;vid=1019013594003&amp;wm=20004_90024&quot;</span>;<br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">arg2</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> NativeApi.newObject(<span class="hljs-literal">null</span>).callJniMethodObject(emulator, <span class="hljs-string">&quot;s([BZ)Ljava/lang/String;&quot;</span>, arg1.getBytes(StandardCharsets.UTF_8), arg2).getValue().toString();<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">xvideo</span> <span class="hljs-variable">xv</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">xvideo</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> xv.calls();<br>        System.out.println(<span class="hljs-string">&quot;call s result:&quot;</span>+result);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/04/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/AndroidNativeEmu/1.%20%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/"/>
    <url>/blog/2025/05/04/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/AndroidNativeEmu/1.%20%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="https://articles.zsxq.com/id_1leo5a873wi1.html">https://articles.zsxq.com/id_1leo5a873wi1.html</a></li></ul><h1 id="入门基础"><a href="#入门基础" class="headerlink" title="入门基础"></a>入门基础</h1><ul><li><a href="https://www.yuque.com/lilac-2hqvv/xdwlsg/idgio0#%20%E3%80%8AUnidbg%20%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D%E4%B8%8E%E8%B5%B7%E6%BA%90%E3%80%8B">Unidbg 的基本介绍与起源</a></li><li><a href="https://www.yuque.com/lilac-2hqvv/xdwlsg/gri3ins5e22b5x7o#%20%E3%80%8AUnidbg%20%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%E3%80%8B">Unidbg 的使用场景</a></li><li><a href="https://www.yuque.com/lilac-2hqvv/xdwlsg/gmbn45b5n6g59kks#%20%E3%80%8AUnidbg%20%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%80%EF%BC%89%E3%80%8B">Unidbg 的基本使用（一）</a></li><li><a href="https://www.yuque.com/lilac-2hqvv/xdwlsg/vy2p4ts1oq8sxxgb#%20%E3%80%8AUnidbg%20%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%EF%BC%88%E4%BA%8C%EF%BC%89%E3%80%8B">Unidbg 的基础使用（二）</a></li><li><a href="https://www.yuque.com/docs/share/7fe3a692-47ef-4c8b-9c69-12e5d86771e4#%20%E3%80%8AUnidbg%20%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%89%EF%BC%89%E3%80%8B">Unidbg 的基本使用（三）</a></li><li><a href="https://www.yuque.com/lilac-2hqvv/xdwlsg/yaxqgh#%20%E3%80%8AUnidbg%20%E7%9A%84%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F%E3%80%8B">Unidbg 的日志系统</a></li><li><a href="https://wx.zsxq.com/topic/585125812458444">从整体上看 Unidbg</a></li></ul><h1 id="补环境"><a href="#补环境" class="headerlink" title="补环境"></a>补环境</h1><h2 id="补环境基础"><a href="#补环境基础" class="headerlink" title="补环境基础"></a>补环境基础</h2><p>###补文件访问</p><ul><li><a href="https://www.yuque.com/lilac-2hqvv/lfssh8/euffrv#%20%E3%80%8AUnidbg%20%E4%B8%AD%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6%E8%AE%BF%E9%97%AE%EF%BC%88%E4%B8%80%EF%BC%89%E3%80%8B">Unidbg 中处理文件访问（一）</a></li><li><a href="https://www.yuque.com/lilac-2hqvv/lfssh8/tadqng#%20%E3%80%8AUnidbg%20%E4%B8%AD%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6%E8%AE%BF%E9%97%AE%EF%BC%88%E4%BA%8C%EF%BC%89%E3%80%8B">Unidbg 中处理文件访问（二）</a></li></ul><h3 id="补系统调用"><a href="#补系统调用" class="headerlink" title="补系统调用"></a>补系统调用</h3><ul><li><a href="https://www.yuque.com/lilac-2hqvv/xdwlsg/gy2zft8n3uavy2v5#%20%E3%80%8A%E8%A1%A5%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%EF%BC%88%E4%B8%80%EF%BC%89%E3%80%8B">补系统调用（一）</a></li><li><a href="https://www.yuque.com/lilac-2hqvv/xdwlsg/mh6re2qy0xg421ho#%20%E3%80%8A%E8%A1%A5%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%EF%BC%88%E4%BA%8C%EF%BC%89%E3%80%8B">补系统调用（二）</a></li><li><a href="https://www.yuque.com/lilac-2hqvv/xdwlsg/wsww25qka54fbnur#%20%E3%80%8A%E8%A1%A5%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%EF%BC%88%E4%B8%89%EF%BC%89%E3%80%8B">补系统调用（三）</a></li><li><a href="https://www.yuque.com/lilac-2hqvv/xdwlsg/ip3v0qlg5b8y620f#%20%E3%80%8A%E8%A1%A5%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%EF%BC%88%E5%9B%9B%EF%BC%89%E3%80%8B">补系统调用（四）</a></li><li><a href="https://www.yuque.com/lilac-2hqvv/xdwlsg/gptkgsicnr7br6fz#%20%E3%80%8A%E8%A1%A5%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%EF%BC%88%E4%BA%94%EF%BC%89%E3%80%8B">补系统调用（五）</a></li></ul><h3 id="补库函数"><a href="#补库函数" class="headerlink" title="补库函数"></a>补库函数</h3><ul><li><a href="https://www.yuque.com/lilac-2hqvv/xdwlsg/usg3an5x2x78ug0b#%20%E3%80%8A%E8%A1%A5%E5%BA%93%E5%87%BD%E6%95%B0%EF%BC%88%E4%B8%80%EF%BC%89%E3%80%8B">补库函数（一）</a></li><li><a href="https://www.yuque.com/lilac-2hqvv/xdwlsg/qudml1qxbha6nsqz#%20%E3%80%8A%E8%A1%A5%E5%BA%93%E5%87%BD%E6%95%B0%EF%BC%88%E4%BA%8C%EF%BC%89%E3%80%8B">补库函数（二）</a></li><li><a href="https://www.yuque.com/lilac-2hqvv/xdwlsg/ym20how9e06ygrai#%20%E3%80%8A%E8%A1%A5%E5%BA%93%E5%87%BD%E6%95%B0%EF%BC%88%E4%B8%89%EF%BC%89%E3%80%8B">补库函数（三）</a></li><li><a href="https://www.yuque.com/lilac-2hqvv/xdwlsg/kbk25war5dc2pkfr#%20%E3%80%8A%E8%A1%A5%E5%BA%93%E5%87%BD%E6%95%B0%EF%BC%88%E5%9B%9B%EF%BC%89%E3%80%8B">补库函数（四）</a></li><li><a href="https://www.yuque.com/lilac-2hqvv/xdwlsg/bzoykwvuim3hkz2o#%20%E3%80%8A%E8%A1%A5%E5%BA%93%E5%87%BD%E6%95%B0%EF%BC%88%E4%BA%94%EF%BC%89%E3%80%8B">补库函数（五）</a></li></ul><h3 id="补环境的深层困境"><a href="#补环境的深层困境" class="headerlink" title="补环境的深层困境"></a>补环境的深层困境</h3><ul><li><a href="https://www.yuque.com/lilac-2hqvv/xdwlsg/qxrig1krzbihrhtx#%20%E3%80%8A%E7%8E%AF%E5%A2%83%E5%86%B2%E7%AA%81%E3%80%8B">环境冲突</a></li><li><a href="https://www.yuque.com/lilac-2hqvv/xdwlsg/er0yausfgormskrm#%20%E3%80%8A%E5%87%BD%E6%95%B0%E7%9A%84%E5%89%AF%E4%BD%9C%E7%94%A8%E3%80%8B">函数的副作用</a></li></ul><h2 id="初始化问题"><a href="#初始化问题" class="headerlink" title="初始化问题"></a>初始化问题</h2><ul><li><a href="https://www.yuque.com/lilac-2hqvv/lfssh8/ykorvd#%20%E3%80%8AUnidbg%20%E5%87%BD%E6%95%B0%E5%88%9D%E5%A7%8B%E5%8C%96%E9%97%AE%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89%E3%80%8B">Unidbg 函数初始化问题（一）</a></li><li><a href="https://www.yuque.com/lilac-2hqvv/lfssh8/gxwflx1eyiherqvo#%20%E3%80%8AUnidbg%20%E5%87%BD%E6%95%B0%E5%88%9D%E5%A7%8B%E5%8C%96%E9%97%AE%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89%E3%80%8B">Unidbg 函数初始化问题（二）</a></li></ul><h2 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h2><ul><li><a href="https://wx.zsxq.com/topic/184524881214242">wind 样例分析</a></li></ul><h1 id="辅助算法还原"><a href="#辅助算法还原" class="headerlink" title="辅助算法还原"></a>辅助算法还原</h1><ul><li><a href="https://wx.zsxq.com/topic/581114241581424">Hook in Unidbg</a></li><li><a href="https://www.yuque.com/lilac-2hqvv/lfssh8/srcwig#%20%E3%80%8ATrace%20in%20Unidbg%EF%BC%88%E4%B8%80%EF%BC%89%E3%80%8B">Trace in Unidbg（一）</a></li><li><a href="https://www.yuque.com/lilac-2hqvv/lfssh8/umarnq#%20%E3%80%8ATrace%20in%20Unidbg%EF%BC%88%E4%BA%8C%EF%BC%89%E3%80%8B">Trace in Unidbg（二）</a></li><li><a href="https://www.yuque.com/lilac-2hqvv/lfssh8/rtbx1i#%20%E3%80%8AUnidbg%20%E5%9B%BA%E5%AE%9A%E9%9A%8F%E6%9C%BA%E5%B9%B2%E6%89%B0%E9%A1%B9%EF%BC%88%E4%B8%8A%EF%BC%89%E3%80%8B">固定随机干扰项（上）</a></li></ul><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul><li><a href="https://www.yuque.com/lilac-2hqvv/lfssh8/kd4pw2#%20%E3%80%8A%E6%A3%80%E6%B5%8B%20Unidbg%E3%80%8B">检测 Unidbg</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/04/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/2.%20%E7%B1%BB%E5%9E%8B%E6%9E%84%E9%80%A0/"/>
    <url>/blog/2025/05/04/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Unidbg/2.%20%E7%B1%BB%E5%9E%8B%E6%9E%84%E9%80%A0/</url>
    
    <content type="html"><![CDATA[<ul><li>参考<ul><li><a href="https://www.yuque.com/lilac-2hqvv/xdwlsg/uo6guvore38kr29y">https://www.yuque.com/lilac-2hqvv/xdwlsg/uo6guvore38kr29y</a></li><li><a href="https://www.yuque.com/lilac-2hqvv/xdwlsg/hiiaukxvr2zuz5mb">https://www.yuque.com/lilac-2hqvv/xdwlsg/hiiaukxvr2zuz5mb</a></li></ul></li></ul><h1 id="总体思路"><a href="#总体思路" class="headerlink" title="总体思路"></a>总体思路</h1><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs processing">如果使用方法签名调用，则正常构造，详解如下：<br>两大类参数都可以直接传递。<br>    ● 基本类型直接传递，<span class="hljs-type">int</span>、<span class="hljs-type">long</span>、<span class="hljs-type">boolean</span>、<span class="hljs-type">double</span> 等。<br>    ● 下面几种对象类型也可以直接传递<br>      ○ <span class="hljs-built_in">String</span><br>      ○ <span class="hljs-type">byte</span> 数组<br>      ○ <span class="hljs-type">short</span> 数组<br>      ○ <span class="hljs-type">int</span> 数组<br>      ○ <span class="hljs-type">float</span> 数组<br>      ○ <span class="hljs-type">double</span> 数组<br>      ○ Enum 枚举类型<br>    除此之外还有许多种可能的参数，比如字符串数组、二维数组、Android Context/Application、<span class="hljs-built_in">HashMap</span> 等等<br>在大体上遵循下列处理办法<br>    <span class="hljs-number">1.</span> 基本类型直接传递<br>    <span class="hljs-number">2.</span> 字符串、字节数组等基本对象直接传递，其内部会做封装，也可以自己调用<span class="hljs-keyword">new </span><span class="hljs-class title_">StringObject</span>(vm, <span class="hljs-built_in">str</span>) | <span class="hljs-keyword">new </span><span class="hljs-class title_">ByteArray</span>(vm, value)等。<br>    <span class="hljs-number">3.</span> 如果是 JDK 中包含的类库和方法，比如二维数组、字符串数组、<span class="hljs-built_in">HashMap</span> 等等，直接构造, 然后使用ProxyDvmObject.<span class="hljs-property">createObject</span>(vm, obj);构造出对象。除此之外比如 Okhttp3 之类的第三方类库，导入到本地环境里，也可以使用这个办法。如： DvmObject&lt;?&gt; mapObject = ProxyDvmObject.<span class="hljs-property">createObject</span>(vm, <span class="hljs-built_in">map</span>);<br>    <span class="hljs-number">4.</span> 如果是 JDK 中无法包含的类库，比如 Android FrameWork 以及样本自定义的类库，通过<span class="hljs-title function_">resolveClass</span>(className).<span class="hljs-property">newObject</span>处理，就像本节的NativeApi那样处理<br><br></code></pre></td></tr></table></figure><h1 id="不同类型处理详解"><a href="#不同类型处理详解" class="headerlink" title="不同类型处理详解"></a>不同类型处理详解</h1><h3 id="Android-的-Application-类"><a href="#Android-的-Application-类" class="headerlink" title="Android 的 Application 类"></a>Android 的 Application 类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">DvmClass</span> <span class="hljs-variable">Context</span> <span class="hljs-operator">=</span> vm.resolveClass(<span class="hljs-string">&quot;android/content/Context&quot;</span>);<br><span class="hljs-type">DvmClass</span> <span class="hljs-variable">ContextWrapper</span> <span class="hljs-operator">=</span> vm.resolveClass(<span class="hljs-string">&quot;android/content/ContextWrapper&quot;</span>, Context);<br><span class="hljs-type">DvmClass</span> <span class="hljs-variable">Application</span> <span class="hljs-operator">=</span> vm.resolveClass(<span class="hljs-string">&quot;android/app/Application&quot;</span>, ContextWrapper);<br></code></pre></td></tr></table></figure><h3 id="context类"><a href="#context类" class="headerlink" title="context类"></a>context类</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">// 绝大多数可行</span><br>DvmObject&lt;?&gt; <span class="hljs-keyword">context</span> = vm<span class="hljs-variable">.resolveClass</span>(<span class="hljs-string">&quot;android/app/Application&quot;</span>, vm<span class="hljs-variable">.resolveClass</span>(<span class="hljs-string">&quot;android/content/ContextWrapper&quot;</span>, vm<span class="hljs-variable">.resolveClass</span>(<span class="hljs-string">&quot;android/content/Context&quot;</span>)))<span class="hljs-variable">.newObject</span>(<span class="hljs-literal">null</span>);<br><span class="hljs-comment">// 如果不行，直接传当前上下文的类，按照getmethodid的方式构造</span><br>DvmObject&lt;?&gt; <span class="hljs-keyword">context</span> = vm<span class="hljs-variable">.resolveClass</span>(<span class="hljs-string">&quot;cn/xiaochuankeji/tieba/AppController&quot;</span>)<span class="hljs-variable">.newObject</span>(<span class="hljs-literal">null</span>);<br></code></pre></td></tr></table></figure><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><ul><li>基本类型的包装类、字符串、基本类型数组、对象类似数组等等。</li></ul><h5 id="StringObject类是对基本类型的包装类"><a href="#StringObject类是对基本类型的包装类" class="headerlink" title="StringObject类是对基本类型的包装类"></a>StringObject类是对基本类型的包装类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">StringObject</span> <span class="hljs-variable">stringObject1</span> <span class="hljs-operator">=</span> (StringObject) ProxyDvmObject.createObject(vm, packageName);  <span class="hljs-comment">// ProxyDvmObject.createObject内部做了类型判断，将 String 转为 StringObject。</span><br><span class="hljs-type">StringObject</span> <span class="hljs-variable">stringObject2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringObject</span>(vm, packageName);<br><span class="hljs-comment">// 使用哪一种看个人喜好，我个人认为用 StringObject 构造更好，因为更直观。</span><br></code></pre></td></tr></table></figure><h5 id="long基本对象"><a href="#long基本对象" class="headerlink" title="long基本对象"></a>long基本对象</h5><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">DvmLong</span>.valueOf(vm, vaList.getLongArg(<span class="hljs-number">0</span>));<br><span class="hljs-attribute">vm</span>.resolveClass(<span class="hljs-string">&quot;java/lang/Long&quot;</span>).newObject(vaList.getLongArg(<span class="hljs-number">0</span>));<br></code></pre></td></tr></table></figure><h5 id="Integer-类是基本类型int所对应的包装类"><a href="#Integer-类是基本类型int所对应的包装类" class="headerlink" title="Integer 类是基本类型int所对应的包装类"></a>Integer 类是基本类型int所对应的包装类</h5><ul><li>Unidbg 对部分包装类做了处理，详见com.github.unidbg.linux.android.dvm.wrapper。</li><li>其中都提供了valueOf类方法做包装<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;java/lang/Integer-&gt;&lt;init&gt;(I)V&quot;</span>: &#123;<br>    <span class="hljs-keyword">int</span> i = vaList.getIntArg(<span class="hljs-number">0</span>);<br>    <span class="hljs-function"><span class="hljs-keyword">return</span> DvmInteger.<span class="hljs-title">valueOf</span><span class="hljs-params">(vm, i)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="B即-byte-，在-Unidbg-中对应于ByteArray。"><a href="#B即-byte-，在-Unidbg-中对应于ByteArray。" class="headerlink" title="[B即 byte[]，在 Unidbg 中对应于ByteArray。"></a>[B即 byte[]，在 Unidbg 中对应于ByteArray。</h5><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">case</span> java<span class="hljs-regexp">/net/</span>NetworkInterface-&gt;getHardwareAddress()[B:<br>    <span class="hljs-keyword">byte</span>[] addr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[]&#123;<span class="hljs-number">0</span>x64, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0</span>xBC, <span class="hljs-number">0</span>x0C, <span class="hljs-number">0</span>x65, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0</span>xAA, <span class="hljs-number">0</span>x1E&#125;;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ByteArray(vm, addr);<br></code></pre></td></tr></table></figure><ul><li>在com.github.unidbg.linux.android.dvm.array包下有对各种基本类型数组的表示和处理。</li><li>这里也可以用ProxyDvmObject.createObject，就像StringObject一样，它内部会对应做处理</li></ul><h5 id="类型是-Ljava-lang-String"><a href="#类型是-Ljava-lang-String" class="headerlink" title="类型是[Ljava&#x2F;lang&#x2F;String;"></a>类型是[Ljava&#x2F;lang&#x2F;String;</h5><p><img src="/blog/../../../../../images/android/%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/2025-05-04_17-31-34.png"></p><ul><li>对应上面的表，它是个对象数组，更具体的说是字符串数组。</li><li>在 Unidbg 中，对象数组通过ArrayObject表示，而且还为字符串数组提供了一个方便的处理函数。<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ArrayObject <span class="hljs-title function_">newStringArray</span>(VM vm, <span class="hljs-built_in">String</span>... strings) &#123;<br>    StringObject[] objects = <span class="hljs-keyword">new </span><span class="hljs-class title_">StringObject</span>[strings.<span class="hljs-property">length</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; strings.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-built_in">String</span> <span class="hljs-built_in">str</span> = strings[i];<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">str</span> != <span class="hljs-literal">null</span>) &#123;<br>            objects[i] = <span class="hljs-keyword">new </span><span class="hljs-class title_">StringObject</span>(vm, <span class="hljs-built_in">str</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new </span><span class="hljs-class title_">ArrayObject</span>(objects);<br>&#125;<br></code></pre></td></tr></table></figure></li><li>使用它可以方便的构造字符串数组<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">case</span> android/os/Build-&gt;SUPPORTED_ABIS:[Ljava/lang/String;:&#123;<br>    <span class="hljs-built_in">return</span> ArrayObject.newStringArray(vm, arm64-v8a, armeabi-v7a, armeabi);<br>&#125;<br></code></pre></td></tr></table></figure></li><li>也可以使用ProxyDvmObject.createObject<figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-keyword">case</span> android/os/Build-&gt;SUPPORTED_ABIS:[Ljava/lang/<span class="hljs-built_in">String</span>;:&#123;<br>    <span class="hljs-built_in">String</span>[] abis = <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>[]&#123;arm64-v8a, armeabi-v7a, armeabi&#125;;<br>    <span class="hljs-keyword">return</span> ProxyDvmObject.createObject(vm, abis);<br>&#125;<br></code></pre></td></tr></table></figure></li><li>它在内部最终也是转换为了ArrayObject。</li><li>对于对象数组类型，我个人感觉用ProxyDvmObject.createObject更省事。</li></ul><h5 id="Ljava-util-List"><a href="#Ljava-util-List" class="headerlink" title="Ljava&#x2F;util&#x2F;List"></a>Ljava&#x2F;util&#x2F;List</h5><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">java.lang.UnsupportedOperationException: </span><span class="hljs-keyword">android/hardware/SensorManager-&gt;getSensorList(I)Ljava/util/List;</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> com.github.unidbg.linux.<span class="hljs-keyword">android.dvm.AbstractJni.callObjectMethodV(AbstractJni.java:416)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> com.demo2.Tiny.callObjectMethodV(Tiny.<span class="hljs-keyword">java:334)</span><br></code></pre></td></tr></table></figure><ul><li>这是一个 List，将它转成ArrayListObject<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;android/hardware/SensorManager-&gt;getSensorList(I)Ljava/util/List;&quot;</span>:&#123;<br>    <span class="hljs-built_in">int</span> length = <span class="hljs-number">10</span>;<br>    List&lt;DvmObject&lt;?&gt;&gt; SensorList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>        SensorList.<span class="hljs-keyword">add</span>(vm.resolveClass(<span class="hljs-string">&quot;android/hardware/Sensor&quot;</span>).newObject(i));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ArrayListObject(vm, SensorList);            <br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="JDK类库"><a href="#JDK类库" class="headerlink" title="JDK类库"></a>JDK类库</h3><ul><li>基本只能用ProxyDvmObject.createObject</li></ul><h5 id="HashMap-对象"><a href="#HashMap-对象" class="headerlink" title="HashMap 对象"></a>HashMap 对象</h5><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;java/util/HashMap-&gt;&lt;init&gt;()V&quot;</span>:&#123;<br>    <span class="hljs-keyword">return</span> ProxyDvmObject.createObject(vm, <span class="hljs-keyword">new</span> HashMap&lt;&gt;());<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="InputStream-对象"><a href="#InputStream-对象" class="headerlink" title="InputStream 对象"></a>InputStream 对象</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;java/util/zip/ZipFile-&gt;getInputStream(Ljava/util/zip/ZipEntry;)Ljava/io/InputStream;&quot;</span>:&#123;<br>    <span class="hljs-type">ZipFile</span> <span class="hljs-variable">zipFile</span> <span class="hljs-operator">=</span> (ZipFile) dvmObject.getValue();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">return</span> ProxyDvmObject.createObject(vm, zipFile.getInputStream((ZipEntry) vaList.getObjectArg(<span class="hljs-number">0</span>).getValue()));<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="只知道是-Object，而不确定具体是字符串还是其他什么类型，使用ProxyDvmObject-createObject是好选择"><a href="#只知道是-Object，而不确定具体是字符串还是其他什么类型，使用ProxyDvmObject-createObject是好选择" class="headerlink" title="只知道是 Object，而不确定具体是字符串还是其他什么类型，使用ProxyDvmObject.createObject是好选择"></a><strong>只知道是 Object，而不确定具体是字符串还是其他什么类型，使用ProxyDvmObject.createObject是好选择</strong></h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.UnsupportedOperationException</span>: java/util/Map-&gt;<span class="hljs-built_in">put</span>(Ljava/lang/Object;Ljava/lang/<span class="hljs-selector-tag">Object</span>;)Ljava/lang/<span class="hljs-selector-tag">Object</span>;<br>at com<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.unidbg</span><span class="hljs-selector-class">.linux</span><span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.dvm</span><span class="hljs-selector-class">.AbstractJni</span><span class="hljs-selector-class">.callObjectMethod</span>(AbstractJni<span class="hljs-selector-class">.java</span>:<span class="hljs-number">922</span>)<br>at com.Bili.NativeLibrary.<span class="hljs-built_in">callObjectMethod</span>(NativeLibrary.java:<span class="hljs-number">88</span>)<br></code></pre></td></tr></table></figure><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;java/util/Map-&gt;put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;&quot;</span>:&#123;<br>    <span class="hljs-built_in">Map</span> <span class="hljs-keyword">map</span> = (<span class="hljs-built_in">Map</span>) dvmObject.getValue();<br>    <span class="hljs-built_in">Object</span> key = varArg.getObjectArg(<span class="hljs-number">0</span>).getValue();<br>    <span class="hljs-built_in">Object</span> value = varArg.getObjectArg(<span class="hljs-number">1</span>).getValue();<br>    <span class="hljs-keyword">return</span> ProxyDvmObject.createObject(vm, <span class="hljs-keyword">map</span>.put(key, value));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Android-FrameWork-类库中的对象和类"><a href="#Android-FrameWork-类库中的对象和类" class="headerlink" title="Android FrameWork 类库中的对象和类"></a>Android FrameWork 类库中的对象和类</h3><h5 id="例一"><a href="#例一" class="headerlink" title="例一"></a>例一</h5><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">java.lang.UnsupportedOperationException: </span><span class="hljs-keyword">android/telephony/FtTelephonyAdapter-&gt;getFtTelephony(Landroid/content/Context;)Landroid/telephony/FtTelephony;</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> com.github.unidbg.linux.<span class="hljs-keyword">android.dvm.AbstractJni.callStaticObjectMethodV(AbstractJni.java:503)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> com.demo7.TDJNI.callStaticObjectMethodV(TDJNI.<span class="hljs-keyword">java:763)</span><br></code></pre></td></tr></table></figure><ul><li><strong>这显然是一个 Android 里的类库，没法在 Unidbg 中实际处理，只能用resolveClass占位。</strong><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">case</span> android<span class="hljs-regexp">/telephony/</span>FtTelephonyAdapter-&gt;getFtTelephony(Landroid<span class="hljs-regexp">/content/</span>Context;)Landroid<span class="hljs-regexp">/telephony/</span>FtTelephony;:&#123;<br>    <span class="hljs-keyword">return</span> vm.resolveClass(android<span class="hljs-regexp">/telephony/</span>FtTelephony).newObject(<span class="hljs-keyword">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="例二"><a href="#例二" class="headerlink" title="例二"></a>例二</h5><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs coq">java.lang.UnsupportedOperationException: java/lang/<span class="hljs-keyword">Class</span>-&gt;forName(Ljava/lang/String;)Ljava/lang/<span class="hljs-keyword">Class</span>;<br><span class="hljs-built_in">at</span> com.github.unidbg.linux.android.dvm.AbstractJni.callStaticObjectMethodV(AbstractJni.java:<span class="hljs-number">503</span>)<br><span class="hljs-built_in">at</span> com.demo7.TDJNI.callStaticObjectMethodV(TDJNI.java:<span class="hljs-number">763</span>)<br></code></pre></td></tr></table></figure><ul><li>**Class.forName(className)**用于加载类，我们不确定所加载的类是样本自定义的类、Android 框架层类库，还是 JDK 中的标准类库，这种情况里使用resolveClass是好办法。<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">case</span> java<span class="hljs-regexp">/lang/</span><span class="hljs-keyword">Class</span>-&gt;forName(Ljava<span class="hljs-regexp">/lang/</span>String;)Ljava<span class="hljs-regexp">/lang/</span><span class="hljs-keyword">Class</span>;:&#123;<br>    String className = vaList.getObjectArg(<span class="hljs-number">0</span>).getValue().toString();<br>    System.out.<span class="hljs-keyword">println</span>(<span class="hljs-keyword">Class</span>-&gt;forName:+className);<br>    <span class="hljs-keyword">return</span> vm.resolveClass(className);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="例三"><a href="#例三" class="headerlink" title="例三"></a>例三</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.UnsupportedOperationException</span>: android/<span class="hljs-attribute">content</span>/IntentFilter-&gt;&lt;init&gt;(Ljava/lang/String;)V<br>at com<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.unidbg</span><span class="hljs-selector-class">.linux</span><span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.dvm</span><span class="hljs-selector-class">.AbstractJni</span><span class="hljs-selector-class">.newObjectV</span>(AbstractJni<span class="hljs-selector-class">.java</span>:<span class="hljs-number">791</span>)<br>at com<span class="hljs-selector-class">.demo7</span><span class="hljs-selector-class">.TDJNI</span><span class="hljs-selector-class">.newObjectV</span>(TDJNI<span class="hljs-selector-class">.java</span>:<span class="hljs-number">826</span>)<br></code></pre></td></tr></table></figure><ul><li>这里要初始化<code>IntentFilter</code>，同样的 Android 框架层的类库，只能做占位处理。<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lisp">case android/content/IntentFilter-&gt;&lt;init&gt;(<span class="hljs-name">Ljava/lang/String</span><span class="hljs-comment">;)V:&#123;</span><br>    String intent = vaList.getObjectArg(<span class="hljs-number">0</span>).getValue().toString()<span class="hljs-comment">;</span><br>    System.out.println(<span class="hljs-name">IntentFilter</span><span class="hljs-symbol">:+intent</span>)<span class="hljs-comment">;</span><br>    return vm.resolveClass(<span class="hljs-name">android/content/IntentFilter</span>).newObject(<span class="hljs-name">intent</span>)<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>可以注意到，这里的newObject没有传null，而是把参数传递了进去，这是因为样本初始化了多个IntentFilter，需要一个办法分辨不同的IntentFilter，以及把初始化的内容传递到之后的函数中去。</li></ul><h3 id="其他场景"><a href="#其他场景" class="headerlink" title="其他场景"></a>其他场景</h3><h5 id="pointer型"><a href="#pointer型" class="headerlink" title="pointer型"></a>pointer型</h5><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-comment">// 对pointer类型结果取值</span><br>UnidbgPointer ret = UnidbgPointer.pointer(emulator, number);<br>System.out.println(<span class="hljs-string">&quot;decrypt address:&quot;</span>+ret+<span class="hljs-string">&quot; str:&quot;</span>+ret.getString(<span class="hljs-number">0</span>));<br><br><span class="hljs-comment">// 构建pointer类型</span><br>MemoryBlock inblock = emulator.getMemory().malloc(<span class="hljs-number">16</span>, <span class="hljs-literal">true</span>);  <span class="hljs-comment">//字节长度</span><br>Pointer inptr = inblock.getPointer();<br><span class="hljs-built_in">byte</span>[] stub = hexStringToBytes(<span class="hljs-string">&quot;30313233343536373839616263646566&quot;</span>);<br>inptr.write(<span class="hljs-number">0</span>, stub, <span class="hljs-number">0</span>, <span class="hljs-number">16</span>);<br>inblock.free();<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">byte</span>[] hexStringToBytes(String hexString) &#123;<br>    <span class="hljs-keyword">if</span> (hexString.isEmpty()) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    hexString = hexString.toLowerCase();<br>    <span class="hljs-keyword">final</span> <span class="hljs-built_in">byte</span>[] byteArray = <span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[hexString.length() &gt;&gt; <span class="hljs-number">1</span>];<br>    <span class="hljs-built_in">int</span> <span class="hljs-keyword">index</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; hexString.length(); i++) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">index</span> &gt; hexString.length() - <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> byteArray;<br>        &#125;<br>        <span class="hljs-built_in">byte</span> highDit = (<span class="hljs-built_in">byte</span>) (Character.digit(hexString.charAt(<span class="hljs-keyword">index</span>), <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFF</span>);<br>        <span class="hljs-built_in">byte</span> lowDit = (<span class="hljs-built_in">byte</span>) (Character.digit(hexString.charAt(<span class="hljs-keyword">index</span> + <span class="hljs-number">1</span>), <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFF</span>);<br>        byteArray[i] = (<span class="hljs-built_in">byte</span>) (highDit &lt;&lt; <span class="hljs-number">4</span> | lowDit);<br>        <span class="hljs-keyword">index</span> += <span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> byteArray;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="有个jobject对象-想查看它的内容-最常见的就是jbyteArray"><a href="#有个jobject对象-想查看它的内容-最常见的就是jbyteArray" class="headerlink" title="有个jobject对象,想查看它的内容,最常见的就是jbyteArray"></a>有个jobject对象,想查看它的内容,最常见的就是jbyteArray</h5><ul><li>以hookZz中为例<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">preCall</span>(<span class="hljs-params">Emulator&lt;?&gt; emulator, HookZzArm32RegisterContext ctx, HookEntryInfo info</span>)</span> &#123;<br>    UnidbgPointer jbytearrayptr = ctx.getPointerArg(<span class="hljs-number">2</span>);<br>    DvmObject&lt;?&gt; dvmbytes = vm.getObject(jbytearrayptr.toIntPeer());<br>    <span class="hljs-comment">// 取出byte</span><br>    <span class="hljs-built_in">byte</span>[] result = (<span class="hljs-built_in">byte</span>[]) dvmbytes.getValue();<br>    <span class="hljs-comment">// 转换成String 或者按需转成其他</span><br>    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">new</span> String(result));<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h5 id="std-string-的读写"><a href="#std-string-的读写" class="headerlink" title="std::string 的读写"></a>std::string 的读写</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">readStdString</span>(<span class="hljs-params"><span class="hljs-title class_">Pointer</span> strptr</span>)&#123;<br>    <span class="hljs-title class_">Boolean</span> isTiny = (strptr.<span class="hljs-title function_">getByte</span>(<span class="hljs-number">0</span>) &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(isTiny)&#123;<br>        <span class="hljs-keyword">return</span> strptr.<span class="hljs-title function_">getString</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> strptr.<span class="hljs-title function_">getPointer</span>(emulator.<span class="hljs-title function_">getPointerSize</span>()* 2L).<span class="hljs-title function_">getString</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">writeStdString</span>(<span class="hljs-params"><span class="hljs-title class_">Pointer</span> strptr, <span class="hljs-title class_">String</span> content</span>)&#123;<br>    <span class="hljs-title class_">Boolean</span> isTiny = (strptr.<span class="hljs-title function_">getByte</span>(<span class="hljs-number">0</span>) &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(isTiny)&#123;<br>        strptr.<span class="hljs-title function_">write</span>(<span class="hljs-number">1</span>, content.<span class="hljs-title function_">getBytes</span>(<span class="hljs-title class_">StandardCharsets</span>.<span class="hljs-property">UTF_8</span>), <span class="hljs-number">0</span>, content.<span class="hljs-title function_">length</span>());<br>    &#125;<br>    strptr.<span class="hljs-title function_">getPointer</span>(emulator.<span class="hljs-title function_">getPointerSize</span>()* 2L).<span class="hljs-title function_">write</span>(<span class="hljs-number">0</span>, content.<span class="hljs-title function_">getBytes</span>(<span class="hljs-title class_">StandardCharsets</span>.<span class="hljs-property">UTF_8</span>), <span class="hljs-number">0</span>, content.<span class="hljs-title function_">length</span>());<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="如果使用地址调用，传入Native的JAVA参数，除了八个基本类型外（byte、char、short、int、long、float、double、boolean），都必须vm-addLocalObject添加到局部引用中去。其他的对象类型一律要手动-addLocalObject。"><a href="#如果使用地址调用，传入Native的JAVA参数，除了八个基本类型外（byte、char、short、int、long、float、double、boolean），都必须vm-addLocalObject添加到局部引用中去。其他的对象类型一律要手动-addLocalObject。" class="headerlink" title="如果使用地址调用，传入Native的JAVA参数，除了八个基本类型外（byte、char、short、int、long、float、double、boolean），都必须vm.addLocalObject添加到局部引用中去。其他的对象类型一律要手动 addLocalObject。"></a>如果使用地址调用，传入Native的JAVA参数，除了八个基本类型外（byte、char、short、int、long、float、double、boolean），都必须vm.addLocalObject添加到局部引用中去。其他的对象类型一律要手动 addLocalObject。</h5><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// args list</span><br>List&lt;Object&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(<span class="hljs-number">10</span>);<br><span class="hljs-comment">// arg1 env</span><br>list.<span class="hljs-keyword">add</span>(vm.getJNIEnv());<br><span class="hljs-comment">// arg2 jobject/jclazz 一般用不到，直接填0</span><br><span class="hljs-comment">//需要注意的是，以往我一直直接把参数2填0，这是偷懒但有风险的做法，还是建议老老实实初始化类或对象，传hashCode进去，代码如下</span><br><span class="hljs-comment">// 如果用的第二个参数&lt;jObject/jClass&gt;, 则需要如此伪造。这里需要参考getmethodid问题</span><br><span class="hljs-comment">// 如果是静态方法，是jclass，即不需要new；</span><br><span class="hljs-comment">// DvmObject&lt;?&gt; cnative =  vm.resolveClass(&quot;com/roysue/testfindcalss/MainActivity&quot;);</span><br><span class="hljs-comment">// 不是静态，则jObject，需要new</span><br><span class="hljs-comment">//DvmObject&lt;?&gt; cnative =  vm.resolveClass(&quot;com/roysue/testfindcalss/MainActivity&quot;).newObject(null);</span><br><span class="hljs-comment">//list.add(cnative.hashCode());  |  list.add(vm.addLocalObject(cnative));  </span><br><br>list.<span class="hljs-keyword">add</span>(<span class="hljs-number">0</span>);<br><span class="hljs-comment">// arg3 bytes</span><br>DvmObject&lt;?&gt; context = vm.resolveClass(<span class="hljs-string">&quot;android/content/Context&quot;</span>).newObject(<span class="hljs-literal">null</span>);<br><span class="hljs-comment">// vm.resolveClass(&quot;java/util/Lang &quot;).newObject(&quot;2845361898087071873&quot;);</span><br>list.<span class="hljs-keyword">add</span>(vm.addLocalObject(context));<br><span class="hljs-comment">// args4</span><br>list.<span class="hljs-keyword">add</span>(vm.addLocalObject(<span class="hljs-keyword">new</span> StringObject(vm, <span class="hljs-string">&quot;12345&quot;</span>)));<br><span class="hljs-comment">// args5</span><br>list.<span class="hljs-keyword">add</span>(vm.addLocalObject(<span class="hljs-keyword">new</span> StringObject(vm, <span class="hljs-string">&quot;r0ysue&quot;</span>)));<br><span class="hljs-comment">// arg5 bytes</span><br>String input = <span class="hljs-string">&quot;aid=01A-khBWIm48A079Pz_DMW6PyZR8uyTumcCNm4e8awxyC2ANU.&amp;cfrom=28B5295010&amp;cuid=5999578300&amp;noncestr=46274W9279Hr1X49A5X058z7ZVz024&amp;platform=ANDROID&amp;timestamp=1621437643609&amp;ua=Xiaomi-MIX2S__oasis__3.5.8__Android__Android10&amp;version=3.5.8&amp;vid=1019013594003&amp;wm=20004_90024&quot;</span>;<br><span class="hljs-built_in">byte</span>[] inputByte = input.getBytes(StandardCharsets.UTF_8);<br>ByteArray inputByteArray = <span class="hljs-keyword">new</span> ByteArray(vm,inputByte);<br>list.<span class="hljs-keyword">add</span>(vm.addLocalObject(inputByteArray));<br><span class="hljs-comment">// arg6 ,boolean false 填入0</span><br>list.<span class="hljs-keyword">add</span>(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/04/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Android+Service%E6%89%93%E9%80%A0Android%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%9E%E7%8E%B0so%E6%96%87%E4%BB%B6%E8%B0%83%E7%94%A8/"/>
    <url>/blog/2025/05/04/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Android+Service%E6%89%93%E9%80%A0Android%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%9E%E7%8E%B0so%E6%96%87%E4%BB%B6%E8%B0%83%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<ul><li>参考：<a href="https://note.youdao.com/s/UB5mwuKZ">https://note.youdao.com/s/UB5mwuKZ</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/04/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/RPC/"/>
    <url>/blog/2025/05/04/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/RPC/</url>
    
    <content type="html"><![CDATA[<h1 id="FRIDA"><a href="#FRIDA" class="headerlink" title="FRIDA"></a>FRIDA</h1><ul><li>rpc和常规hook的不同</li></ul><ol><li>常规Hook是被动，Hook的函数&#x2F;方法要被动等待触发，不能主动调用要Hook的代码</li><li>rpc能主动调用要Hook的代码</li></ol><ul><li>rpc写法与常规写法的异同<figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs zephir">rpc:<br>rpc.exports = &#123;<br><span class="hljs-comment">// 注意：rpc时，hook 代码的js中给函数命名，不要加_</span><br>get_hello: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(str)</span></span>&#123;<br><span class="hljs-keyword">var</span> sig = <span class="hljs-string">&quot;&quot;</span>;<br>Java.perfrom(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">var</span> some = Java.<span class="hljs-keyword">use</span>(<span class="hljs-string">&#x27;XXXXX&#x27;</span>)<br>sig = some.get_sig()<br>&#125;)&#125;<br><span class="hljs-keyword">return</span> sig;<br>&#125;;<br>可以使用Python主动调用<br>get_hello(str)<br><br></code></pre></td></tr></table></figure></li></ul><h3 id="代码示例：rpc-coolapk的token参数"><a href="#代码示例：rpc-coolapk的token参数" class="headerlink" title="代码示例：rpc coolapk的token参数"></a>代码示例：rpc coolapk的token参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> codecs<br><span class="hljs-keyword">import</span> frida<br><span class="hljs-keyword">import</span> os<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">adbforward</span>():<br>    os.system(<span class="hljs-string">&quot;adb forward tcp:27042 tcp:27042&quot;</span>)<br>    os.system(<span class="hljs-string">&quot;adb forward tcp:27043 tcp:27043&quot;</span>)<br><br><br>hook_code = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">rpc.exports = &#123;</span><br><span class="hljs-string">    // 方法名不要带下划线 </span><br><span class="hljs-string">    gethello: function(str)&#123;</span><br><span class="hljs-string">        send(&#x27;heelo&#x27;);</span><br><span class="hljs-string">        Java.perform(function()&#123;</span><br><span class="hljs-string"></span><br><span class="hljs-string">            //拿到context上下文，通用</span><br><span class="hljs-string">            var currentApplication = Java.use(&#x27;android.app.ActivityThread&#x27;).currentApplication();</span><br><span class="hljs-string">            var context = currentApplication.getApplicationContext();</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">            var AuthUtils = Java.use(&#x27;com.coolapk.market.util.AuthUtils&#x27;);</span><br><span class="hljs-string">            //f = tt.$new();</span><br><span class="hljs-string">            var sig = AuthUtils.getAS(context, str);</span><br><span class="hljs-string">            send(sig);</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    )</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">on_message</span>(<span class="hljs-params">message, data</span>):<br>    <span class="hljs-keyword">if</span> message[<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;send&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(message[<span class="hljs-string">&#x27;payload&#x27;</span>])<br>    <span class="hljs-keyword">elif</span> message[<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;error&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(message[<span class="hljs-string">&#x27;stack&#x27;</span>])<br><br><br>process = frida.get_usb_device().attach(<span class="hljs-string">&#x27;com.coolapk.market&#x27;</span>)<br>script = process.create_script(hook_code)<br>script.on(<span class="hljs-string">&#x27;message&#x27;</span>, on_message)<br>script.load()<br><br><span class="hljs-built_in">print</span>(script.exports.gethello(<span class="hljs-string">&#x27;weuhhfb345684533sde6jkfg&#x27;</span>))<br><br><span class="hljs-comment"># device_manager = frida.get_device_manager()</span><br><span class="hljs-comment"># device = device_manager.add_remote_device(&quot;192.168.0.107&quot;)</span><br><br><span class="hljs-comment"># #s = frida.get_remote_device(&quot;192.168.0.107&quot;)</span><br><span class="hljs-comment"># session = device.attach(&#x27;com.coolapk.market&#x27;)</span><br><span class="hljs-comment"># #with codecs.open(&#x27;./agent.js&#x27;, &#x27;r&#x27;, &#x27;utf-8&#x27;) as f:</span><br><span class="hljs-comment"># #    source = f.read()</span><br><span class="hljs-comment"># script = session.create_script(hook_code)</span><br><span class="hljs-comment"># script.on(&#x27;message&#x27;, on_message)</span><br><span class="hljs-comment"># script.load()</span><br><span class="hljs-comment"># script.exports.getH(&#x27;code&#x27;)</span><br><span class="hljs-comment"># session.detach()</span><br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> codecs<br><span class="hljs-keyword">import</span> frida<br><span class="hljs-keyword">import</span> os<br><br>hook_code = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">rpc.exports = &#123;</span><br><span class="hljs-string">    // 方法名不要带下划线 </span><br><span class="hljs-string">    gethello: function(str)&#123;</span><br><span class="hljs-string">        send(&#x27;heelo&#x27;);</span><br><span class="hljs-string">        Java.perform(function()&#123;</span><br><span class="hljs-string">            //拿到context上下文，设计传入参数为上下文的内容(有疑问参考附件压缩包)时，通用</span><br><span class="hljs-string">            var currentApplication = Java.use(&#x27;android.app.ActivityThread&#x27;).currentApplication();</span><br><span class="hljs-string">            var context = currentApplication.getApplicationContext();</span><br><span class="hljs-string">            var AuthUtils = Java.use(&#x27;com.coolapk.market.util.AuthUtils&#x27;);</span><br><span class="hljs-string">            var sig = AuthUtils.getAS(context, str);</span><br><span class="hljs-string">            send(sig);</span><br><span class="hljs-string">        &#125;)&#125;</span><br><span class="hljs-string">&#125;;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">on_message</span>(<span class="hljs-params">message, data</span>):<br>    <span class="hljs-keyword">if</span> message[<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;send&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(message[<span class="hljs-string">&#x27;payload&#x27;</span>])<br>    <span class="hljs-keyword">elif</span> message[<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;error&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(message[<span class="hljs-string">&#x27;stack&#x27;</span>])<br><br>process = frida.get_usb_device().attach(<span class="hljs-string">&#x27;com.coolapk.market&#x27;</span>)<br>script = process.create_script(hook_code)<br>script.on(<span class="hljs-string">&#x27;message&#x27;</span>, on_message)<br>script.load()<br><br><span class="hljs-built_in">print</span>(script.exports.gethello(<span class="hljs-string">&#x27;weuhhfb345684533sde6jkfg&#x27;</span>))<br></code></pre></td></tr></table></figure><ul><li>拿到context上下文，设计传入参数为上下文的内容(有疑问参考附件压缩包)时，通用<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">var</span> currentApplication = Java.<span class="hljs-keyword">use</span>(<span class="hljs-string">&#x27;android.app.ActivityThread&#x27;</span>).<span class="hljs-title function_ invoke__">currentApplication</span>();<br><span class="hljs-keyword">var</span> context = currentApplication.<span class="hljs-title function_ invoke__">getApplicationContext</span>();<br></code></pre></td></tr></table></figure></li></ul><p><img src="/blog/../../../../images/android/%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/1746344955415.jpg"></p><p><img src="/blog/../../../../images/android/%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/1746344960498.jpg"></p><h1 id="XPOSED"><a href="#XPOSED" class="headerlink" title="XPOSED"></a>XPOSED</h1><ul><li>看xposed课程</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/04/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/%E6%80%BB%E7%BA%B2/"/>
    <url>/blog/2025/05/04/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/%E6%80%BB%E7%BA%B2/</url>
    
    <content type="html"><![CDATA[<ul><li>Unidbg:<a href="https://github.com/zhkl0228/unidbg">https://github.com/zhkl0228/unidbg</a></li><li>AndroidNativeEmu:<a href="https://github.com/AeonLucid/AndroidNativeEmu">https://github.com/AeonLucid/AndroidNativeEmu</a></li><li>ExAndroidNativeEmu:<a href="https://github.com/maiyao1988/ExAndroidNativeEmu">https://github.com/maiyao1988/ExAndroidNativeEmu</a></li><li>qiling:<a href="https://github.com/qilingframework/qiling">https://github.com/qilingframework/qiling</a></li><li>rainbow:<a href="https://github.com/Ledger-Donjon/rainbow">https://github.com/Ledger-Donjon/rainbow</a></li><li>flare-emu:<a href="https://github.com/mandiant/flare-emu">https://github.com/mandiant/flare-emu</a></li><li>usercorn:<a href="https://github.com/lunixbochs/usercorn">https://github.com/lunixbochs/usercorn</a></li><li>binee:<a href="https://github.com/carbonblack/binee">https://github.com/carbonblack/binee</a></li><li>afl-unicorn:<a href="https://github.com/Battelle/afl-unicorn">https://github.com/Battelle/afl-unicorn</a></li></ul><ul><li>其中一部分只是简单脚本，用于处理特定样例的特定需求，比如本篇写的这些代码，只是小打小闹。除此之外的大量工具，基本可以归为两类，或这两类的结合。一类是试图做 Unicorn+，将 Unicorn 用在某个领域或结合某项内容，实现 1 + 1 大于 2 。比如 Unicorn + IDA，其中比较基础的原型工具是 idaemu、idaMipsEmu，更复杂一些的是 uEmu，它很好用，在谈论花指令时我们会重点讨论它。<br><img src="/blog/../../../../images/android/%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/1746343032133.jpg"></li></ul><ul><li><p>sk3wldbg[<a href="https://github.com/cseagle/sk3wldbg]">https://github.com/cseagle/sk3wldbg]</a>  是更重更大的工具，使用场景反而不多。比如 IDA + 密码学, rainbow[<a href="https://github.com/Ledger-Donjon/rainbow]">https://github.com/Ledger-Donjon/rainbow]</a>  就是这样的例子，试图将 Unicorn 和密码分析结合起来，提供更好的测信道攻击体验。afl-unicorn[<a href="https://github.com/Battelle/afl-unicorn]">https://github.com/Battelle/afl-unicorn]</a>  是 Unicorn + fuzz，除此之外如 Radare + Unicorn，Angr + Unicorn 等等，此类交叉研究确实取得了不少成果。</p></li><li><p>第二类则是<code>试图提升 Unicorn 的模拟执行能力</code>。Unicorn 本身是指令模拟器，它忠实准确的执行和处理指令。因此很适合模拟执行一串汇编代码，或一个独立无依赖的函数。但如果代码存在某种指令以外的依赖呢？比如本例中的 malloc，往浅了说，它是 libc.so里的一个函数，往深层说，它是操作系统所提供的一项重要服务——内存管理的外显。又比如样本通过内联汇编做系统调用，这就是更直接的一种对操作系统的依赖。又或者在 Android Native 里常见的 JNI，它们都不是单纯指令执行层的内容，而是 CPU 之上的操作系统和虚拟机所提供的功能。 因此以 Qiling&#x2F;usercorn&#x2F;Unidbg 为代表的第二类工具，其实都是想基于 Unicorn 构建一个微型可控的操作系统（操作系统本身太复杂了）</p></li><li><p>然后再利用 Unicorn 本身所提供的特性，得到一个可控、灵活、强大的运行环境。这些工具各有侧重，比如 Qiling 追求多功能多平台支持。Unidbg 专注 Android&#x2F;IOS，Binee 专注 WIndows。</p></li><li><p>在处理小需求时，Unicorn 本身足够简单灵活，再打几个补丁即可（比如此样本中，只需要用 codeHook 处理一下 malloc，进行简单的内存分配即可，请读者自行做尝试，当调用 malloc 时，开辟或分配一片未被使用的内存。</p></li></ul><h3 id="Unidbg和其他基于Unicorn的项目的异同"><a href="#Unidbg和其他基于Unicorn的项目的异同" class="headerlink" title="Unidbg和其他基于Unicorn的项目的异同"></a>Unidbg和其他基于Unicorn的项目的异同</h3><ul><li>这一节我们聊一些轻松的话题，即Unidbg和其他基于Unicorn的项目的异同。</li></ul><ol><li>AndroidNativeEmu</li></ol><ul><li>AeonLucid&#x2F;AndroidNativeEmu: Allows you to partly emulate an Android native library. (github.com)</li><li>AndoridNativeEmu 是 Unidbg 的前辈，也是第一个开源且知名的、Android方向的，基于Unicorn的Native模拟器，它处理好了JNI的问题，给Unidbg等相关项目带来灵感。应该说，在项目的成熟度和完善程度上，勤勉诚恳的发展了四年的Unidbg已经远远走到前辈的前面了。</li><li>已不更新，目前更新的是继任者：ExAndroidNativeEmu:<a href="https://github.com/maiyao1988/ExAndroidNativeEmu">https://github.com/maiyao1988/ExAndroidNativeEmu</a></li></ul><ol start="2"><li>RainBow</li></ol><ul><li>Ledger-Donjon&#x2F;rainbow: Makes Unicorn traces. Generic Side-Channel and Fault Injection simulator (github.com)</li><li>rainbow 是Unicorn 结合密码分析方向的一个尝试和产物，提供了优雅、现代化的API以分析加密算法，但它很稚嫩，没什么好说的。</li></ul><ol start="3"><li>Qiling</li></ol><ul><li>qilingframework&#x2F;qiling: Qiling Advanced Binary Emulation Framework (github.com)</li><li>Qiling 和 Unidbg 不是一个赛道的，没什么好说的。如果你想在某个Native模拟器上跑通Andorid 或 IOS 的二进制文件，那么Unidbg是一个好选择，除此之外的其他架构，建议用 Qiling，它的起点高，生态好，用处广。Unidbg则相反，目前主要专注在Android 和 IOS 一亩三分田上，但这种专注也很有回报，在模拟执行Android SO这块应该没有比它更成熟的开源项目。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/04/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/4.%20%E9%80%86%E5%90%91%E6%A1%86%E6%9E%B6/IDA/5.%20%E5%8F%8D%E6%B1%87%E7%BC%96/"/>
    <url>/blog/2025/05/04/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/4.%20%E9%80%86%E5%90%91%E6%A1%86%E6%9E%B6/IDA/5.%20%E5%8F%8D%E6%B1%87%E7%BC%96/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/04/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/4.%20%E9%80%86%E5%90%91%E6%A1%86%E6%9E%B6/IDA/2.%20IDA%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/3.%20%E8%AF%AD%E6%B3%95API/"/>
    <url>/blog/2025/05/04/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/4.%20%E9%80%86%E5%90%91%E6%A1%86%E6%9E%B6/IDA/2.%20IDA%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/3.%20%E8%AF%AD%E6%B3%95API/</url>
    
    <content type="html"><![CDATA[<h1 id="BIP语法"><a href="#BIP语法" class="headerlink" title="BIP语法"></a>BIP语法</h1><ul><li>bip官方文档：<a href="https://github.com/synacktiv/bip/">https://github.com/synacktiv/bip/</a></li></ul><h3 id="获取so所有函数"><a href="#获取so所有函数" class="headerlink" title="获取so所有函数"></a>获取so所有函数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go">from bip <span class="hljs-keyword">import</span> BipFunction<br><br><span class="hljs-keyword">for</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">in</span> <span class="hljs-title">BipFunction</span>.<span class="hljs-title">iter_all</span><span class="hljs-params">()</span></span>:<br>    funcName = <span class="hljs-keyword">func</span>.name<br>    length = <span class="hljs-keyword">func</span>.size<br>    startAddr = <span class="hljs-keyword">func</span>.ea<br>    xrefCount = <span class="hljs-keyword">func</span>.xCodeTo<br>    <span class="hljs-keyword">for</span> line in <span class="hljs-keyword">func</span>.instr: <span class="hljs-comment">// 获取函数每一行地址</span><br>            m = line.mnem <span class="hljs-comment">// 获取每一行地址对应的指令</span><br>            <span class="hljs-keyword">if</span> m.startswith(<span class="hljs-string">&quot;LSL&quot;</span>) | m.startswith(<span class="hljs-string">&quot;AND&quot;</span>) | m.startswith(<span class="hljs-string">&quot;ORR&quot;</span>) | m.startswith(<span class="hljs-string">&quot;LSR&quot;</span>) | m.startswith(<span class="hljs-string">&quot;ROR&quot;</span>):<br>                count += <span class="hljs-number">1</span><br>    oneFuncDict = &#123;<span class="hljs-string">&quot;funcName&quot;</span>: funcName, <span class="hljs-string">&quot;Address&quot;</span>: hex(startAddr), <span class="hljs-string">&quot;length&quot;</span>: length&#125;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-function"><span class="hljs-keyword">func</span>)</span><br></code></pre></td></tr></table></figure><h3 id="操作基本块实现对花指令的patch"><a href="#操作基本块实现对花指令的patch" class="headerlink" title="操作基本块实现对花指令的patch"></a>操作基本块实现对花指令的patch</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">import ida_bytes<br>from <span class="hljs-keyword">bip.base </span>import *<br>import keystone<br>ks = keystone.Ks(keystone.KS_ARCH_ARM64, keystone.KS_MODE_LITTLE_ENDIAN)<br><br><br>def generate(code, <span class="hljs-keyword">addr):</span><br><span class="hljs-keyword"></span>    encoding, _ = ks.asm(code, <span class="hljs-keyword">addr)</span><br><span class="hljs-keyword"></span>    return encoding<br><br><br>spjunkCount = <span class="hljs-number">0</span><br><span class="hljs-comment"># 遍历所有函数</span><br>for func in <span class="hljs-keyword">BipFunction.iter_all():</span><br><span class="hljs-keyword"></span>    <span class="hljs-comment"># 遍历函数的所有基本块</span><br>    for i in func.<span class="hljs-keyword">blocks:</span><br><span class="hljs-keyword"></span>        <span class="hljs-comment"># 判断函数中是否仅包含单条指令</span><br>        if len(i.<span class="hljs-keyword">instr) </span>== <span class="hljs-number">1</span>:<br>            <span class="hljs-comment"># 判断指令类型和目标操作数是否是 SP 寄存器</span><br>            code = i.<span class="hljs-keyword">instr[0]</span><br><span class="hljs-keyword"></span>            if code.mnem == <span class="hljs-string">&quot;ADD&quot;</span> <span class="hljs-keyword">and </span>code.ops[<span class="hljs-number">0</span>].str == <span class="hljs-string">&quot;SP&quot;</span>:<br>                <span class="hljs-keyword">addr </span>= code.ea<br>                <span class="hljs-comment"># NOP</span><br>                <span class="hljs-keyword">nopCode </span>= generate(<span class="hljs-string">&quot;nop&quot;</span>, <span class="hljs-number">0</span>)<br>                ida_bytes.patch_bytes(<span class="hljs-keyword">addr, </span><span class="hljs-keyword">bytes(nopCode))</span><br><span class="hljs-keyword"></span>                <span class="hljs-comment"># 统计数目</span><br>                spjunkCount += <span class="hljs-number">1</span><br><br>print(f<span class="hljs-string">&quot;处理了&#123;spjunkCount&#125;个干扰栈平衡类型的花指令&quot;</span>)<br></code></pre></td></tr></table></figure><h1 id="Sark语法"><a href="#Sark语法" class="headerlink" title="Sark语法"></a>Sark语法</h1><ul><li>Sark官方文档：<a href="https://sark.readthedocs.io/en/latest/">https://sark.readthedocs.io/en/latest/</a></li></ul><h3 id="获取so函数列表"><a href="#获取so函数列表" class="headerlink" title="获取so函数列表"></a>获取so函数列表</h3><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs autoit">sark.functions()是对 idautils.Functions的封装，返回范围内的所有函数而非函数起始地址<br>底层依赖于 IDAPython，比如<span class="hljs-keyword">func</span>.name来自于get_ea_name<br>import sark<br><br><span class="hljs-keyword">for</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">in</span> <span class="hljs-title function_">sark</span>.<span class="hljs-title function_">functions</span><span class="hljs-params">()</span>:<br>    <span class="hljs-built_in">funcName</span> = <span class="hljs-keyword">func</span>.name<br>    length = <span class="hljs-keyword">func</span>.func_t.size()<br>    startAddr = <span class="hljs-keyword">func</span>.start_ea<br>    oneFuncDict = &#123;<span class="hljs-string">&quot;funcName&quot;</span>: <span class="hljs-built_in">funcName</span>, <span class="hljs-string">&quot;Address&quot;</span>: <span class="hljs-built_in">hex</span>(startAddr), <span class="hljs-string">&quot;length&quot;</span>: length&#125;<br>    print(<span class="hljs-keyword">func</span>)<br></code></pre></td></tr></table></figure><h1 id="IDAPython语法"><a href="#IDAPython语法" class="headerlink" title="IDAPython语法"></a>IDAPython语法</h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/04/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/4.%20%E9%80%86%E5%90%91%E6%A1%86%E6%9E%B6/IDA/2.%20IDA%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/2.%20IDA%E8%87%AA%E8%BA%ABhook/"/>
    <url>/blog/2025/05/04/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/4.%20%E9%80%86%E5%90%91%E6%A1%86%E6%9E%B6/IDA/2.%20IDA%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/2.%20IDA%E8%87%AA%E8%BA%ABhook/</url>
    
    <content type="html"><![CDATA[<ul><li>IDA 中提供了对自身充分的 Hook ，让我们可以拦截和观测它自身在UI界面、反汇编过程、反编译过程、调试等过程中的每一点风吹草动，包括 UI_HOOKS、DBG_HOOKS、Hexrays_HOOKS、VIEW_HOOKS、DBG_HOOKS、IDP_HOOKS 等等</li></ul><h1 id="View-Hooks"><a href="#View-Hooks" class="headerlink" title="View_Hooks"></a>View_Hooks</h1><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">class</span> <span class="hljs-title class_">View</span><span class="hljs-symbol">_Hooks:</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">view_activated</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, *args</span>):<br>        pass<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">view_deactivated</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, *args</span>):<br>        pass<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">view_keydown</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, *args</span>):<br>        pass<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">view_click</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, *args</span>):<br>        pass<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">view_dblclick</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, *args</span>):<br>        pass<br>    <span class="hljs-comment"># ... 省略</span><br></code></pre></td></tr></table></figure><h3 id="view-activated-view-deactivated-：界面打开和离开界面"><a href="#view-activated-view-deactivated-：界面打开和离开界面" class="headerlink" title="view_activated &#x2F; view_deactivated ：界面打开和离开界面"></a>view_activated &#x2F; view_deactivated ：界面打开和离开界面</h3><ul><li>当一个界面被展示在最前端时是 activated 状态</li><li>被其他界面覆盖不可见时是 deactivated 状态。</li><li>如果刷新界面，其实是一个短暂的从可见到不可见再到可见的状态，即 deactivated + activated <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs scss">import idaapi<br>class <span class="hljs-built_in">Hook</span>(idaapi.View_Hooks):<br>    def <span class="hljs-built_in">view_activated</span>(self, view):<br>        viewName = idaapi.<span class="hljs-built_in">get_widget_title</span>(view)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;view active:&quot;</span>+viewName)<br><br>    def <span class="hljs-built_in">view_deactivated</span>(self, view):<br>        viewName = idaapi.<span class="hljs-built_in">get_widget_title</span>(view)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;view deactive:&quot;</span>+viewName)<br>myViewHook = <span class="hljs-built_in">Hook</span>()<br># 开启自定义的View Hook<br>myViewHook.<span class="hljs-built_in">hook</span>()<br></code></pre></td></tr></table></figure></li></ul><h3 id="view-created-和-view-close"><a href="#view-created-和-view-close" class="headerlink" title="view_created 和 view_close"></a>view_created 和 view_close</h3><ul><li>关注的不是界面的可见和不可见，而是界面的创建与关闭<figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sas">def view_created(self, <span class="hljs-keyword">view</span>):<br>    viewName = idaapi.get_widget_title(<span class="hljs-keyword">view</span>)<br>    pr<span class="hljs-meta">int</span>(<span class="hljs-string">&quot;view create:&quot;</span>+viewName)<br><br>def view_<span class="hljs-meta">close</span>(self, <span class="hljs-keyword">view</span>):<br>    viewName = idaapi.get_widget_title(<span class="hljs-keyword">view</span>)<br>    pr<span class="hljs-meta">int</span>(<span class="hljs-string">&quot;view close:&quot;</span>+viewName)<br></code></pre></td></tr></table></figure></li></ul><h3 id="view-keydown"><a href="#view-keydown" class="headerlink" title="view_keydown"></a>view_keydown</h3><ul><li>则会监控当鼠标悬停在IDA交互界面上时键盘的输入，view_keydown参数中包含了具体输入的值</li><li>需要注意，并不是所有的按键输入都会被我们打印出来，因为一些按键作为默认或插件的快捷键，优先级更高，会走入它们的逻辑。<figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pf">def view_keydown(<span class="hljs-literal">self</span>, view ,key ,<span class="hljs-keyword">state</span>):<br>    print(<span class="hljs-string">&quot;keydown:&quot;</span>+chr(key))<br></code></pre></td></tr></table></figure></li></ul><h3 id="view-click-会监控每一次单击，view-dblclick-会监控连续的两次单击，即双击"><a href="#view-click-会监控每一次单击，view-dblclick-会监控连续的两次单击，即双击" class="headerlink" title="view_click 会监控每一次单击，view_dblclick 会监控连续的两次单击，即双击"></a><code>view_click</code> 会监控每一次单击，<code>view_dblclick</code> 会监控连续的两次单击，即双击</h3><ul><li>如果要做某种自定义的逻辑，用双击比较好，单击太频繁了不容易判断。</li><li>需要注意的是，单击触发的时机是鼠标松开的时机，而非按压的时机，这在后面会有用。<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">def</span> <span class="hljs-title function_">view_click</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, view, event</span>):<br>    print(<span class="hljs-string">&quot;one click&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">view_dblclick</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, view ,event</span>):<br>    print(<span class="hljs-string">&quot;double click&quot;</span>)<br></code></pre></td></tr></table></figure></li></ul><h3 id="view-curpos-监控鼠标位置改变，侧重于观测鼠标移动给界面带来的变动"><a href="#view-curpos-监控鼠标位置改变，侧重于观测鼠标移动给界面带来的变动" class="headerlink" title="view_curpos 监控鼠标位置改变，侧重于观测鼠标移动给界面带来的变动"></a>view_curpos 监控鼠标位置改变，侧重于观测鼠标移动给界面带来的变动</h3><ul><li>view_mouse_moved 单纯监控鼠标的移动操作，因此移动一次可能会触发几十次 view_mouse_moved<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">def</span> <span class="hljs-title function_">view_curpos</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, view</span>):<br>    print(<span class="hljs-string">&quot;curpos changed&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">view_mouse_moved</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, view ,event</span>):<br>    print(<span class="hljs-string">&quot;moved mouse&quot;</span>)<br></code></pre></td></tr></table></figure></li></ul><h3 id="需要结合api"><a href="#需要结合api" class="headerlink" title="需要结合api"></a>需要结合api</h3><ul><li>如何获取当前界面的名字  &amp;&amp; 判断当前是否为反汇编界面<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment"># view是ida hook的参数</span><br>viewName = idaapi.get_widget_title(view) <br><span class="hljs-comment"># viewName 其实就是界面顶部所呈现的名字</span><br>判断当前是否为反汇编界面：<br>方式<span class="hljs-number">1</span>：反汇编界面对应于—— <span class="hljs-variable constant_">IDA</span> <span class="hljs-title class_">View</span>-<span class="hljs-variable constant_">XXX</span>。可以对viewName字符串做匹配，进而判断当前界面是否是反汇编界面；诸如 viewName.contains(<span class="hljs-string">&quot;IDA View&quot;</span>)<br>方式<span class="hljs-number">2</span>：<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">view_dblclick</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, view ,event</span>):<br>    widgetType = idaapi.get_widget_type(view)<br>    <span class="hljs-keyword">if</span> widgetType == idaapi.<span class="hljs-variable constant_">BWN_DISASM</span>:<br>        <span class="hljs-comment"># 后续逻辑</span><br>        pass<br></code></pre></td></tr></table></figure></li><li>如何获取光标所处地址<blockquote><p>address &#x3D; hex(idaapi.get_screen_ea())</p></blockquote></li></ul><h1 id="IDP-HOOKS"><a href="#IDP-HOOKS" class="headerlink" title="IDP_HOOKS"></a>IDP_HOOKS</h1><ul><li>IDP_HOOKS让我们可以介入 IDA 的处理器，比如它的反汇编过程。<code>IDAPath/python/3/ida_idp.py</code>是这个 Hook 所对应的 Python 包装</li><li>我们需要继承这个类并实现其中感兴趣的 Hook，本篇选择其中的 ev_emu_insn<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">ev_emu_insn</span>(<span class="hljs-params">self, *args</span>) -&gt; <span class="hljs-string">&quot;bool&quot;</span>:<br>    <span class="hljs-string">r&quot;&quot;&quot;</span><br><span class="hljs-string">    Emulate instruction, create cross-references, plan to analyze</span><br><span class="hljs-string">    subsequent instructions, modify flags etc. Upon entrance to this</span><br><span class="hljs-string">    function, all information about the instruction is in &#x27;insn&#x27;</span><br><span class="hljs-string">    structure.</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    ev_emu_insn(self, insn) -&gt; bool</span><br><span class="hljs-string">        @param insn (C++: const insn_t *)</span><br><span class="hljs-string">        @retval: 1 - ok</span><br><span class="hljs-string">        @retval: -1 - the kernel will delete the instruction</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> _ida_idp.IDP_Hooks_ev_emu_insn(<span class="hljs-variable language_">self</span>, *args)<br></code></pre></td></tr></table></figure></li><li>ev_emu_insn 是对指令做分析的一个时机点，我们可以在这个时机判断指令是否是所需指令，然后做一些操作。函数的入参是 insn，在《花指令处理（三）》的第二小节末尾我们介绍过 insn 结构，它是 IDA 中汇编指令这一概念所对应的数据结构，我们可以通过它获取指令的地址、操作数、助记符、指令类型等信息，对它的完整结构感兴趣的读者可以看这个文档:<a href="https://cpp.docs.hex-rays.com/classinsn__t.html">https://cpp.docs.hex-rays.com/classinsn__t.html</a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> ida_bytes<br><span class="hljs-keyword">import</span> idaapi<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">patchKS</span>(idaapi.IDP_Hooks):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        idaapi.IDP_Hooks.__init__(<span class="hljs-variable language_">self</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">ev_emu_insn</span>(<span class="hljs-params">self, insn</span>):<br>        addr = insn.ea<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Analyse code:&quot;</span>+<span class="hljs-built_in">hex</span>(addr))<br>        <span class="hljs-keyword">if</span> addr == <span class="hljs-number">0x4ABD8</span>:<br>            ida_bytes.patch_bytes(addr, <span class="hljs-string">b&quot;\x0D\x00\x00\x14&quot;</span>) <span class="hljs-comment"># 可以在得到结果</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br>idphook = patchKS()<br>idphook.hook()<br></code></pre></td></tr></table></figure></li><li>在已打开的 IDA 环境里这么做，就像是 Frida attach 模式，IDA 对指令的处理早就结束了。可以让 IDA 重新分析Reanalyze Program程序（这自然也包括指令)</li><li>这种方案就不需要像之前的方案一样 试过之后回填到so中持久化在打开so文件了</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/05/04/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/4.%20%E9%80%86%E5%90%91%E6%A1%86%E6%9E%B6/IDA/2.%20IDA%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/1.%20%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"/>
    <url>/blog/2025/05/04/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/4.%20%E9%80%86%E5%90%91%E6%A1%86%E6%9E%B6/IDA/2.%20IDA%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/1.%20%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="为什么要IDA插件开发"><a href="#为什么要IDA插件开发" class="headerlink" title="为什么要IDA插件开发"></a>为什么要IDA插件开发</h1><ol><li>参考：<a href="https://www.yuque.com/docs/share/96762f81-bd4c-496f-a373-b350f896a84f">https://www.yuque.com/docs/share/96762f81-bd4c-496f-a373-b350f896a84f</a></li><li>各种反编译工具的插件支持语言简洁 <ol><li>GDA   <a href="https://github.com/charles2gan/GDA-android-reversing-Tool">https://github.com/charles2gan/GDA-android-reversing-Tool</a></li><li>JEB </li><li>Ghidra </li><li>JADX</li></ol></li><li>IDA发展历史及遗留问题 <ol><li>IDA 的脚本开发，整体上是从 IDC 到 Python 2 到 Python 3 再到新版 Python API 这样一个路子 </li><li>IDAPython 新老接口api对应关系：<a href="https://hex-rays.com/products/ida/support/ida74_idapython_no_bc695_porting_guide.shtml">https://hex-rays.com/products/ida/support/ida74_idapython_no_bc695_porting_guide.shtml</a></li></ol></li><li>IDAPython 的不足与完善 <ol><li>IDA 接口以及 IDAPython 所提供的 API 都过于 low level，既不易用，也不够 pythonic </li><li>他们不确定怎样组织 API 可以更 pythonic，所以他们只提供够用的低级 API，希望并鼓励用户去用一种更 pythonic 的方式处理它们 </li><li>Sark官方文档：<a href="https://sark.readthedocs.io/en/latest/">https://sark.readthedocs.io/en/latest/</a></li><li>bip官方文档：<a href="https://github.com/synacktiv/bip/">https://github.com/synacktiv/bip/</a></li><li>ida-minsc、wilhelm</li></ol></li></ol><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><h2 id="1-IDAPython环境安装"><a href="#1-IDAPython环境安装" class="headerlink" title="1. IDAPython环境安装"></a>1. IDAPython环境安装</h2><ul><li>IDApython环境注意事项：参考 <a href="https://www.helloworld.net/p/9574957654">https://www.helloworld.net/p/9574957654</a></li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>下面几点关系到安装是否成功 </li><li>IDA必须是安装版的，我以前用的是免安装版的。 </li><li>python版本、IDA版本，IDAPyhton版本必须匹配。 </li><li>python、IDA、IDAPython必须都是32位的或者都是64位的。</li></ul><h3 id="安装关键点"><a href="#安装关键点" class="headerlink" title="安装关键点"></a>安装关键点</h3><ul><li>下面这些东西必备，缺一不可</li><li>python27.dll（我安装的是python2.7,如果安装的是pyhton2.6那就是python26.dll）。 </li><li>python.cfg文件。 </li><li>plugins中的python.plw和python.p64。 </li><li>python文件夹里的文件。</li></ul><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><p>首先我的IDA的版本是6.8</p><ol><li>机器上安装了Python，到Python的官网—<a href="http://www.python.org/getit/">http://www.python.org/getit/</a> 下载一个2.6或者2.7的安装包。注意对应操作系统类型及位数。</li><li>到github上面下载相应版本的IDAPython,注意IDA版本和Python版本都要和自己机器上安装的版本相对应。这是地址—<a href="https://github.com/idapython/bin">https://github.com/idapython/bin</a></li><li>将IDAPython解压后的Python文件夹内的所有内容覆盖掉IDA原有Python文件夹（IDA安装目录下）下面的内容。</li><li>将IDAPython解压后的Plugins文件夹的python.plw和python.p64拷贝到IDA原有Plugins文件夹（自定义，一般IDA安装目录下）下。</li><li>将IDAPython解压后的python.cfg文件拷贝到IDA原有cfg文件夹（IDA安装目录下）下。</li><li>把python安装目录下的python27.dll复制到IDA安装目录下。如果python2.7安装包里没有pyhton27.dll那么可以找一个Python26.dll改为python27.dll也是可以的。但是要注意python的系统位数要和IDAPython的系统位数相同。</li></ol><h2 id="2-脚本开发环境"><a href="#2-脚本开发环境" class="headerlink" title="2. 脚本开发环境"></a>2. 脚本开发环境</h2><h3 id="代码提示"><a href="#代码提示" class="headerlink" title="代码提示"></a>代码提示</h3><ul><li>可以将 <strong>yourPath&#x2F;IDA&#x2F;python 路径下的 3 文件夹</strong>（即 Python3）拷贝到 IDE 中，我这里使用 Pycharm，右键设置为 Sources Root，即可获得</li><li>这么做之后，我们就拥有了一个具有代码补全的 IDAPython 编写环境，但需注意，它仅仅是代码补全，并不能在 IDE 中直接执行 IDAPython 代码</li></ul><h3 id="快速验证代码的交互方式"><a href="#快速验证代码的交互方式" class="headerlink" title="快速验证代码的交互方式"></a>快速验证代码的交互方式</h3><h4 id="IPyIDA：-https-github-com-eset-ipyida-推荐"><a href="#IPyIDA：-https-github-com-eset-ipyida-推荐" class="headerlink" title="IPyIDA： https://github.com/eset/ipyida    推荐"></a>IPyIDA： <a href="https://github.com/eset/ipyida">https://github.com/eset/ipyida</a>    推荐</h4><ul><li>如果按照github上安装不上，<strong>【idapip install ipyida】和【复制 ipyida_plugin_stub.py文件到IDA7.5的plugins目录中，并重命名为ipyida.py】</strong> 和重启ida</li><li>它有许多好处<ul><li>是 TAB 键代码补全</li><li>是输入方法的左括号时浮现用法</li></ul></li></ul><h4 id="ida-ipython：https-github-com-james91b-ida-ipython"><a href="#ida-ipython：https-github-com-james91b-ida-ipython" class="headerlink" title="ida_ipython：https://github.com/james91b/ida_ipython"></a>ida_ipython：<a href="https://github.com/james91b/ida_ipython">https://github.com/james91b/ida_ipython</a></h4><h4 id="Python-editor：https-github-com-techbliss-Python-editor"><a href="#Python-editor：https-github-com-techbliss-Python-editor" class="headerlink" title="Python_editor：https://github.com/techbliss/Python_editor"></a>Python_editor：<a href="https://github.com/techbliss/Python_editor">https://github.com/techbliss/Python_editor</a></h4><h3 id="调试脚本或插件"><a href="#调试脚本或插件" class="headerlink" title="&lt;次要&gt;调试脚本或插件"></a>&lt;次要&gt;调试脚本或插件</h3><ul><li>idacode：<a href="https://github.com/ioncodes/idacode">https://github.com/ioncodes/idacode</a></li></ul><h3 id="对脚本和包进行管理"><a href="#对脚本和包进行管理" class="headerlink" title="&lt;次要&gt;对脚本和包进行管理"></a>&lt;次要&gt;对脚本和包进行管理</h3><ul><li>IDA 并不标准内置这些玩意。在互联网上，你可以看到 IDA 使用人员所设计的各类插件管理器</li></ul><ol><li>idapm</li><li>idaenv</li><li>idapkg</li><li>IDA-Plugin-Manager</li><li>Tarkus</li><li>qscript</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/04/24/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Flare-emu/%E5%85%A5%E9%97%A8/"/>
    <url>/blog/2025/04/24/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/6.%20%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/Flare-emu/%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/04/23/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/2.%20%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/3.%20Native/NDK%E5%BC%80%E5%8F%91/"/>
    <url>/blog/2025/04/23/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/2.%20%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/3.%20Native/NDK%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h1 id="NDK介绍"><a href="#NDK介绍" class="headerlink" title="NDK介绍"></a>NDK介绍</h1><h3 id="什么是NDK开发"><a href="#什么是NDK开发" class="headerlink" title="什么是NDK开发"></a>什么是NDK开发</h3><ol><li>Android NDK：Android NDK 是一套允许您使用 C 和 C++ 等语言，<strong>以原生代码实现部分应用的工具集</strong></li><li><code>用来做Native开发或者叫so库开发</code></li><li>.so文件</li><li>官方网站：<a href="https://developer.android.com/ndk">https://developer.android.com/ndk</a></li></ol><h3 id="安装NDK"><a href="#安装NDK" class="headerlink" title="安装NDK"></a>安装NDK</h3><ul><li>NDK是和SDK对应的，是对SDK的一个扩展，比如编译so文件，编译arm文件，需要用到这个NDK</li></ul><h4 id="方式1：通过SDK-manager-exe安装-这种方法应该需要翻墙"><a href="#方式1：通过SDK-manager-exe安装-这种方法应该需要翻墙" class="headerlink" title="方式1：通过SDK manager.exe安装(这种方法应该需要翻墙)"></a>方式1：通过SDK manager.exe安装(这种方法应该需要翻墙)</h4><p><img src="/blog/../../../../../images/android/%E5%9F%BA%E7%A1%80/native/1745412869094.jpg"></p><h4 id="方式2：已安装Android-Studio的情况下，可以通过Studio来进行安装"><a href="#方式2：已安装Android-Studio的情况下，可以通过Studio来进行安装" class="headerlink" title="方式2：已安装Android Studio的情况下，可以通过Studio来进行安装"></a>方式2：已安装Android Studio的情况下，可以通过Studio来进行安装</h4><p><img src="/blog/../../../../../images/android/%E5%9F%BA%E7%A1%80/native/1745412884421.jpg"></p><ul><li>此方法安装好之后，ndk-build在sdk目录&#x2F;ndk-bundle\build目录下</li><li>检测是否配置好环境： 终端输入：ndk-build</li></ul><h3 id="使用NDK"><a href="#使用NDK" class="headerlink" title="使用NDK"></a>使用NDK</h3><ol><li>在ndk根路径下\toolchains\arm-linux-androideabi-4.9\prebuilt\windows-x86_64\bin这个路径里面，有操作elf文件的各种命令， 将此路径放入path环境变量，即可用</li><li>cd进入c文件和mk文件的文件夹的父级目录，比如下面例子，进入jni目录下</li><li>输入ndk-build， 即可编译成功 ，得到ELF可执行程序</li></ol><h1 id="NDK开发"><a href="#NDK开发" class="headerlink" title="NDK开发"></a>NDK开发</h1><h3 id="1-创建android项目"><a href="#1-创建android项目" class="headerlink" title="1. 创建android项目"></a>1. 创建android项目</h3><h3 id="2-java代码中引入native相关代码"><a href="#2-java代码中引入native相关代码" class="headerlink" title="2. java代码中引入native相关代码"></a>2. java代码中引入native相关代码</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-type">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> </span>&#123;<br>    ...<br>    Toast.<span class="hljs-built_in">makeText</span>(<span class="hljs-keyword">this</span>, <span class="hljs-built_in">getString</span>(), Toast.LENGTH_SHORT).<span class="hljs-built_in">show</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> native <span class="hljs-type">String</span> <span class="hljs-title">getString</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><h3 id="3-生成-JNI-样式的标头文件-h文件"><a href="#3-生成-JNI-样式的标头文件-h文件" class="headerlink" title="3. 生成 JNI 样式的标头文件 &#x2F;.h文件"></a>3. 生成 JNI 样式的标头文件 &#x2F;.h文件</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">javah </span> -<span class="hljs-keyword">jni </span> native方法所在类的路径 <br>...yijindaxue\app\src\main\<span class="hljs-keyword">java&gt;javah </span> -<span class="hljs-keyword">jni </span> com.trip.yijindaxue.MainActivity<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* DO NOT EDIT THIS FILE - it is machine generated */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;jni.h&gt;</span>   <span class="hljs-comment">// 这个头文件，就表示可以使用所有的jni方法</span></span><br><span class="hljs-comment">/* Header for class com_trip_yijindaxue_MainActivity */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> _Included_com_trip_yijindaxue_MainActivity</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _Included_com_trip_yijindaxue_MainActivity</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __cplusplus</span><br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Class:     com_trip_yijindaxue_MainActivity</span><br><span class="hljs-comment"> * Method:    getString</span><br><span class="hljs-comment"> * Signature: ()Ljava/lang/String;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function">JNIEXPORT jstring JNICALL <span class="hljs-title">Java_com_trip_yijindaxue_MainActivity_getString</span></span><br><span class="hljs-function">  <span class="hljs-params">(JNIEnv *, jobject)</span></span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __cplusplus</span><br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="4-android根目录下创建JNI目录，并将第三步生成的文件移入此文件夹"><a href="#4-android根目录下创建JNI目录，并将第三步生成的文件移入此文件夹" class="headerlink" title="4. android根目录下创建JNI目录，并将第三步生成的文件移入此文件夹"></a>4. android根目录下创建JNI目录，并将第三步生成的文件移入此文件夹</h3><h3 id="5-创建和第三步生成的-h文件名字相同的-c文件"><a href="#5-创建和第三步生成的-h文件名字相同的-c文件" class="headerlink" title="5. 创建和第三步生成的.h文件名字相同的.c文件"></a>5. 创建和第三步生成的.h文件名字相同的.c文件</h3><p><img src="/blog/../../../../../images/android/%E5%9F%BA%E7%A1%80/native/1745496889178.jpg"></p><ul><li>注意<ul><li>c文件的头文件选择第三步创建的.h文件的名字</li><li>定义参数的名字</li><li>编写逻辑时注意，要使用变量或者方法，需要使用jni方法，比如使用字符串类型，需要这么用，且不能使用中文<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment"># include &quot;JNI_study.h&quot;</span><br><br><span class="hljs-keyword">JNIEXPORT </span><span class="hljs-keyword">jstring </span><span class="hljs-keyword">JNICALL </span><span class="hljs-keyword">Java_com_trip_yijindaxue_MainActivity_getString</span><br><span class="hljs-keyword"></span>  (<span class="hljs-keyword">JNIEnv </span>*env, <span class="hljs-keyword">jobject </span>obj)&#123;<br>        <span class="hljs-keyword">jstring </span>str = (*env)-&gt; NewStringUTF(*env, <span class="hljs-string">&quot;hello world&quot;</span>)<span class="hljs-comment">;  // 不能传汉字</span><br>        return str;<br>  &#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="6-按照编译可执行程序的方法将c编译成so文件-参考下面"><a href="#6-按照编译可执行程序的方法将c编译成so文件-参考下面" class="headerlink" title="6. 按照编译可执行程序的方法将c编译成so文件[参考下面]"></a>6. 按照编译可执行程序的方法将c编译成so文件[参考下面]</h3><h3 id="7-在java代码中引用调用so文件"><a href="#7-在java代码中引用调用so文件" class="headerlink" title="7. 在java代码中引用调用so文件"></a>7. 在java代码中引用调用so文件</h3><ol><li>在Java中申明一个Native方法， 如securityCheck方法<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> <span class="hljs-built_in">String</span> <span class="hljs-title function_">securityCheck</span>(Context context, <span class="hljs-built_in">String</span> <span class="hljs-built_in">str</span>);<br></code></pre></td></tr></table></figure></li><li>用System.loadLibrary()加载so库</li></ol><ul><li>System.loadLibrary()加载so文件流程 <ul><li>先读取so文件的.init_array段，<code>.init_array段里面做的是变量的初始化操作</code></li><li>再执行JNI_OnLoad函数，JNI_ONLoad是.so文件的初始函数</li><li>然后调用具体的native方法</li></ul></li><li>举例：全称是 libnative-lib.so<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">static</span> &#123;<br>    System.loadLibrary(<span class="hljs-string">&quot;native-lib&quot;</span>);    <span class="hljs-comment">//掐头去尾</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="编译可执行程序"><a href="#编译可执行程序" class="headerlink" title="编译可执行程序"></a>编译可执行程序</h1><h3 id="1-编写C语言"><a href="#1-编写C语言" class="headerlink" title="1. 编写C语言"></a>1. 编写C语言</h3><ul><li>txt文件编写c代码，后转化成c文件<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span>   # 头文件</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;  <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;欢迎来到...&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-编写android-mk代码"><a href="#2-编写android-mk代码" class="headerlink" title="2. 编写android.mk代码"></a>2. 编写android.mk代码</h3><ul><li>和c文件在同一个目录下</li><li>android.mk文件：构建工具，用来告知ndk-build，最终被build System解析多次 </li><li>也就是说android.mk文件允许我们将我们的源文件打包成一个models，这个models可以是静态或者动态库，只有动态库才能被copy到我们的应用程序apk包里，静态库可以被链接到动态库里 </li><li>可以在android.mk里定义多个models，可以将同一份source加进多个models中<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs makefile">// 文件必须以此开始，my-dir是build System提供的，是获取JNI文件路径的，可以返回一个包含android.mk文件的路径<br>LOCAL_PATH := <span class="hljs-variable">$(<span class="hljs-built_in">call</span> my-<span class="hljs-built_in">dir</span>)</span> <br>// CLEAR_VARS由build System提供，清理以LOCAL开头的文件，但是不会清理LOCAL_PATH路径<br><span class="hljs-keyword">include</span> <span class="hljs-variable">$(CLEAR_VARS)</span>  <br>LOCAL_ARM_MODE := arm //指令集类型，集编译后的指令集 ARM指令<br>LOCAL_MODULE    := JNIstudy  //模块名称，必须唯一，不能包含空格。如果是so，被编译后会自动改名为“lib模块名字.so”<br>LOCAL_SRC_FILES := JNIstudy.c <span class="hljs-comment">#源文件  .c或者.cpp</span><br><br>LOCAL_LDLIBS += -llog <span class="hljs-comment">#依赖库    </span><br><br>// <span class="hljs-comment">#指定编译文件的类型</span><br>//如果是编译so库即动态链接库，就写成：<span class="hljs-keyword">include</span> <span class="hljs-variable">$(BUILD_SHARED_LIBRARY)</span><br>// 如果是静态链接库，就写成：<span class="hljs-keyword">include</span> <span class="hljs-variable">$(BUILD_STATIC_LIBRARY)</span>  还是 <span class="hljs-keyword">include</span> <span class="hljs-variable">$(STATIC_LIBRARY)</span><br><span class="hljs-keyword">include</span> <span class="hljs-variable">$(BUILD_EXECUTABLE)</span> <br></code></pre></td></tr></table></figure></li></ul><h3 id="3-编写Application-mk文件代码"><a href="#3-编写Application-mk文件代码" class="headerlink" title="3. 编写Application.mk文件代码"></a>3. 编写Application.mk文件代码</h3><ul><li>和c文件在同一个目录下<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">APP_ABI := x86 armeabi-v7a    <span class="hljs-comment">// 写固定就行</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="4-编译-c文件"><a href="#4-编译-c文件" class="headerlink" title="4. 编译.c文件"></a>4. 编译.c文件</h3><ul><li>需要使用ndk-build, 参考如何使用</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/04/22/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/2.%20%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/6.%20C/2.%20C%E5%BA%93%E5%87%BD%E6%95%B0%E9%80%9F%E6%9F%A5/"/>
    <url>/blog/2025/04/22/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/2.%20%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/6.%20C/2.%20C%E5%BA%93%E5%87%BD%E6%95%B0%E9%80%9F%E6%9F%A5/</url>
    
    <content type="html"><![CDATA[<ul><li>c库速查：<img src="/blog/../../../../../images/android/%E5%9F%BA%E7%A1%80/c/c%E5%87%BD%E6%95%B0%E9%80%9F%E6%9F%A5.png"></li></ul><h2 id="lock-gettime"><a href="#lock-gettime" class="headerlink" title="lock_gettime"></a>lock_gettime</h2><ul><li>用于<code>获取有参数1 clock所指定的时钟的时间值</code>，<code>返回的时间值置于ts所指向的timespec结构</code>中，函数的返回值为-1或者0，分别代表函数调用失败以及成功。</li><li>函数声明和原型<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">clock_gettime</span><span class="hljs-params">(<span class="hljs-type">clockid_t</span> __clock, <span class="hljs-keyword">struct</span> timespec* __ts)</span></span>;<br></code></pre></td></tr></table></figure></li></ul><h4 id="clock"><a href="#clock" class="headerlink" title="clock"></a>clock</h4><ul><li>clock 有如下选项<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">#define CLOCK_REALTIME 0</span><br><span class="hljs-comment">#define CLOCK_MONOTONIC 1</span><br><span class="hljs-comment">#define CLOCK_PROCESS_CPUTIME_ID 2</span><br><span class="hljs-comment">#define CLOCK_THREAD_CPUTIME_ID 3</span><br><span class="hljs-comment">#define CLOCK_MONOTONIC_RAW 4</span><br><span class="hljs-comment">#define CLOCK_REALTIME_COARSE 5</span><br><span class="hljs-comment">#define CLOCK_MONOTONIC_COARSE 6</span><br><span class="hljs-comment">#define CLOCK_BOOTTIME 7</span><br><span class="hljs-comment">#define CLOCK_REALTIME_ALARM 8</span><br><span class="hljs-comment">#define CLOCK_BOOTTIME_ALARM 9</span><br><span class="hljs-comment">#define CLOCK_SGI_CYCLE 10</span><br><span class="hljs-comment">#define CLOCK_TAI 11</span><br></code></pre></td></tr></table></figure></li><li>比如CLOCK_REALTIME （0）代表当前真实时间，CLOCK_MONOTONIC_RAW（4）代表开机时间。clockID为7，即CLOCK_BOOTTIME，大意也是开机时间</li></ul><h4 id="timespec"><a href="#timespec" class="headerlink" title="timespec"></a>timespec</h4><ul><li>而 timespec 结构体如下<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">timespec</span>&#123;<br>  <span class="hljs-type">int</span> tv_sec;  <span class="hljs-comment">//秒</span><br>  <span class="hljs-type">int</span> tv_nsec;  <span class="hljs-comment">//纳秒</span><br>&#125;;<br></code></pre></td></tr></table></figure></li><li>IDA不支持timespec结构，需要手动设置，如下：<br><img src="/blog/../../../../../images/android/%E5%9F%BA%E7%A1%80/c/1745408082471.jpg"><br><img src="/blog/../../../../../images/android/%E5%9F%BA%E7%A1%80/c/1745408091559.jpg"><br><img src="/blog/../../../../../images/android/%E5%9F%BA%E7%A1%80/c/1745408105033.jpg"><br>接下来回到sub_59EC函数，在v2上右键<br><img src="/blog/../../../../../images/android/%E5%9F%BA%E7%A1%80/c/1745408111807.jpg"><br>声明为timespec结构体<br><img src="/blog/../../../../../images/android/%E5%9F%BA%E7%A1%80/c/1745408118879.jpg"><br><img src="/blog/../../../../../images/android/%E5%9F%BA%E7%A1%80/c/1745408122543.jpg"></li></ul><h2 id="dladdr"><a href="#dladdr" class="headerlink" title="dladdr"></a>dladdr</h2><ul><li>dladdr函数用于获取某个地址的符号信息，地址address的符号信息返回在dlip这个Dl_info结构体中。<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dladdr</span><span class="hljs-params">(<span class="hljs-type">void</span> *address, Dl_info *dlip)</span></span>;<br></code></pre></td></tr></table></figure></li><li>来看一下Dl_info结构体的定义<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> &#123;<br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *dli_fname;　　<span class="hljs-comment">//address所位于的SO文件其路径名</span><br><span class="hljs-type">void</span> *dli_fbase;<br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *dli_sname;<br><span class="hljs-type">void</span> dli_saddr;<br><span class="hljs-type">size_t</span> dli_size; / ELF only /<br><span class="hljs-type">int</span> dli_bind; / ELF only */<br><span class="hljs-type">int</span> dli_type;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h2 id="statfs结构体"><a href="#statfs结构体" class="headerlink" title="statfs结构体"></a>statfs结构体</h2><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-comment">/* 32-bit ARM or x86 (corresponds to the kernel&#x27;s statfs64 type). */</span><br><span class="hljs-comment">#define __STATFS64_BODY \</span><br>  uint32_t f_type; <span class="hljs-string">\</span><br>  uint32_t f_bsize; <span class="hljs-string">\</span><br>  uint64_t f_blocks; <span class="hljs-string">\</span><br>  uint64_t f_bfree; <span class="hljs-string">\</span><br>  uint64_t f_bavail; <span class="hljs-string">\</span><br>  uint64_t f_files; <span class="hljs-string">\</span><br>  uint64_t f_ffree; <span class="hljs-string">\</span><br>  fsid_t f_fsid; <span class="hljs-string">\</span><br>  uint32_t f_namelen; <span class="hljs-string">\</span><br>  uint32_t f_frsize; <span class="hljs-string">\</span><br>  uint32_t f_flags; <span class="hljs-string">\</span><br>  uint32_t f_spare[<span class="hljs-number">4</span>]; <span class="hljs-string">\</span><br><br><span class="hljs-comment">#endif</span><br></code></pre></td></tr></table></figure><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs smali">int sub_5624()<br>&#123;<span class="hljs-built_in"></span><br><span class="hljs-built_in">int </span>v0; // r1<span class="hljs-built_in"></span><br><span class="hljs-built_in">int </span>result; // r0<br>_BYTE v2[88]; // [sp+0h] [bp-68h] BYREF<br>memset(v2, 0, sizeof(v2));<br>v0 = statfs(<span class="hljs-string">&quot;/data&quot;</span>, (struct statfs *)v2);<br>result = -1;<span class="hljs-built_in"></span><br><span class="hljs-built_in">if </span>( v0 &gt;= 0 )<br>result = *(_DWORD *)&amp;v2[8] * *(_DWORD *)&amp;v2[4];<span class="hljs-built_in"></span><br><span class="hljs-built_in">return </span>result;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>v2在IDA中是byte数组，但实际上是statfs结构体</code>，*(_DWORD *)&amp;v2[8]即f_blocks，后者是f_bsize，语义分别为数据块的个数以及单个数据块的大小，两者相乘就是data目录的存储空间大小。</li></ul><h2 id="sysinfo函数"><a href="#sysinfo函数" class="headerlink" title="sysinfo函数"></a>sysinfo函数</h2><ul><li>函数功能为获取系统信息，信息返回在入参sysinfo结构体中。</li><li>函数声明和原型：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/sysinfo.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sysinfo</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> sysinfo *info)</span></span>;<br></code></pre></td></tr></table></figure></li><li>来看一下sysinfo结构体<figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sqf">struct sysinfo &#123;<br><span class="hljs-variable">__kernel_long_t</span> uptime;<br><span class="hljs-variable">__kernel_ulong_t</span> loads[<span class="hljs-number">3</span>];<br><span class="hljs-variable">__kernel_ulong_t</span> totalram;<br><span class="hljs-variable">__kernel_ulong_t</span> freeram;<br><span class="hljs-variable">__kernel_ulong_t</span> sharedram;<br><span class="hljs-variable">__kernel_ulong_t</span> bufferram;<br><span class="hljs-variable">__kernel_ulong_t</span> totalswap;<br><span class="hljs-variable">__kernel_ulong_t</span> freeswap;<br><span class="hljs-variable">__u16</span> procs;<br><span class="hljs-variable">__u16</span> pad;<br><span class="hljs-variable">__kernel_ulong_t</span> totalhigh;<br><span class="hljs-variable">__kernel_ulong_t</span> freehigh;<br><span class="hljs-variable">__u32</span> mem_unit;<br>char <span class="hljs-variable">_f</span>[<span class="hljs-number">20</span> - <span class="hljs-number">2</span> * <span class="hljs-built_in">sizeof</span>(<span class="hljs-variable">__kernel_ulong_t</span>) - <span class="hljs-built_in">sizeof</span>(<span class="hljs-variable">__u32</span>)];<br>&#125;;<br></code></pre></td></tr></table></figure></li><li>结构体中的uptime字段，uptime为开机至今经过的秒数</li></ul><h2 id="malloc和calloc"><a href="#malloc和calloc" class="headerlink" title="malloc和calloc"></a>malloc和calloc</h2><ul><li>参考：<a href="https://blog.csdn.net/zhongjiekangping/article/details/6162748">https://blog.csdn.net/zhongjiekangping/article/details/6162748</a></li><li>函数malloc()和calloc()都可以用来动态分配内存空间,但两者稍有区别。 </li><li><code>malloc()</code>函数有一个参数,即要分配的内存空间的大小: void *malloc(size_t size); </li><li><code>calloc()</code>函数有两个参数,分别为元素的数目和每个元素的大小,这两个参数的乘积就是要分配的内存空间的大小: void *calloc(size_t numElements,size_t sizeOfElement); </li><li>如果调用成功,函数malloc()和函数calloc()都将返回所分配的内存空间的首地址。</li></ul><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li><code>函数malloc()和函数calloc()的主要区别是前者不能初始化所分配的内存空间,而后者能</code>。<ul><li>如果由malloc()函数分配的内存空间原来没有被使用过，则其中的每一位可能都是0;反之,</li><li>如果这部分内存曾经被分配过,则其中可能遗留有各种各样的数据。</li><li>也就是说，使用malloc()函数的程序开始时(内存空间还没有被重新分配)能正常进行,但经过一段时间(内存空间还已经被重新分配)可能会出现问题。</li></ul></li><li>函数calloc()会将所分配的内存空间中的每一位都初始化为零<ul><li>也就是说,如果你是为字符类型或整数类型的元素分配内存,那麽这些元素将保证会被初始化为0;</li><li>如果你是为指针类型的元素分配内存,那麽这些元素通常会被初始化为空指针;</li><li>如果你为实型数据分配内存,则这些元素会被初始化为浮点型的零</li></ul></li><li>另外有一点不能直接看出的区别是，malloc 只管分配内存，并不能对所得的内存进行初始化，所以得到的一片新内存中，其值将是随机的。</li></ul><h2 id="memset"><a href="#memset" class="headerlink" title="memset"></a>memset</h2><ul><li>参考：<a href="https://www.runoob.com/cprogramming/c-function-memset.html">https://www.runoob.com/cprogramming/c-function-memset.html</a></li><li>C库函数**void <em>memset(void <em>str, int c, size_t n)</em></em> 复制字符c（一个无符号字符）到参数str所指向的字符串的前n个字符。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-type">char</span> str[<span class="hljs-number">50</span>];<br>   <span class="hljs-built_in">strcpy</span>(str,<span class="hljs-string">&quot;This is string.h library function&quot;</span>);<br>   <span class="hljs-built_in">puts</span>(str);<br>   <span class="hljs-built_in">memset</span>(str,<span class="hljs-string">&#x27;$&#x27;</span>,<span class="hljs-number">7</span>);<br>   <span class="hljs-built_in">puts</span>(str);<br>   <span class="hljs-keyword">return</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li>让我们编译并运行上面的程序，这将产生以下结果：<blockquote><p>This is string.h library function</p><p>$$$$$$$ string.h library function</p></blockquote></li></ul><h2 id="memcpy"><a href="#memcpy" class="headerlink" title="memcpy"></a>memcpy</h2><ul><li>参考：<a href="https://www.runoob.com/cprogramming/c-function-memcpy.html">https://www.runoob.com/cprogramming/c-function-memcpy.html</a></li><li>C库函数**void *memcpy(void *str1, const void *str2, size_t n)**从存储区str2复制n个字节到存储区str1。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"> </span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">char</span> *s=<span class="hljs-string">&quot;http://www.runoob.com&quot;</span>;<br>  <span class="hljs-type">char</span> d[<span class="hljs-number">20</span>];<br>  <span class="hljs-built_in">memcpy</span>(d, s<span class="hljs-number">+11</span>, <span class="hljs-number">6</span>);<span class="hljs-comment">// 从第 11 个字符(r)开始复制，连续复制 6 个字符(runoob)</span><br>  <span class="hljs-comment">// 或者 memcpy(d, s+11*sizeof(char), 6*sizeof(char));</span><br>  d[<span class="hljs-number">6</span>]=<span class="hljs-string">&#x27;\0&#x27;</span>;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, d);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>让我们编译并运行上面的程序，这将产生以下结果：<blockquote><p>runoob</p></blockquote></li></ul><h2 id="strcat"><a href="#strcat" class="headerlink" title="strcat"></a>strcat</h2><ul><li>参考：<a href="https://www.runoob.com/cprogramming/c-function-strcat.html">https://www.runoob.com/cprogramming/c-function-strcat.html</a></li><li>C库函数**char *strcat(char <em>dest, const char <em>src)</em></em> 把src所指向的字符串追加到dest所指向的字符串的结尾。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-type">char</span> src[<span class="hljs-number">50</span>], dest[<span class="hljs-number">50</span>];<br> <br>   <span class="hljs-built_in">strcpy</span>(src,  <span class="hljs-string">&quot;This is source&quot;</span>);<br>   <span class="hljs-built_in">strcpy</span>(dest, <span class="hljs-string">&quot;This is destination&quot;</span>);<br>   <span class="hljs-built_in">strcat</span>(dest, src);<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;最终的目标字符串： |%s|&quot;</span>, dest);<br>   <br>   <span class="hljs-keyword">return</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li>让我们编译并运行上面的程序，这将产生以下结果：<blockquote><p>最终的目标字符串： |This is destinationThis is source|</p></blockquote></li></ul><h2 id="strcpy"><a href="#strcpy" class="headerlink" title="strcpy"></a>strcpy</h2><ul><li>C库函数<code>char *strcpy(char *dest, const char *src)</code>把src所指向的字符串复制到dest。</li><li>需要注意的是如果目标数组 dest 不够大，而源字符串的长度又太长，可能会造成缓冲溢出的情况。</li><li>声明：char *strcpy(char *dest, const char *src)</li><li>参数：<ul><li>dest– 指向用于存储复制内容的目标数组。 </li><li>src– 要复制的字符串。</li></ul></li></ul><h2 id="LOWORD-HIWORD-LOBYTE-HIBYTE"><a href="#LOWORD-HIWORD-LOBYTE-HIBYTE" class="headerlink" title="LOWORD &#x2F; HIWORD &#x2F; LOBYTE &#x2F; HIBYTE"></a>LOWORD &#x2F; HIWORD &#x2F; LOBYTE &#x2F; HIBYTE</h2><ul><li><p>参考：<a href="https://blog.csdn.net/sinat_31054897/article/details/82144900">https://blog.csdn.net/sinat_31054897/article/details/82144900</a></p></li><li><p>在对一个进程的通信部分做分析时反复遇到了这四类函数，特做此记录。</p></li><li><p>这里的位是bit，8位则为2hex</p></li><li><p>OWORD：取32位数的低16位 </p></li><li><p>HIWORD：取32位数的高16位 </p></li><li><p>LOBYTE：取16位数的低8位&lt;是取得16进制数最低（最右边）那个字节的内容&gt;</p></li><li><p>HIBYTE： 取16位数的高8位&lt;是取得16进制数最高（最左边）那个字节的内容&gt;</p></li><li><p>ps：LOBYTE、HIBYTE应用于32位数时，会取32bit数的后16bit.<br><img src="/blog/../../../../../images/android/%E5%9F%BA%E7%A1%80/c/1745409598611.jpg"></p></li></ul><h2 id="异或与取反"><a href="#异或与取反" class="headerlink" title="异或与取反"></a>异或与取反</h2><ul><li>异或和取反都作用于位，并逐位执行操作。取反运算将二进制数 0 变成 1，1 变成 0 ；异或运算规定两个二进制数相同为 0 ，相异为 1 。用表格看起来更清楚。</li></ul><h3 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h3><p><img src="/blog/../../../../../images/android/%E5%9F%BA%E7%A1%80/c/0zm2912000k1el3qmA067.png"></p><h3 id="取反"><a href="#取反" class="headerlink" title="取反"></a>取反</h3><p><img src="/blog/../../../../../images/android/%E5%9F%BA%E7%A1%80/c/0zm4912000k1elavo104D.png"></p><ul><li>当异或中 Q 为 1时，不论 P 取 0 还是 1，此处异或和取反的结果相同。扩展到8位，或者说单字节时，也就是异或中 Q 为 0b11111111 （0xFF）时，此处异或和取反等价。byteA &amp; 0xFF &#x3D; ~byteA</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/04/22/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/2.%20%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/6.%20C/1.%20C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    <url>/blog/2025/04/22/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/2.%20%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/6.%20C/1.%20C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<ul><li>参考：<a href="https://www.runoob.com/cprogramming/c-intro.html">https://www.runoob.com/cprogramming/c-intro.html</a></li><li>c库速查：<img src="/blog/../../../../../images/android/%E5%9F%BA%E7%A1%80/c/c%E5%87%BD%E6%95%B0%E9%80%9F%E6%9F%A5.png"></li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul><li><p>1个字节(Byte) &#x3D; 8位(Bit); 1K&#x3D;1024B; 1M &#x3D; 1024K; 1G &#x3D; 1024M; 1T &#x3D; 1024G</p></li><li><p>整型 int： int a &#x3D; 100;</p></li><li><p>字符串 char *：char *s &#x3D; “yuanrenxue.com”;</p></li><li><p>字符串常量 不能修改: const char *ss &#x3D; “hello”;</p></li><li><p>浮点型 float： float &#x3D; “3.14”;</p></li><li><p>双精度浮点型 double： double &#x3D; “3.141592633764862”;</p></li><li><p>清空：name &#x3D; 0;</p></li><li><p>数组: </p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-built_in">int</span> num[<span class="hljs-number">5</span>];<br><span class="hljs-built_in">char</span> <span class="hljs-keyword">name</span>[<span class="hljs-number">5</span>];<br></code></pre></td></tr></table></figure></li><li><p>指针 int *</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs processing">指针指向的是内存地址<br><span class="hljs-type">int</span> *a_add = &amp;a;      <span class="hljs-comment">// 将a变量的内存地址复制给a_add</span><br>eg：<br><span class="hljs-type">int</span> a = <span class="hljs-number">100</span>;   <span class="hljs-comment">// a的内存地址为0x100000</span><br><span class="hljs-type">int</span> *<span class="hljs-built_in">add</span> = &amp;a;<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">add</span>);   <span class="hljs-comment">// 0x10000</span><br><span class="hljs-built_in">print</span>(*<span class="hljs-built_in">add</span>);  <span class="hljs-comment">//100</span><br></code></pre></td></tr></table></figure></li><li><p>其他数据类型：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int8_t</span> <span class="hljs-comment">//整形，占8位 1个字节</span><br><span class="hljs-type">int16_t</span> <span class="hljs-comment">//整形，占16位 2个字节</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _BYTE uint8</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _WORD uint16</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _DWORD uint32</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _QWORD uint64</span><br></code></pre></td></tr></table></figure></li><li><p>c++</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">MD5</span>::<span class="hljs-function"><span class="hljs-title">MD5</span>()</span><br><span class="hljs-variable">std</span>::<span class="hljs-variable">__ndk1</span>::<span class="hljs-function"><span class="hljs-title">init</span>()</span><br>*<span class="hljs-variable">a_add</span> + <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><ul><li>c和c++的关系<ul><li>c是c++的基础，c是子类</li><li>c：算法+数据结构</li></ul></li><li>注释： &#x2F;&#x2F; &#x2F;**&#x2F;</li><li>标识符：标识符的组成 | 哪些字符不能构成标识符</li><li>关键字</li><li>指针 <ul><li>指针&#x3D;地址 </li><li>指针的定义：用*标识： 类型(int char..) *指针变量名 </li><li>举例：char *p</li></ul></li><li>结构体<figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs excel">构造类型：自己构造的类型<br>标识符：struct<br>定义结构体变量的方式：<br>    <span class="hljs-number">1</span>. 声名结构体<span class="hljs-built_in">date</span>的同时定义变量date1<br>    <span class="hljs-number">2</span>. 声名结构体类型，在定义变量<br>    <span class="hljs-number">3</span>. 直接定义结构体类型变量<br>    举例： <br>        struct <span class="hljs-built_in">date</span>&#123;<br>        <span class="hljs-built_in">int</span> <span class="hljs-built_in">year</span>;<br>        <span class="hljs-built_in">int</span> <span class="hljs-built_in">month</span>;<br>        &#125;date1<br>结构体变量的引用<br>    .（普通）和 -&gt;(指针)<br>结构体类型的初始化<br>    struct <span class="hljs-built_in">date</span>&#123;  // <span class="hljs-built_in">date</span>是自己定义的数据类型，类似<span class="hljs-built_in">int</span>，float，<span class="hljs-built_in">char</span><br>        <span class="hljs-built_in">int</span> <span class="hljs-built_in">year</span>;<br>        <span class="hljs-built_in">int</span> <span class="hljs-built_in">month</span>;<br>    &#125;date1&#123;<span class="hljs-number">2021</span>, <span class="hljs-number">4.10</span>&#125;; // date1 是使用<span class="hljs-built_in">date</span>类型定义的变量<br></code></pre></td></tr></table></figure></li><li>共用体<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp">标识符：<span class="hljs-keyword">union</span><br>如何引用:  .（普通）和 -&gt;(指针)<br>初始化<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">date</span>&#123;<br>    <span class="hljs-type">int</span> year;<br>    <span class="hljs-type">float</span> month;<br>    &#125;;<br>数据存储：按最大类型的来<br>共用体和结构体的区别:<br>    占用内存：共用体占用的内存按照最大的，结构体是加起来的<br>共用体提供了多种访问形式<br></code></pre></td></tr></table></figure></li><li>文件操作<figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mel">一些概念：<br>    流：数据字节的集合<br>    输入流：<span class="hljs-keyword">fread</span>   输出流: <span class="hljs-keyword">fwrite</span><br>    文本流：ASCLL    二进制流：<span class="hljs-number">01010</span><br>文件内容：源文件、目标文件、可执行文件、头文件<br>文件的基本操作：<br>    FILE *fp;<br>    <span class="hljs-keyword">fopen</span>(打开文件)   <span class="hljs-keyword">fclose</span>(关闭文件)<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/04/20/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/2.%20%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/3.%20Native/so%E6%96%87%E4%BB%B6%E6%AE%B5%E4%BF%A1%E6%81%AF/"/>
    <url>/blog/2025/04/20/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/2.%20%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/3.%20Native/so%E6%96%87%E4%BB%B6%E6%AE%B5%E4%BF%A1%E6%81%AF/</url>
    
    <content type="html"><![CDATA[<ul><li>参考：<a href="https://www.51cto.com/article/714091.html">https://www.51cto.com/article/714091.html</a></li></ul><h2 id="LOAD段"><a href="#LOAD段" class="headerlink" title="LOAD段"></a>LOAD段</h2><ul><li>它表示的是共享文件（so文件）的加载部分，linker会根据load区段中的偏移信息把整个so文件加载起来</li></ul><h2 id="plt段"><a href="#plt段" class="headerlink" title="plt段"></a>plt段</h2><ul><li>plt也称为：过程链接表，主要用于函数和全局变量的调用</li><li>Plt它是延迟绑定，延迟绑定的规则为只有在符号被真正引用时才进行重定位，而不是在刚开始就对所有的动态符号进行重定位，一方面加快了程序的启动，将整个动态加载时间分摊到程序运行期间，另一方面，对于共享库中没有用到的符号，不再进行重定位，节省了重定位的时间，随着共享库的发展更新，这种优势变得越来越明显。</li><li>plt 的好处在于所有需要重定位的指令跳转都保存在 plt 中，便于集中管理、索引，另一方面，plt 还实现了判断符号是否重定位并提供动态链接器的调用功能，这是延迟绑定技术的核心部分。</li></ul><h2 id="init-array段"><a href="#init-array段" class="headerlink" title="init_array段"></a>init_array段</h2><ul><li><code>init_array是程序代码可以控制的最早时机</code>,<code>其次才加载Jni_onload</code>。这个也是很多在动态调试分析下断点的关键地方。</li><li>它包含着进程初始化所运行的函数指针数组。</li><li>它就如类对象的<code>初始化构造函数</code>。</li></ul><h2 id="fini-array段"><a href="#fini-array段" class="headerlink" title="fini_array段"></a>fini_array段</h2><ul><li>它存储的是<code>终止函数段（也就是函数指针数组）。它是程序代码中最后执行的代码</code>。</li><li>它就像类对象的<code>析构函数</code>。</li></ul><h2 id="bss段"><a href="#bss段" class="headerlink" title="bss段"></a>bss段</h2><ul><li>未初始化的数据 或者 初始化为0的数据  存储在.bss节</li><li>这个bss它包含着将出现在程序的内存映像中的未初始化数据，这个区段它不占用文件空间。</li><li>bss段的全称：Block Started by Symbol，它通常是指用来<code>存放程序中未初始化的全局变量</code>的一块内存区域，它是属于静态内存分配。<code>当程序运行结束后有系统释放</code>。</li></ul><h2 id="data段"><a href="#data段" class="headerlink" title="data段"></a>data段</h2><ul><li><code>数据段</code>：data segment.</li><li>它通常是指用来<code>存放程序中已初始化的全局变量</code>的一块内存区域，它是属于静态内存分配。</li><li>它在程序的内存映像中存在。</li><li>全局变量和静态变量存储在.data段</li></ul><p></p><h2 id="rodata段"><a href="#rodata段" class="headerlink" title="rodata段"></a>rodata段</h2><ul><li>它主要是<code>字符串常量段</code>。</li><li>它包含着只读数据，这些数据通常会参与进程映像的只读代码段。</li></ul><h2 id="text段"><a href="#text段" class="headerlink" title="text段"></a>text段</h2><ul><li>代码段（code segment&#x2F;text segment）通常是指用来<code>存放程序执行代码</code>的一块内存区域。 </li><li>这部分区域的大小在程序运行前就已经确定，并且内存区域通常属于只读(某些架构也允许代码段为可写，即允许修改程序)。 </li><li>在代码段中，也有可能包含一些只读的常数变量，例如字符串常量等。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/04/20/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/2.%20%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/%E5%85%B3%E7%B3%BB/"/>
    <url>/blog/2025/04/20/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/2.%20%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/%E5%85%B3%E7%B3%BB/</url>
    
    <content type="html"><![CDATA[<p>SO文件、Native开发和JNI（Java Native Interface）三者在Android开发中密切相关，尤其是在涉及到使用C或C++编写的代码与Java代码进行交互时。下面详细介绍这三者的关系及其各自的角色：</p><h2 id="SO文件"><a href="#SO文件" class="headerlink" title="SO文件"></a>SO文件</h2><p>定义：.so 文件是共享对象（Shared Object）文件，在Linux系统及其衍生系统（如Android）中用于存储可执行代码和数据，以便多个程序可以共享使用。在Android开发环境中，.so 文件通常包含用C&#x2F;C++编写的本地代码。<br>作用：在Android应用中，当你需要利用C&#x2F;C++来编写性能关键部分的代码时，这些代码会被编译成.so库文件，并通过JNI接口供Java层调用。</p><h2 id="Native开发"><a href="#Native开发" class="headerlink" title="Native开发"></a>Native开发</h2><p>定义：Native开发指的是直接使用C或C++等低级语言进行编程的过程。相比于Java这样的高级语言，Native代码可以直接访问硬件资源，提供更精细的控制，从而可能实现更高的性能优化。<br>作用：在Android开发中，Native开发主要用于那些对性能要求极高或者需要直接操作硬件资源的应用场景，比如游戏引擎、图像处理、音频处理等。</p><h2 id="JNI-Java-Native-Interface"><a href="#JNI-Java-Native-Interface" class="headerlink" title="JNI (Java Native Interface)"></a>JNI (Java Native Interface)</h2><p>定义：JNI 是Java提供的一个标准接口，允许Java代码与其他语言（主要是C&#x2F;C++）编写的代码之间进行交互。它是连接Java世界与Native世界的桥梁。<br>作用：<br>从Java到Native：允许Java代码调用由C&#x2F;C++编写的函数，这些函数通常被打包为.so库。<br>从Native到Java：也支持Native代码回调Java方法，使得Native代码能够与Java环境中的对象进行交互。<br>跨语言数据交换：提供了机制让Java和Native代码之间能够传递数据，包括基本类型、数组、字符串以及复杂的数据结构。</p><h2 id="三者关系"><a href="#三者关系" class="headerlink" title="三者关系"></a>三者关系</h2><p>集成流程：首先，开发者使用C&#x2F;C++进行Native开发，编写必要的功能模块。然后，这些模块被编译成针对特定平台（如ARM架构）的.so库文件。最后，通过JNI接口，这些.so库可以被Java应用程序调用，实现Java层与Native层之间的无缝集成。<br>应用场景举例：<br>在开发一款Android游戏时，可能会使用OpenGL ES API来进行图形渲染，这部分逻辑通常用C&#x2F;C++编写并打包为.so库。然后，通过JNI接口，Java层的游戏逻辑可以调用这些底层的渲染函数。<br>对于需要高性能计算的应用，如图像识别算法，也可以采用类似的方式，将核心算法以Native形式实现，并通过JNI暴露给上层的Java应用。<br>总之，<code>.so文件作为载体承载了Native代码，而JNI则提供了Java与Native代码之间通信的桥梁，使得两者能够有效地协作，满足不同类型应用的需求</code>。这种组合方式在提高应用性能的同时，也为开发者提供了灵活的选择空间。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>Native开发：使用NDK的工具集，开发生成so可执行文件</li><li>通过JNI 从java调用so方法</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/04/20/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/2.%20%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/5.%20ARM/ARM%E6%B1%87%E7%BC%96%E5%B8%B8%E7%94%A8%E7%9F%A5%E8%AF%86/"/>
    <url>/blog/2025/04/20/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/2.%20%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/5.%20ARM/ARM%E6%B1%87%E7%BC%96%E5%B8%B8%E7%94%A8%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="基本块概念"><a href="#基本块概念" class="headerlink" title="基本块概念"></a>基本块概念</h1><ul><li>基本块由一系列顺序执行的指令构成。每个基本块只有一个入口，就是开头第一句指令，也只有一个出口，就是结尾最后一句指令。执行时只能从其入口进入，从其出口离开。</li><li><code>只要基本块中第一条指令被执行了，那么基本块内所有执行都会按照顺序仅执行一次</code>。</li><li><code>基本块在控制流混淆和反混淆方面有很重要的作用，它是控制流的基本概念和最小单元</code>。基本块的定义本身就可以引申出一个基本的应用——如果我们只是想确认程序的执行流，比如<code>程序在哪里死循环了，又或者去除虚假控制流，那么并不需要逐行汇编做 trace，只需要确认基本块的入口点被执行，就能确认整个基本块都会被执行</code>，这种 trace 叫 <code>block trace</code>，相较于 code trace 开销要小很多，而且很多场景已经够用。</li></ul><h1 id="ARM32-APCS调用约定"><a href="#ARM32-APCS调用约定" class="headerlink" title="ARM32 APCS调用约定"></a>ARM32 APCS调用约定</h1><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-built_in">R0</span> -- <span class="hljs-built_in">R3</span> 这四个寄存器用于函数参数以及返回值的传递<br><span class="hljs-built_in">R4</span> -- <span class="hljs-built_in">R6</span>, <span class="hljs-built_in">R8</span>, <span class="hljs-built_in">R10</span>--<span class="hljs-built_in">R11</span>: 普通的通用寄存器<br><span class="hljs-built_in">R7</span>： 栈帧指针，指向前一个保存的栈帧和链接寄存器在栈上的地址<br><span class="hljs-built_in">R9</span>：操作系统保留<br><span class="hljs-built_in">R11</span>：FP，optional的，被称为FP<br><span class="hljs-built_in">R12</span>：<span class="hljs-built_in">IP</span><br><span class="hljs-built_in">R13</span>：<span class="hljs-built_in">SP</span>，栈顶指针<br><span class="hljs-built_in">R14</span>：LR，存放函数的返回地址<br><span class="hljs-built_in">R15</span>：PC，指向当前指令地址<br></code></pre></td></tr></table></figure><ol><li>LR寄存器存放了程序的返回地址</li><li>PC寄存器指向当前程序运行的位置。<code>根据三级流水线，PC指向一条指令，其实是在执行此指令的上面第二个指令</code></li><li>SP寄存器：余下的参数通过sp所指向的数据栈进行参数传递</li><li>当参数个数小于等于4个时，子程序间通过R0~R3来传递参数（<code>即R0-R3代表参数1-参数4</code>）<br>5.如果参数个数大于4个，<code>余下的参数通过sp所指向的数据栈进行参数传递。而函数的返回值总是通过R0传递回来。</code><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs tap">1. 首先 msp 查看堆栈SP寄存器的内存<br>2. 每四个字节就代表栈中的一个值，且为小端序&lt;每两位倒着排序&gt;。比如：<br>msp<br><br>&gt;-----------------------------------------------------------------------------&lt;<br>[21:14:20 744]sp=unidbg@0xbffff6d8, md5=c8023b520df3ea0aaaaa8918adcb4e9c, hex=00802240003020404080214000000000400000000100000000101b4000001b40408021400030204000f01a40a012feff00101b400030204048f7ffbf299d0040a402000000f01a4000001b40f4ffffff00a0034048a10340000000004c00214000000000000000000000000000000000<br>size: 112<br>0000:<span class="hljs-number"> 00 </span>80<span class="hljs-number"> 22 </span>40<span class="hljs-number"> 00 </span>30<span class="hljs-number"> 20 </span>40<span class="hljs-number"> 40 </span>80<span class="hljs-number"> 21 </span>40<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00    ..&quot;@.0 @@.!@....<br>0010:<span class="hljs-number"> 40 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 01 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>10 1B<span class="hljs-number"> 40 </span>00<span class="hljs-number"> 00 </span>1B<span class="hljs-number"> 40 </span>   @..........@...@<br>0020:<span class="hljs-number"> 40 </span>80<span class="hljs-number"> 21 </span>40<span class="hljs-number"> 00 </span>30<span class="hljs-number"> 20 </span>40<span class="hljs-number"> 00 </span>F0 1A<span class="hljs-number"> 40 </span>A0<span class="hljs-number"> 12 </span>FE FF    @.!@.0 @...@....<br>0030:<span class="hljs-number"> 00 </span>10 1B<span class="hljs-number"> 40 </span>00<span class="hljs-number"> 30 </span>20<span class="hljs-number"> 40 </span>48 F7 FF BF<span class="hljs-number"> 29 </span>9D<span class="hljs-number"> 00 </span>40    ...@.0 @H...)..@<br>0040: A4<span class="hljs-number"> 02 </span>00<span class="hljs-number"> 00 </span>00 F0 1A<span class="hljs-number"> 40 </span>00<span class="hljs-number"> 00 </span>1B<span class="hljs-number"> 40 </span>F4 FF FF FF    .......@...@....<br>0050:<span class="hljs-number"> 00 </span>A0<span class="hljs-number"> 03 </span>40<span class="hljs-number"> 48 </span>A1<span class="hljs-number"> 03 </span>40<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00 4C<span class="hljs-number"> 00 </span>21<span class="hljs-number"> 40 </span>   ...@H..@....L.!@<br>0060:<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00    ................<br>^-----------------------------------------------------------------------------^<br>参数5就是0x40228000<br>参数6即0x40203000<br>参数7是0x40218040<br>参数8是0<br>参数9是0x40<br></code></pre></td></tr></table></figure></li></ol><h1 id="ARM64-默认采用ATPCS调用约定"><a href="#ARM64-默认采用ATPCS调用约定" class="headerlink" title="ARM64 默认采用ATPCS调用约定"></a>ARM64 默认采用ATPCS调用约定</h1><p><img src="/blog/../../../../../images/android/%E5%9F%BA%E7%A1%80/arm/1.png"></p><ol><li>ARM64 有34个寄存器，包括31个通用寄存器、SP、PC、CPSR</li><li>前八个参数通过 X0-X7 或 W0-W7 传递，多于8个的参数通过堆栈传递，因此sub_80D8的两个参数对应于X&#x2F;W0和 X&#x2F;W1</li><li>x0-x7: 用于子程序调用时的参数传递和结果，X0还用于返回值传递。多余参数采用堆栈传递，64位返回结果采用X0表示，128位返回结果采用X1:X0表示</li><li>x0-x30 是31个通用整形寄存器。每个寄存器可以存取一个64位大小的数。 当使用 x0 - x30 访问时，它就是一个64位的数。当使用 w0 - w30 访问时，访问的是这些寄存器的低32位</li><li>X8：用于保存子程序返回地址， 尽量不要使用。 </li><li>X9-X15：临时寄存器，使用时不需要保存。 </li><li>X16 - X17：子程序内部调用寄存器，使用时不需要保存，尽量不要使用。 </li><li>X18：平台寄存器，它的使用与平台相关，尽量不要使用。 </li><li>X19 - X28：临时寄存器，使用时必须保存。 </li><li>X29：帧指针寄存器，用于连接栈帧，使用时需要保存。 </li><li>X30：链接寄存器 LR </li><li>X31：堆栈指针寄存器 SP 或零寄存器 ZXR</li></ol><h1 id="汇编语言之序言和尾声"><a href="#汇编语言之序言和尾声" class="headerlink" title="汇编语言之序言和尾声"></a>汇编语言之序言和尾声</h1><ul><li>函数开头的几行代码叫函数序言，与之对应，函数结尾处的几行代码叫函数尾声。</li></ul><h3 id="压栈"><a href="#压栈" class="headerlink" title="压栈"></a>压栈</h3><ul><li>序言的操作</li><li>arm64压栈<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">sub</span>     <span class="hljs-built_in">sp</span>, <span class="hljs-built_in">sp</span>,<span class="hljs-number">#0x30</span>  首先将<span class="hljs-built_in">sp</span>地址减去 <span class="hljs-number">0x30</span>,申请<span class="hljs-number">6</span>个寄存器的地址空间<br><span class="hljs-symbol">stp</span>     <span class="hljs-built_in">x9</span>,<span class="hljs-built_in">x10</span>, [<span class="hljs-built_in">sp</span>]  将<span class="hljs-built_in">x9</span>，和 <span class="hljs-built_in">x10</span>入栈<br><span class="hljs-symbol">stp</span>     <span class="hljs-built_in">x11</span>,<span class="hljs-built_in">x12</span>, [<span class="hljs-built_in">sp</span>, <span class="hljs-number">#0x10</span>]  由于第二步骤入栈两个寄存器，将<span class="hljs-built_in">X11</span>和<span class="hljs-built_in">X12</span>入栈，但是入栈地址从<span class="hljs-built_in">sp</span>+ <span class="hljs-number">0x10</span>入栈<br><span class="hljs-symbol">stp</span>     <span class="hljs-built_in">x13</span>,<span class="hljs-built_in">x14</span>, [<span class="hljs-built_in">sp</span>, <span class="hljs-number">#0x20</span>]  由于第三步骤入栈两个寄存器，将<span class="hljs-built_in">X11</span>和<span class="hljs-built_in">X12</span>入栈，但是入栈地址从<span class="hljs-built_in">sp</span>+ <span class="hljs-number">0x20</span>入栈<br></code></pre></td></tr></table></figure></li></ul><h3 id="出栈"><a href="#出栈" class="headerlink" title="出栈"></a>出栈</h3><ul><li>尾声的操作</li><li>arm64出栈<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">ldp</span>     <span class="hljs-built_in">x9</span>, <span class="hljs-built_in">x10</span>,[<span class="hljs-built_in">sp</span>]  <span class="hljs-built_in">sp</span>指向的栈顶位置，入栈时首先时<span class="hljs-built_in">x9</span>和<span class="hljs-built_in">x10</span>，索引先将<span class="hljs-built_in">x9</span>，和<span class="hljs-built_in">x10</span>出栈<br><span class="hljs-symbol">ldp</span>     <span class="hljs-built_in">x11</span>,<span class="hljs-built_in">x12</span>,[<span class="hljs-built_in">sp</span>, <span class="hljs-number">#0x10</span>]   将<span class="hljs-built_in">x11</span>和<span class="hljs-built_in">X12</span>出栈，出栈的位置为<span class="hljs-built_in">sp</span>+<span class="hljs-number">0x10</span><br><span class="hljs-symbol">ldp</span>     <span class="hljs-built_in">x13</span>,<span class="hljs-built_in">x14</span>,[<span class="hljs-built_in">sp</span>, <span class="hljs-number">#0x20</span>]   将<span class="hljs-built_in">x13</span>和<span class="hljs-built_in">x14</span>出栈，出栈位置 为<span class="hljs-built_in">sp</span>+<span class="hljs-number">0x20</span><br><span class="hljs-keyword">add</span>     <span class="hljs-built_in">sp</span>, <span class="hljs-built_in">sp</span>, <span class="hljs-number">#0x30</span>         <span class="hljs-number">6</span>个寄存器栈都出完，需要更新<span class="hljs-built_in">sp</span>地址， <span class="hljs-built_in">sp</span><span class="hljs-symbol">=sp</span>+<span class="hljs-number">0x30</span>，将<span class="hljs-built_in">SP</span>恢复<br></code></pre></td></tr></table></figure></li></ul><h3 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h3><ul><li>**<code>函数序言</code><strong>： 会修改<code>SP寄存器</code>，让它的值更小，</strong>因为栈默认是从高地址往低地址方向增长，所以这是开辟栈空间的动作，一般称为<code>开栈</code>**。新开辟的栈内存用于存储局部变量以及不想被污染的寄存器。局部变量不必多说，<code>不想被污染的寄存器指的是在当前函数中这些寄存器可能被使用，进而其值会被改变，但我们希望在函数结束后可以恢复这些寄存器，这可以理解为备份</code></li><li>比如下面是一个普通 ARM64 函数的序言部分<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">.text:</span><span class="hljs-number">00000000000311</span><span class="hljs-built_in">D4</span> FF <span class="hljs-number">83</span> <span class="hljs-number">02</span> <span class="hljs-built_in">D1</span>                 <span class="hljs-keyword">SUB</span>             <span class="hljs-built_in">SP</span>, <span class="hljs-built_in">SP</span>, <span class="hljs-number">#0xA0</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00000000000311</span><span class="hljs-built_in">D8</span> FC <span class="hljs-number">6</span>F <span class="hljs-number">04</span> A9                 STP             <span class="hljs-built_in">X28</span>, <span class="hljs-built_in">X27</span>, [<span class="hljs-built_in">SP</span>,<span class="hljs-number">#0x90</span>+var_50]<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00000000000311</span>DC FA <span class="hljs-number">67</span> <span class="hljs-number">05</span> A9                 STP             <span class="hljs-built_in">X26</span>, <span class="hljs-built_in">X25</span>, [<span class="hljs-built_in">SP</span>,<span class="hljs-number">#0x90</span>+var_40]<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00000000000311</span>E0 F8 <span class="hljs-number">5</span>F <span class="hljs-number">06</span> A9                 STP             <span class="hljs-built_in">X24</span>, <span class="hljs-built_in">X23</span>, [<span class="hljs-built_in">SP</span>,<span class="hljs-number">#0x90</span>+var_30]<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00000000000311</span>E4 <span class="hljs-built_in">F6</span> <span class="hljs-number">57</span> <span class="hljs-number">07</span> A9                 STP             <span class="hljs-built_in">X22</span>, <span class="hljs-built_in">X21</span>, [<span class="hljs-built_in">SP</span>,<span class="hljs-number">#0x90</span>+var_20]<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00000000000311</span>E8 <span class="hljs-built_in">F4</span> <span class="hljs-number">4</span>F <span class="hljs-number">08</span> A9                 STP             <span class="hljs-built_in">X20</span>, <span class="hljs-built_in">X19</span>, [<span class="hljs-built_in">SP</span>,<span class="hljs-number">#0x90</span>+var_10]<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00000000000311</span>EC FD <span class="hljs-number">7</span>B <span class="hljs-number">09</span> A9                 STP             <span class="hljs-built_in">X29</span>, <span class="hljs-built_in">X30</span>, [<span class="hljs-built_in">SP</span>,<span class="hljs-number">#0x90</span>+var_s0]<br><br></code></pre></td></tr></table></figure><blockquote><p><code>开辟了 0xA0 字节的栈空间，然后先将 X19 - X30 的值放到了栈里，这可以理解为备份。其余的栈空间在程序中用于存放局部变量。</code></p><p>函数尾声是函数序言的逆操作，比如我们举例的这个函数，将 X19 - X30 完完整整的从栈中取出，即恢复它们为进入函数前的状态，然后修改 SP 寄存器，同样回到原先状态，和函数序言形成对应，开多少栈就清多少，即清栈。</p></blockquote></li><li>比如下面是一个普通 ARM32 函数的序言部分<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs armasm">参考：http:<span class="hljs-comment">//blog.chinaunix.net/uid-69947851-id-5825875.html</span><br><br><span class="hljs-number">8450</span>: e92d4800 <span class="hljs-keyword">push</span> &#123;<span class="hljs-built_in">fp</span>, <span class="hljs-built_in">lr</span>&#125;  # 将<span class="hljs-built_in">lr</span>和<span class="hljs-built_in">fp</span>压栈<br><span class="hljs-number">8454</span>: e28db004 <span class="hljs-keyword">add</span> <span class="hljs-built_in">fp</span>, <span class="hljs-built_in">sp</span>, <span class="hljs-number">#4</span>  # 设置新的<span class="hljs-built_in">fp</span>地址(这里的<span class="hljs-built_in">fp</span>位置可能和上面描述有所不同，但原理一样)<br><span class="hljs-number">8458</span>: e24dd008 <span class="hljs-keyword">sub</span> <span class="hljs-built_in">sp</span>, <span class="hljs-built_in">sp</span>, <span class="hljs-number">#8</span>  # 开辟局部变量地址空间<br><span class="hljs-number">845</span>c: e5<span class="hljs-number">0b000</span>8 <span class="hljs-keyword">str</span> <span class="hljs-built_in">r0</span>, [<span class="hljs-built_in">fp</span>, #-<span class="hljs-number">8</span>]  # 给局部变量赋值 处置，这里<span class="hljs-built_in">fp</span> -<span class="hljs-number">8</span> 是argc<br><span class="hljs-number">8460</span>: e5<span class="hljs-number">0b100</span>c <span class="hljs-keyword">str</span> <span class="hljs-built_in">r1</span>, [<span class="hljs-built_in">fp</span>, #-<span class="hljs-number">12</span>] # 给局部变量赋值 处置，这里<span class="hljs-built_in">fp</span> -<span class="hljs-number">12</span> 是argv<br><span class="hljs-number">8464</span>: e30804d4 movw <span class="hljs-built_in">r0</span>, <span class="hljs-number">#34004</span> <span class="hljs-comment">; 0x84d4  # 初始化函数的第一个传参，r0</span><br><span class="hljs-number">8468</span>: e3400000 <span class="hljs-keyword">movt</span> <span class="hljs-built_in">r0</span>, <span class="hljs-number">#0</span><br><span class="hljs-number">846</span>c: ebffff93 <span class="hljs-keyword">bl</span> <span class="hljs-number">82</span><span class="hljs-built_in">c0</span> &lt;_init+<span class="hljs-number">0x20</span>&gt;     # 这里利用<span class="hljs-number">0x82c0</span> 间接跳转到main_test函数<br><span class="hljs-number">8470</span>: e3a03000 <span class="hljs-keyword">mov</span> <span class="hljs-built_in">r3</span>, <span class="hljs-number">#0</span><br><span class="hljs-number">8474</span>: e1a00003 <span class="hljs-keyword">mov</span> <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">r3</span>                # 将返回值 赋值给<span class="hljs-built_in">r0</span>,相当于return <span class="hljs-number">0</span><span class="hljs-comment">;</span><br><span class="hljs-number">8478</span>: e24bd004 <span class="hljs-keyword">sub</span> <span class="hljs-built_in">sp</span>, <span class="hljs-built_in">fp</span>, <span class="hljs-number">#4</span>            # 还原栈<br><span class="hljs-number">847</span>c: e8bd8800 <span class="hljs-keyword">pop</span> &#123;<span class="hljs-built_in">fp</span>, <span class="hljs-built_in">pc</span>&#125;              # 弹出 上一个函数的<span class="hljs-built_in">fp</span>和<span class="hljs-built_in">lr</span>返回地址到<span class="hljs-built_in">pc</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h3><ul><li><strong><code>函数尾声</code><strong>：<code>函数序言的逆操作</code>，比</strong>如我们举例的这个函数，将不想被污染的寄存器 完完整整的从栈中取出，即恢复它们为进入函数前的状态，然后修改 SP 寄存器</strong>，同样回到原先状态，和函数序言形成对应，<code>开多少栈就清多少，即清栈</code>。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/04/20/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/2.%20%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/5.%20ARM/ARM%E6%B1%87%E7%BC%96%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
    <url>/blog/2025/04/20/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/2.%20%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/5.%20ARM/ARM%E6%B1%87%E7%BC%96%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h1><h2 id="跳转指令：B"><a href="#跳转指令：B" class="headerlink" title="跳转指令：B&lt;Branch分支&gt;"></a>跳转指令：B&lt;Branch分支&gt;</h2><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">B</span> 无条件跳转       <br><span class="hljs-keyword">BL</span> 带链接的无条件跳转  <br><span class="hljs-keyword">BX</span> 带状态切换的无条件跳转   根据目标地址最低位切换状态（<span class="hljs-meta">arm</span>/<span class="hljs-meta">thumb</span>）<br><span class="hljs-keyword">BLX</span> 带链接和状态切换的无条件跳转<br><span class="hljs-keyword">B</span> loc_地址<br><span class="hljs-symbol">BEQ</span>,BNE<br></code></pre></td></tr></table></figure><ul><li><code>不带x的，跳转之后就不回来了</code></li><li>B带上X，才表示，即将执行的指令，会发生一个指令集的变化，即arm变成thumb或者thumb变成arm<ul><li>BLX：LR和T，pc会变 </li><li>BL：LR和PC会变 </li><li>BX：T和PC会变</li></ul></li><li>BL label函数调用，我们回顾一下BL指令所作的两件事<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-number">1</span>. 将下一行指令的地址放到 <span class="hljs-built_in">LR</span><br><span class="hljs-number">2</span>. 跳转到 label<br><span class="hljs-symbol">eg</span>：<br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000029</span>D90                 <span class="hljs-keyword">BL</span>              sub_29D9C<br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000029</span>D94                 <span class="hljs-keyword">ADD</span>             <span class="hljs-built_in">X1</span>, <span class="hljs-built_in">X0</span>, <span class="hljs-number">#0x34</span> <span class="hljs-comment">; &#x27;4&#x27;</span><br>此时BL之后，<span class="hljs-built_in">LR</span>寄存器=下一行指令地址为<span class="hljs-number">0x29D94</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="数据传送指令"><a href="#数据传送指令" class="headerlink" title="数据传送指令"></a>数据传送指令</h2><ul><li>MOV：将<code>立即数或寄存器的数据</code>传送到目标寄存器 ←<blockquote><p>MOV R0, #8        R0&#x3D;8</p></blockquote></li></ul><h2 id="数据算术运算指令"><a href="#数据算术运算指令" class="headerlink" title="数据算术运算指令"></a>数据算术运算指令</h2><ul><li>ADD,SUB,MUL,DIV </li><li>有符号，无符号运算；带进位运算</li></ul><h2 id="数据逻辑运算指令"><a href="#数据逻辑运算指令" class="headerlink" title="数据逻辑运算指令"></a>数据逻辑运算指令</h2><ul><li>与：AND     全1出1</li><li>或：ORR    有1出1</li><li>异或：EOR  相同为0，不同为1                               </li><li>移位：<ul><li>实质是乘，除，类似于小数点移位，但相反。小数点左移，数变小；右移变大。</li><li>但逻辑移位，左移变大，右移变小，且按2的倍数进行，因为是2进制。</li><li>LSL：逻辑左移</li><li>LSR：逻辑右移<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">LSL</span> <span class="hljs-built_in">R0</span>,<span class="hljs-built_in">R1</span>，#<span class="hljs-number">2</span> <span class="hljs-built_in">R0</span>=<span class="hljs-built_in">R1</span>*<span class="hljs-number">4</span>   <br>LSR <span class="hljs-built_in">R0</span>,<span class="hljs-built_in">R1</span>，#<span class="hljs-number">2</span>   <span class="hljs-built_in">R0</span>=<span class="hljs-built_in">R1</span>*<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="比较指令"><a href="#比较指令" class="headerlink" title="比较指令"></a>比较指令</h2><ul><li>CMP：比较</li><li>CMP R0 #0 R0寄存器中的值与0比较</li><li>标志位：如z位，这个都可以在动态调试时，寄存器窗口看到</li></ul><h2 id="存储器与寄存器交互数据指令"><a href="#存储器与寄存器交互数据指令" class="headerlink" title="存储器与寄存器交互数据指令"></a>存储器与寄存器交互数据指令</h2><ul><li>存储器（主存，内存）</li><li>寄存器中放的数据：可以是字符串，可以是数，也可以是一个地址，它可以放各种类型的数据 </li><li>存储地址单元：地址（如0x00004000）与地址中存在的值</li><li>堆，队列：数据结构，栈是竖的，后进先出，且只能从栈顶依次填入数据</li></ul><h3 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h3><ul><li><code>从后往前读，从前往后写</code></li><li>寄存器存小数据，栈存大数据</li></ul><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><ul><li><p>LDR</p><ul><li>从存储器中加载数据到寄存器 ← <code>Load</code></li><li>LDR R8,[R9,#4] R8为待加载数据的寄存器，加载值为R9+0x4所指向的存储单元 R8&#x3D;*(R9+4)</li><li><code>LDR一般用于进行压栈操作</code></li></ul></li><li><p>STR</p><ul><li>将寄存器的数据存储到存储器 → <code>Store</code></li><li>STR R8,[R9,#4] 将R8寄存器的数据存储到R9+0x4指向的存储单元  *(R9+4)&#x3D;R8</li></ul></li><li><p>LDM：</p><ul><li>将存储器的数据加载到一个寄存器列表 →</li><li>LDM R0,｛R1-R3｝将R0指向的存储单元的数据依次加载到R1,R2,R3寄存器</li></ul></li><li><p>SWP：</p><ul><li>将寄存器与存储器之间的数据进行交换</li><li>SWP R1, R1 [R0] 将R1寄存器与R0指向的存储单元的内容进行交换</li></ul></li><li><p>STM：将一个寄存器列表的数据存储到指定的存储器  ←</p></li><li><p>PUSH:将寄存器值推入堆栈  <code>压栈</code>–》</p></li><li><p>POP：将堆栈值推出到寄存器   <code>出栈</code> 《–</p></li></ul><h2 id="ARM64读取-存储指令"><a href="#ARM64读取-存储指令" class="headerlink" title="ARM64读取&amp;存储指令"></a>ARM64读取&amp;存储指令</h2><ul><li>最基础的读取和存储指令是 LDR 和 STR，即 Load &#x2F; Store Register 的缩写。</li></ul><h3 id="读取或存储的大小"><a href="#读取或存储的大小" class="headerlink" title="读取或存储的大小"></a>读取或存储的大小</h3><ul><li>读取或存储的长度由两方面决定</li></ul><ol><li>是寄存器是 X 还是 W ，X 即 64 比特，W 即 32 比特<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs armasm">比如下面这条指令会从&lt;address&gt; 这个地址加载 <span class="hljs-number">32</span> 比特到 <span class="hljs-built_in">W0</span> 寄存器。<br><span class="hljs-keyword">LDR</span> <span class="hljs-built_in">W0</span>,[&lt;address&gt;]<br>下面这条指令会从&lt;address&gt; 加载 <span class="hljs-number">64</span> 比特到 <span class="hljs-built_in">X0</span> 寄存器<br><span class="hljs-keyword">LDR</span> <span class="hljs-built_in">X0</span>,[&lt;address&gt;]<br></code></pre></td></tr></table></figure></li><li>是指令的后缀，LDR&#x2F;STR 可以添加后缀，限制加载数据的长度<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs armasm">比如下面的指令将 <span class="hljs-built_in">W0</span> 最低的一个字节存储到&lt;address&gt;，<span class="hljs-keyword">B</span> 即 byte 之意<br><span class="hljs-keyword">STRB</span> <span class="hljs-built_in">W0</span>, [&lt;address&gt;]<br>下面这条指令将 <span class="hljs-built_in">W0</span> 较低的半字存储到&lt;address&gt;，H 即 halfword 之意。<br><span class="hljs-keyword">STRH</span> <span class="hljs-built_in">W0</span>, [&lt;address&gt;]<br></code></pre></td></tr></table></figure></li></ol><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><ul><li>加载和存储的地址被放在方括号内，比如下面这样<blockquote><p>LDR W0,[X1]</p></blockquote></li><li>这其中有好几种寻址模式<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs armasm">基础寄存器寻址 - 这是最简单的一种形式，即地址是一个寄存器。<br>地址偏移寻址 - 在基地址上加一个偏移，比如<span class="hljs-keyword">LDR</span> <span class="hljs-built_in">W0</span>,[<span class="hljs-built_in">X1</span>,<span class="hljs-number">#12</span>]，<span class="hljs-built_in">X1</span> 即基地址，<span class="hljs-number">12</span> 是偏移。在高级语言的数组处理中，诸如arr[index + <span class="hljs-number">12</span>]这样的表达式，意味着 arr 中第 index + <span class="hljs-number">12</span> 个元素，<span class="hljs-number">12</span> 代表的长度，尺寸依据元素大小决定，而我们的地址偏移模式中，偏移的单位总是为 <span class="hljs-number">1</span> 字节。换句话说，intarray[<span class="hljs-number">1</span>] 在汇编代码层面是[base,<span class="hljs-number">#4</span>],longarray[<span class="hljs-number">1</span>]是 [base,<span class="hljs-number">#8</span>]。需要注意，偏移也可以是寄存器。这种寻址模式很适合处理结构体。<br>前缀式寻址 - 比如<span class="hljs-keyword">LDR</span> <span class="hljs-built_in">W0</span>,[<span class="hljs-built_in">X1</span>,<span class="hljs-number">#12</span>]!，尾部感叹号就是它的标识。首先寄存器 <span class="hljs-built_in">X1</span> 更新为 <span class="hljs-built_in">X1</span> + <span class="hljs-number">12</span> 的值，然后再像正常的地址偏移模式那样处理。与之对应的是后缀式寻址模式，比如<span class="hljs-keyword">LDR</span> <span class="hljs-built_in">W0</span>,[<span class="hljs-built_in">X1</span>],<span class="hljs-number">#12</span>，多出来的第三个操作数就是标识。首先正常寻址，像地址偏移模式那样，在结束后更新寄存器的值，比如此处 <span class="hljs-built_in">X1</span> + <span class="hljs-number">12</span>。前缀式和后缀式在表达式中很常见，比如i++和++i就是经典应用。 <br><br></code></pre></td></tr></table></figure></li></ul><h3 id="读取和加载一对寄存器LDP-和-STP"><a href="#读取和加载一对寄存器LDP-和-STP" class="headerlink" title="读取和加载一对寄存器LDP 和 STP"></a>读取和加载一对寄存器LDP 和 STP</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs armasm">只能对一条指令做存储和读取太慢了，如果我们想把六个寄存器保存到栈里，就需要 <span class="hljs-number">6</span> 条指令，这太低效了。LDP 和 STP 缓解了这个问题，即一次性加载或存储两个指令，两个即一对，即 pair 之意，所以指令名叫 LDP 、STP，即 Load Pair 和 Store Pair 。<br>比如LDP <span class="hljs-built_in">W3</span>,<span class="hljs-built_in">W7</span>,[<span class="hljs-built_in">X0</span>]，从 <span class="hljs-built_in">X0</span> 地址加载四字节到 <span class="hljs-built_in">W3</span> 寄存器，再从 <span class="hljs-built_in">X0</span> + <span class="hljs-number">4</span> 加载四字节到 <span class="hljs-built_in">W7</span> 寄存器。<br>比如STP <span class="hljs-built_in">X0</span>,<span class="hljs-built_in">X1</span>,[<span class="hljs-built_in">SP</span>,#-<span class="hljs-number">16</span>]!，<span class="hljs-built_in">X0</span> 存储到 <span class="hljs-built_in">SP</span> - <span class="hljs-number">16</span>，<span class="hljs-built_in">X1</span> 存储到 <span class="hljs-built_in">SP</span> - <span class="hljs-number">8</span>，别忘了 X 系列寄存器占 <span class="hljs-number">8</span> 字节。读者会注意到，STP 在入栈和出栈上用的非常多，从栈的语义上，即将 <span class="hljs-built_in">X0</span>、<span class="hljs-built_in">X1</span> 入栈。<br>比如LDP <span class="hljs-built_in">X0</span>,<span class="hljs-built_in">X1</span>,[<span class="hljs-built_in">SP</span>],<span class="hljs-number">#16</span>，从 <span class="hljs-built_in">SP</span> 地址加载 <span class="hljs-number">8</span> 字节到 <span class="hljs-built_in">X0</span> 寄存器，从 <span class="hljs-built_in">SP</span> + <span class="hljs-number">8</span> 地址加载 <span class="hljs-number">8</span> 字节到 <span class="hljs-built_in">X1</span> 寄存器，然后 <span class="hljs-built_in">SP</span> 更新为 <span class="hljs-built_in">SP</span> + <span class="hljs-number">16</span>。从栈的语义上，即将 <span class="hljs-built_in">X0</span>，<span class="hljs-built_in">X1</span> 出栈。<br>关于栈还有一点，ARM64 上栈指针必须 <span class="hljs-number">128</span> 比特对齐，所以对它的操作以 <span class="hljs-number">16</span> 字节为单位。<br></code></pre></td></tr></table></figure><h2 id="ADR和ADRP和ADRL"><a href="#ADR和ADRP和ADRL" class="headerlink" title="ADR和ADRP和ADRL"></a>ADR和ADRP和ADRL</h2><ul><li>参考：<a href="https://www.yuque.com/docs/share/5a79296a-5e06-43ab-b719-56f54b52d6e7">https://www.yuque.com/docs/share/5a79296a-5e06-43ab-b719-56f54b52d6e7</a></li><li><img src="/blog/../../../../../images/android/%E5%9F%BA%E7%A1%80/arm/1745498615644.jpg"></li></ul><h3 id="ADR"><a href="#ADR" class="headerlink" title="ADR"></a>ADR</h3><ul><li>ADR是小范围的地址读取指令，它将基于 PC 相对偏移的一个地址值读取到寄存器中。</li><li>假设一条 ADR 指令的机器码是 CB 00 00 10，我们该如何解析它？首先按照小端序，将机器码反转成 10 00 00 CB，查看其二进制，可以使用 Windows 自带的计算器。</li><li>和 ADR 的编码规则进行对应，分成五截： 0 00 10000 0000000000000000110 01011<figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">immlo</span> <span class="hljs-operator">=</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">immhi</span> <span class="hljs-operator">=</span> <span class="hljs-number">110</span><br><span class="hljs-attribute">Rd</span> <span class="hljs-operator">=</span> <span class="hljs-number">01011</span><br></code></pre></td></tr></table></figure></li><li>其实这就是手动的反汇编过程，imm是 immediate 立即数的缩写，lo&#x2F;hi是 low&#x2F;high 的缩写，连起来解释就是立即数的较低和较高位，因此这个立即数的值是 0b11000也就是 0x18</li><li>这意味着如果是下面的语境，当前地址或者说 PC 值是 0x35CFC<blockquote><p>.text:0000000000035CFC CB 00 00 10   ADR XXX</p></blockquote></li><li>那么计算地址就是 0x35CFC + 0x18 &#x3D; 0x35D14。将这个值放到哪个寄存器里？我们还没解析 Rd 呢。0b01011也就是 11，对应于 X11。就下面这样。<blockquote><p>.text:0000000000035CFC CB 00 00 10   ADR X11，0x35D14</p></blockquote></li><li>编码规定里，这个立即数是有符号类型，可正可负，因此使用 ADR指令可以很方便的获取当前地址上下的某个地址，而且读者可以数一下，在ADR编码规则里，有 21 比特用于表示这个立即数，去掉符号位还剩下 20 比特，算一下就是可以获取相对于 PC 上下 0xFFFFF 范围的任意地址，用 MB 表示就是 ±1MB</li></ul><h3 id="ADRP"><a href="#ADRP" class="headerlink" title="ADRP"></a>ADRP</h3><ul><li>那么问题来了，如果我们要处理的地址，相对于 PC 地址距离较远呢？上下 1MB 可不是什么大范围，几十几百MB 大小的二进制文件也不少呀。</li><li>这时候就用到i用到iADRP了，它的使用场景就在这里 —— 更大范围的地址读取指令</li><li>是想一下，如何在单条指令里表示 0 - 0xFFFFFFFF 范围里的任意数，学名即 32 位任意立即数。</li><li>但 ARM 架构上这事情就难办了。想要表示任意的 32 位立即数，这需要占 4 字节，但 ARM 是定长指令架构，而且定长 4 字节，再加上操作码和其他操作数，完全没法装进去</li><li>既然一条指令不行，那么两条指令总行了吧？我想大家也能想到很多办法。</li><li>可以一条指令只赋值较高的 16 位，另一条指令只赋值较低的 16 位。在 ARM 中设计了 MOVW 和 MOVT指令表示这个逻辑。比如下面两条指令完成了 0xac5a6002 的赋值<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">movw</span>    <span class="hljs-built_in">r0</span>, <span class="hljs-number">0x6002</span><br><span class="hljs-keyword">movt</span>    <span class="hljs-built_in">r0</span>, <span class="hljs-number">0xac5a</span><br></code></pre></td></tr></table></figure></li><li>ADRP 其实有点像这样，首先它在编码上和 ADR 几乎没差别，立即数的实际表示范围是 ±0xFFFFF，但是它将这个数值乘上 0x1000，那么表示范围就成了 -0xFFFFF000 ~ 0xFFFFF000 范围内每隔 0x1000 距离的数。表示的范围变大了，但表示的能力稀疏了。<br>回到我们的样本，进行实践<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">.text:</span><span class="hljs-number">000000000000</span>B170 E0 <span class="hljs-number">03</span> <span class="hljs-number">00</span> <span class="hljs-built_in">D0</span>                 <span class="hljs-keyword">ADRP</span>            <span class="hljs-built_in">X0</span>, <span class="hljs-symbol">#aUwryubyl2xxvag</span><span class="hljs-comment">@PAGE ; &quot;UWRYubYl2XXvaG3S9r5ezWcxX/VsRigluNW58+n&quot;...</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">000000000000</span>B174 <span class="hljs-number">81</span> <span class="hljs-number">05</span> <span class="hljs-number">80</span> <span class="hljs-number">52</span>                 <span class="hljs-keyword">MOV</span>             <span class="hljs-built_in">W1</span>, <span class="hljs-number">#0x2C</span> <span class="hljs-comment">; &#x27;,&#x27;</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">000000000000</span>B178 <span class="hljs-number">00</span> <span class="hljs-number">88</span> <span class="hljs-number">07</span> <span class="hljs-number">91</span>                 <span class="hljs-keyword">ADD</span>             <span class="hljs-built_in">X0</span>, <span class="hljs-built_in">X0</span>, <span class="hljs-symbol">#aUwryubyl2xxvag</span><span class="hljs-comment">@PAGEOFF ; &quot;UWRYubYl2XXvaG3S9r5ezWcxX/VsRigluNW58+n&quot;...</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">000000000000</span>B17C <span class="hljs-built_in">D7</span> <span class="hljs-built_in">F3</span> FF <span class="hljs-number">97</span>                 <span class="hljs-keyword">BL</span>              sub_80D8<br></code></pre></td></tr></table></figure>E- 0 03 00 D0 小端序翻转： 1<code> 10 100000000000000000011111 00000</code><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">immlo</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span><br><span class="hljs-attribute">immhi</span> <span class="hljs-operator">=</span> <span class="hljs-number">11111</span><br><span class="hljs-attribute">Rd</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure></li><li>立即数是 0b1111110即 0x7E，寄存器是 X0。0x7E * 0x1000 &#x3D; 0x7E000。PC 是 0xB170，向下对 0x1000 取整（“基于 PC 相对偏移”这条规则会和相应的和  0x1000  做对齐）是 0xB000，即ADRP X0,0x89000。读者可能会注意到，ArmConvert 中翻译为 adrp x0, #0x7e000，这是因为它默认 PC 是 0。</li><li>我们想取的地址并不总能恰好和 0x1000 对齐，所以还需要配合一条 ADD或 SUB指令，加上或减去 0x1000 范围内的某个值。00 88 07 91用 ArmConvert  看到是 add x0, x0, #0x1e2，0x89000 + 0x1e2 &#x3D; 0x891E2</li></ul><h3 id="ADRL"><a href="#ADRL" class="headerlink" title="ADRL"></a>ADRL</h3><p>其实就是ADRP和ADD的结合。IDA 在一些场景里会将这两条指令优化成了ADRL</p><h2 id="其他指令"><a href="#其他指令" class="headerlink" title="其他指令"></a>其他指令</h2><ul><li>协处理器指令：SWT （切换用户模式）</li><li>伪指令：DCB</li></ul><h1 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h1><blockquote><p>png -&gt; pdf</p></blockquote><ul><li>资料查询：<img src="/blog/../../../../../images/android/%E6%A3%80%E6%B5%8B/%E5%B8%B8%E7%94%A8ARM%E6%8C%87%E4%BB%A4%E9%9B%86%E5%8F%8A%E6%B1%87%E7%BC%96.png"></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/04/20/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/2.%20%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/4.%20JNI/JNI%E5%9F%BA%E7%A1%80/"/>
    <url>/blog/2025/04/20/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/2.%20%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/4.%20JNI/JNI%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="JNI介绍"><a href="#JNI介绍" class="headerlink" title="JNI介绍"></a>JNI介绍</h2><ul><li>java Native Interface  </li><li>JNI接口介于java层和Native的c&#x2F;c++层，是<code>桥梁</code>作用</li><li>JNI是Java Native Interface的缩写，用Java调用so库就叫着JNI</li><li><img src="/blog/../../../../../images/android/%E5%9F%BA%E7%A1%80/c/jni-%E9%83%A8%E5%88%86%E6%B3%A8%E9%87%8A%E7%89%88.png"></li></ul><h2 id="JNI常识"><a href="#JNI常识" class="headerlink" title="JNI常识"></a>JNI常识</h2><ul><li>java和c++的基本类型的映射关系：基本上c++的数据类型都比java的数据类型多一个字符“j”</li></ul><h3 id="native中访问java层代码"><a href="#native中访问java层代码" class="headerlink" title="native中访问java层代码"></a>native中访问java层代码</h3><ul><li>实现此功能，<code>最常见的应用就是获取类的属性和调用类的方法</code>，为了在C&#x2F;C++中表示属性和方法，<strong>JNI提供jfieldId和jmethodID类型代表java层的属性和方法</strong>，在访问或设置java属性或方法时，<strong>需要在本地获取代表该属性或方法的jfieldID或jMmethodID</strong></li><li>使用JNIEnv如下方法：<ul><li><code>GetFieldID /  GetMethodID </code></li><li><code>GetStaticFieldID  /  GetStaticMethodID</code></li></ul></li><li>如何查看类中的字段和方法的签名？ 使用javap命令，如下：javap -s -p JNIDemo.class</li><li>举例<ul><li>上面的native代码中，首先取得property字段，因为property字段是int类型的，所以在签名中传入“I”，取得方法function的ID时： </li><li>int function(int foo, Date date, int[] arr)； </li><li>签名为(“(ILjava&#x2F;util&#x2F;Date; [I)I)”)<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Date<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">hello</span>&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> property;<br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">function</span><span class="hljs-params">(<span class="hljs-type">int</span> foo, Date date, <span class="hljs-type">int</span> [] arr)</span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>&#125;<br><br><span class="hljs-comment">// test本地方法实现</span><br>JNIEXPORT <span class="hljs-keyword">void</span> <span class="hljs-title function_">Java_Hello_test</span><span class="hljs-params">(JNIEnv * env, jobject obj)</span>&#123;<br>  <span class="hljs-type">jclass</span> <span class="hljs-variable">hello_clazz</span> <span class="hljs-operator">=</span> env -&gt; GetObjectClass(obj);<br>  <span class="hljs-type">jfieldId</span> <span class="hljs-variable">fieldId_prop</span> <span class="hljs-operator">=</span> env -&gt; GetFieldId(hello_clazz, <span class="hljs-string">&quot;property&quot;</span>, <span class="hljs-string">&quot;I&quot;</span>);<br>  <span class="hljs-type">jmethodId</span> <span class="hljs-variable">methodId_func</span> <span class="hljs-operator">=</span> env -&gt; GetMethodId(hello_clazz, <span class="hljs-string">&quot;function&quot;</span>, <span class="hljs-string">&quot;(ILjava/util/Date; [I)I)&quot;</span>);<br>  env -&gt; CallIntMethod(obj, methodId_func, <span class="hljs-number">0L</span>, NULL, NULL);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="JNI方法注册"><a href="#JNI方法注册" class="headerlink" title="JNI方法注册"></a>JNI方法注册</h2><ul><li>静态注册：<ul><li>在java层使用JNI接口获取C层定义的一个字符</li><li>.so文件里对应的函数名称是：Java_类名_方法名()</li><li>case：java层securityCheck，对应jni方法：Java_com_yaotong_crackme_MainActivity_securityCheck()</li></ul></li><li>动态注册：<ul><li>函数对应的名称是在 JNI_ONLoad()函数里注册</li><li>会使用到JNI_Onload类里面有一个注册函数；</li></ul></li></ul><h3 id="动态注册代码"><a href="#动态注册代码" class="headerlink" title="动态注册代码"></a>动态注册代码</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//定义一个动态注册JNINativeMethod结构体，这个与动态注册有关，里面有三个元素</span><br>typedef <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-built_in">char</span>* name; <span class="hljs-comment">//第一个参数 name 是java 方法名；</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-built_in">char</span>* signature; <span class="hljs-comment">//第二个参数 signature 用于描述方法的参数与返回值，也就是java方法签名信息，</span><br>    <span class="hljs-keyword">void</span>*       fnPtr; <span class="hljs-comment">//第三个参数 fnPtr 是函数指针，指向 jni 函数；</span><br>&#125; JNINativeMethod;<br><br><span class="hljs-comment">//    其中，第二个参数 signature 使用字符串记录方法的参数与返回值，具体格式形如“()V”、“(II)V”，其中分为两部分，括号内表示的是参数，括号右侧表示的是返回值；</span><br><br><br><span class="hljs-comment">// 绑定c层和java层</span><br>JNINativeMethod netiveMethod[] = &#123;<br>   &#123;<span class="hljs-string">&quot;add&quot;</span>,  <span class="hljs-string">&quot;(FF)F&quot;</span>, (<span class="hljs-keyword">void</span>*)addc&#125;,<br>   &#123;<span class="hljs-string">&quot;div&quot;</span>,  <span class="hljs-string">&quot;(FF)F&quot;</span>, (<span class="hljs-keyword">void</span>*)divc&#125;,<br>&#125;<br><br><span class="hljs-function">jint <span class="hljs-title">registerNative</span>(<span class="hljs-params">JNIEnv* env</span>)</span>&#123;<br>   <span class="hljs-comment">//获取类</span><br>   jclass  clazz= (env*)-&gt;FindClass(env, <span class="hljs-string">&quot;com/trip/yijindaxue/MainActivity&quot;</span>);<br>   <span class="hljs-comment">// 注册</span><br>   <span class="hljs-comment">// (*env)-&gt;RegisterNatives(env, clazz, const netiveMethod, sizeof(netiveMethod) / sizeof(netiveMethod[0]));</span><br>   <span class="hljs-keyword">if</span>((*env)-&gt;RegisterNatives(env, clazz, <span class="hljs-keyword">const</span> netiveMethod, <span class="hljs-keyword">sizeof</span>(netiveMethod) / <span class="hljs-keyword">sizeof</span>(netiveMethod[<span class="hljs-number">0</span>])) != JNI_OK)&#123;<br>      <span class="hljs-keyword">return</span> JNI_ERR;<br>   &#125;<br>   <span class="hljs-keyword">return</span> JNI_OK;<br>&#125;<br><br><span class="hljs-comment">// 使用JNI_ONload进行动态注册</span><br><span class="hljs-function">JNIEXPORT jint JNICALL <span class="hljs-title">JNI_OnLoad</span>(<span class="hljs-params">JavaVM* vm, <span class="hljs-keyword">void</span>* reserved</span>)</span>&#123;<br>    JNIEnv* env;<br><br>    (*vm)-&gt;GetEnv(vm, (<span class="hljs-keyword">void</span>**)&amp;env, JNI_VERSION_1_4);<br>   <span class="hljs-keyword">if</span>( (*vm)-&gt;GetEnv(vm, (<span class="hljs-keyword">void</span>**)&amp;env, JNI_VERSION_1_4) != JNI_OK)&#123;<br>      <span class="hljs-keyword">return</span> JNI_ERR;<br>   &#125;<br><br>   <span class="hljs-keyword">if</span>(registerNative(env) != JNI_OK)&#123;<br>      <span class="hljs-keyword">return</span> JNI_ERR;<br>   &#125;<br>   <span class="hljs-keyword">return</span> JNI_VERSION_1_4;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="JNIEnv类型"><a href="#JNIEnv类型" class="headerlink" title="JNIEnv类型"></a>JNIEnv类型</h3><ul><li><code>实际上代表java环境</code>，*<em><strong>通过JNIEnv <em>指针对java端代码进行操作</em></strong></em>。例如创建Java类中对象，调用java对象方法，获取java对象中属性</li><li>NIEnv类中有很多函数可以用，如：<ul><li>NewObject：创建java类中的对象 </li><li>NewString：创建Java类中的String对象 </li><li>New<Type>Array: 创建数组对象，类型为Type </li><li>Get<Type>Field: 获取类型为Type的字段 </li><li>Set<Type>Field: 设置类型为Type的字段的值 </li><li>GetStatic<Type>Field: 获取类型为Type的static的字段 </li><li>SetStatic<Type>Field： 设置类型为Type的static的字段的值 </li><li>Call<Type>Method: 调用返回类型为Type的方法 </li><li>CallStatic<Type>Method: 调用返回值类型为Type的static方法 </li><li>CallNonvirtual<Type>Method：继承的情况下调用java中类型为Type的父类的方法<ul><li><em>java所有方法都是虚拟的，所以在继承的情况下，调用子类方法，总是执行子类逻辑，但是在c++中调用子类方法，执行父类逻辑。所以CallNonvirtual<Type>Method就是实现帮助调用java层父类方法逻辑</em></li></ul></li></ul></li></ul><h3 id="jobject参数obj"><a href="#jobject参数obj" class="headerlink" title="jobject参数obj"></a>jobject参数obj</h3><ul><li>如果native方法不是static，obj就代表native方法的<code>类实例 </code></li><li>如果native方法是static，obj就代表native方法的<code>类的class对象实例</code></li></ul><h3 id="jclass类型"><a href="#jclass类型" class="headerlink" title="jclass类型"></a>jclass类型</h3><ul><li>为了能在c++代码中调用java类，专门定义了jclass类型来表示java的class对象 </li><li>JNIEnv有几个的简单函数获取java类<ul><li>jclass <code>FindClass</code>  通过类的全称获取jclass</li><li>jclass <code>GetObjectCLass</code>  通过对象实例获取jclass</li><li>jclass <code>GetSuperClass</code> 获取父类的jclass对象</li></ul></li></ul><h3 id="jvalue类型"><a href="#jvalue类型" class="headerlink" title="jvalue类型"></a>jvalue类型</h3><ul><li>jvalue类型是union联合体， 在c&#x2F;c++中可以存放不同类型的值，但是当你给其中一个类型赋值之后，这个union就是这种类型了</li></ul><h1 id="常用JNI接口"><a href="#常用JNI接口" class="headerlink" title="常用JNI接口"></a>常用JNI接口</h1><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gams">调用java层静态方法<br>获取java层静态字段的值<br>设置java层静态字段的值<br>New开头的函数就是创建<br><span class="hljs-function"><span class="hljs-title">Call</span></span>.. 调用java层函数<br><span class="hljs-function"><span class="hljs-title">Get</span></span>... 获取java层实例字段的值<br><span class="hljs-function"><span class="hljs-title">set</span></span>... 设置字段等<br>FindClass：通过FindClass方法获取到java层方法的类<br></code></pre></td></tr></table></figure><h2 id="FindClass：通过FindClass方法获取到java层方法的类"><a href="#FindClass：通过FindClass方法获取到java层方法的类" class="headerlink" title="FindClass：通过FindClass方法获取到java层方法的类"></a>FindClass：通过FindClass方法获取到java层方法的类</h2><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs delphi">jclass      <span class="hljs-comment">(*FindClass)(JNIEnv*, const char*)</span>;<br><span class="hljs-keyword">const</span> char*： 类的路径<br>例：jclass j_class =   <span class="hljs-comment">(*env)-&gt;FindClass(JNIEnv*, &quot;com/trip/yijindaxue/MainActivity&quot;);</span><br></code></pre></td></tr></table></figure><h2 id="Call-调用java层函数"><a href="#Call-调用java层函数" class="headerlink" title="Call.. 调用java层函数"></a>Call.. 调用java层函数</h2><h4 id="CallObjectMethod：调用java层普通方法。调用一个方法，返回值是object"><a href="#CallObjectMethod：调用java层普通方法。调用一个方法，返回值是object" class="headerlink" title="CallObjectMethod：调用java层普通方法。调用一个方法，返回值是object"></a>CallObjectMethod：调用java层普通方法。调用一个方法，返回值是object</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">jobject </span>    (*CallObjectMethod)(<span class="hljs-keyword">JNIEnv*, </span><span class="hljs-keyword">jobject, </span><span class="hljs-keyword">jmethodID, </span>...);<br><br><span class="hljs-keyword">JNIEnv*： </span>默认参数，他里面有很多方法接口等，是不是可以理解为<span class="hljs-keyword">java的this?</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">jobject：默认参数</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">jmethodID：java层方法id，通过GetMethodID方法获取</span><br><span class="hljs-keyword"></span><br>例：<span class="hljs-keyword">jobject </span><span class="hljs-keyword">jObject </span>= (*env)-&gt;CallObjectMethod(env*, obj, <span class="hljs-keyword">jmethodID);</span><br></code></pre></td></tr></table></figure><h2 id="Get…-获取java层实例字段的值"><a href="#Get…-获取java层实例字段的值" class="headerlink" title="Get… 获取java层实例字段的值"></a>Get… 获取java层实例字段的值</h2><h4 id="GetMethodID：获取java层方法id"><a href="#GetMethodID：获取java层方法id" class="headerlink" title="GetMethodID：获取java层方法id"></a>GetMethodID：获取java层方法id</h4><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs delphi">jmethodID   <span class="hljs-comment">(*GetMethodID)(JNIEnv*, jclass, const char*, const char*)</span>;<br><br>JNIEnv*：默认参数<br>jclass：通过FindClass方法获取到java层方法的类<br><span class="hljs-keyword">const</span> char*： java层方法的名称<br><span class="hljs-keyword">const</span> char*：java层方法的签名，签名是指方法的返回值+参数<br><br>例：jmethodID jmethodid =  <span class="hljs-comment">(*env)-&gt;GetMethodID((env*, jclass, &quot;method_name&quot;, &quot;()V)&quot;);</span><br></code></pre></td></tr></table></figure><h4 id="GetObjectField：获取java层实例字段的值"><a href="#GetObjectField：获取java层实例字段的值" class="headerlink" title="GetObjectField：获取java层实例字段的值"></a>GetObjectField：获取java层实例字段的值</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">jobject </span>    (*GetObjectField)(<span class="hljs-keyword">JNIEnv*, </span><span class="hljs-keyword">jobject, </span><span class="hljs-keyword">jfieldID);</span><br><span class="hljs-keyword"></span><br><span class="hljs-keyword">JNIEnv*, </span><span class="hljs-keyword">jobject： </span>两个默认参数<br><span class="hljs-keyword">jfieldID： </span><span class="hljs-keyword">java层字段的id，通过GetFieldID获取</span><br></code></pre></td></tr></table></figure><h4 id="GetFieldID：获取java层字段的id"><a href="#GetFieldID：获取java层字段的id" class="headerlink" title="GetFieldID：获取java层字段的id"></a>GetFieldID：获取java层字段的id</h4><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs delphi">jfieldID    <span class="hljs-comment">(*GetFieldID)(JNIEnv*, jclass, const char*, const char*)</span>;<br><br>JNIEnv*：默认参数<br>jclass：通过FindClass方法获取到java层方法的类<br><span class="hljs-keyword">const</span> char*： java层实例字段的名称<br><span class="hljs-keyword">const</span> char*：java层实例字段的签名<br><br>例：jfieldID j_fieldID = <span class="hljs-comment">(*env)-&gt;GetFieldID(*env, jclass, &quot;zd&quot;, &quot;Ljava/lang/String;&quot;);</span><br></code></pre></td></tr></table></figure><h4 id="GetStaticObjectField：获取java层静态字段"><a href="#GetStaticObjectField：获取java层静态字段" class="headerlink" title="GetStaticObjectField：获取java层静态字段"></a>GetStaticObjectField：获取java层静态字段</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">jobject </span>    (*GetStaticObjectField)(<span class="hljs-keyword">JNIEnv*, </span><span class="hljs-keyword">jclass, </span><span class="hljs-keyword">jfieldID);</span><br><span class="hljs-keyword"></span><br>例：<span class="hljs-keyword">jobject </span><span class="hljs-keyword">j_object </span>= (*env)-&gt;GetStaticObjectField(*env, <span class="hljs-keyword">jclass, </span><span class="hljs-keyword">jfieldID);</span><br></code></pre></td></tr></table></figure><h2 id="set…-设置字段等"><a href="#set…-设置字段等" class="headerlink" title="set… 设置字段等"></a>set… 设置字段等</h2><h4 id="SetObjectField：设置java层实例字段的值"><a href="#SetObjectField：设置java层实例字段的值" class="headerlink" title="SetObjectField：设置java层实例字段的值"></a>SetObjectField：设置java层实例字段的值</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">void        (*SetObjectField)(<span class="hljs-keyword">JNIEnv*, </span><span class="hljs-keyword">jobject, </span><span class="hljs-keyword">jfieldID, </span><span class="hljs-keyword">jobject);</span><br><span class="hljs-keyword"></span><br><span class="hljs-keyword">JNIEnv*, </span><span class="hljs-keyword">jobject： </span>两个默认参数<br><span class="hljs-keyword">jfieldID： </span><span class="hljs-keyword">java层字段的id，通过GetFieldID获取</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">jobject：java层实例字段设置的值</span><br></code></pre></td></tr></table></figure><h2 id="创建Java对象及字符串的操作方法"><a href="#创建Java对象及字符串的操作方法" class="headerlink" title="创建Java对象及字符串的操作方法"></a>创建Java对象及字符串的操作方法</h2><h4 id="native中创建java对象"><a href="#native中创建java对象" class="headerlink" title="native中创建java对象"></a>native中创建java对象</h4><ul><li><p>方法1：jobject NewObject(jclass clazz, jmethodID methodID, ….)</p><ul><li>eg： jobject now &#x3D; env-&gt;NewObject(clazz_date,,,,)</li></ul></li><li><p>方法2：AllocObject </p><ul><li>此方法可以根据传入的jclass创建java对象，但是状态是非初始化的，创建前要用CallNonvirtualVoidMethod调用该jclass的构造函数。用的很少</li></ul></li></ul><h4 id="native中操作java字符串"><a href="#native中操作java字符串" class="headerlink" title="native中操作java字符串"></a>native中操作java字符串</h4><ol><li><p>获取字符串长度：GetStringLength </p></li><li><p>将jstring对象拷贝到const jchar*指针字符串 </p><ol><li>GetStringRegion  拷贝java字符串并以utf-8编码传入jstr </li><li>GetStringUTFRegion  拷贝java字符串并以utf-16编码传入jstr</li></ol></li><li><p>生成一个jstring对象： NewString</p></li><li><p>将jstring对象转化成const jchar*字符串指针 </p><ol><li>GetStringChars </li><li>GetStringUTFChars </li><li>GetStringCritical</li></ol></li><li><p>释放字符串指针 </p><ol><li>ReleaseStringChars </li><li>ReleaseStringCritical </li><li>delete [] jstr</li></ol></li><li><p>转化成宽指针：wstr</p></li></ol><h2 id="C-C-操作Java中的数组"><a href="#C-C-操作Java中的数组" class="headerlink" title="C&#x2F;C++操作Java中的数组"></a>C&#x2F;C++操作Java中的数组</h2><h3 id="操作基本类型数组"><a href="#操作基本类型数组" class="headerlink" title="操作基本类型数组"></a>操作基本类型数组</h3><ul><li>Get<Type>ArrayElements : 可以把java基本类型数组转换到c&#x2F;c++中的数组，两种处理方式</li></ul><ol><li>拷贝一份传到本地代码</li><li>把指向java数组的指针直接传回到本地代码中，处理完本地化数组后，通过Release<Type>ArrayElements释放数组</li></ol><ul><li><p>Release<Type>ArrayELements </p><ul><li>Release<Type>ArrayELements(<Type>Array arr, <Type>* array, jint mode)</li><li>用这个函数可以选择如何处理java和c++的数组，提交还是撤销，内存释放害死不释放</li><li>mode可取以下值： <ul><li>0：对java数组进行更新并释放c&#x2F;c++数组 </li><li>JNI_COMMIT: 对java数组进行更新但是不释放c&#x2F;c++数组 </li><li>JNI_ABORT: 对java数组不进行更新，释放c&#x2F;c++数组</li></ul></li></ul></li><li><p>GetPrimittiveArrayCritical </p></li><li><p>ReleasePrimitiveArrayCritical </p></li><li><p>Get<Type>ArrayRegion : 在c&#x2F;c++预先开辟一段内存，然后把java类型的数组拷贝到这段内存 </p></li><li><p>Set<Type>ArrayRegion : 把java基本类型数组中的指定范围的元素用c&#x2F;c++数组中的元素来赋值</p></li><li><p><Type>ArrayNew : 指定一个长度然后返回相应的java基本类型的数组</p></li></ul><h3 id="操作对象类型数组"><a href="#操作对象类型数组" class="headerlink" title="操作对象类型数组"></a>操作对象类型数组</h3><ul><li>JNI没有提供把java对象类型数组(Object[])直接转到c++中的Object[]数组的函数，而是通过Get&#x2F;SetObjectArrayElement这样的函数对java的object[]类型数组继续宁操作。</li><li>NewObjectArray可以通过指定长度和初始化值来创建某个类的数组</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/04/19/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/5.%20%E5%8F%8D%E6%A3%80%E6%B5%8B/unidbg%E6%A3%80%E6%B5%8B/"/>
    <url>/blog/2025/04/19/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/5.%20%E5%8F%8D%E6%A3%80%E6%B5%8B/unidbg%E6%A3%80%E6%B5%8B/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/04/19/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/5.%20%E5%8F%8D%E6%A3%80%E6%B5%8B/xposed%E6%A3%80%E6%B5%8B/"/>
    <url>/blog/2025/04/19/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/5.%20%E5%8F%8D%E6%A3%80%E6%B5%8B/xposed%E6%A3%80%E6%B5%8B/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/04/19/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/5.%20%E5%8F%8D%E6%A3%80%E6%B5%8B/frida%E6%A3%80%E6%B5%8B/"/>
    <url>/blog/2025/04/19/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/5.%20%E5%8F%8D%E6%A3%80%E6%B5%8B/frida%E6%A3%80%E6%B5%8B/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/04/14/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/4.%20%E9%80%86%E5%90%91%E6%A1%86%E6%9E%B6/Xposed/Lsposed%E6%A3%80%E6%B5%8B/"/>
    <url>/blog/2025/04/14/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/4.%20%E9%80%86%E5%90%91%E6%A1%86%E6%9E%B6/Xposed/Lsposed%E6%A3%80%E6%B5%8B/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/04/14/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/4.%20%E9%80%86%E5%90%91%E6%A1%86%E6%9E%B6/Frida/Frida%E6%A3%80%E6%B5%8B/"/>
    <url>/blog/2025/04/14/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/4.%20%E9%80%86%E5%90%91%E6%A1%86%E6%9E%B6/Frida/Frida%E6%A3%80%E6%B5%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="Frida过root检测"><a href="#Frida过root检测" class="headerlink" title="Frida过root检测"></a>Frida过root检测</h2><ul><li>参考：<a href="https://gist.github.com/h1code2/fa9a3660b7dbe1d0f687bdb90356f97f">https://gist.github.com/h1code2/fa9a3660b7dbe1d0f687bdb90356f97f</a><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">function</span> showStacks() &#123;<br>    Java.<span class="hljs-keyword">perform</span>(<span class="hljs-keyword">function</span>() &#123;<br>        console.log(Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Exception&quot;).$<span class="hljs-built_in">new</span>()));<br>    &#125;);<br>&#125;<br><br><span class="hljs-keyword">function</span> hook() &#123;<br>    Java.<span class="hljs-keyword">perform</span>(<span class="hljs-keyword">function</span> () &#123;<br>        const commonPaths = [<br>            &quot;/data/local/bin/su&quot;,<br>            &quot;/data/local/su&quot;,<br>            &quot;/data/local/xbin/su&quot;,<br>            &quot;/dev/com.koushikdutta.superuser.daemon/&quot;,<br>            &quot;/sbin/su&quot;,<br>            &quot;/system/app/Superuser.apk&quot;,<br>            &quot;/system/bin/failsafe/su&quot;,<br>            &quot;/system/bin/su&quot;,<br>            &quot;/system/etc/init.d/99SuperSUDaemon&quot;,<br>            &quot;/system/sd/xbin/su&quot;,<br>            &quot;/system/xbin/busybox&quot;,<br>            &quot;/system/xbin/daemonsu&quot;,<br>            &quot;/system/xbin/su&quot;,<br>        ];<br><br>        var JavaString = Java.use(&quot;java.lang.String&quot;);<br>        JavaString.contains.implementation = <span class="hljs-keyword">function</span> (<span class="hljs-type">name</span>) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-type">name</span> !== &quot;test-keys&quot;) &#123;<br>                var ret = this.contains(<span class="hljs-type">name</span>);<br>                console.log(&quot;JavaString&quot;,<span class="hljs-type">name</span>,ret);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                var ret = this.contains(<span class="hljs-type">name</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span><br>            &#125;<br>            <span class="hljs-keyword">return</span> ret<br>        &#125;;<br><br>        var JavaRuntime = Java.use(&quot;java.lang.Runtime&quot;);<br>        var iOException = Java.use(&quot;java.io.IOException&quot;);<br>        JavaRuntime.exec.overload(&quot;java.lang.String&quot;).implementation = <span class="hljs-keyword">function</span> (command) &#123;<br>            <span class="hljs-keyword">if</span> (command.endsWith(&quot;su&quot;)) &#123;<br>                ret = this.exec(command);<br>                console.log(&quot;JavaRuntime&quot; ,command,ret);<br>                throw iOException.$<span class="hljs-built_in">new</span>(&quot;Hacker&quot;);<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                var ret = this.exec(command);<br>                console.log(&quot;JavaRuntime2&quot; ,command,ret)<br>            &#125;<br>            <span class="hljs-keyword">return</span> ret;<br>        &#125;;<br><br>        var JavaFile = Java.use(&quot;java.io.File&quot;);<br>        JavaFile.<span class="hljs-keyword">exists</span>.implementation = <span class="hljs-keyword">function</span> () &#123;<br>            const filename = this.getAbsolutePath();<br>            <span class="hljs-keyword">if</span> (commonPaths.indexOf(filename) &gt;= <span class="hljs-number">0</span>) &#123;<br>                var ret = this.<span class="hljs-keyword">exists</span>();<br>                console.log(&quot;JavaFile&quot;,filename,ret);<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span><br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                var ret = this.<span class="hljs-keyword">exists</span>();<br>            &#125;<br>            <span class="hljs-keyword">return</span> ret;<br>        &#125;<br>    &#125;)<br>&#125;;<br><br>setImmediate(<span class="hljs-keyword">function</span> () &#123;<br>    setTimeout(hook, <span class="hljs-number">0</span>);<br>&#125;);<br><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ApkTool工具使用</title>
    <link href="/blog/2025/04/14/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/3.%20%E9%80%86%E5%90%91%E5%B7%A5%E5%85%B7/apktool/"/>
    <url>/blog/2025/04/14/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/3.%20%E9%80%86%E5%90%91%E5%B7%A5%E5%85%B7/apktool/</url>
    
    <content type="html"><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ul><li>下载地址：<a href="https://ibotpeaches.github.io/Apktool/">https://ibotpeaches.github.io/Apktool/</a></li><li>apktool版本汇总：<a href="https://bitbucket.org/iBotPeaches/apktool/downloads/">https://bitbucket.org/iBotPeaches/apktool/downloads/</a></li><li>注意：<ul><li>重命名下载的apktool_x.x.x.jar,改名为apktool.jar</li><li>apktool.jar 必须java环境才能运行</li><li>windows下设置环境变量可以使用</li></ul></li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li>解包apk获取资源文件：apktool d test.apk</li><li>重新打包apk： <ol><li>apktool b 解压后的项目目录 </li><li>apktool b 解压后的项目目录 -o 新apk的名字<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">AndroidManifest.xml<br>    -APP权限配置<br>    -程序入口<br>smali 文件（一种汇编代码）<br>    -<span class="hljs-string">.smali</span>可以和<span class="hljs-string">.dex</span>相互转换<br>    -修改APK代码通常修改smali文件（重新修改<span class="hljs-string">.java</span>源代码 重新编译的困难太大）<br>    -baksmali.jar smali.jar对dex 和 smali文件做转换<br>classes.dex<br>    -源代码在classes.dex文件里<br>    -可以反编出<span class="hljs-string">.java</span>代码<br><span class="hljs-string">.smali---</span>&gt;<span class="hljs-string">.dex</span> &gt;<span class="hljs-string">.java</span><br></code></pre></td></tr></table></figure></li></ol></li></ol><h2 id="使用经验记录"><a href="#使用经验记录" class="headerlink" title="使用经验记录"></a>使用经验记录</h2><h4 id="需要注意，如果回编译老是报错，且做了很多操作都没用，可能是某一个文件在第一次回编译错误后没有删除，即：删除这个文件C-Users-Administrator-apktool-framework-1-apk"><a href="#需要注意，如果回编译老是报错，且做了很多操作都没用，可能是某一个文件在第一次回编译错误后没有删除，即：删除这个文件C-Users-Administrator-apktool-framework-1-apk" class="headerlink" title="需要注意，如果回编译老是报错，且做了很多操作都没用，可能是某一个文件在第一次回编译错误后没有删除，即：删除这个文件C:\Users\Administrator\apktool\framework\1.apk"></a>需要注意，如果回编译老是报错，且做了很多操作都没用，可能是某一个文件在第一次回编译错误后没有删除，即：删除这个文件C:\Users\Administrator\apktool\framework\1.apk</h4><h4 id="apktool反编译报错：Exception-in-thread-“main”-org-jf-dexlib2-dexbacked-DexBackedDexFile-NotADexFile-Not-a-valid-dex-magic-value"><a href="#apktool反编译报错：Exception-in-thread-“main”-org-jf-dexlib2-dexbacked-DexBackedDexFile-NotADexFile-Not-a-valid-dex-magic-value" class="headerlink" title="apktool反编译报错：Exception in thread “main” org.jf.dexlib2.dexbacked.DexBackedDexFile$NotADexFile: Not a valid dex magic value"></a>apktool反编译报错：Exception in thread “main” org.jf.dexlib2.dexbacked.DexBackedDexFile$NotADexFile: Not a valid dex magic value</h4><ul><li>参考：<a href="https://blog.csdn.net/m0_37696990/article/details/103931261">https://blog.csdn.net/m0_37696990/article/details/103931261</a></li><li>提示很明显，就是非法Dex，这是因为apk里有加密过后的dex文件，比如有些apk的assets目录下有加密后的Dex文件，添加–only-main-classes参数即可 </li><li>apktool d ~&#x2F;tmp&#x2F;test.apk -o &#x2F;tmp&#x2F;test –only-main-classes</li></ul><h4 id="apktool-jar回编译报错：brut-androlib-AndrolibException-brut-common-BrutException-could-not-exec"><a href="#apktool-jar回编译报错：brut-androlib-AndrolibException-brut-common-BrutException-could-not-exec" class="headerlink" title="apktool.jar回编译报错：brut.androlib.AndrolibException: brut.common.BrutException: could not exec"></a>apktool.jar回编译报错：brut.androlib.AndrolibException: brut.common.BrutException: could not exec</h4><ul><li>参考：<a href="https://blog.csdn.net/scimence/article/details/104998418">https://blog.csdn.net/scimence/article/details/104998418</a></li></ul><h4 id="利用APKTOOL漏洞的apk会反编译失败，解决的话只能等apktool升级或找app的老版本"><a href="#利用APKTOOL漏洞的apk会反编译失败，解决的话只能等apktool升级或找app的老版本" class="headerlink" title="利用APKTOOL漏洞的apk会反编译失败，解决的话只能等apktool升级或找app的老版本"></a>利用APKTOOL漏洞的apk会反编译失败，解决的话只能等apktool升级或找app的老版本</h4><ul><li>使用新版本的时候，下载最新版本的apktool.jar包；</li><li>然后使用命令：java -jar .\apktool_2.4.1.jar d -f “***.apk”</li></ul><h4 id="回编译报错，可添加命令–use-aapt2"><a href="#回编译报错，可添加命令–use-aapt2" class="headerlink" title="回编译报错，可添加命令–use-aapt2"></a>回编译报错，可添加命令–use-aapt2</h4><ul><li>如：.\apktool.bat d  –use-aapt2 .\du.apk</li></ul><h4 id="Exception-in-thread-“main”-brut-android-AndrolibException-Multiple-res-specs-attr-name"><a href="#Exception-in-thread-“main”-brut-android-AndrolibException-Multiple-res-specs-attr-name" class="headerlink" title="Exception in thread “main” brut.android.AndrolibException: Multiple res specs: attr&#x2F;name"></a>Exception in thread “main” brut.android.AndrolibException: Multiple res specs: attr&#x2F;name</h4><ul><li>主要是因为利用了apktool的漏洞做了属性id的混淆，导致在反编译过程中存入了重复的id值</li><li>错误代码：RestypeSpec.java的addResSpec方法78行</li><li>修复： 在这个方法存入map数据之前做一个判断操作即可，判断属性id是否存在这个map，存在则直接访问</li></ul><h4 id="Exception-in-thread-“main”-brut-android-AndrolibException-Could-not-decode-arsc-file"><a href="#Exception-in-thread-“main”-brut-android-AndrolibException-Could-not-decode-arsc-file" class="headerlink" title="Exception in thread “main” brut.android.AndrolibException: Could not decode arsc file"></a>Exception in thread “main” brut.android.AndrolibException: Could not decode arsc file</h4><ul><li>主要是利用apktool的漏洞，修改了resource.arsc的头部信息，导致在分析头部数据结构时出错</li><li>错误代码：ExtDataInput.java的skipCheckChunkTypeInt方法第73行</li><li>修复：修复resource.arsc头部数据，修改skipCheckChunkTypeInt检测方法逻辑</li></ul><h4 id="brut-androlib-AndrolibException-brut-common-BrutException-could-not-exec-exit-code-1"><a href="#brut-androlib-AndrolibException-brut-common-BrutException-could-not-exec-exit-code-1" class="headerlink" title="brut.androlib.AndrolibException: brut.common.BrutException: could not exec (exit code &#x3D; 1)"></a>brut.androlib.AndrolibException: brut.common.BrutException: could not exec (exit code &#x3D; 1)</h4><ul><li>参考：<a href="https://www.jianshu.com/p/5d213fc2ed73">https://www.jianshu.com/p/5d213fc2ed73</a></li><li>java -jar apktool.jar d test1.apk -o test1</li><li>java -jar apktool.jar b test1<br>改为</li><li>java -jar apktool.jar -r d test1.apk -o test1 </li><li>java -jar apktool.jar b test1</li></ul>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
      <category>安卓逆向</category>
      
      <category>逆向工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安卓逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ddms</title>
    <link href="/blog/2025/04/14/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/3.%20%E9%80%86%E5%90%91%E5%B7%A5%E5%85%B7/ddms/"/>
    <url>/blog/2025/04/14/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/3.%20%E9%80%86%E5%90%91%E5%B7%A5%E5%85%B7/ddms/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li>ddms的全称是Dalvik Debug Monitor Service,是Android开发环境中的Dalvik虚拟机调试监控服务。</li><li>DDMS的作用是提供截屏，查看线程和堆的信息，查看logcat日志信息等等</li></ul><h3 id="界面介绍"><a href="#界面介绍" class="headerlink" title="界面介绍"></a>界面介绍</h3><ul><li>第一列：进程包名</li><li>第二列：进程pid</li><li>第三列：端口</li><li>左中有一个蓝色加号，是添加过滤器，减号是删除过滤器，带一个笔的是修改过滤器</li><li><img src="/blog/images/android/%E5%B7%A5%E5%85%B7/ddms.jpg"></li><li>可以通过ddms查看日志的方式，看看是否可以快速定位到关键代码</li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="ddms打开方式"><a href="#ddms打开方式" class="headerlink" title="ddms打开方式"></a>ddms打开方式</h3><ol><li>ddms工具是在sdk目录下：sdk&#x2F;tools&#x2F;ddms.bat</li><li>cmd-ddms</li><li>注意：需要保证手机root并打开调试开关&lt;待测试&gt;</li></ol><h3 id="使用DDMS进行方法追踪剖析"><a href="#使用DDMS进行方法追踪剖析" class="headerlink" title="使用DDMS进行方法追踪剖析"></a>使用DDMS进行方法追踪剖析</h3><ol><li>打开DDMS，找到目标app的包名并点击后，以下按钮会亮起<img src="/blog/images/android/%E5%B7%A5%E5%85%B7/ddms1.jpg"></li><li>箭头所指按钮即方法剖析，点击此按钮，有两个选项<ol><li>Sample based profiling：自动过滤，默认限制了1000个方法&lt;可以调整&gt;，超过1000个之后会自动过滤，不会再打印了，一般选择这个自动过滤</li><li>Trace based profiling：打印所有的方法</li></ol></li><li>点击“ok”, 此时此按钮的红点点变暗</li><li>点击手机app上需要跟踪的点：比如需要剖析登录逻辑，填写好账号密码后点击“登录”按钮</li><li>4步骤之后，迅速点击ddms上的2步骤的按钮，红点点接着变红，等待3s，会出现方法调用的界面</li><li>一般情况下，找到“onclick”方法，从这里开始分析，找他的父类和子类等</li></ol>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
      <category>安卓逆向</category>
      
      <category>逆向工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安卓逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jadx</title>
    <link href="/blog/2025/04/14/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/3.%20%E9%80%86%E5%90%91%E5%B7%A5%E5%85%B7/jadx/"/>
    <url>/blog/2025/04/14/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/3.%20%E9%80%86%E5%90%91%E5%B7%A5%E5%85%B7/jadx/</url>
    
    <content type="html"><![CDATA[<h3 id="jadx"><a href="#jadx" class="headerlink" title="jadx"></a>jadx</h3><ul><li><a href="https://github.com/skylot/jadx">https://github.com/skylot/jadx</a></li></ul><h3 id="新版jadx"><a href="#新版jadx" class="headerlink" title="新版jadx"></a>新版jadx</h3><ul><li><a href="https://github.com/skylot/jadx/releases/tag/v1.4.5">https://github.com/skylot/jadx/releases/tag/v1.4.5</a></li><li>支持一键生成frida | xpsoed代码</li></ul><h3 id="supuer-jadx"><a href="#supuer-jadx" class="headerlink" title="supuer-jadx"></a>supuer-jadx</h3><ul><li><a href="https://pkiller.com/android/super-jadx_v1.0.0/">https://pkiller.com/android/super-jadx_v1.0.0/</a>  </li><li>支持重命名 | override&#x2F;interface方法关联</li></ul>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
      <category>安卓逆向</category>
      
      <category>逆向工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安卓逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java2smali</title>
    <link href="/blog/2025/04/14/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/3.%20%E9%80%86%E5%90%91%E5%B7%A5%E5%85%B7/java2smali/"/>
    <url>/blog/2025/04/14/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/3.%20%E9%80%86%E5%90%91%E5%B7%A5%E5%85%B7/java2smali/</url>
    
    <content type="html"><![CDATA[<ol><li>安装androidStudio并创建第一个项目：<a href="https://blog.csdn.net/wwanglin_0/article/details/85203591">https://blog.csdn.net/wwanglin_0/article/details/85203591</a></li><li>安装java2smali插件：<a href="https://www.jianshu.com/p/cdde8121c823">https://www.jianshu.com/p/cdde8121c823</a><ol><li>安装插件<img src="/blog/images/android/%E5%B7%A5%E5%85%B7/1744633194051.jpg"></li><li>选择java文件,Build→Compile to smail<img src="/blog/images/android/%E5%B7%A5%E5%85%B7/1744633207224.jpg"></li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
      <category>安卓逆向</category>
      
      <category>逆向工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安卓逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jeb</title>
    <link href="/blog/2025/04/14/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/3.%20%E9%80%86%E5%90%91%E5%B7%A5%E5%85%B7/jeb/"/>
    <url>/blog/2025/04/14/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/3.%20%E9%80%86%E5%90%91%E5%B7%A5%E5%85%B7/jeb/</url>
    
    <content type="html"><![CDATA[<p>——当AndroidKiller或者jadx无法反编译apk时， 可以用jeb工具尝试。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li>百度网盘搜索“jeb“， 找到jeb包，解压</li><li><a href="https://down.52pojie.cn/Tools/Android_Tools/">https://down.52pojie.cn/Tools/Android_Tools/</a></li></ol><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li>找到目录下jeb_wincon.bat  文件， 打开可使用 </li><li>可以创建桌面快捷方式来使用 </li><li>跟AndroidKiller不一样的是：这个工具需要自己找入口，找入口方法： <ol><li>通过配置文件Manifest.xml来找入口 </li><li>找这个配置文件中是否存在<intent-filter>标签，里面的内容就是起始页面的信息。往上找上一级标签，找到activity标签， 找到属性(android:name)，通过属性对应的值，找到对应的包的位置，右键第一个Q，点击，则可以格式化看java代码。 </li><li>想要看函数的详细信息，直接双击函数名，就可以进入函数体内</li></ol></li></ol><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><ul><li>q：切换java和smali代码</li><li>ctrl + b：下断点和取消断点，java代码状态不能下断点，需要切换到smali代码</li></ul><h3 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h3><ol><li>下断点 – Debugger– start – 确定 –选择模拟器或者真机 — 选择目标进程 – attach </li><li>会弹出来寄存器，主要关注“VM&#x2F;locals” 和 “VM&#x2F;threads”</li><li>在VM&#x2F;locals里面的type栏可以修改类型查看数据的值，比如改为String类型</li></ol>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
      <category>安卓逆向</category>
      
      <category>逆向工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安卓逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>wireshark</title>
    <link href="/blog/2025/04/14/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/3.%20%E9%80%86%E5%90%91%E5%B7%A5%E5%85%B7/wireshark/"/>
    <url>/blog/2025/04/14/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/3.%20%E9%80%86%E5%90%91%E5%B7%A5%E5%85%B7/wireshark/</url>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ol><li>不需要对客服端做改变（设置代理IP），是对网卡抓包</li><li>能抓传输层&#x2F;网络层 抓TCP包，抓经过网卡的所有TCP包</li><li>跟代理抓包的区别 </li><li>可能会常用的功能：“分析—启用的协议”  |  “分析-解码为”  |   “分析-专家信息”</li><li>特点 <ol><li>抓https需要把ssl证书导入到wireshark，不然没法解析https，这个操作难度较大 </li><li>tcp以上的数据都能抓，http&#x2F;https&#x2F;socket等</li></ol></li></ol><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li>下载地址：<a href="https://www.wireshark.org/#download">https://www.wireshark.org/#download</a></li><li>安装教程：<a href="https://blog.csdn.net/u013258415/article/details/77877310">https://blog.csdn.net/u013258415/article/details/77877310</a></li></ul><h3 id="如何抓手机上的数据"><a href="#如何抓手机上的数据" class="headerlink" title="如何抓手机上的数据"></a>如何抓手机上的数据</h3><ol><li>在电脑上开wifi热点，手机联电脑的wifi热点，共用一个网卡<ol><li>360wifi热点 <a href="http://wifi.360.cn/easy/pc/">http://wifi.360.cn/easy/pc/</a></li><li>安卓虚拟机可以直接抓包，不需要热点</li></ol></li><li>演示wireshark 如何过滤数据包<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs armasm">根据目的<span class="hljs-built_in">IP</span>抓包<br>    <span class="hljs-built_in">ip</span>.dst == <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span><br>    <span class="hljs-built_in">ip</span>.<span class="hljs-keyword">addr</span> == <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span><br>按端口过滤<br>    tcp.port == <span class="hljs-number">80</span><br>    tcp.port == <span class="hljs-number">443</span><br>按协议过滤<br>    ssl<br>关联过滤<br>    ssl <span class="hljs-keyword">and</span> <span class="hljs-built_in">ip</span>.<span class="hljs-keyword">addr</span><br>过滤目标mac为A0:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">04</span>:<span class="hljs-built_in">C5</span>:<span class="hljs-number">84</span>的数据包<br>    eth.dst == A0:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">04</span>:<span class="hljs-built_in">C5</span>:<span class="hljs-number">84</span><br><br>过滤源mac为A0:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">04</span>:<span class="hljs-built_in">C5</span>:<span class="hljs-number">84</span>的数据包<br>    eth.src == A0:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">04</span>:<span class="hljs-built_in">C5</span>:<span class="hljs-number">84</span><br><br>按照http模式过滤<br>    http.request.method == <span class="hljs-string">&quot;GET&quot;</span><br>    http.request.uri == <span class="hljs-string">&#x27;&#x27;img/logo.edu.gif&quot;</span><br><span class="hljs-string">    http contains &quot;GET&quot;</span><br><span class="hljs-string">    http.request.method == &quot;GET&quot; &amp;&amp;  http contains &quot;HOST:&quot;</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
      <category>安卓逆向</category>
      
      <category>逆向工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安卓逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>逆向工具包</title>
    <link href="/blog/2025/04/14/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/3.%20%E9%80%86%E5%90%91%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7%E5%8C%85/"/>
    <url>/blog/2025/04/14/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/3.%20%E9%80%86%E5%90%91%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<p>- </p><ul><li>吾爱破解网站的工具包网址：<a href="https://down.52pojie.cn/Tools/Android_Tools/">https://down.52pojie.cn/Tools/Android_Tools/</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
      <category>安卓逆向</category>
      
      <category>逆向工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安卓逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Frida Gadget</title>
    <link href="/blog/2025/04/14/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/4.%20%E9%80%86%E5%90%91%E6%A1%86%E6%9E%B6/Frida/frida%E6%96%B9%E6%A1%88/Frida%20Gadget/"/>
    <url>/blog/2025/04/14/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/4.%20%E9%80%86%E5%90%91%E6%A1%86%E6%9E%B6/Frida/frida%E6%96%B9%E6%A1%88/Frida%20Gadget/</url>
    
    <content type="html"><![CDATA[<h1 id="Gadget"><a href="#Gadget" class="headerlink" title="Gadget"></a>Gadget</h1><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>官网：<a href="https://frida.re/docs/gadget/">https://frida.re/docs/gadget/</a></li><li>gadget下载：<a href="https://github.com/frida/frida/releases/">https://github.com/frida/frida/releases/</a></li></ul><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>三种方式来做：</p><ol><li>监听</li><li>脚本</li><li>脚本目录</li></ol><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li><a href="https://github.com/frida/frida/releases/%E4%B8%8B%E8%BD%BD%E5%92%8C%E5%AE%89%E5%8D%93%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%8C%B9%E9%85%8D%E7%9A%84gadget%E7%9A%84so%E6%96%87%E4%BB%B6%EF%BC%8C%E6%94%BE%E5%9C%A8app%E7%9A%84lib%E7%9B%AE%E5%BD%95%E4%B8%8B%EF%BC%8C%E5%B9%B6%E5%91%BD%E5%90%8D%E4%B8%BA%22libgadget.so">https://github.com/frida/frida/releases/下载和安卓系统相匹配的gadget的so文件，放在app的lib目录下，并命名为&quot;libgadget.so</a>“</li><li>反编译app</li><li>lib目录下新建另一个文件，文件名为：“libgadget.config.so”，该文件内容因不同方式而定<ol><li>监听方式<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs 监听方式">&#123;<br>  &quot;interaction&quot;: &#123;<br>    &quot;type&quot;: &quot;listen&quot;,<br>    &quot;address&quot;: &quot;127.0.0.1&quot;,<br>    &quot;port&quot;: 27042,<br>    &quot;on_load&quot;: &quot;wait&quot;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>脚本方式<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs 脚本方式">&#123;<br>  &quot;interaction&quot;: &#123;<br>    &quot;type&quot;: &quot;script&quot;,<br>    &quot;path&quot;: &quot;/data/local/tmp/explore.js&quot;,<br>    &quot;on_change&quot;: &quot;reload&quot;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li>找到app启动时候的类，比如application的android:name值的类下面的onCreate方法。并添加smali代码：const-string v0, “gadget” invoke-static {v0}, Ljava&#x2F;lang&#x2F;System;-&gt;loadLibrary(Ljava&#x2F;lang&#x2F;String;)V</li><li>回编译app并签名</li></ol><h1 id="Frida-Manager"><a href="#Frida-Manager" class="headerlink" title="Frida Manager"></a>Frida Manager</h1><ul><li>免重打包&#x2F;持久化&#x2F;免root-fridaManager： <a href="https://github.com/hanbinglengyue/FridaManager">https://github.com/hanbinglengyue/FridaManager</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
      <category>安卓逆向</category>
      
      <category>逆向框架</category>
      
      <category>Frida</category>
      
      <category>frida方案</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安卓逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Frida 工具</title>
    <link href="/blog/2025/04/14/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/4.%20%E9%80%86%E5%90%91%E6%A1%86%E6%9E%B6/Frida/frida%E6%96%B9%E6%A1%88/Frida%20Zentracer/"/>
    <url>/blog/2025/04/14/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/4.%20%E9%80%86%E5%90%91%E6%A1%86%E6%9E%B6/Frida/frida%E6%96%B9%E6%A1%88/Frida%20Zentracer/</url>
    
    <content type="html"><![CDATA[<h1 id="Frida-ZenTracer"><a href="#Frida-ZenTracer" class="headerlink" title="Frida ZenTracer"></a>Frida ZenTracer</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li>参考：<a href="https://www.anquanke.com/post/id/197657">https://www.anquanke.com/post/id/197657</a></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">git <span class="hljs-built_in">clone</span> https://github.com/hluwa/ZenTracer</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cd</span> ZenTracer</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">python -m pip install --upgrade pip</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">pip install PyQt5</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">pip install frida-tools</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">python ZenTracer.py</span><br></code></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li>参考：<a href="https://www.anquanke.com/post/id/197657">https://www.anquanke.com/post/id/197657</a></li></ul><h3 id="hook"><a href="#hook" class="headerlink" title="hook"></a>hook</h3><ul><li>我们来完整的演示一遍，比如现在看java.io.File类的所有方法，我们可以这样操作</li><li>首先是精准匹配：</li></ul><ol><li>点击打开应用；</li><li>选择Action→Match RegEx</li><li>输入E:java.io.File，点击add，然后关闭窗口</li><li>点击Action→Start</li><li>可以观察到java.io.File类的所有方法都被hook了，，并且像java.io.File.createTempFile方法的所有重载也被hook了</li><li>点击Action→Stop，再点击Action→Clean，本次观察结束</li></ol><ul><li>也可以使用模糊匹配模式</li></ul><ol><li>比如输入M:java.io.File之后，会将诸如java.io.FileOutputStream类的诸多方法也都hook上</li></ol><h3 id="hook后观察"><a href="#hook后观察" class="headerlink" title="hook后观察"></a>hook后观察</h3><ol><li>在“设置”应用上进行操作，打开几个子选项的界面之后，观察方法的参数和返回值；<br><img src="/blog/images/android/frida/1744524158650.jpg"></li><li>导出json来观察方法的调用树，选择File→Export json，导出为tmp.json，使用vscode来format Document之后</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>ZenTracer的目前已知的缺点，无法打印调用栈，无法hook构造函数，也就是$init。当然这些“缺点”无非也就是加几行代码的事情，整个工具非常不错，值得用于辅助分析</li></ul><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><ul><li>通过如下的代码实现，hook出来的结果需要通过匹配模板进行匹配，并且筛选剔除掉过滤模板中的内容。<figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> matchRegEx = &#123;MATCHREGEX&#125;;<br><span class="hljs-keyword">var</span> blackRegEx = &#123;BLACKREGEX&#125;;<br>Java.enumerateLoadedClasses(&#123;<br>    <span class="hljs-attr">onMatch</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">aClass</span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> index <span class="hljs-keyword">in</span> matchRegEx) &#123;<br>            <span class="hljs-comment">// console.log(matchRegEx[index]);</span><br>            <span class="hljs-comment">// 通过匹配模板进行匹配</span><br>            <span class="hljs-keyword">if</span> (match(matchRegEx[index], aClass)) &#123;<br>                <span class="hljs-keyword">var</span> is_black = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i <span class="hljs-keyword">in</span> blackRegEx) &#123;<br>                    <span class="hljs-comment">//如果也包含在过滤模板中，则剔除</span><br>                    <span class="hljs-keyword">if</span> (match(blackRegEx[i], aClass)) &#123;<br>                        is_black = <span class="hljs-literal">true</span>;<br>                        <span class="hljs-built_in">log</span>(aClass + <span class="hljs-string">&quot;&#x27; black by &#x27;&quot;</span> + blackRegEx[i] + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (is_black) &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-built_in">log</span>(aClass + <span class="hljs-string">&quot;&#x27; match by &#x27;&quot;</span> + matchRegEx[index] + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>                traceClass(aClass);<br>            &#125;<br>        &#125;<br><br>    &#125;,<br>    <span class="hljs-attr">onComplete</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;Complete.&quot;</span>);<br>    &#125;<br>&#125;);<br><br></code></pre></td></tr></table></figure></li><li>通过下述代码实现的模糊匹配和精准匹配：<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs stata">function <span class="hljs-built_in">match</span>(<span class="hljs-keyword">ex</span>, text) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">ex</span>[1] == &#x27;:&#x27;) &#123;<br>        <span class="hljs-keyword">var</span> mode = <span class="hljs-keyword">ex</span>[0];<br>        <span class="hljs-keyword">if</span> (mode == &#x27;<span class="hljs-keyword">E</span>&#x27;) &#123;<br>            <span class="hljs-keyword">ex</span> = <span class="hljs-keyword">ex</span>.<span class="hljs-built_in">substr</span>(2, <span class="hljs-keyword">ex</span>.length - 2);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">ex</span> == text;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mode == &#x27;<span class="hljs-keyword">M</span>&#x27;) &#123;<br>            <span class="hljs-keyword">ex</span> = <span class="hljs-keyword">ex</span>.<span class="hljs-built_in">substr</span>(2, <span class="hljs-keyword">ex</span>.length - 2);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;Unknown match mode: &quot;</span> + mode + <span class="hljs-string">&quot;, current support M(match) and E(equal)&quot;</span>)<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> text.<span class="hljs-built_in">match</span>(<span class="hljs-keyword">ex</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li>通过下述代码实现的导入导出调用栈及观察结果:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">export_onClick</span>(<span class="hljs-params">self</span>):<br>    jobfile = QFileDialog.getSaveFileName(<span class="hljs-variable language_">self</span>, <span class="hljs-string">&#x27;export&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;json file(*.json)&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(jobfile, <span class="hljs-built_in">tuple</span>):<br>        jobfile = jobfile[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> jobfile:<br>        <span class="hljs-keyword">return</span><br>    f = <span class="hljs-built_in">open</span>(jobfile, <span class="hljs-string">&#x27;w&#x27;</span>)<br>    export = &#123;&#125;<br>    export[<span class="hljs-string">&#x27;match_regex&#x27;</span>] = <span class="hljs-variable language_">self</span>.app.match_regex_list<br>    export[<span class="hljs-string">&#x27;black_regex&#x27;</span>] = <span class="hljs-variable language_">self</span>.app.black_regex_list<br>    tree = &#123;&#125;<br>    <span class="hljs-keyword">for</span> tid <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.app.thread_map:<br>        tree[<span class="hljs-variable language_">self</span>.app.thread_map[tid][<span class="hljs-string">&#x27;list&#x27;</span>][<span class="hljs-number">0</span>].text()] = gen_tree(<span class="hljs-variable language_">self</span>.app.thread_map[tid][<span class="hljs-string">&#x27;list&#x27;</span>][<span class="hljs-number">0</span>])<br>    export[<span class="hljs-string">&#x27;tree&#x27;</span>] = tree<br>    f.write(json.dumps(export))<br>    f.close()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">import_onClick</span>(<span class="hljs-params">self</span>):<br>    jobfile = QFileDialog.getOpenFileName(<span class="hljs-variable language_">self</span>, <span class="hljs-string">&#x27;import&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;json file(*.json)&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(jobfile, <span class="hljs-built_in">tuple</span>):<br>        jobfile = jobfile[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> jobfile:<br>        <span class="hljs-keyword">return</span><br>    f = <span class="hljs-built_in">open</span>(jobfile, <span class="hljs-string">&#x27;r&#x27;</span>)<br>    export = json.loads(f.read())<br>    <span class="hljs-keyword">for</span> regex <span class="hljs-keyword">in</span> export[<span class="hljs-string">&#x27;match_regex&#x27;</span>]: <span class="hljs-variable language_">self</span>.app.match_regex_list.append(<br>        regex), <span class="hljs-variable language_">self</span>.app.match_regex_dialog.setupList()<br>    <span class="hljs-keyword">for</span> regex <span class="hljs-keyword">in</span> export[<span class="hljs-string">&#x27;black_regex&#x27;</span>]: <span class="hljs-variable language_">self</span>.app.black_regex_list.append(<br>        regex), <span class="hljs-variable language_">self</span>.app.black_regex_dialog.setupList()<br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> export[<span class="hljs-string">&#x27;tree&#x27;</span>]:<br>        tid = t[<span class="hljs-number">0</span>: t.index(<span class="hljs-string">&#x27; - &#x27;</span>)]<br>        tname = t[t.index(<span class="hljs-string">&#x27; - &#x27;</span>) + <span class="hljs-number">3</span>:]<br>        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> export[<span class="hljs-string">&#x27;tree&#x27;</span>][t]:<br>            put_tree(<span class="hljs-variable language_">self</span>.app, tid, tname, item)<br><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
      <category>安卓逆向</category>
      
      <category>逆向框架</category>
      
      <category>Frida</category>
      
      <category>frida方案</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安卓逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Frida 工具</title>
    <link href="/blog/2025/04/12/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/%E9%80%86%E5%90%91%E5%B7%A5%E5%85%B7/Frida/Frida%20%E5%B7%A5%E5%85%B7/"/>
    <url>/blog/2025/04/12/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/%E9%80%86%E5%90%91%E5%B7%A5%E5%85%B7/Frida/Frida%20%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="Frida-Objection"><a href="#Frida-Objection" class="headerlink" title="Frida Objection"></a>Frida Objection</h1><h2 id="安装使用入门"><a href="#安装使用入门" class="headerlink" title="安装使用入门"></a>安装使用入门</h2><ul><li>参考：<a href="https://blog.csdn.net/qq_38851536/article/details/103753314">https://blog.csdn.net/qq_38851536/article/details/103753314</a></li><li>介绍 ：objection是一个基于Frida开发的命令行工具，它可以很方便的Hook Java函数和类，并输出参数，调用栈，返回值。</li></ul><ol><li><p>安装Objection ：pip install objection</p></li><li><p>启动Objection </p><ol><li>保证Frida server开启，并转发端口 </li><li>命令行输出 ：objection -g packageName explore </li><li>即可进入objection提供的交互界面，类似于Frida的cli交互环境，我们下面的操作都是基于这个交互界面。</li></ol></li><li><p>Hook Java方法 </p><ol><li>android hooking watch class_method com.xxx.xxx.methodName –dump-args –dump-backtrace –dump-return </li><li>有时候我们会遇到内部类或者匿名内部类的Hook，不用担心，假设类为com.test.a，内部类为b，完整路径即为com.test.a$b，如果为匿名内部类，可以查看其smali代码，往往命名为com.test.a$1这种形式。</li></ol></li><li><p>Hook Java类 </p><ol><li>android hooking watch class com.xxx.xxx </li><li>对类的Hook不提供完整的调用栈打印等功能（存疑）</li></ol></li><li><p>Spawn方式Hook </p><ol><li>从Objection的使用操作中我们可以发现，Obejction采用Attach附加模式进行Hook，这可能会让我们错过较早的Hook时机，可以通过如下的代码启动Objection，引号中的objection命令会在启动时就注入App。</li><li>objection -g packageName explore –startup-command ‘android hooking watch xxx’</li></ol></li><li><p>免Root运行Frida </p><ol><li>Frida提供了免root的Hook方案，即手动注入frida-gadget库， Objection对其进行了封装。适用于群控</li><li>但实际没啥用（搞逆向的怎么会没一台root机器）。除此之外，Objection提供了对IOS的Hook，以及对sslunpinng的处理，Hook剪切板&#x2F;Root检测等，但实际使用中用处不大，一般会选择其他专门的工具，此处不提。</li></ol></li><li><p>退出Objection：在交互界环境中输入exit</p></li></ol><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ol><li>空格键: 忘记命令直接输入空格键, 会有提示与补全</li><li>help: help [command] 会有详细介绍指定命令的作用与例子</li><li>jobs: 任务管理系统, 可以方便的查看与删除任务</li></ol><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h3 id="env命令：枚举与所讨论的应用程序相关的其他有趣目录"><a href="#env命令：枚举与所讨论的应用程序相关的其他有趣目录" class="headerlink" title="env命令：枚举与所讨论的应用程序相关的其他有趣目录"></a>env命令：枚举与所讨论的应用程序相关的其他有趣目录</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gradle">com.opera.mini.<span class="hljs-keyword">native</span> on (samsung: <span class="hljs-number">6.0</span>.<span class="hljs-number">1</span>) [usb] # env<br>Name                    Path<br>----------------------  ------------------------------------------------------------<br><br>filesDirectory          <span class="hljs-regexp">/data/u</span>ser<span class="hljs-regexp">/0/</span>com.opera.mini.<span class="hljs-keyword">native</span>/files<br>cacheDirectory          <span class="hljs-regexp">/data/u</span>ser<span class="hljs-regexp">/0/</span>com.opera.mini.<span class="hljs-keyword">native</span>/cache<br>externalCacheDirectory  <span class="hljs-regexp">/storage/</span>emulated<span class="hljs-regexp">/0/</span>Android<span class="hljs-regexp">/data/</span>com.opera.mini.<span class="hljs-keyword">native</span>/cache<br>codeCacheDirectory      <span class="hljs-regexp">/data/u</span>ser<span class="hljs-regexp">/0/</span>com.opera.mini.<span class="hljs-keyword">native</span>/code_cache<br>obbDir                  <span class="hljs-regexp">/storage/</span>emulated<span class="hljs-regexp">/0/</span>Android<span class="hljs-regexp">/obb/</span>com.opera.mini.<span class="hljs-keyword">native</span><br>packageCodePath         <span class="hljs-regexp">/data/</span>app<span class="hljs-regexp">/com.opera.mini.native-1/</span>base.apk<br></code></pre></td></tr></table></figure><h3 id="file-download命令-从远程文件系统中下载文件"><a href="#file-download命令-从远程文件系统中下载文件" class="headerlink" title="file download命令: 从远程文件系统中下载文件"></a>file download命令: 从远程文件系统中下载文件</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">file</span> download [<span class="hljs-keyword">file</span>] [outfile]<br><br>com.opera.mini.<span class="hljs-keyword">native</span> on (samsung: <span class="hljs-number">6.0</span>.<span class="hljs-number">1</span>) [usb] # <span class="hljs-keyword">file</span> download fhash.dat fhash.dat<br>Downloading <span class="hljs-regexp">/data/u</span>ser<span class="hljs-regexp">/0/</span>com.opera.mini.<span class="hljs-keyword">native</span><span class="hljs-regexp">/cache/</span>fhash.dat to fhash.dat<br></code></pre></td></tr></table></figure><h3 id="列出app具有的所有avtivity"><a href="#列出app具有的所有avtivity" class="headerlink" title="列出app具有的所有avtivity"></a>列出app具有的所有avtivity</h3><ul><li>android hooking list activities</li></ul><h3 id="启动指定avtivity"><a href="#启动指定avtivity" class="headerlink" title="启动指定avtivity"></a>启动指定avtivity</h3><ul><li>android intent launch_activity [class_activity]</li></ul><h3 id="RPC调用命令"><a href="#RPC调用命令" class="headerlink" title="RPC调用命令"></a>RPC调用命令</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">curl</span> <span class="hljs-literal">-s</span> <span class="hljs-string">&quot;http://127.0.0.1:8888/rpc/invoke/androidHookingListActivities&quot;</span><br><br><span class="hljs-variable">$</span> <span class="hljs-built_in">curl</span> <span class="hljs-literal">-s</span> <span class="hljs-string">&quot;http://127.0.0.1:8888/rpc/invoke/androidHookingListActivities&quot;</span><br>[<span class="hljs-string">&quot;com.reddit.frontpage.StartActivity&quot;</span>,<span class="hljs-string">&quot;com.reddit.frontpage.IntroductionActivity&quot;</span>, <span class="hljs-type">...</span> <span class="hljs-type">snip</span> <span class="hljs-type">...</span>]<br><br>- RPC调用执行脚本:`url <span class="hljs-literal">-X</span> POST <span class="hljs-literal">-H</span> <span class="hljs-string">&quot;Content-Type: text/javascript&quot;</span> http://<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8888</span>/script/runonce <span class="hljs-literal">-d</span> <span class="hljs-string">&quot;@script.js&quot;</span>`<br><span class="hljs-variable">$</span> <span class="hljs-built_in">cat</span> script.js<br>&#123;<br>    send(Frida.version);<br>&#125;<br>[&#123;<span class="hljs-string">&quot;payload&quot;</span>:<span class="hljs-string">&quot;12.8.0&quot;</span>,<span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;send&quot;</span>&#125;]<br></code></pre></td></tr></table></figure><h3 id="Memory-指令"><a href="#Memory-指令" class="headerlink" title="Memory 指令"></a>Memory 指令</h3><ul><li>memory list modules &#x2F;&#x2F;枚举当前进程模块</li><li>memory list exports [lib_name] &#x2F;&#x2F;查看指定模块的导出函数</li><li>memory list exports libart.so –json &#x2F;root&#x2F;libart.json &#x2F;&#x2F;将结果保存到json文件中</li><li>memory search –string –offsets-only &#x2F;&#x2F;搜索内存</li></ul><p>Android heap<br>&#x2F;堆内存中搜索指定类的实例, 可以获取该类的实例id<br>search instances search instances<br>android heap search instances com.xx.xx.class</p><p>&#x2F;&#x2F;直接调用指定实例下的方法<br>android heap execute [ins_id] [func_name]</p><p>&#x2F;&#x2F;自定义frida脚本, 执行实例的方法<br>android heap execute [ins_id]</p><p>root<br>&#x2F;尝试关闭app的root检测<br>android root disable<br>&#x2F;&#x2F;尝试模拟root环境<br>android root simulate<br>UI<br>&#x2F;&#x2F;截图<br>android ui screenshot [image.png]</p><p>&#x2F;&#x2F;设置FLAG_SECURE权限<br>android ui FLAG_SECURE false</p><p>内存漫游<br>&#x2F;列出内存中所有的类<br>android hooking list classes</p><p>&#x2F;&#x2F;在内存中所有已加载的类中搜索包含特定关键词的类<br>android hooking search classes [search_name] </p><p>&#x2F;&#x2F;在内存中所有已加载的方法中搜索包含特定关键词的方法<br>android hooking search methods [search_name] </p><p>&#x2F;&#x2F; 在内存中搜索已知类的所有方法<br>android hooking list class_methods [class_name] </p><p>&#x2F;&#x2F;直接生成hook代码<br>android hooking generate simple [class_name]<br>android root simulate</p><p>hook 方式<br> &#x2F;*<br>  hook指定方法, 如果有重载会hook所有重载,如果有疑问可以看<br>  –dump-args : 打印参数<br>  –dump-backtrace : 打印调用栈<br>  –dump-return : 打印返回值<br>  *&#x2F;<br>android hooking watch class_method com.xxx.xxx.methodName –dump-args –dump-backtrace –dump-return</p><p>&#x2F;&#x2F;hook指定类, 会打印该类下的所以调用<br>android hooking watch class com.xxx.xxx</p><p>&#x2F;&#x2F;设置返回值(只支持bool类型)<br>android hooking set return_value com.xxx.xxx.methodName false</p><p>Spawn方式Hook<br>objection -g packageName explore –startup-command ‘[obejection_command]’</p><p>activity和service操作<br>&#x2F;&#x2F;枚举activity<br>android hooking list activities<br>&#x2F;&#x2F;启动activity<br>android intent launch_activity [activity_class]<br>&#x2F;&#x2F;枚举services<br>android hooking list services<br>&#x2F;&#x2F;启动services<br>android intent launch_service [services_class]</p><p>任务管理器<br>&#x2F;&#x2F;查看任务列表<br>jobs list<br>&#x2F;&#x2F;关闭任务<br>jobs kill [task_id]</p><p>关闭app的ssl校验<br>android sslpinning disable</p><p>监控系统剪贴板<br>&#x2F;&#x2F;获取Android剪贴板服务上的句柄并每5秒轮询一次用于数据。 如果发现新数据，与之前的调查不同，则该数据将被转储到屏幕上。<br>help android  clipboard</p><p>执行命令行<br>help android shell_exec [command]</p>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
      <category>安卓逆向</category>
      
      <category>逆向工具</category>
      
      <category>Frida</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安卓逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Frida hook so</title>
    <link href="/blog/2025/04/12/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/%E9%80%86%E5%90%91%E5%B7%A5%E5%85%B7/Frida/Frida%20hook%20so/"/>
    <url>/blog/2025/04/12/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/%E9%80%86%E5%90%91%E5%B7%A5%E5%85%B7/Frida/Frida%20hook%20so/</url>
    
    <content type="html"><![CDATA[<h1 id="frida-hook-native常用模块"><a href="#frida-hook-native常用模块" class="headerlink" title="frida hook native常用模块"></a>frida hook native常用模块</h1><h3 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h3><p>hello.so有printhello()方法</p><p>var pointer &#x3D; Module.findExportByName(‘hello.so’, ‘printhello’)<br>var base_pointer &#x3D; Module.findBaseAddress(‘hello.so’)<br>var module &#x3D; Process.findModuleByAddress(base_pointer)</p><h3 id="Module模块"><a href="#Module模块" class="headerlink" title="Module模块"></a>Module模块</h3><p><strong>.findExportByName(moduleName|null, exportName)</strong></p><ul><li>moduleName: lib名字</li><li>exportname: 函数名字</li><li>返回exportName的地址指针</li></ul><p><strong>.getExportByName(moduleName|null, exportName)</strong></p><ul><li>moduleName: lib名字</li><li>exportname: 函数名字</li><li>返回exportName的地址指针</li></ul><p><strong>.findBaseAddress(moduleName)</strong></p><ul><li>moduleName: lib名字</li><li>返回lib的基地址</li></ul><h3 id="Process模块"><a href="#Process模块" class="headerlink" title="Process模块"></a>Process模块</h3><p><strong>.findModuleByAddress(address)</strong></p><ul><li>address: lib的指针地址</li><li>返回一个Module对象</li></ul><h3 id="Memory模块"><a href="#Memory模块" class="headerlink" title="Memory模块"></a>Memory模块</h3><p><strong>.readCString(pointer)</strong></p><ul><li>pointer:指针地址</li><li>把pointer还原成字符串</li></ul><p><strong>.readUtf8String(pointer)</strong></p><p><strong>.readAnsiString(pointer)</strong></p><h3 id="Interceptor模块：监听"><a href="#Interceptor模块：监听" class="headerlink" title="Interceptor模块：监听"></a>Interceptor模块：监听</h3><p><strong>.attach(target, callback)</strong></p><ul><li>target: 指针地址</li><li>callbacks: 回调函数<ul><li>onEnter</li><li>onLeave<br><strong>.replace(target, replacement)</strong></li></ul></li></ul><h1 id="查看加载了哪些SO文件"><a href="#查看加载了哪些SO文件" class="headerlink" title="查看加载了哪些SO文件"></a>查看加载了哪些SO文件</h1><h4 id="方式1-cat-proc-pid-maps"><a href="#方式1-cat-proc-pid-maps" class="headerlink" title="方式1: cat &#x2F;proc&#x2F;[pid]&#x2F;maps"></a>方式1: cat &#x2F;proc&#x2F;[pid]&#x2F;maps</h4><h4 id="方式2：hook系统so库"><a href="#方式2：hook系统so库" class="headerlink" title="方式2：hook系统so库"></a>方式2：hook系统so库</h4><ul><li>该库常调用函数：void * dlopen(const char *filename, int flag)；加载动态链接库</li></ul><h4 id="方式3：-java-lang-Runtime"><a href="#方式3：-java-lang-Runtime" class="headerlink" title="方式3： java.lang.Runtime"></a>方式3： java.lang.Runtime</h4><ul><li><a href="https://www.breakyizhan.com/java/4982.html">https://www.breakyizhan.com/java/4982.html</a></li><li>java.lang.Runtime：每个Java应用程序都有一个Runtime类实例</li><li>Runtime.getRuntime().loadLibrary() 加载lib</li></ul><h4 id="方案4：frida代码查看加载运行了哪些so文件"><a href="#方案4：frida代码查看加载运行了哪些so文件" class="headerlink" title="方案4：frida代码查看加载运行了哪些so文件"></a>方案4：frida代码查看加载运行了哪些so文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs 方式1">import frida<br>import sys<br><br><br>def on_message(message, data):<br>    if message[&#x27;type&#x27;] == &#x27;send&#x27;:<br>        print(f&#x27;[*] &#123;message[&quot;payload&quot;]&#125;&#x27;)<br>    else:<br>        print(message)<br><br><br>oncreate_script = &quot;&quot;&quot;<br>    Java.perform(<br>        function()&#123;<br>            var testsign = Java.use(&#x27;com.yaotong.crackme.MainActivity&#x27;);<br>            // .overload(&#x27;android.os.Bundle&#x27;)  重载函数，当需要传递参数的时候使用overload方法<br>            testsign.onCreate.overload(&#x27;android.os.Bundle&#x27;).implementation = function(v)&#123;<br>                send(&#x27;I am here&#x27;);<br>                // this.onCreate();: 不改变原来函数的含义才行<br>                this.onCreate();<br>            &#125;;<br>        &#125;<br>    );<br><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs 方式2">test_module_script = &quot;&quot;&quot;<br>    var walk = Process.enumerateModules();<br>    for (var i = 0; i&lt;walk.length; i++)&#123;<br>        send(walk[i].name);<br>    &#125;<br>    var base_address = Module.findBaseAddress(&#x27;libc.so&#x27;);<br>    send(&#x27;base_address: &#x27; + base_address)<br>    <br>    var mod_address = Module.findExportByName(&#x27;libc.so&#x27;, &#x27;dlopen&#x27;);<br>    send(&#x27;mod_address: &#x27; + mod_address);<br>    <br>    var lib_module = Process.findModuleByAddress(base_address);<br>    send(&#x27;lib_module_name:&#x27; + lib_module.name);<br>    <br>    Interceptor.attach(mod_address, <br>    &#123;<br>        onEnter: function(args)&#123;<br>            //send(&quot;open(&quot;+args[0]+&quot;,&quot;+args[1]+&quot;)&quot;);<br>            send(&quot;open(&quot;+Memory.readUtf8String(args[0])+&quot;,&quot;+args[1]+&quot;)&quot;);<br>        &#125;,<br>        onLeave: function(retval)&#123;<br>            send(&quot;retval:&quot;+retval);<br>        &#125;<br>    &#125;);<br>&quot;&quot;&quot;<br><br><br>device = frida.get_usb_device()<br>pid = device.spawn([&#x27;com.yaotong.crackme&#x27;])<br>print(pid)<br>process = device.attach(pid)<br>script = process.create_script(test_module_script)<br>script.on(&#x27;message&#x27;, on_message)<br>print(&#x27;runing&#x27;)<br>script.load()<br><br># 重启app<br>device.resume(pid)<br>sys.stdin.read()<br></code></pre></td></tr></table></figure><h1 id="frida-hook-native-模板"><a href="#frida-hook-native-模板" class="headerlink" title="frida hook native 模板"></a>frida hook native 模板</h1><h3 id="需要注意"><a href="#需要注意" class="headerlink" title="需要注意"></a>需要注意</h3><ul><li>区分 thumb指令 和arm指令</li></ul><ol><li>1个thumb指令 2个字节</li><li>1个arm指令   4个字节</li><li>如果hook native，是thumb指令，要在地址上 + 1</li></ol><h3 id="代码模板"><a href="#代码模板" class="headerlink" title="代码模板"></a>代码模板</h3><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs scilab">import frida, sys<br><br>jscode = <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">setImmediate(function () &#123;</span><br><span class="hljs-string">    send(&quot;</span>start<span class="hljs-string">&quot;);</span><br><span class="hljs-string">    //遍历模块找基址</span><br><span class="hljs-string">    Process.enumerateModules(&#123;</span><br><span class="hljs-string">        onMatch: function (exp) &#123;</span><br><span class="hljs-string">            if (exp.name == &#x27;</span>libdemo.so&#x27;) &#123;<br>                send(<span class="hljs-string">&#x27;enumerateModules find&#x27;</span>);<br>                send(exp.name + <span class="hljs-string">&quot;|&quot;</span> + exp.base + <span class="hljs-string">&quot;|&quot;</span> + exp.<span class="hljs-built_in">size</span> + <span class="hljs-string">&quot;|&quot;</span> + exp.path);<br>                send(<span class="hljs-built_in">exp</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;stop&#x27;</span>;<br>            &#125;<br>        &#125;,<br>        onComplete: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> &#123;</span><br>            send(<span class="hljs-string">&#x27;enumerateModules stop&#x27;</span>);<br>        &#125;<br>    &#125;);<br> <br>    <span class="hljs-comment">//hook导出函数</span><br>    var exports = Module.enumerateExportsSync(<span class="hljs-string">&quot;libdemo.so&quot;</span>);<br>    <span class="hljs-keyword">for</span>(var i=<span class="hljs-number">0</span>;i&lt;exports.<span class="hljs-built_in">length</span>;i++)&#123;<br>        send(<span class="hljs-string">&quot;name:&quot;</span>+exports[i].name+<span class="hljs-string">&quot;  address:&quot;</span>+exports[i].address);<br>    &#125;<br>    <br>    <span class="hljs-comment">//通过模块名直接查找基址</span><br>    var baseSOFile = Module.findBaseAddress(<span class="hljs-string">&quot;libdemo.so&quot;</span>);  <br>    Interceptor.attach(baseSOFile.add(<span class="hljs-number">0x00001270</span>),&#123;  <span class="hljs-comment">//如果hook native，是thumb指令，要在地址上 + 1；</span><br>        onEnter: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(args)</span> &#123;</span><br>            <span class="hljs-comment">//console.log(Memory.readCString(args[0]));</span><br>            <span class="hljs-comment">//console.log(Memory.readUtf16String(args[3]));</span><br>            console.<span class="hljs-built_in">log</span>(args[<span class="hljs-number">2</span>]);<br>            console.<span class="hljs-built_in">log</span>(args[<span class="hljs-number">3</span>]);<br>            console.<span class="hljs-built_in">log</span>(args[<span class="hljs-number">4</span>]);<br>        &#125;,<br>        onLeave: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(retval)</span>&#123;</span><br>        <br>        &#125;<br>    &#125;);<br>&#125;);<br><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">def on_message(message, data):</span><br><span class="hljs-string">    if message[&#x27;</span>type&#x27;] == <span class="hljs-string">&#x27;send&#x27;</span>:<br>        print(<span class="hljs-string">&quot;[*] &#123;0&#125;&quot;</span>.format(message[<span class="hljs-string">&#x27;payload&#x27;</span>]))<br>    <span class="hljs-keyword">else</span>:<br>        print(message)<br><br>process = frida.get_usb_device().attach(<span class="hljs-string">&#x27;com.qianyu.demo&#x27;</span>)<br>script = process.create_script(jscode)<br>script.on(<span class="hljs-string">&#x27;message&#x27;</span>, on_message)<br>script.<span class="hljs-built_in">load</span>()<br>sys.stdin.read()<br></code></pre></td></tr></table></figure><h1 id="hook-so文件动态注册函数"><a href="#hook-so文件动态注册函数" class="headerlink" title="hook so文件动态注册函数"></a>hook so文件动态注册函数</h1><ul><li>参考博客：<a href="https://www.cnblogs.com/DirWang/p/12240423.html">https://www.cnblogs.com/DirWang/p/12240423.html</a></li><li>运行命令：frida -U –no-pause -f package_name -l hook_RegisterNatives.js</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs 方式1">function hook_RegisterNatives() &#123;<br>    var symbols = Module.enumerateSymbolsSync(&quot;libart.so&quot;);<br>    var addrRegisterNatives = null;<br>    for (var i = 0; i &lt; symbols.length; i++) &#123;<br>        var symbol = symbols[i];<br>        <br>        //_ZN3art3JNI15RegisterNativesEP7_JNIEnvP7_jclassPK15JNINativeMethodi<br>        if (symbol.name.indexOf(&quot;art&quot;) &gt;= 0 &amp;&amp;<br>                symbol.name.indexOf(&quot;JNI&quot;) &gt;= 0 &amp;&amp; <br>                symbol.name.indexOf(&quot;RegisterNatives&quot;) &gt;= 0 &amp;&amp; <br>                symbol.name.indexOf(&quot;CheckJNI&quot;) &lt; 0) &#123;<br>            addrRegisterNatives = symbol.address;<br>            console.log(&quot;RegisterNatives is at &quot;, symbol.address, symbol.name);<br>        &#125;<br>    &#125;<br><br>    if (addrRegisterNatives != null) &#123;<br>        Interceptor.attach(addrRegisterNatives, &#123;<br>            onEnter: function (args) &#123;<br>                console.log(&quot;[RegisterNatives] method_count:&quot;, args[3]);<br>                var env = args[0];<br>                var java_class = args[1];<br>                var class_name = Java.vm.tryGetEnv().getClassName(java_class);<br>                //console.log(class_name);<br><br>                var methods_ptr = ptr(args[2]);<br><br>                var method_count = parseInt(args[3]);<br>                for (var i = 0; i &lt; method_count; i++) &#123;<br>                    var name_ptr = Memory.readPointer(methods_ptr.add(i * Process.pointerSize * 3));<br>                    var sig_ptr = Memory.readPointer(methods_ptr.add(i * Process.pointerSize * 3 + Process.pointerSize));<br>                    var fnPtr_ptr = Memory.readPointer(methods_ptr.add(i * Process.pointerSize * 3 + Process.pointerSize * 2));<br><br>                    var name = Memory.readCString(name_ptr);<br>                    var sig = Memory.readCString(sig_ptr);<br>                    var find_module = Process.findModuleByAddress(fnPtr_ptr);<br>                    console.log(&quot;[RegisterNatives] java_class:&quot;, class_name, &quot;name:&quot;, name, &quot;sig:&quot;, sig, &quot;fnPtr:&quot;, fnPtr_ptr, &quot;module_name:&quot;, find_module.name, &quot;module_base:&quot;, find_module.base, &quot;offset:&quot;, ptr(fnPtr_ptr).sub(find_module.base));<br><br>                &#125;<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br><br>setImmediate(hook_RegisterNatives);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs 方式2">function hook_RegisterNatives() &#123;<br>    var symbols = Module.enumerateSymbolsSync(&quot;libart.so&quot;);<br>    var addrRegisterNatives = null;<br>    for (var i = 0; i &lt; symbols.length; i++) &#123;<br>        var symbol = symbols[i];<br>        <br>        //_ZN3art3JNI15RegisterNativesEP7_JNIEnvP7_jclassPK15JNINativeMethodi<br>        if (symbol.name.indexOf(&quot;art&quot;) &gt;= 0 &amp;&amp;<br>                symbol.name.indexOf(&quot;JNI&quot;) &gt;= 0 &amp;&amp; <br>                symbol.name.indexOf(&quot;RegisterNatives&quot;) &gt;= 0 &amp;&amp; <br>                symbol.name.indexOf(&quot;CheckJNI&quot;) &lt; 0) &#123;<br>            addrRegisterNatives = symbol.address;<br>            console.log(&quot;RegisterNatives is at &quot;, symbol.address, symbol.name);<br>        &#125;<br>    &#125;<br><br>    if (addrRegisterNatives != null) &#123;<br>        Interceptor.attach(addrRegisterNatives, &#123;<br>            onEnter: function (args) &#123;<br>                console.log(&quot;[RegisterNatives] method_count:&quot;, args[3]);<br>                var env = args[0];<br>                var java_class = args[1];<br>                var class_name = Java.vm.tryGetEnv().getClassName(java_class);<br>                //console.log(class_name);<br><br>                var methods_ptr = ptr(args[2]);<br><br>                var method_count = parseInt(args[3]);<br>                for (var i = 0; i &lt; method_count; i++) &#123;<br>                    var name_ptr = Memory.readPointer(methods_ptr.add(i * Process.pointerSize * 3));<br>                    var sig_ptr = Memory.readPointer(methods_ptr.add(i * Process.pointerSize * 3 + Process.pointerSize));<br>                    var fnPtr_ptr = Memory.readPointer(methods_ptr.add(i * Process.pointerSize * 3 + Process.pointerSize * 2));<br><br>                    var name = Memory.readCString(name_ptr);<br>                    var sig = Memory.readCString(sig_ptr);<br>                    var find_module = Process.findModuleByAddress(fnPtr_ptr);<br>                    console.log(&quot;[RegisterNatives] java_class:&quot;, class_name, &quot;name:&quot;, name, &quot;sig:&quot;, sig, &quot;fnPtr:&quot;, fnPtr_ptr, &quot;module_name:&quot;, find_module.name, &quot;module_base:&quot;, find_module.base, &quot;offset:&quot;, ptr(fnPtr_ptr).sub(find_module.base));<br><br>                &#125;<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br><br>setImmediate(hook_RegisterNatives);<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
      <category>安卓逆向</category>
      
      <category>逆向工具</category>
      
      <category>Frida</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安卓逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Frida hook so</title>
    <link href="/blog/2025/04/12/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/4.%20%E9%80%86%E5%90%91%E6%A1%86%E6%9E%B6/Frida/Frida%20hook%20so/"/>
    <url>/blog/2025/04/12/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/4.%20%E9%80%86%E5%90%91%E6%A1%86%E6%9E%B6/Frida/Frida%20hook%20so/</url>
    
    <content type="html"><![CDATA[<h1 id="frida-hook-native常用模块"><a href="#frida-hook-native常用模块" class="headerlink" title="frida hook native常用模块"></a>frida hook native常用模块</h1><h3 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h3><p>hello.so有printhello()方法</p><p>var pointer &#x3D; Module.findExportByName(‘hello.so’, ‘printhello’)<br>var base_pointer &#x3D; Module.findBaseAddress(‘hello.so’)<br>var module &#x3D; Process.findModuleByAddress(base_pointer)</p><h3 id="Module模块"><a href="#Module模块" class="headerlink" title="Module模块"></a>Module模块</h3><p><strong>.findExportByName(moduleName|null, exportName)</strong></p><ul><li>moduleName: lib名字</li><li>exportname: 函数名字</li><li>返回exportName的地址指针</li></ul><p><strong>.getExportByName(moduleName|null, exportName)</strong></p><ul><li>moduleName: lib名字</li><li>exportname: 函数名字</li><li>返回exportName的地址指针</li></ul><p><strong>.findBaseAddress(moduleName)</strong></p><ul><li>moduleName: lib名字</li><li>返回lib的基地址</li></ul><h3 id="Process模块"><a href="#Process模块" class="headerlink" title="Process模块"></a>Process模块</h3><p><strong>.findModuleByAddress(address)</strong></p><ul><li>address: lib的指针地址</li><li>返回一个Module对象</li></ul><h3 id="Memory模块"><a href="#Memory模块" class="headerlink" title="Memory模块"></a>Memory模块</h3><p><strong>.readCString(pointer)</strong></p><ul><li>pointer:指针地址</li><li>把pointer还原成字符串</li></ul><p><strong>.readUtf8String(pointer)</strong></p><p><strong>.readAnsiString(pointer)</strong></p><h3 id="Interceptor模块：监听"><a href="#Interceptor模块：监听" class="headerlink" title="Interceptor模块：监听"></a>Interceptor模块：监听</h3><p><strong>.attach(target, callback)</strong></p><ul><li>target: 指针地址</li><li>callbacks: 回调函数<ul><li>onEnter</li><li>onLeave<br><strong>.replace(target, replacement)</strong></li></ul></li></ul><h1 id="查看加载了哪些SO文件"><a href="#查看加载了哪些SO文件" class="headerlink" title="查看加载了哪些SO文件"></a>查看加载了哪些SO文件</h1><h4 id="方式1-cat-proc-pid-maps"><a href="#方式1-cat-proc-pid-maps" class="headerlink" title="方式1: cat &#x2F;proc&#x2F;[pid]&#x2F;maps"></a>方式1: cat &#x2F;proc&#x2F;[pid]&#x2F;maps</h4><h4 id="方式2：hook系统so库"><a href="#方式2：hook系统so库" class="headerlink" title="方式2：hook系统so库"></a>方式2：hook系统so库</h4><ul><li>该库常调用函数：void * dlopen(const char *filename, int flag)；加载动态链接库</li></ul><h4 id="方式3：-java-lang-Runtime"><a href="#方式3：-java-lang-Runtime" class="headerlink" title="方式3： java.lang.Runtime"></a>方式3： java.lang.Runtime</h4><ul><li><a href="https://www.breakyizhan.com/java/4982.html">https://www.breakyizhan.com/java/4982.html</a></li><li>java.lang.Runtime：每个Java应用程序都有一个Runtime类实例</li><li>Runtime.getRuntime().loadLibrary() 加载lib</li></ul><h4 id="方案4：frida代码查看加载运行了哪些so文件"><a href="#方案4：frida代码查看加载运行了哪些so文件" class="headerlink" title="方案4：frida代码查看加载运行了哪些so文件"></a>方案4：frida代码查看加载运行了哪些so文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs 方式1">import frida<br>import sys<br><br><br>def on_message(message, data):<br>    if message[&#x27;type&#x27;] == &#x27;send&#x27;:<br>        print(f&#x27;[*] &#123;message[&quot;payload&quot;]&#125;&#x27;)<br>    else:<br>        print(message)<br><br><br>oncreate_script = &quot;&quot;&quot;<br>    Java.perform(<br>        function()&#123;<br>            var testsign = Java.use(&#x27;com.yaotong.crackme.MainActivity&#x27;);<br>            // .overload(&#x27;android.os.Bundle&#x27;)  重载函数，当需要传递参数的时候使用overload方法<br>            testsign.onCreate.overload(&#x27;android.os.Bundle&#x27;).implementation = function(v)&#123;<br>                send(&#x27;I am here&#x27;);<br>                // this.onCreate();: 不改变原来函数的含义才行<br>                this.onCreate();<br>            &#125;;<br>        &#125;<br>    );<br><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs 方式2">test_module_script = &quot;&quot;&quot;<br>    var walk = Process.enumerateModules();<br>    for (var i = 0; i&lt;walk.length; i++)&#123;<br>        send(walk[i].name);<br>    &#125;<br>    var base_address = Module.findBaseAddress(&#x27;libc.so&#x27;);<br>    send(&#x27;base_address: &#x27; + base_address)<br>    <br>    var mod_address = Module.findExportByName(&#x27;libc.so&#x27;, &#x27;dlopen&#x27;);<br>    send(&#x27;mod_address: &#x27; + mod_address);<br>    <br>    var lib_module = Process.findModuleByAddress(base_address);<br>    send(&#x27;lib_module_name:&#x27; + lib_module.name);<br>    <br>    Interceptor.attach(mod_address, <br>    &#123;<br>        onEnter: function(args)&#123;<br>            //send(&quot;open(&quot;+args[0]+&quot;,&quot;+args[1]+&quot;)&quot;);<br>            send(&quot;open(&quot;+Memory.readUtf8String(args[0])+&quot;,&quot;+args[1]+&quot;)&quot;);<br>        &#125;,<br>        onLeave: function(retval)&#123;<br>            send(&quot;retval:&quot;+retval);<br>        &#125;<br>    &#125;);<br>&quot;&quot;&quot;<br><br><br>device = frida.get_usb_device()<br>pid = device.spawn([&#x27;com.yaotong.crackme&#x27;])<br>print(pid)<br>process = device.attach(pid)<br>script = process.create_script(test_module_script)<br>script.on(&#x27;message&#x27;, on_message)<br>print(&#x27;runing&#x27;)<br>script.load()<br><br># 重启app<br>device.resume(pid)<br>sys.stdin.read()<br></code></pre></td></tr></table></figure><h1 id="frida-hook-native-模板"><a href="#frida-hook-native-模板" class="headerlink" title="frida hook native 模板"></a>frida hook native 模板</h1><h3 id="需要注意"><a href="#需要注意" class="headerlink" title="需要注意"></a>需要注意</h3><ul><li>区分 thumb指令 和arm指令</li></ul><ol><li>1个thumb指令 2个字节</li><li>1个arm指令   4个字节</li><li>如果hook native，是thumb指令，要在地址上 + 1</li></ol><h3 id="代码模板"><a href="#代码模板" class="headerlink" title="代码模板"></a>代码模板</h3><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs scilab">import frida, sys<br><br>jscode = <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">setImmediate(function () &#123;</span><br><span class="hljs-string">    send(&quot;</span>start<span class="hljs-string">&quot;);</span><br><span class="hljs-string">    //遍历模块找基址</span><br><span class="hljs-string">    Process.enumerateModules(&#123;</span><br><span class="hljs-string">        onMatch: function (exp) &#123;</span><br><span class="hljs-string">            if (exp.name == &#x27;</span>libdemo.so&#x27;) &#123;<br>                send(<span class="hljs-string">&#x27;enumerateModules find&#x27;</span>);<br>                send(exp.name + <span class="hljs-string">&quot;|&quot;</span> + exp.base + <span class="hljs-string">&quot;|&quot;</span> + exp.<span class="hljs-built_in">size</span> + <span class="hljs-string">&quot;|&quot;</span> + exp.path);<br>                send(<span class="hljs-built_in">exp</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;stop&#x27;</span>;<br>            &#125;<br>        &#125;,<br>        onComplete: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> &#123;</span><br>            send(<span class="hljs-string">&#x27;enumerateModules stop&#x27;</span>);<br>        &#125;<br>    &#125;);<br> <br>    <span class="hljs-comment">//hook导出函数</span><br>    var exports = Module.enumerateExportsSync(<span class="hljs-string">&quot;libdemo.so&quot;</span>);<br>    <span class="hljs-keyword">for</span>(var i=<span class="hljs-number">0</span>;i&lt;exports.<span class="hljs-built_in">length</span>;i++)&#123;<br>        send(<span class="hljs-string">&quot;name:&quot;</span>+exports[i].name+<span class="hljs-string">&quot;  address:&quot;</span>+exports[i].address);<br>    &#125;<br>    <br>    <span class="hljs-comment">//通过模块名直接查找基址</span><br>    var baseSOFile = Module.findBaseAddress(<span class="hljs-string">&quot;libdemo.so&quot;</span>);  <br>    Interceptor.attach(baseSOFile.add(<span class="hljs-number">0x00001270</span>),&#123;  <span class="hljs-comment">//如果hook native，是thumb指令，要在地址上 + 1；</span><br>        onEnter: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(args)</span> &#123;</span><br>            <span class="hljs-comment">//console.log(Memory.readCString(args[0]));</span><br>            <span class="hljs-comment">//console.log(Memory.readUtf16String(args[3]));</span><br>            console.<span class="hljs-built_in">log</span>(args[<span class="hljs-number">2</span>]);<br>            console.<span class="hljs-built_in">log</span>(args[<span class="hljs-number">3</span>]);<br>            console.<span class="hljs-built_in">log</span>(args[<span class="hljs-number">4</span>]);<br>        &#125;,<br>        onLeave: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(retval)</span>&#123;</span><br>        <br>        &#125;<br>    &#125;);<br>&#125;);<br><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">def on_message(message, data):</span><br><span class="hljs-string">    if message[&#x27;</span>type&#x27;] == <span class="hljs-string">&#x27;send&#x27;</span>:<br>        print(<span class="hljs-string">&quot;[*] &#123;0&#125;&quot;</span>.format(message[<span class="hljs-string">&#x27;payload&#x27;</span>]))<br>    <span class="hljs-keyword">else</span>:<br>        print(message)<br><br>process = frida.get_usb_device().attach(<span class="hljs-string">&#x27;com.qianyu.demo&#x27;</span>)<br>script = process.create_script(jscode)<br>script.on(<span class="hljs-string">&#x27;message&#x27;</span>, on_message)<br>script.<span class="hljs-built_in">load</span>()<br>sys.stdin.read()<br></code></pre></td></tr></table></figure><h1 id="hook-so文件动态注册函数"><a href="#hook-so文件动态注册函数" class="headerlink" title="hook so文件动态注册函数"></a>hook so文件动态注册函数</h1><ul><li>参考博客：<a href="https://www.cnblogs.com/DirWang/p/12240423.html">https://www.cnblogs.com/DirWang/p/12240423.html</a></li><li>运行命令：frida -U –no-pause -f package_name -l hook_RegisterNatives.js</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs 方式1">function hook_RegisterNatives() &#123;<br>    var symbols = Module.enumerateSymbolsSync(&quot;libart.so&quot;);<br>    var addrRegisterNatives = null;<br>    for (var i = 0; i &lt; symbols.length; i++) &#123;<br>        var symbol = symbols[i];<br>        <br>        //_ZN3art3JNI15RegisterNativesEP7_JNIEnvP7_jclassPK15JNINativeMethodi<br>        if (symbol.name.indexOf(&quot;art&quot;) &gt;= 0 &amp;&amp;<br>                symbol.name.indexOf(&quot;JNI&quot;) &gt;= 0 &amp;&amp; <br>                symbol.name.indexOf(&quot;RegisterNatives&quot;) &gt;= 0 &amp;&amp; <br>                symbol.name.indexOf(&quot;CheckJNI&quot;) &lt; 0) &#123;<br>            addrRegisterNatives = symbol.address;<br>            console.log(&quot;RegisterNatives is at &quot;, symbol.address, symbol.name);<br>        &#125;<br>    &#125;<br><br>    if (addrRegisterNatives != null) &#123;<br>        Interceptor.attach(addrRegisterNatives, &#123;<br>            onEnter: function (args) &#123;<br>                console.log(&quot;[RegisterNatives] method_count:&quot;, args[3]);<br>                var env = args[0];<br>                var java_class = args[1];<br>                var class_name = Java.vm.tryGetEnv().getClassName(java_class);<br>                //console.log(class_name);<br><br>                var methods_ptr = ptr(args[2]);<br><br>                var method_count = parseInt(args[3]);<br>                for (var i = 0; i &lt; method_count; i++) &#123;<br>                    var name_ptr = Memory.readPointer(methods_ptr.add(i * Process.pointerSize * 3));<br>                    var sig_ptr = Memory.readPointer(methods_ptr.add(i * Process.pointerSize * 3 + Process.pointerSize));<br>                    var fnPtr_ptr = Memory.readPointer(methods_ptr.add(i * Process.pointerSize * 3 + Process.pointerSize * 2));<br><br>                    var name = Memory.readCString(name_ptr);<br>                    var sig = Memory.readCString(sig_ptr);<br>                    var find_module = Process.findModuleByAddress(fnPtr_ptr);<br>                    console.log(&quot;[RegisterNatives] java_class:&quot;, class_name, &quot;name:&quot;, name, &quot;sig:&quot;, sig, &quot;fnPtr:&quot;, fnPtr_ptr, &quot;module_name:&quot;, find_module.name, &quot;module_base:&quot;, find_module.base, &quot;offset:&quot;, ptr(fnPtr_ptr).sub(find_module.base));<br><br>                &#125;<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br><br>setImmediate(hook_RegisterNatives);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs 方式2">function hook_RegisterNatives() &#123;<br>    var symbols = Module.enumerateSymbolsSync(&quot;libart.so&quot;);<br>    var addrRegisterNatives = null;<br>    for (var i = 0; i &lt; symbols.length; i++) &#123;<br>        var symbol = symbols[i];<br>        <br>        //_ZN3art3JNI15RegisterNativesEP7_JNIEnvP7_jclassPK15JNINativeMethodi<br>        if (symbol.name.indexOf(&quot;art&quot;) &gt;= 0 &amp;&amp;<br>                symbol.name.indexOf(&quot;JNI&quot;) &gt;= 0 &amp;&amp; <br>                symbol.name.indexOf(&quot;RegisterNatives&quot;) &gt;= 0 &amp;&amp; <br>                symbol.name.indexOf(&quot;CheckJNI&quot;) &lt; 0) &#123;<br>            addrRegisterNatives = symbol.address;<br>            console.log(&quot;RegisterNatives is at &quot;, symbol.address, symbol.name);<br>        &#125;<br>    &#125;<br><br>    if (addrRegisterNatives != null) &#123;<br>        Interceptor.attach(addrRegisterNatives, &#123;<br>            onEnter: function (args) &#123;<br>                console.log(&quot;[RegisterNatives] method_count:&quot;, args[3]);<br>                var env = args[0];<br>                var java_class = args[1];<br>                var class_name = Java.vm.tryGetEnv().getClassName(java_class);<br>                //console.log(class_name);<br><br>                var methods_ptr = ptr(args[2]);<br><br>                var method_count = parseInt(args[3]);<br>                for (var i = 0; i &lt; method_count; i++) &#123;<br>                    var name_ptr = Memory.readPointer(methods_ptr.add(i * Process.pointerSize * 3));<br>                    var sig_ptr = Memory.readPointer(methods_ptr.add(i * Process.pointerSize * 3 + Process.pointerSize));<br>                    var fnPtr_ptr = Memory.readPointer(methods_ptr.add(i * Process.pointerSize * 3 + Process.pointerSize * 2));<br><br>                    var name = Memory.readCString(name_ptr);<br>                    var sig = Memory.readCString(sig_ptr);<br>                    var find_module = Process.findModuleByAddress(fnPtr_ptr);<br>                    console.log(&quot;[RegisterNatives] java_class:&quot;, class_name, &quot;name:&quot;, name, &quot;sig:&quot;, sig, &quot;fnPtr:&quot;, fnPtr_ptr, &quot;module_name:&quot;, find_module.name, &quot;module_base:&quot;, find_module.base, &quot;offset:&quot;, ptr(fnPtr_ptr).sub(find_module.base));<br><br>                &#125;<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br><br>setImmediate(hook_RegisterNatives);<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
      <category>安卓逆向</category>
      
      <category>逆向框架</category>
      
      <category>Frida</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安卓逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Frida Objection</title>
    <link href="/blog/2025/04/12/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/4.%20%E9%80%86%E5%90%91%E6%A1%86%E6%9E%B6/Frida/frida%E6%96%B9%E6%A1%88/Frida%20Objection/"/>
    <url>/blog/2025/04/12/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/4.%20%E9%80%86%E5%90%91%E6%A1%86%E6%9E%B6/Frida/frida%E6%96%B9%E6%A1%88/Frida%20Objection/</url>
    
    <content type="html"><![CDATA[<h1 id="Frida-Objection"><a href="#Frida-Objection" class="headerlink" title="Frida Objection"></a>Frida Objection</h1><h2 id="安装使用入门"><a href="#安装使用入门" class="headerlink" title="安装使用入门"></a>安装使用入门</h2><ul><li>参考：<a href="https://blog.csdn.net/qq_38851536/article/details/103753314">https://blog.csdn.net/qq_38851536/article/details/103753314</a></li><li>介绍 ：objection是一个基于Frida开发的命令行工具，它可以很方便的Hook Java函数和类，并输出参数，调用栈，返回值。</li></ul><ol><li><p>安装Objection ：pip install objection</p></li><li><p>启动Objection </p><ol><li>保证Frida server开启，并转发端口 </li><li>命令行输出 ：objection -g packageName explore </li><li>即可进入objection提供的交互界面，类似于Frida的cli交互环境，我们下面的操作都是基于这个交互界面。</li></ol></li><li><p>Hook Java方法 </p><ol><li>android hooking watch class_method com.xxx.xxx.methodName –dump-args –dump-backtrace –dump-return </li><li>有时候我们会遇到内部类或者匿名内部类的Hook，不用担心，假设类为com.test.a，内部类为b，完整路径即为com.test.a$b，如果为匿名内部类，可以查看其smali代码，往往命名为com.test.a$1这种形式。</li></ol></li><li><p>Hook Java类 </p><ol><li>android hooking watch class com.xxx.xxx </li><li>对类的Hook不提供完整的调用栈打印等功能（存疑）</li></ol></li><li><p>Spawn方式Hook </p><ol><li>从Objection的使用操作中我们可以发现，Obejction采用Attach附加模式进行Hook，这可能会让我们错过较早的Hook时机，可以通过如下的代码启动Objection，引号中的objection命令会在启动时就注入App。</li><li>objection -g packageName explore –startup-command ‘android hooking watch xxx’</li></ol></li><li><p>免Root运行Frida </p><ol><li>Frida提供了免root的Hook方案，即手动注入frida-gadget库， Objection对其进行了封装。适用于群控</li><li>但实际没啥用（搞逆向的怎么会没一台root机器）。除此之外，Objection提供了对IOS的Hook，以及对sslunpinng的处理，Hook剪切板&#x2F;Root检测等，但实际使用中用处不大，一般会选择其他专门的工具，此处不提。</li></ol></li><li><p>退出Objection：在交互界环境中输入exit</p></li></ol><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ol><li>空格键: 忘记命令直接输入空格键, 会有提示与补全</li><li>help: help [command] 会有详细介绍指定命令的作用与例子</li><li>jobs: 任务管理系统, 可以方便的查看与删除任务</li></ol><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h3 id="env命令：枚举与所讨论的应用程序相关的其他有趣目录"><a href="#env命令：枚举与所讨论的应用程序相关的其他有趣目录" class="headerlink" title="env命令：枚举与所讨论的应用程序相关的其他有趣目录"></a>env命令：枚举与所讨论的应用程序相关的其他有趣目录</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gradle">com.opera.mini.<span class="hljs-keyword">native</span> on (samsung: <span class="hljs-number">6.0</span>.<span class="hljs-number">1</span>) [usb] # env<br>Name                    Path<br>----------------------  ------------------------------------------------------------<br><br>filesDirectory          <span class="hljs-regexp">/data/u</span>ser<span class="hljs-regexp">/0/</span>com.opera.mini.<span class="hljs-keyword">native</span>/files<br>cacheDirectory          <span class="hljs-regexp">/data/u</span>ser<span class="hljs-regexp">/0/</span>com.opera.mini.<span class="hljs-keyword">native</span>/cache<br>externalCacheDirectory  <span class="hljs-regexp">/storage/</span>emulated<span class="hljs-regexp">/0/</span>Android<span class="hljs-regexp">/data/</span>com.opera.mini.<span class="hljs-keyword">native</span>/cache<br>codeCacheDirectory      <span class="hljs-regexp">/data/u</span>ser<span class="hljs-regexp">/0/</span>com.opera.mini.<span class="hljs-keyword">native</span>/code_cache<br>obbDir                  <span class="hljs-regexp">/storage/</span>emulated<span class="hljs-regexp">/0/</span>Android<span class="hljs-regexp">/obb/</span>com.opera.mini.<span class="hljs-keyword">native</span><br>packageCodePath         <span class="hljs-regexp">/data/</span>app<span class="hljs-regexp">/com.opera.mini.native-1/</span>base.apk<br></code></pre></td></tr></table></figure><h3 id="file-download命令-从远程文件系统中下载文件"><a href="#file-download命令-从远程文件系统中下载文件" class="headerlink" title="file download命令: 从远程文件系统中下载文件"></a>file download命令: 从远程文件系统中下载文件</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">file</span> download [<span class="hljs-keyword">file</span>] [outfile]<br><br>com.opera.mini.<span class="hljs-keyword">native</span> on (samsung: <span class="hljs-number">6.0</span>.<span class="hljs-number">1</span>) [usb] # <span class="hljs-keyword">file</span> download fhash.dat fhash.dat<br>Downloading <span class="hljs-regexp">/data/u</span>ser<span class="hljs-regexp">/0/</span>com.opera.mini.<span class="hljs-keyword">native</span><span class="hljs-regexp">/cache/</span>fhash.dat to fhash.dat<br></code></pre></td></tr></table></figure><h3 id="列出app具有的所有avtivity"><a href="#列出app具有的所有avtivity" class="headerlink" title="列出app具有的所有avtivity"></a>列出app具有的所有avtivity</h3><ul><li>android hooking list activities</li></ul><h3 id="启动指定avtivity"><a href="#启动指定avtivity" class="headerlink" title="启动指定avtivity"></a>启动指定avtivity</h3><ul><li>android intent launch_activity [class_activity]</li></ul><h3 id="RPC调用命令"><a href="#RPC调用命令" class="headerlink" title="RPC调用命令"></a>RPC调用命令</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">curl</span> <span class="hljs-literal">-s</span> <span class="hljs-string">&quot;http://127.0.0.1:8888/rpc/invoke/androidHookingListActivities&quot;</span><br><br><span class="hljs-variable">$</span> <span class="hljs-built_in">curl</span> <span class="hljs-literal">-s</span> <span class="hljs-string">&quot;http://127.0.0.1:8888/rpc/invoke/androidHookingListActivities&quot;</span><br>[<span class="hljs-string">&quot;com.reddit.frontpage.StartActivity&quot;</span>,<span class="hljs-string">&quot;com.reddit.frontpage.IntroductionActivity&quot;</span>, <span class="hljs-type">...</span> <span class="hljs-type">snip</span> <span class="hljs-type">...</span>]<br><br>- RPC调用执行脚本:`url <span class="hljs-literal">-X</span> POST <span class="hljs-literal">-H</span> <span class="hljs-string">&quot;Content-Type: text/javascript&quot;</span> http://<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8888</span>/script/runonce <span class="hljs-literal">-d</span> <span class="hljs-string">&quot;@script.js&quot;</span>`<br><span class="hljs-variable">$</span> <span class="hljs-built_in">cat</span> script.js<br>&#123;<br>    send(Frida.version);<br>&#125;<br>[&#123;<span class="hljs-string">&quot;payload&quot;</span>:<span class="hljs-string">&quot;12.8.0&quot;</span>,<span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;send&quot;</span>&#125;]<br></code></pre></td></tr></table></figure><h3 id="Memory-指令"><a href="#Memory-指令" class="headerlink" title="Memory 指令"></a>Memory 指令</h3><ul><li>memory list modules &#x2F;&#x2F;枚举当前进程模块</li><li>memory list exports [lib_name] &#x2F;&#x2F;查看指定模块的导出函数</li><li>memory list exports libart.so –json &#x2F;root&#x2F;libart.json &#x2F;&#x2F;将结果保存到json文件中</li><li>memory search –string –offsets-only &#x2F;&#x2F;搜索内存</li></ul><h3 id="Android-heap-指令"><a href="#Android-heap-指令" class="headerlink" title="Android heap 指令"></a>Android heap 指令</h3><ul><li><p>堆内存中搜索指定类的实例, 可以获取该类的实例id</p><ul><li>search instances search instances </li><li>android heap search instances com.xx.xx.class</li></ul></li><li><p>直接调用指定实例下的方法 </p><ul><li>android heap execute [ins_id] [func_name]</li></ul></li><li><p>自定义frida脚本, 执行实例的方法 </p><ul><li>android heap execute [ins_id]</li></ul></li></ul><h3 id="root"><a href="#root" class="headerlink" title="root"></a>root</h3><ul><li>尝试关闭app的root检测 <ul><li>android root disable</li></ul></li><li>尝试模拟root环境 <ul><li>android root simulate</li></ul></li></ul><h3 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h3><ul><li><p>截图：android ui screenshot [image.png]</p></li><li><p>设置FLAG_SECURE权限 ：android ui FLAG_SECURE false</p></li></ul><h3 id="内存漫游"><a href="#内存漫游" class="headerlink" title="内存漫游"></a>内存漫游</h3><ul><li>列出内存中所有的类 ：android hooking list classes</li><li>在内存中所有已加载的类中搜索包含特定关键词的类 ：android hooking search classes [search_name] </li><li>在内存中所有已加载的方法中搜索包含特定关键词的方法 ：android hooking search methods [search_name] </li><li>在内存中搜索已知类的所有方法：android hooking list class_methods [class_name] </li><li>直接生成hook代码：android hooking generate simple [class_name]</li></ul><h3 id="hook-方式"><a href="#hook-方式" class="headerlink" title="hook 方式"></a>hook 方式</h3><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs perl">/*<br>  hook指定方法, 如果有重载会hook所有重载,如果有疑问可以看<br>  --<span class="hljs-keyword">dump</span>-args : 打印参数<br>  --<span class="hljs-keyword">dump</span>-backtrace : 打印调用栈<br>  --<span class="hljs-keyword">dump</span>-<span class="hljs-keyword">return</span> : 打印返回值<br>*/<br></code></pre></td></tr></table></figure><ul><li>android hooking watch class_method com.xxx.xxx.methodName –dump-args –dump-backtrace –dump-return</li><li>android hooking watch class com.xxx.xxx:  &#x2F;&#x2F;hook指定类, 会打印该类下的所以调用</li><li>android hooking set return_value com.xxx.xxx.methodName false: &#x2F;&#x2F;设置返回值(只支持bool类型)</li></ul><h3 id="Spawn方式Hook"><a href="#Spawn方式Hook" class="headerlink" title="Spawn方式Hook"></a>Spawn方式Hook</h3><ul><li>objection -g packageName explore –startup-command ‘[obejection_command]’</li></ul><h3 id="activity和service操作"><a href="#activity和service操作" class="headerlink" title="activity和service操作"></a>activity和service操作</h3><ul><li>android hooking list activities   &#x2F;&#x2F;枚举activity</li><li>android intent launch_activity [activity_class]   &#x2F;&#x2F;启动activity</li><li>android hooking list services  &#x2F;&#x2F;枚举services</li><li>android intent launch_service [services_class]  &#x2F;&#x2F;启动services</li></ul><h3 id="任务管理器"><a href="#任务管理器" class="headerlink" title="任务管理器"></a>任务管理器</h3><ul><li>jobs list  &#x2F;&#x2F;查看任务列表 </li><li>jobs kill [task_id]  &#x2F;&#x2F;关闭任务</li></ul><h3 id="关闭app的ssl校验"><a href="#关闭app的ssl校验" class="headerlink" title="关闭app的ssl校验"></a>关闭app的ssl校验</h3><ul><li>android sslpinning disable</li></ul><h3 id="监控系统剪贴板"><a href="#监控系统剪贴板" class="headerlink" title="监控系统剪贴板"></a>监控系统剪贴板</h3><ul><li>help android  clipboard: 获取Android剪贴板服务上的句柄并每5秒轮询一次用于数据。 如果发现新数据，与之前的调查不同，则该数据将被转储到屏幕上。</li></ul><h3 id="执行命令行"><a href="#执行命令行" class="headerlink" title="执行命令行"></a>执行命令行</h3><ul><li>help android shell_exec [command]</li></ul><h2 id="Objection插件"><a href="#Objection插件" class="headerlink" title="Objection插件"></a>Objection插件</h2><ul><li>参考<ul><li><a href="https://github.com/Simp1er/Wallbreaker">https://github.com/Simp1er/Wallbreaker</a></li><li><a href="https://github.com/hluwa/Wallbreaker">https://github.com/hluwa/Wallbreaker</a></li></ul></li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vim">/*<br>* <span class="hljs-number">1</span>. pip install objection<br>* <span class="hljs-number">2</span>. git clone https://github.<span class="hljs-keyword">com</span>/Simp1er/Wallbreaker  D:\Env\<span class="hljs-keyword">python3</span>.<span class="hljs-number">6</span>\Lib\site-packages\objection\plugins/Wallbreaker<br>* <span class="hljs-number">3</span>. objection -g <span class="hljs-keyword">com</span>.expedia.bookings explore -<span class="hljs-keyword">P</span> D:\Env\<span class="hljs-keyword">python3</span>.<span class="hljs-number">6</span>\Lib\site-packages\objection\plugins<br>* <span class="hljs-number">4</span>. use:<br>*       plugin wallbreaker classsearch <span class="hljs-symbol">&lt;pattern&gt;</span><br>        plugin wallbreaker classdump <span class="hljs-symbol">&lt;classname&gt;</span> [--fullname]<br>        plugin wallbreaker objectsearch <span class="hljs-symbol">&lt;classname&gt;</span><br>        plugin wallbreaker objectdump <span class="hljs-symbol">&lt;handle&gt;</span> [--fullname]<br>*<br>*  */<br></code></pre></td></tr></table></figure><h2 id="总结常用命令"><a href="#总结常用命令" class="headerlink" title="总结常用命令"></a>总结常用命令</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs stata">objection -<span class="hljs-keyword">g</span> packageName explore<br>objection -<span class="hljs-keyword">g</span> packageName explore --startup-command &#x27;android hooking watch xxx&#x27; <br>hook内部类：com.<span class="hljs-keyword">test</span>.a<span class="hljs-variable">$b</span><br>hook匿名内部类：可以查看其smali代码，往往命名为com.<span class="hljs-keyword">test</span>.a<span class="hljs-variable">$1</span>这种形式<br>android root disable # 关闭root<br>android sslpinning disable # 关闭ssl校验<br>android hooking watch class_method com.xxx.methodName --dump-<span class="hljs-keyword">args</span> --dump-backtrace --dump-<span class="hljs-keyword">return</span><br>android hooking watch <span class="hljs-keyword">class</span> com.xxx.xxx<br>android hooking <span class="hljs-keyword">generate</span> simple [class_name] <span class="hljs-comment">// 直接生成hook代码</span><br><br><br><span class="hljs-keyword">help</span> android  clipboard # 监控系统剪贴板<br><span class="hljs-keyword">help</span> android shell_exec [command]   执行命令行<br>env： 查看<span class="hljs-keyword">app</span>相关文件或文件夹<br><span class="hljs-keyword">file</span> download [<span class="hljs-keyword">file</span>] [<span class="hljs-keyword">outfile</span>]<br><br><span class="hljs-keyword">memory</span> <span class="hljs-keyword">list</span> modules <span class="hljs-comment">//枚举当前进程模块</span><br><span class="hljs-keyword">memory</span> <span class="hljs-keyword">list</span> exports [lib_name] <span class="hljs-comment">//查看指定模块的导出函数</span><br><span class="hljs-keyword">memory</span> <span class="hljs-keyword">list</span> exports libart.<span class="hljs-keyword">so</span> --json /root/libart.json <span class="hljs-comment">//将结果保存到json文件中</span><br><br>android heap <span class="hljs-keyword">search</span> instances &lt;<span class="hljs-keyword">class</span>&gt;  <span class="hljs-comment">// 找类实例对象</span><br>android heap execute [ins_id] [func_name] <span class="hljs-comment">// 直接调用指定实例下的方法</span><br>android hooking <span class="hljs-keyword">set</span> return_value com.xxx.xxx.methodName false  <span class="hljs-comment">// 只支持boolean类型</span><br>android hooking <span class="hljs-keyword">search</span> classes [className]  <span class="hljs-comment">// 在内存中所有已加载的类中搜索包含特定关键词的类</span><br>android hooking <span class="hljs-keyword">search</span> methods [search_name]  <span class="hljs-comment">//内存中所有已加载的方法中搜索包含特定关键词的方法</span><br>android hooking <span class="hljs-keyword">list</span> class_methods [class_name] <span class="hljs-comment">// 在内存中搜索已知类的所有方法</span><br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
      <category>安卓逆向</category>
      
      <category>逆向框架</category>
      
      <category>Frida</category>
      
      <category>frida方案</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安卓逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Frida API</title>
    <link href="/blog/2025/04/06/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/4.%20%E9%80%86%E5%90%91%E6%A1%86%E6%9E%B6/Frida/Frida%20API/"/>
    <url>/blog/2025/04/06/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/4.%20%E9%80%86%E5%90%91%E6%A1%86%E6%9E%B6/Frida/Frida%20API/</url>
    
    <content type="html"><![CDATA[<h1 id="模块API"><a href="#模块API" class="headerlink" title="模块API"></a>模块API</h1><ul><li>参考：<a href="https://www.anquanke.com/post/id/195215">https://www.anquanke.com/post/id/195215</a></li></ul><h3 id="Java模块：Hook-Java-层的类-方法-相关"><a href="#Java模块：Hook-Java-层的类-方法-相关" class="headerlink" title="Java模块：Hook Java 层的类 方法 相关"></a>Java模块：Hook Java 层的类 方法 相关</h3><ul><li><p>总结</p><ul><li>java接口的api中，perform是必须用，没什么实际作用。</li><li>use是最常用的，用来获取类的对象，获取对象后就可以替换具体方法的实现了，相当于修改源码！！</li><li>choose和cast是针对运行时对象的实例，相当于动态调试过程中获取信息。</li></ul></li><li><p>Java.perform(方法)</p></li><li><p>Java.use(类名的路径)</p><ul><li>参数:类的名字 </li><li>用途:动态获取一个类的对象，为以后改变对象方法的实现，或者用$new()实例化对象， $dispose()销毁对象<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs case">Java.perform(<br>    function()&#123;<br>        var helloworld = Java.use(&#x27;com.me.hello&#x27;);<br>        helloword.check.impletation = function(v1, v2)&#123;<br>            return False;<br>        &#125;<br>    &#125;<br>)<br><br>Java.perform(function () &#123;<br>    var Activity = Java.use(&quot;android.app.Activity&quot;);<br>    var Exception = Java.use(&quot;java.lang.Exception&quot;);<br>    Activity.onResume.implementation = function () &#123;<br>        throw Exception.$new(&quot;Oh noes!&quot;);<br>    &#125;;<br>&#125;);<br></code></pre></td></tr></table></figure></li></ul></li><li><p>Java.available</p><ul><li>返回值:boolean。</li><li>用途:确认当前进程的java虚拟机是否已经启动，虚拟机包括Dalbik或者ART等。虚拟机没有启动的情况下不要唤醒其他java的属性或者方法。</li></ul></li><li><p>Java.enumerateLoadedClasses(callbacks)：枚举类 | 枚举类加载器</p><ul><li>该api枚举Java VM中存在的类加载器，其有一个回调函数，分别是onMatch: function (loader)与onComplete: function ()</li><li>返回值:无 </li><li>参数:回调函数 </li><li>用途:列出当前已经加载的类，用回调函数处理 </li><li>回调函数: onMatch:function(className){ }: 找到加载的每个类的时候被调用，参数就是类的名字，这个参数可以传给java.use()来获得一个js类包 </li><li>onComplete: function (): 列出所有类之后被调用 ，也就是完成后做一些扫尾工作</li></ul></li><li><p>Java.enumerateLoadedClassesSync()</p><ul><li>参数:无.  用途: 获得所有加载类的数组，以便以后查询 </li><li>参数:函数.  用途:这是frida的main，所有的脚本必须放在这个里面<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Java.<span class="hljs-keyword">perform</span>(<span class="hljs-keyword">function</span> () &#123;<br>    var Activity = Java.use(&quot;android.app.Activity&quot;);//获得类包，相当于js的<span class="hljs-built_in">new</span>()<br>    Activity.onResume.implementation = <span class="hljs-keyword">function</span> () &#123;//改编onResume函数的实现<br>        send(&quot;onResume() got called! Let&#x27;s call the original implementation&quot;);<br>        this.onResume();<br>    &#125;;<br>&#125;);<br></code></pre></td></tr></table></figure></li></ul></li><li><p>Java.scheduleOnMainThread(fn):</p><ul><li>返回值:无 </li><li>参数:函数 </li><li>用途:在线程上运行指定的函数</li></ul></li><li><p>Java.choose(className, callbacks)</p><ul><li>用途:查找堆中指定类的实例。获得实例后可以调用实例的函数。或者说：在内存中扫描Java的堆(heap) 找到指定类(className)的实例化对象</li><li>返回值:无 </li><li>参数:类的名称，回调函数 </li><li>回调函数 <ul><li>onMatch: function (instance): 每次找到 指定类的实例后调用， </li><li>onComplete: function (): 完成时调用<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Java.<span class="hljs-keyword">perform</span>(<span class="hljs-keyword">function</span> x()&#123;<br>    Java.choose(&quot;com.xx.xx.xx.xx&quot;,&#123;<br>        onMatch: <span class="hljs-keyword">function</span>(instance)&#123;<br>            instance.<span class="hljs-keyword">function</span>();<br>        &#125;,<br>        onComplete: <span class="hljs-keyword">function</span>()&#123;<br><br>        &#125;<br>    &#125;);<br>&#125;<br>)<br></code></pre></td></tr></table></figure></li></ul></li><li>应用场景</li></ul><ol><li>不知道某些类如何生成的，使用java.choose方法在内存中找到该类是否存在，存在的话拿出来用就行<figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs arcade">  <span class="hljs-keyword">var</span> mtopConfig;<br>    Java.choose(<span class="hljs-string">&#x27;mtopsdk.mtop.global.MtopConfig&#x27;</span>,&#123;<br>        <span class="hljs-string">&quot;onMatch&quot;</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">instance</span>)&#123;<br>            mtopConfig = instance<br>        &#125;,<br>        <span class="hljs-string">&quot;onComplete&quot;</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        &#125;<br>    &#125;)<br><br>eg：<br>    <span class="hljs-comment">//在堆上查找实例化的对象，示例代码如下！</span><br>    Java.choose(<span class="hljs-string">&quot;b3nac.injuredandroid&quot;</span>, &#123;<br>        <span class="hljs-attr">onMatch</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">instance</span>) &#123;<br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;Found instance: &quot;</span> + instance);<br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;Result of secret func: &quot;</span> + instance.decrypt());<br>        &#125;,<br>        <span class="hljs-attr">onComplete</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; &#125;<br>    &#125;);<br></code></pre></td></tr></table></figure></li><li>在使用rpc实现主动调用，主动调用的类或者方法并不是静态方法，这时候单纯的使用Java.use(…)是不行的(待验证)，这时候需要使用Java.use(“…”).$new(); 但是使用$new()初始化之后，该类有的参数并没有经过某些赋值逻辑，这时候需要用java.choose来进行加载内存中指定类的实例化对象<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs swift">实践验证<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Tester</span>:<br>        def __init__(<span class="hljs-keyword">self</span>, a, b):<br>            <span class="hljs-keyword">self</span>.a = a<br>            <span class="hljs-keyword">self</span>.b = b<br>        def geta(<span class="hljs-keyword">self</span>):<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>.a<br>        <span class="hljs-keyword">static</span> def getb(<span class="hljs-keyword">self</span>):<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>.b<br>使用frida时候，调用geta方法<br>    错误示范：<span class="hljs-keyword">var</span> geta = <span class="hljs-title class_ inherited__">Java</span>.use(&quot;<span class="hljs-title class_ inherited__">Tester</span>.geta&quot;);<br>    正确示范：<span class="hljs-keyword">var</span> geta = <span class="hljs-title class_ inherited__">Java</span>.use(&quot;<span class="hljs-title class_ inherited__">Tester</span>.geta&quot;).$new();<br><br><br><br><span class="hljs-title class_ inherited__">APP</span> 代码如下<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_ inherited__">FridaTest</span> extends <span class="hljs-title class_ inherited__">BaseFridaTest</span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> boolean static_bool_var <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">private</span> boolean bool_var <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">private</span> boolean same_name_bool_var <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>静态变量 <span class="hljs-keyword">static</span> 可以直接设置值<br>    <span class="hljs-keyword">var</span> <span class="hljs-type">LoginActivity3</span> <span class="hljs-operator">=</span> <span class="hljs-type">Java</span>.use(<span class="hljs-string">&quot;com.xx.xx.xx.xx&quot;</span>);<br>    <span class="hljs-comment">// 设置变量值后面必须加 `.value` 才能设置</span><br>    <span class="hljs-type">LoginActivity3</span>.static_bool_var.value <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>   <br>动态变量要用choose找到实例才能操作<br>    <span class="hljs-comment">// 动态变量必须 choose 找到示例才能操作</span><br>    <span class="hljs-type">Java</span>.choose(<span class="hljs-string">&quot;com.xx.xx.xx.xx&quot;</span>,&#123;<br>        onMatch: function(instance)&#123;<br>            <span class="hljs-comment">// 设置变量值后面必须加 `.value` 才能设置</span><br>            instance.bool_var.value <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>            <br>            <span class="hljs-comment">// 注意！ 如果动态变量名与函数名重名了，就需要在前面加 _ 下划线，如下：</span><br>            instance._same_name_bool_var.value <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        &#125;,<br>        onComplete: function()&#123;<br>        &#125;<br>    &#125;);<br></code></pre></td></tr></table></figure></li></ol></li><li><p>Java.cast(handle, klass)</p><ul><li>用途:用来获取  指定内存地址的类的实例  的对象。这个对象有类属性，可以得到所属类的对象。还有$className属性过去类名的字符串。一个对象有可能有很多实例</li><li>返回值:类的对象 </li><li>参数:句柄(ptr),klass(use()的返回值)<figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nim"><span class="hljs-keyword">var</span> <span class="hljs-type">Activity</span> = <span class="hljs-type">Java</span>.use(<span class="hljs-string">&quot;android.app.Activity&quot;</span>);<br><span class="hljs-keyword">var</span> activity = <span class="hljs-type">Java</span>.<span class="hljs-keyword">cast</span>(<span class="hljs-keyword">ptr</span>(<span class="hljs-string">&quot;0x1234&quot;</span>), <span class="hljs-type">Activity</span>);<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="Process-模块：处理当前线程相关"><a href="#Process-模块：处理当前线程相关" class="headerlink" title="Process 模块：处理当前线程相关"></a>Process 模块：处理当前线程相关</h3><ul><li><p>Process.findModuleByAddress(address)</p><ul><li>address: lib的指针地址 </li><li>返回一个Module对象</li></ul></li><li><p>Process.enumerateModules()</p><ul><li>会枚举当前所有已加载的so模块，并且返回了数组Module对象</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs case">function frida_Process() &#123;<br>    Java.perform(function () &#123;<br>        var process_Obj_Module_Arr = Process.enumerateModules();<br>        for(var i = 0; i &lt; process_Obj_Module_Arr.length; i++) &#123;<br>            console.log(&quot;&quot;,process_Obj_Module_Arr[i].name);<br>        &#125;<br>    &#125;);<br>&#125;<br>setImmediate(frida_Process,0);<br></code></pre></td></tr></table></figure><h3 id="Interceptor-模块：监听。操作指针相关，多用来Hook-Native-相关"><a href="#Interceptor-模块：监听。操作指针相关，多用来Hook-Native-相关" class="headerlink" title="Interceptor 模块：监听。操作指针相关，多用来Hook Native 相关"></a>Interceptor 模块：监听。操作指针相关，多用来Hook Native 相关</h3><ol><li>Interceptor.attach(target, callback)</li></ol><ul><li>target: 指针地址 </li><li>callbacks: 回调函数 </li><li>onEnter </li><li>onLeave</li></ul><ol start="2"><li>Interceptor.replace(target, replacement)</li></ol><ul><li>相当于替换掉原本的函数，用替换时的实现替换目标处的函数。</li></ul><h3 id="Memory-模块：内存操作相关"><a href="#Memory-模块：内存操作相关" class="headerlink" title="Memory 模块：内存操作相关"></a>Memory 模块：内存操作相关</h3><ol><li>Memory.readCString(pointer)</li></ol><ul><li>pointer:指针地址</li><li>把pointer还原成字符串</li></ul><ol start="2"><li>Memory.readCString</li><li>Memory.readUtf8String(pointer)    &#x2F;&#x2F; 内存中的值转化成字符串</li><li>Memory.readAnsiString(pointer)</li><li>Memory.readInt()       &#x2F;&#x2F; 把内存中的值转成整型</li><li>Memory.readByteArray(begin, length)   &#x2F;&#x2F;以begin为起始位置，从内存中读length长度的数据出来 返回ArrayBuffer类型</li><li>ptr()  &#x2F;&#x2F;把地址转化成NativePointer类型，frida里操作内存地址需要NativePointer类型</li><li>enumerateImports()  会枚举模块中所有中的所有Import函数</li></ol><h3 id="Module-模块：处理so相关"><a href="#Module-模块：处理so相关" class="headerlink" title="Module 模块：处理so相关"></a>Module 模块：处理so相关</h3><ol><li>Module.findExportByName(moduleName|null, exportName)</li></ol><ul><li>moduleName: lib名字</li><li>exportname: 函数名字 </li><li>返回exportName的地址指针</li></ul><ol start="2"><li>Module.findBaseAddress(moduleName)</li></ol><ul><li>moduleName: lib名字</li><li>返回lib的基地址</li></ul><h3 id="File模块：写文件流程"><a href="#File模块：写文件流程" class="headerlink" title="File模块：写文件流程"></a>File模块：写文件流程</h3><ul><li>new File(filepath, mode)</li><li>write(data)</li><li>flush()</li><li>close()</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs case">file = new File(&quot;yuanrenxue.dex&quot;, &#x27;wb&#x27;)<br>//data是字符串或者arraybuffer(调用readByteArray()返回的arrayBuffer)<br>file.write(data)<br>file.flush()<br>file.close()<br></code></pre></td></tr></table></figure><ul><li>读文件：如点评<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">read_file</span>(<span class="hljs-params">path</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> FileUtils = Java.<span class="hljs-keyword">use</span>(<span class="hljs-string">&#x27;com.meituan.robust.assistant.process.FileUtils&#x27;</span>);<br>    <span class="hljs-keyword">var</span> jsonobject = Java.<span class="hljs-keyword">use</span>(<span class="hljs-string">&quot;org.json.JSONObject&quot;</span>);<br>    <span class="hljs-keyword">var</span> file = Java.<span class="hljs-keyword">use</span>(<span class="hljs-string">&quot;java.io.File&quot;</span>);<br>    <span class="hljs-keyword">var</span> f = file.<span class="hljs-variable">$new</span>(path)<br>    <span class="hljs-keyword">var</span> res = FileUtils.<span class="hljs-title function_ invoke__">readFile</span>(f)<br>    console.<span class="hljs-title function_ invoke__">error</span>(res)<br>    <span class="hljs-keyword">return</span> jsonobject.<span class="hljs-variable">$new</span>(res)<br>&#125;<br></code></pre></td></tr></table></figure></li><li>思路<ul><li>反编译app </li><li>找到读取文件的类 </li><li>如果没有则回编译app，重写读取文件的smali代码<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package com.<span class="hljs-property">sankuai</span>.<span class="hljs-property">meituan</span>.<span class="hljs-property">common</span>;<br><span class="hljs-comment">//package com.sankuai.meituan.common;</span><br><span class="hljs-comment">//com/sankuai/meituan/common/FileHelper;</span><br><br><span class="hljs-keyword">import</span> android.<span class="hljs-property">util</span>.<span class="hljs-property">Log</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">json</span>.<span class="hljs-property">JSONException</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">json</span>.<span class="hljs-property">JSONObject</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">json</span>.<span class="hljs-property">JSONArray</span>;<br><span class="hljs-keyword">import</span> java.<span class="hljs-property">io</span>.<span class="hljs-property">FileInputStream</span>;<br><span class="hljs-keyword">import</span> java.<span class="hljs-property">lang</span>.<span class="hljs-property">Object</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">meituan</span>.<span class="hljs-property">android</span>.<span class="hljs-property">common</span>.<span class="hljs-property">unionid</span>.<span class="hljs-property">oneid</span>.<span class="hljs-property">util</span>.<span class="hljs-property">DeviceInfo</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileHelper</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> final <span class="hljs-title class_">String</span> config_path = <span class="hljs-string">&quot;/data/local/tmp/dianping/device_info.txt&quot;</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-title class_">JSON</span><span class="hljs-built_in">Object</span> jsonObject = <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">FileHelper</span>()&#123;<br>        <span class="hljs-title class_">String</span> ret = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-title class_">FileInputStream</span> fis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(config_path);<br>                int len = fis.<span class="hljs-title function_">available</span>();<br>                byte[] buffer = <span class="hljs-keyword">new</span> byte[len];<br>                fis.<span class="hljs-title function_">read</span>(buffer);<br>                ret = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buffer);<br>                <span class="hljs-title class_">Log</span>.<span class="hljs-title function_">e</span>(<span class="hljs-string">&quot;aaaaaa&quot;</span>, ret);<br>                fis.<span class="hljs-title function_">close</span>();<br>            &#125;<span class="hljs-keyword">catch</span> (<span class="hljs-title class_">Exception</span> e)&#123;<br>                <span class="hljs-title class_">Log</span>.<span class="hljs-title function_">e</span>(<span class="hljs-string">&quot;dp_device_info22222&quot;</span>,<span class="hljs-string">&quot;读取步骤有问题-------------&quot;</span>,e);<br>            &#125;<br>            jsonObject = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSON</span><span class="hljs-built_in">Object</span>(ret);<br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">Exception</span> e) &#123;<br>            e.<span class="hljs-title function_">printStackTrace</span>();<br>            <span class="hljs-title class_">Log</span>.<span class="hljs-title function_">e</span>(<span class="hljs-string">&quot;dp_device_info&quot;</span>,<span class="hljs-string">&quot;读取设备信息配置异常-------------&quot;</span>,e);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">readProp</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> key</span>)&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-title class_">Log</span>.<span class="hljs-title function_">e</span>(<span class="hljs-string">&quot;dp_device_info1111&quot;</span>, jsonObject.<span class="hljs-title function_">toString</span>());<br>            <span class="hljs-keyword">return</span> jsonObject.<span class="hljs-title function_">getString</span>(key);<br>        &#125;<span class="hljs-keyword">catch</span> (<span class="hljs-title class_">Exception</span> e)&#123;<br>            <span class="hljs-title class_">Log</span>.<span class="hljs-title function_">e</span>(<span class="hljs-string">&quot;dp_device_info&quot;</span>,<span class="hljs-string">&quot;readprop读取设备信息具体配置异常&quot;</span>,e);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span>[] <span class="hljs-title function_">readPropList</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> key</span>)&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-title class_">Log</span>.<span class="hljs-title function_">e</span>(<span class="hljs-string">&quot;dp_device_info1111&quot;</span>, jsonObject.<span class="hljs-title function_">toString</span>());<br>            <span class="hljs-title class_">JSON</span><span class="hljs-built_in">Array</span> array = jsonObject.<span class="hljs-title function_">getJSONArray</span>(key);<br>            <span class="hljs-title class_">String</span> [] result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[array.<span class="hljs-title function_">length</span>()];<br>            <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt; array.<span class="hljs-title function_">length</span>(); i++) &#123;<br>                result[i] = array.<span class="hljs-title function_">getString</span>(i);<br>            &#125;<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<span class="hljs-keyword">catch</span> (<span class="hljs-title class_">Exception</span> e)&#123;<br>            <span class="hljs-title class_">Log</span>.<span class="hljs-title function_">e</span>(<span class="hljs-string">&quot;dp_device_info&quot;</span>,<span class="hljs-string">&quot;readprop读取设备信息具体配置异常&quot;</span>,e);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title class_">String</span> tesk_key = <span class="hljs-title function_">readProp</span>(<span class="hljs-string">&quot;tesk_key&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">changeMap</span>(<span class="hljs-title class_">JSON</span><span class="hljs-built_in">Object</span> v5) throws <span class="hljs-title class_">JSON</span>Exception &#123;<br>        <span class="hljs-title class_">Log</span>.<span class="hljs-title function_">e</span>(<span class="hljs-string">&quot;dp_device_info&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-title class_">JSON</span><span class="hljs-built_in">Object</span> newobject = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSON</span><span class="hljs-built_in">Object</span>();<br>        newobject.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;radio_type&quot;</span>, <span class="hljs-string">&quot;gsm&quot;</span>);<br>        newobject.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;mobile_country_code&quot;</span>, <span class="hljs-number">460</span>);<br>        newobject.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;mobile_network_code&quot;</span>, <span class="hljs-number">1</span>);<br>        newobject.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;location_area_code&quot;</span>, <span class="hljs-title class_">Integer</span>.<span class="hljs-title function_">valueOf</span>(<span class="hljs-title function_">readProp</span>(<span class="hljs-string">&quot;lac&quot;</span>)));<br>        newobject.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;cell_id&quot;</span>, <span class="hljs-title class_">Integer</span>.<span class="hljs-title function_">valueOf</span>(<span class="hljs-title function_">readProp</span>(<span class="hljs-string">&quot;cid&quot;</span>)));<br>        newobject.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;system_id&quot;</span>, <span class="hljs-number">0</span>);<br>        newobject.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;network_id&quot;</span>, <span class="hljs-number">0</span>);<br>        newobject.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;base_station_id&quot;</span>, <span class="hljs-number">0</span>);<br>        newobject.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;cdma_lat&quot;</span>, <span class="hljs-number">0</span>);<br>        newobject.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;cdma_lon&quot;</span>, <span class="hljs-number">0</span>);<br>        newobject.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;signal_strength&quot;</span>, -<span class="hljs-number">82</span>);<br>        newobject.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;cgiage&quot;</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-title class_">JSON</span><span class="hljs-built_in">Array</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSON</span><span class="hljs-built_in">Array</span>();<br>        arr.<span class="hljs-title function_">put</span>(newobject);<br>        v5.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;cell_towers&quot;</span>, arr);<br>        v5.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;wifi_towers&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSON</span><span class="hljs-built_in">Object</span>());<br>        v5.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;buildserial&quot;</span>, <span class="hljs-title function_">readProp</span>(<span class="hljs-string">&quot;serialnumber&quot;</span>));<br>        v5.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;model&quot;</span>, <span class="hljs-title function_">readProp</span>(<span class="hljs-string">&quot;model&quot;</span>));<br>        v5.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;smac&quot;</span>, <span class="hljs-title function_">readProp</span>(<span class="hljs-string">&quot;wifimac&quot;</span>));<br>        <span class="hljs-title class_">Log</span>.<span class="hljs-title function_">e</span>(<span class="hljs-string">&quot;v5: &quot;</span>, v5.<span class="hljs-title function_">toString</span>());<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">changeSystemDeviceInfo</span>(<span class="hljs-params"><span class="hljs-title class_">DeviceInfo</span> deviceInfo</span>) &#123;<br>        deviceInfo.<span class="hljs-property">androidId</span> = <span class="hljs-title function_">readProp</span>(<span class="hljs-string">&quot;androidid&quot;</span>);<br>        deviceInfo.<span class="hljs-property">localId</span> = <span class="hljs-title function_">readProp</span>(<span class="hljs-string">&quot;localid&quot;</span>);<br>        deviceInfo.<span class="hljs-property">oaid</span> = <span class="hljs-title function_">readProp</span>(<span class="hljs-string">&quot;Oaid&quot;</span>);<br>        deviceInfo.<span class="hljs-property">serialNumber</span> = <span class="hljs-title function_">readProp</span>(<span class="hljs-string">&quot;serialnumber&quot;</span>);<br>        deviceInfo.<span class="hljs-property">wifiMac</span> = <span class="hljs-title function_">readProp</span>(<span class="hljs-string">&quot;wifimac&quot;</span>);<br>        deviceInfo.<span class="hljs-property">brand</span> = <span class="hljs-title function_">readProp</span>(<span class="hljs-string">&quot;brand&quot;</span>);<br>        deviceInfo.<span class="hljs-property">deviceModel</span> = <span class="hljs-title function_">readProp</span>(<span class="hljs-string">&quot;model&quot;</span>);<br>        deviceInfo.<span class="hljs-property">imei1</span> = <span class="hljs-title function_">readProp</span>(<span class="hljs-string">&quot;Imei1&quot;</span>);<br>        deviceInfo.<span class="hljs-property">imei2</span> = <span class="hljs-title function_">readProp</span>(<span class="hljs-string">&quot;Imei2&quot;</span>);<br>        deviceInfo.<span class="hljs-property">osName</span> = <span class="hljs-title function_">readProp</span>(<span class="hljs-string">&quot;osname&quot;</span>);<br>        deviceInfo.<span class="hljs-property">meid</span> = <span class="hljs-title function_">readProp</span>(<span class="hljs-string">&quot;Meid&quot;</span>);<br>        deviceInfo.<span class="hljs-property">simulatedId</span> = <span class="hljs-title function_">readProp</span>(<span class="hljs-string">&quot;simulatedid&quot;</span>);<br><br>        deviceInfo.<span class="hljs-property">nop</span> = <span class="hljs-title function_">readProp</span>(<span class="hljs-string">&quot;nop&quot;</span>);<br>        deviceInfo.<span class="hljs-property">unionId</span> = <span class="hljs-title function_">readProp</span>(<span class="hljs-string">&quot;unionid&quot;</span>);<br>        deviceInfo.<span class="hljs-property">dpid</span> = <span class="hljs-title function_">readProp</span>(<span class="hljs-string">&quot;dpid&quot;</span>);<br>        deviceInfo.<span class="hljs-property">uuid</span> = <span class="hljs-title function_">readProp</span>(<span class="hljs-string">&quot;uuid&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>hook第二步或第三步的代码</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
      <category>安卓逆向</category>
      
      <category>逆向框架</category>
      
      <category>Frida</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安卓逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Frida 入门</title>
    <link href="/blog/2025/04/06/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/4.%20%E9%80%86%E5%90%91%E6%A1%86%E6%9E%B6/Frida/Frida%E5%85%A5%E9%97%A8/"/>
    <url>/blog/2025/04/06/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/4.%20%E9%80%86%E5%90%91%E6%A1%86%E6%9E%B6/Frida/Frida%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h1><h2 id="Frida服务端"><a href="#Frida服务端" class="headerlink" title="Frida服务端"></a>Frida服务端</h2><ol><li>下载frida-server： <ul><li>frida-server下载：<a href="https://github.com/frida/frida/releases">https://github.com/frida/frida/releases</a></li><li>注意:<ul><li>模拟器中下载版本x86版本,不然可能报错:unable to inject library into process without libc </li><li>找到这种名字的文件下载：frida-server-&lt;版本号&gt;-<system>-&lt;手机处理器&gt;.xz</li></ul></li></ul></li><li>上传到手机 ： adb push D:\frida-server\frida-server-12.9.8-android-arm64  &#x2F;data&#x2F;local&#x2F;tmp</li><li>给frida-server文件添加权限： chmod 777 frida-server-12.9.8-android-x86</li><li>后台执行frida-server：.&#x2F;frida-server-12.9.8-android-x86 &amp;</li><li>开启远程连接frida-server(windows运行 端口转发到PC)：重开cmd客户端：adb forward tcp:27042 tcp:27042</li></ol><h2 id="Frida客户端"><a href="#Frida客户端" class="headerlink" title="Frida客户端"></a>Frida客户端</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> frida-tools<br>pip <span class="hljs-keyword">install</span> frida<br>安装很慢 <span class="hljs-number">20</span>分钟: https://pypi.org/<span class="hljs-keyword">project</span>/frida/<span class="hljs-comment">#files</span><br>pip <span class="hljs-keyword">install</span> frida-tools<br></code></pre></td></tr></table></figure><h2 id="测试环境是否安装成功"><a href="#测试环境是否安装成功" class="headerlink" title="测试环境是否安装成功"></a>测试环境是否安装成功</h2><ul><li>重开cmd终端：<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">frida-<span class="hljs-keyword">ps</span> -U： 查看手机或模拟机的进程<br>frida-<span class="hljs-keyword">ps</span> -R： 验证远程是否开启，开启之后显示可查看手机或者模拟器的进程<br></code></pre></td></tr></table></figure></li></ul><h2 id="得到Android设备当前最前端Activity所在的进程信息"><a href="#得到Android设备当前最前端Activity所在的进程信息" class="headerlink" title="得到Android设备当前最前端Activity所在的进程信息"></a>得到Android设备当前最前端Activity所在的进程信息</h2><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">import frida<br><span class="hljs-attribute">rdev</span> <span class="hljs-operator">=</span> frida.get_remote_device()<br>front_app <span class="hljs-operator">=</span> rdev.get_frontmost_application()<br>print front_app<br></code></pre></td></tr></table></figure><h2 id="运行frida-demo"><a href="#运行frida-demo" class="headerlink" title="运行frida demo"></a>运行frida demo</h2><ul><li>参考：<a href="https://www.codercto.com/a/56443.html">https://www.codercto.com/a/56443.html</a><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs stata"># coding: utf-8<br>import frida<br>import sys<br>rdev = frida.get_remote_device()<br><span class="hljs-keyword">print</span>(rdev)<br><br># 获取该进程会话控制权<br>session = rdev.attach(&#x27;cn.soulapp.android&#x27;)<br><br>src = <span class="hljs-string">&quot;&quot;</span>&quot;<br>    Java.perform(function()&#123;<br>        # Java.<span class="hljs-keyword">use</span>方法可以获取指定类名的控制权<br>        <span class="hljs-keyword">var</span> c = Java.<span class="hljs-keyword">use</span>(<span class="hljs-string">&quot;cn.soulapp.android.utils.j&quot;</span>);<br>        # c.<span class="hljs-keyword">e</span>: 点后面的<span class="hljs-keyword">e</span>是该类名后面的方法名<br>        # implementation 来重写该方法<br>        c.<span class="hljs-keyword">e</span>.implementation = function(a)&#123;<br>            <span class="hljs-keyword">return</span> false;<br>        &#125;<br>        <span class="hljs-keyword">var</span> <span class="hljs-keyword">cc</span> = Java.<span class="hljs-keyword">use</span>(<span class="hljs-string">&quot;cn.soulapp.android.api.b.c&quot;</span>);<br>        <span class="hljs-keyword">cc</span>.a.overload(<span class="hljs-string">&quot;okhttp3.aa&quot;</span>, <span class="hljs-string">&quot;java.lang.String&quot;</span>, <span class="hljs-string">&quot;long&quot;</span>).implementation = function(a,b,c)&#123;<br>            console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;cn.soulapp.android.api.b.c.a():&quot;</span>+a+<span class="hljs-string">&quot; &quot;</span>+b+<span class="hljs-string">&quot; &quot;</span>+c);<br>            <span class="hljs-keyword">return</span> this.a(a,b,c);<br>        &#125;<br>        <span class="hljs-keyword">var</span> ff = Java.<span class="hljs-keyword">use</span>(<span class="hljs-string">&quot;com.gongjiao.rr.tools.f&quot;</span>);<br>        ff.b.implementation = function(a)&#123;<br>            console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;com.gongjiao.rr.tools.f.b():&quot;</span>+a);<br>            <span class="hljs-keyword">return</span> this.b(a);<br>        &#125;<br>    &#125;)<br><span class="hljs-string">&quot;&quot;</span>&quot;<br>script = session.create_script(src)<br>#可以获取打印效果<br>def on_msessage(message, data):<br>    <span class="hljs-keyword">print</span>(message)<br>script.<span class="hljs-keyword">on</span>(<span class="hljs-string">&quot;message&quot;</span>, on_msessage)<br><br># 加载脚本<br>script.load()<br><br># 等在这里，不要让程序断掉<br>sys.stdin.<span class="hljs-keyword">read</span>()<br></code></pre></td></tr></table></figure></li></ul><h2 id="不同hook方式"><a href="#不同hook方式" class="headerlink" title="不同hook方式"></a>不同hook方式</h2><h3 id="启动app阶段hook方式：spawn-hook"><a href="#启动app阶段hook方式：spawn-hook" class="headerlink" title="启动app阶段hook方式：spawn hook"></a>启动app阶段hook方式：spawn hook</h3><ul><li>命令行hook：frida -U -f com.zing.zalo –no-pause -l trace.js</li><li>代码hook<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs scss">import frida<br>import sys<br><br># 打印输出<br>def <span class="hljs-built_in">on_message</span>(message, data):<br>    if message[<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;send&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(f<span class="hljs-string">&#x27;[*] &#123;message[&quot;payload&quot;]&#125;&#x27;</span>)<br>    else:<br>        <span class="hljs-built_in">print</span>(message)<br><br><br>device = frida.<span class="hljs-built_in">get_usb_device</span>()<br>pid = device.<span class="hljs-built_in">spawn</span>([<span class="hljs-string">&#x27;com.iCitySuzhou.suzhou001&#x27;</span>])<br>process = device.<span class="hljs-built_in">attach</span>(pid)<br>script = process.<span class="hljs-built_in">create_script</span>(js)<br>script.<span class="hljs-built_in">on</span>(<span class="hljs-string">&#x27;message&#x27;</span>, on_message)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;runing&#x27;</span>)<br>script.<span class="hljs-built_in">load</span>()<br><br># 重启app<br>device.<span class="hljs-built_in">resume</span>(pid)<br>sys.stdin.<span class="hljs-built_in">read</span>()<br></code></pre></td></tr></table></figure></li></ul><h3 id="attach-hook方式"><a href="#attach-hook方式" class="headerlink" title="attach hook方式"></a>attach hook方式</h3><ul><li>命令行hook：frida -U com.zing.zalo –no-pause -l hooks.js</li><li>代码hook<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs scss">import frida<br>import sys<br><br>def <span class="hljs-built_in">on_message</span>(message, data):<br>    if message[<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;send&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(f<span class="hljs-string">&#x27;[*] &#123;message[&quot;payload&quot;]&#125;&#x27;</span>)<br>    else:<br>        <span class="hljs-built_in">print</span>(message)<br><br>rdev = frida.<span class="hljs-built_in">get_remote_device</span>()<br>session = rdev.<span class="hljs-built_in">attach</span>(<span class="hljs-string">&#x27;com.iCitySuzhou.suzhou001&#x27;</span>)<br>script = session.<span class="hljs-built_in">create_script</span>(js)<br>script.<span class="hljs-built_in">on</span>(<span class="hljs-string">&quot;message&quot;</span>, on_message)<br>script.<span class="hljs-built_in">load</span>()<br>sys.stdin.<span class="hljs-built_in">read</span>()<br></code></pre></td></tr></table></figure></li></ul><h3 id="一个app多个进程hook方式"><a href="#一个app多个进程hook方式" class="headerlink" title="一个app多个进程hook方式"></a>一个app多个进程hook方式</h3><ul><li>参考：<a href="https://www.jianshu.com/p/65d30038742b">https://www.jianshu.com/p/65d30038742b</a><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs css"># -*- coding: utf-<span class="hljs-number">8</span> -*-<br># hook app多进程<br>import codecs<br>import frida<br>import sys<br>import threading<br>from os.path import dirname, realpath<br>package = <span class="hljs-string">&quot;com.ziipin.homeinn&quot;</span><br>#device = frida.<span class="hljs-built_in">get_remote_device</span>()<br>device = frida.<span class="hljs-built_in">get_device_manager</span>().<span class="hljs-built_in">enumerate_devices</span>()[-<span class="hljs-number">1</span>]<br><span class="hljs-built_in">print</span>(device)<br>pending = []<br>sessions = []<br>scripts = []<br>event = threading.<span class="hljs-built_in">Event</span>()<br>basedir = <span class="hljs-built_in">dirname</span>(<span class="hljs-built_in">realpath</span>(__file__)) + <span class="hljs-string">&#x27;/justme/hooks.js&#x27;</span><br># basedir = <span class="hljs-built_in">dirname</span>(<span class="hljs-built_in">realpath</span>(__file__)) + <span class="hljs-string">&#x27;/js_source/find_interface.js&#x27;</span><br>with <span class="hljs-built_in">open</span>(basedir, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) as f:<br>  jscode = f.<span class="hljs-built_in">read</span>()<br>def <span class="hljs-built_in">on_spawned</span>(spawn):<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;on_spawned:&#x27;</span>, spawn)<br>  pending.<span class="hljs-built_in">append</span>(spawn)<br>  event.<span class="hljs-built_in">set</span>()<br>def <span class="hljs-built_in">spawn_added</span>(spawn):<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;spawn_added:&#x27;</span>, spawn)<br>  event.<span class="hljs-built_in">set</span>()<br>  <span class="hljs-built_in">if</span>(spawn.identifier.<span class="hljs-built_in">startswith</span>(package)):<br>    session = device.<span class="hljs-built_in">attach</span>(spawn.pid)<br>    script = session.<span class="hljs-built_in">create_script</span>(jscode)<br>    script.<span class="hljs-built_in">on</span>(<span class="hljs-string">&#x27;message&#x27;</span>, on_message)<br>    script.<span class="hljs-built_in">load</span>()<br>    device.<span class="hljs-built_in">resume</span>(spawn.pid)<br>    <br>def <span class="hljs-built_in">spawn_removed</span>(spawn):<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;spawn_added:&#x27;</span>, spawn)<br>  event.<span class="hljs-built_in">set</span>()<br>def <span class="hljs-built_in">on_message</span>(spawn, message, data):<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;on_message:&#x27;</span>, spawn, message, data)<br>  <br>def <span class="hljs-built_in">on_message</span>(message, data):<br>  if message[<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;send&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] &#123;0&#125;&quot;</span>.<span class="hljs-built_in">format</span>(message[<span class="hljs-string">&#x27;payload&#x27;</span>]))<br>  else:<br>    <span class="hljs-built_in">print</span>(message)<br>device.<span class="hljs-built_in">on</span>(<span class="hljs-string">&#x27;spawn-added&#x27;</span>, spawn_added)<br>device.<span class="hljs-built_in">on</span>(<span class="hljs-string">&#x27;spawn-removed&#x27;</span>, spawn_removed)<br>device.<span class="hljs-built_in">on</span>(<span class="hljs-string">&#x27;child-added&#x27;</span>, on_spawned)<br>device.<span class="hljs-built_in">on</span>(<span class="hljs-string">&#x27;child-removed&#x27;</span>, on_spawned)<br>device.<span class="hljs-built_in">on</span>(<span class="hljs-string">&#x27;process-crashed&#x27;</span>, on_spawned)<br>device.<span class="hljs-built_in">on</span>(<span class="hljs-string">&#x27;output&#x27;</span>, on_spawned)<br>device.<span class="hljs-built_in">on</span>(<span class="hljs-string">&#x27;uninjected&#x27;</span>, on_spawned)<br>device.<span class="hljs-built_in">on</span>(<span class="hljs-string">&#x27;lost&#x27;</span>, on_spawned)<br>device.<span class="hljs-built_in">enable_spawn_gating</span>()<br>event = threading.<span class="hljs-built_in">Event</span>()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Enabled spawn gating&#x27;</span>)<br>if __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>  <br>  pid = device.<span class="hljs-built_in">spawn</span>([package])<br>  <span class="hljs-built_in">print</span>(pid)<br>  session = device.<span class="hljs-built_in">attach</span>(pid)<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] Attach Application id:&quot;</span>,pid)<br>  device.<span class="hljs-built_in">resume</span>(pid)<br>  # <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] Application onResume&quot;</span>)<br>  # script = session.<span class="hljs-built_in">create_script</span>(jscode)<br>  # script.<span class="hljs-built_in">on</span>(<span class="hljs-string">&#x27;message&#x27;</span>, on_message)<br>  # <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[*] Running CTF&#x27;</span>)<br>  # script.<span class="hljs-built_in">load</span>()<br>  sys.stdin.<span class="hljs-built_in">read</span>()<br>  <br>   <br>  <br>或者<br><br><br>device = frida.<span class="hljs-built_in">get_device_manager</span>().<span class="hljs-built_in">enumerate_devices</span>()[-<span class="hljs-number">1</span>]<br>pid = device.<span class="hljs-built_in">spawn</span>([<span class="hljs-string">&quot;com.samoyed.credit&quot;</span>])<br>session = device.<span class="hljs-built_in">attach</span>(pid)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] Attach Application id:&quot;</span>, pid)<br>device.<span class="hljs-built_in">resume</span>(pid)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] Application onResume&quot;</span>)<br><br>script = session.<span class="hljs-built_in">create_script</span>(src)<br>script.<span class="hljs-built_in">on</span>(<span class="hljs-string">&#x27;message&#x27;</span>, on_message)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[*] Running CTF&#x27;</span>)<br>script.<span class="hljs-built_in">load</span>()<br>sys.stdin.<span class="hljs-built_in">read</span>()<br></code></pre></td></tr></table></figure></li></ul><h3 id="延时hook"><a href="#延时hook" class="headerlink" title="延时hook"></a>延时hook</h3><h4 id="resume"><a href="#resume" class="headerlink" title="resume"></a>resume</h4><ol><li>不加–no-pause：frida -U -f com.zing.zalo <ol><li>加–no-pause与不加 –no-pause的区别主要是 hook时机的早晚。 </li><li>–no-pause是即时hook</li><li>而不加–no-pause 这个参数的话。frida会拉起进程，停在加载主界面之前，这时候 应用会出现白屏状态</li></ol></li><li>等待一阵子，要手动用 %resume关键字<br><img src="/blog/images/android/frida/4.png"></li></ol><h4 id="setTimeout-func-5000"><a href="#setTimeout-func-5000" class="headerlink" title="setTimeout(func, 5000);"></a>setTimeout(func, 5000);</h4>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
      <category>安卓逆向</category>
      
      <category>逆向框架</category>
      
      <category>Frida</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安卓逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Frida Hook场景</title>
    <link href="/blog/2025/04/06/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/4.%20%E9%80%86%E5%90%91%E6%A1%86%E6%9E%B6/Frida/Hook%E5%9C%BA%E6%99%AF/"/>
    <url>/blog/2025/04/06/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/4.%20%E9%80%86%E5%90%91%E6%A1%86%E6%9E%B6/Frida/Hook%E5%9C%BA%E6%99%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="Hook场景"><a href="#Hook场景" class="headerlink" title="Hook场景"></a>Hook场景</h1><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Spyder Editor</span><br><span class="hljs-string"></span><br><span class="hljs-string">This is a temporary script file.</span><br><span class="hljs-string"></span><br><span class="hljs-string">JAVA层HOOK</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">import</span> frida, sys<br><br><br><span class="hljs-comment"># HOOK构造对象参数</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">jscode = </span><br><span class="hljs-string">Java.perform(function () &#123;</span><br><span class="hljs-string">   var utils = Java.use(&#x27;com.qianyu.fridaapp.Utils&#x27;);</span><br><span class="hljs-string">   var money = Java.use(&#x27;com.qianyu.fridaapp.Money&#x27;);</span><br><span class="hljs-string">    utils.test.overload().implementation = function () &#123;</span><br><span class="hljs-string">        //send(&quot;Hook Start...&quot;);</span><br><span class="hljs-string">      var mon = money.$new(2000,&#x27;港币&#x27;);</span><br><span class="hljs-string">      //send(mon.getInfo());</span><br><span class="hljs-string">      return this.test(800);</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;);</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># HOOK修改对象属性</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">jscode = </span><br><span class="hljs-string">Java.perform(function () &#123;</span><br><span class="hljs-string">   var utils = Java.use(&#x27;com.qianyu.fridaapp.Utils&#x27;);</span><br><span class="hljs-string">   var money = Java.use(&#x27;com.qianyu.fridaapp.Money&#x27;);</span><br><span class="hljs-string">   var clazz = Java.use(&#x27;java.lang.Class&#x27;);</span><br><span class="hljs-string">    utils.test.overload().implementation = function () &#123;</span><br><span class="hljs-string">        send(&quot;Hook Start...&quot;);</span><br><span class="hljs-string">      var mon = money.$new(200,&#x27;港币&#x27;);</span><br><span class="hljs-string">      send(mon.getInfo());</span><br><span class="hljs-string">      var numid= Java.cast(mon.getClass(),clazz).getDeclaredField(&#x27;num&#x27;);</span><br><span class="hljs-string">      numid.setAccessible(true);</span><br><span class="hljs-string">        //send(numid.get(mon));</span><br><span class="hljs-string">        numid.setInt(mon, 1000);</span><br><span class="hljs-string">        send(mon.getInfo());</span><br><span class="hljs-string">      return this.test(800);</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;);</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">message</span>(<span class="hljs-params">message, data</span>):<br>    <span class="hljs-keyword">if</span> message[<span class="hljs-string">&quot;type&quot;</span>] == <span class="hljs-string">&#x27;send&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] &#123;0&#125;&quot;</span>.<span class="hljs-built_in">format</span>(message[<span class="hljs-string">&#x27;payload&#x27;</span>]))<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(message)<br><br><br>process = frida.get_remote_device().attach(<span class="hljs-string">&#x27;com.renren.mobile.android&#x27;</span>)<br>script = process.create_script(jscode)<br>script.on(<span class="hljs-string">&quot;message&quot;</span>, message)<br>script.load()<br>sys.stdin.read()<br></code></pre></td></tr></table></figure><h3 id="new方法"><a href="#new方法" class="headerlink" title="new方法"></a>new方法</h3><ul><li>很多时候，我们不但要HOOK使用钩子拦截函数对函数的参数和返回值进行记录，而且还要自己主动调用类中的函数使用。FRIDA中有一个new()关键字，而这个关键字就是实例化类的重要方法。</li><li>在官方API中有这样写道：“Java.use(ClassName)：动态获取className的JavaScript包装器，通过对其调用new()来调用构造函数，可以从中实例化对象。对实例调用Dispose()以显式清理它(或等待JavaScript对象被垃圾收集，或脚本被卸载)。静态和非静态方法都是可用的。”，那我们就知道通过Java.use获取的class类可以调用$new()来调用构造函数，可以从实例化对象<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs case">var Ordinary_Class = Java.use(&quot;com.roysue.roysueapplication.Ordinary_Class&quot;);<br>//在这里，使用了官方API的$new()方法来实例化类，实例化之后返回一个实例对象，通过这个实例对象来调用类中方法。                <br>var Ordinary_Class_instance = Ordinary_Class.$new();<br></code></pre></td></tr></table></figure></li></ul><h3 id="枚举所有的类并定位类代码"><a href="#枚举所有的类并定位类代码" class="headerlink" title="枚举所有的类并定位类代码"></a>枚举所有的类并定位类代码</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs arcade">setTimeout(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;<br>  Java.perform(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;n[*] enumerating classes...&quot;</span>);<br>    <span class="hljs-comment">//Java对象的API enumerateLoadedClasses</span><br>    Java.enumerateLoadedClasses(&#123;<br>      <span class="hljs-comment">//该回调函数中的_className参数就是类的名称，每次回调时都会返回一个类的名称</span><br>      onMatch: <span class="hljs-keyword">function</span>(<span class="hljs-params">_className</span>)&#123;<br>        <span class="hljs-comment">//在这里将其输出</span><br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;[*] found instance of &#x27;&quot;</span>+_className+<span class="hljs-string">&quot;&#x27;&quot;</span>);<br><br>        <span class="hljs-comment">//如果只需要打印出com.roysue包下所有类把这段注释即可，想打印其他的替换掉indexOf中参数即可定位到~</span><br>        <span class="hljs-comment">//if(_className.toString().indexOf(&quot;com.roysue&quot;)!=-1)</span><br>        <span class="hljs-comment">//&#123;</span><br>        <span class="hljs-comment">//    console.log(&quot;[*] found instance of &#x27;&quot;+_className+&quot;&#x27;&quot;);</span><br>        <span class="hljs-comment">//&#125;</span><br>      &#125;,<br>      <span class="hljs-attr">onComplete</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-comment">//会在枚举类结束之后回调一次此函数</span><br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;[*] class enuemration complete&quot;</span>);<br>      &#125;<br>    &#125;);<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="枚举类的所有方法并定位方法代码"><a href="#枚举类的所有方法并定位方法代码" class="headerlink" title="枚举类的所有方法并定位方法代码"></a>枚举类的所有方法并定位方法代码</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">function</span> enumMethods(targetClass)<br>&#123;<br>    var hook = Java.use(targetClass);<br>    var ownMethods = hook.<span class="hljs-keyword">class</span>.getDeclaredMethods();<br>    hook.$dispose;<br>    <span class="hljs-keyword">return</span> ownMethods;<br>&#125;<br><br><span class="hljs-keyword">function</span> hook_overload_5() &#123;<br>    <span class="hljs-keyword">if</span>(Java.available) &#123;<br>        Java.<span class="hljs-keyword">perform</span>(<span class="hljs-keyword">function</span> () &#123;<br>           var a = enumMethods(&quot;com.roysue.roysueapplication.User$clz&quot;)<br>           a.<span class="hljs-keyword">forEach</span>(<span class="hljs-keyword">function</span>(s) &#123;<br>                console.log(s);<br>           &#125;);<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>我们先定义了一个enumMethods方法，其参数targetClass是类的路径名称，用于Java.use获取类对象本身</li><li>获取类对象之后再通过其.class.getDeclaredMethods()方法获取目标类的所有方法名称数组</li><li>当调用完了getDeclaredMethods()方法之后再调用$dispose方法释放目标类对象，返回目标类所有的方法名称、返回类型以及函数的权限，这是实现获取方法名称的核心方法</li><li>下面一个方法主要用于注入到目标进程中去执行逻辑代码，在hook_overload_5方法中先是使用了Java.perform方法，再在内部调用enumMethods方法获取目标类的所有方法名称、返回类型以及函数的权限，返回的是一个Method数组</li><li>通过forEach迭代器循环输出数组中的每一个值，因为其本身实际就是一个字符串所以直接输出就可以得到方法名称</li></ol><h3 id="hook类的内部类"><a href="#hook类的内部类" class="headerlink" title="hook类的内部类"></a>hook类的内部类</h3><ul><li>参考：<a href="https://mp.weixin.qq.com/s/heK_r0zXo_6_RoA37yPtGQ">https://mp.weixin.qq.com/s/heK_r0zXo_6_RoA37yPtGQ</a><br><img src="/blog/images/android/frida/clipboard.png"></li><li>hook方式：var clz &#x3D; Java.use(‘com.roysue.roysueapplication.User$clz’);</li></ul><h3 id="frida打印堆栈信息"><a href="#frida打印堆栈信息" class="headerlink" title="frida打印堆栈信息"></a>frida打印堆栈信息</h3><ul><li>堆栈出来后，顺序为从上往下的调用<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">printstack</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-title function_ invoke__">send</span>(Java.<span class="hljs-keyword">use</span>(<span class="hljs-string">&quot;android.util.Log&quot;</span>).<span class="hljs-title function_ invoke__">getStackTraceString</span>(Java.<span class="hljs-keyword">use</span>(<span class="hljs-string">&quot;java.lang.Exception&quot;</span>).<span class="hljs-variable">$new</span>()));<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="修改变量"><a href="#修改变量" class="headerlink" title="修改变量"></a>修改变量</h3><ul><li>APP代码：<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FridaTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseFridaTest</span></span>&#123;<br>    <span class="hljs-keyword">private</span> static boolean static_bool_var = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">private</span> boolean bool_var = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">private</span> boolean same_name_bool_var = <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>静态变量 static 可以直接设置值<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">var</span> LoginActivity3 = Java.<span class="hljs-keyword">use</span>(<span class="hljs-string">&quot;com.xx.xx.xx.xx&quot;</span>);<br><br><span class="hljs-comment">// 设置变量值后面必须加 `.value` 才能设置</span><br>LoginActivity3.static_bool_var.value = <span class="hljs-literal">true</span>;<br></code></pre></td></tr></table></figure></li><li>动态变量要用choose找到实例才能操作<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">// 动态变量必须 choose 找到示例才能操作</span><br>Java.choose(<span class="hljs-string">&quot;com.xx.xx.xx.xx&quot;</span>,&#123;<br>    onMatch: <span class="hljs-keyword">function</span><span class="hljs-params">(instance)</span>&#123;<br>        <span class="hljs-comment">// 设置变量值后面必须加 `.value` 才能设置</span><br>        instance.bool_var.value = <span class="hljs-literal">true</span>;<br>        <br>        <span class="hljs-comment">// 注意！ 如果动态变量名与函数名重名了，就需要在前面加 _ 下划线，如下：</span><br>        instance._same_name_bool_var.value = <span class="hljs-literal">true</span>;<br>    &#125;,<br>    onComplete: <span class="hljs-keyword">function</span><span class="hljs-params">()</span>&#123;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure></li></ul><h3 id="Hook-构造对象（自定义参数）"><a href="#Hook-构造对象（自定义参数）" class="headerlink" title="Hook 构造对象（自定义参数）"></a>Hook 构造对象（自定义参数）</h3><ul><li><p>参数是一个自定义类<br><img src="/blog/images/android/frida/2.png"></p></li><li><p>类是这样的<br><img src="/blog/images/android/frida/3.png"></p></li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arcade">Java.perform(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> money = Java.use(<span class="hljs-string">&#x27;com.xx.app.Money&#x27;</span>)  <span class="hljs-comment">// 如果要自定义实例化就要获取并重写</span><br>    <span class="hljs-keyword">var</span> utils = Java.use(<span class="hljs-string">&#x27;com.xx.app.Utils&#x27;</span>);<br>    utils.test.overload(<span class="hljs-string">&quot;com.xx.app.Money&quot;</span>).implementation = <span class="hljs-keyword">function</span> (<span class="hljs-params">obj</span>) &#123;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;参数自定义类Hook中...&quot;</span>);<br>        <span class="hljs-comment">// 重新实例化  $new()</span><br>        <span class="hljs-keyword">var</span> mon = money.$<span class="hljs-keyword">new</span>(<span class="hljs-number">999</span>,<span class="hljs-string">&#x27;我的天&#x27;</span>)<br>        send(mon.getInfo());  <span class="hljs-comment">// 调用 这个对象的 getInfo </span><br>        <span class="hljs-keyword">return</span> mon.getInfo();  <span class="hljs-comment">// 根据需求return</span><br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="Hook-被混淆的函数名"><a href="#Hook-被混淆的函数名" class="headerlink" title="Hook 被混淆的函数名"></a>Hook 被混淆的函数名</h3><ul><li>有的代码混淆，函数名已经是乱码符号, 甚至有一些不可视, 所以可以先编码打印出来, 再用编码后的字符串去 hook: <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs case">int ֏(int x) &#123;<br>    return x + 100;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>hook：先编码打印出来, 再用编码后的字符串去 hook<figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs arcade">Java.perform(<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">x</span>(<span class="hljs-params"></span>) &#123;<br><br>        <span class="hljs-keyword">var</span> targetClass = <span class="hljs-string">&quot;com.example.hooktest.MainActivity&quot;</span>;<br><br>        <span class="hljs-keyword">var</span> hookCls = Java.use(targetClass);<br>        <span class="hljs-keyword">var</span> methods = hookCls.class.getDeclaredMethods();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i <span class="hljs-keyword">in</span> methods) &#123;<br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(methods[i].toString());<br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(encodeURIComponent(methods[i].toString().<span class="hljs-built_in">replace</span>(<span class="hljs-regexp">/^.*?\.([^\s\.\(\)]+)\(.*?$/</span>, <span class="hljs-string">&quot;$1&quot;</span>)));<br>        &#125;<br><br>        hookCls[decodeURIComponent(<span class="hljs-string">&quot;%D6%8F&quot;</span>)]<br>            .implementation = <span class="hljs-keyword">function</span> (<span class="hljs-params">x</span>) &#123;<br>                <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;original call: fun(&quot;</span> + x + <span class="hljs-string">&quot;)&quot;</span>);<br>                <span class="hljs-keyword">var</span> result = this[decodeURIComponent(<span class="hljs-string">&quot;%D6%8F&quot;</span>)](<span class="hljs-number">900</span>);<br>                <span class="hljs-keyword">return</span> result;<br>            &#125;<br>    &#125;<br>)<br></code></pre></td></tr></table></figure></li></ul><h3 id="Hook-找不到包名的类"><a href="#Hook-找不到包名的类" class="headerlink" title="Hook 找不到包名的类"></a>Hook 找不到包名的类</h3><p><img src="/blog/images/android/frida/1.png"></p><ul><li>hook类似这种代码的时候，找不到引用包，我们可以通过查看 smali 代码来看到她的引用</li></ul><h3 id="手动注册类"><a href="#手动注册类" class="headerlink" title="手动注册类"></a>手动注册类</h3><ul><li>frida 用registerClass自己构造一个类<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Java.<span class="hljs-keyword">perform</span>(<span class="hljs-keyword">function</span>()&#123;<br>    var liquid = Java.use(&quot;com.xx.xx.xx&quot;);<br>    var beer = Java.registerClass(&#123;<br>    <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;com.xx.xx.xx&#x27;</span>,<br>    implements: [liquid],<br>    methods: &#123;<br>        flow: <span class="hljs-keyword">function</span> () &#123;<br>            <span class="hljs-keyword">return</span> &quot;look, beer is flowing!&quot;;<br>        &#125;<br>    &#125;<br>    &#125;);<br>    console.log(&quot;beer.bubble:&quot;,beer.$<span class="hljs-built_in">new</span>().flow())      <br>&#125;)<br></code></pre></td></tr></table></figure></li></ul><h3 id="切换类加载器"><a href="#切换类加载器" class="headerlink" title="切换类加载器"></a>切换类加载器</h3><p>当找不到目标类，需要考虑多个classloader。两种解决方案</p><h4 id="循环类加载器，重置当前加载器"><a href="#循环类加载器，重置当前加载器" class="headerlink" title="循环类加载器，重置当前加载器"></a>循环类加载器，重置当前加载器</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">// <span class="hljs-keyword">function</span> hooksign()&#123;<br>//     Java.<span class="hljs-keyword">perform</span>(<span class="hljs-keyword">function</span> () &#123;<br>//         // 切换类加载器<br>//         Java.<span class="hljs-keyword">perform</span>(<span class="hljs-keyword">function</span> () &#123;<br>//             Java.enumerateClassLoaders(&#123;<br>//                 onMatch: <span class="hljs-keyword">function</span> (loader) &#123;<br>//                     try&#123;<br>//                         <span class="hljs-keyword">if</span>(loader.findClass(&quot;com.xxxxx&quot;))&#123;<br>//                             console.log(&quot;successFully found loader&quot;)<br>//                             console.log(loader);<br>//                             Java.classFactory.loader = loader;<br>//                         &#125;<br>//                     &#125;catch (e)&#123;<br>//                         console.log(&quot;finderr: &quot; + e);<br>//                     &#125;<br>//                 &#125;,<br>//                 onComplate: <span class="hljs-keyword">function</span> () &#123;<br>//                     console.log(&quot;end&quot;);<br>//                 &#125;<br>//             &#125;)<br>//<br>//             var xx = Java.use(&quot;com.xxxx&quot;);<br>//             xx.a.implementation = <span class="hljs-keyword">function</span> () &#123;<br>//                 var res = this.a.apply(this, arguments);<br>//                 // <span class="hljs-keyword">call</span> <span class="hljs-keyword">method</span><br>//                 <span class="hljs-keyword">return</span> res;<br>//             &#125;<br>//<br>//         &#125;)<br>//     &#125;)<br>//<br>// &#125;<br><br><br><br>// Java.<span class="hljs-keyword">perform</span>(() =&gt; &#123;<br>//<br>//     var refreshIntervalId = setInterval(() =&gt; &#123;<br>//         <span class="hljs-keyword">for</span> (let classLoaderToUse <span class="hljs-keyword">of</span> Java.enumerateClassLoadersSync()) &#123;<br>//             <span class="hljs-keyword">if</span> (classLoaderToUse.toString().indexOf(<span class="hljs-string">&#x27;/data/app/com.ziipin.homeinn&#x27;</span>) != <span class="hljs-number">-1</span>) &#123;<br>//                 Java.classFactory.loader = classLoaderToUse;<br>//                 //console.warn(<span class="hljs-string">&#x27;success capture clsLoader:&#x27;</span>, classLoaderToUse)<br>//                 clearInterval(refreshIntervalId);<br>//                 break;<br>//             &#125;<br>//         &#125;<br>//     &#125;, <span class="hljs-number">1000</span>)<br>//<br>// &#125;)<br><br><br><span class="hljs-comment">/*for (let classLoaderToUse of Java.enumerateClassLoadersSync()) &#123;</span><br><span class="hljs-comment">    Java.classFactory.loader = classLoaderToUse;</span><br><span class="hljs-comment">    console.log(&#x27;switch to: &#x27;, classLoaderToUse.toString())</span><br><span class="hljs-comment">    try &#123;</span><br><span class="hljs-comment">        var cls = Java.use(&quot;com.ishumei.smantifraud.SmAntiFraud&quot;)[&#x27;getDeviceId&#x27;]</span><br><span class="hljs-comment">        console.warn(cls)</span><br><span class="hljs-comment">    &#125; catch(err) &#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    console.log(&#x27;================================&#x27;)</span><br><span class="hljs-comment">&#125;*/</span><br><br><br><span class="hljs-keyword">function</span> hooksign()&#123;<br>    Java.<span class="hljs-keyword">perform</span>(<span class="hljs-keyword">function</span> () &#123;<br>        // 切换类加载器<br>        Java.<span class="hljs-keyword">perform</span>(<span class="hljs-keyword">function</span> () &#123;<br>            Java.enumerateClassLoaders(&#123;<br>                onMatch: <span class="hljs-keyword">function</span> (loader) &#123;<br>                    try&#123;<br>                        <span class="hljs-keyword">if</span>(loader.findClass(&quot;com.ishumei.dfp.SMSDK&quot;))&#123;<br>                            console.log(&quot;successFully found loader&quot;)<br>                            console.log(loader);<br>                            Java.classFactory.loader = loader;<br>                            callStaticMethod();<br>                        &#125;<br>                    &#125;catch (e)&#123;<br>                        // console.log(&quot;finderr: &quot; + e);<br>                    &#125;<br>                &#125;,<br>                onComplate: <span class="hljs-keyword">function</span> () &#123;<br>                    console.warn(&quot;end&quot;);<br>                &#125;<br>            &#125;)<br>        &#125;)<br>    &#125;)<br><br>&#125;<br>// <span class="hljs-keyword">call</span> 如家<br><span class="hljs-keyword">function</span> callStaticMethod()&#123;<br>    var currentApplication = Java.use(<span class="hljs-string">&#x27;android.app.ActivityThread&#x27;</span>).currentApplication();<br>    var context = currentApplication.getApplicationContext();<br>    var smsdk = Java.use(&quot;com.ishumei.dfp.SMSDK&quot;);<br>    console.log(smsdk);<br>    var ret = smsdk.z2(context);<br>    console.warn(<span class="hljs-string">&#x27;ret:&#x27;</span>, ret)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>详细<ul><li>使用spawn方式启动app </li><li>查看有多少个classloader，通过指定目标类，找到目标类是使用哪个classloader加载的<figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">for</span> (let classLoaderToUse of Java.enumerateClassLoadersSync()) &#123;<br>Java.classFactory.loader = classLoaderToUse;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;switch to: &#x27;</span>, classLoaderToUse.toString())<br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">var</span> cls = Java.use(<span class="hljs-string">&quot;com.ishumei.smantifraud.SmAntiFraud&quot;</span>)[<span class="hljs-string">&#x27;getDeviceId&#x27;</span>]<br>    <span class="hljs-built_in">console</span>.warn(cls)<br>&#125; <span class="hljs-keyword">catch</span>(err) &#123;&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;================================&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li><li>通过指定间隔的方式，循环所有的classloader，并将默认classloader改为目标classloader<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Java.<span class="hljs-keyword">perform</span>(() =&gt; &#123;<br>    var refreshIntervalId = setInterval(() =&gt; &#123;<br>        <span class="hljs-keyword">for</span> (let classLoaderToUse <span class="hljs-keyword">of</span> Java.enumerateClassLoadersSync()) &#123;<br>            <span class="hljs-keyword">if</span> (classLoaderToUse.toString().indexOf(<span class="hljs-string">&#x27;/data/app/com.ziipin.homeinn&#x27;</span>) != <span class="hljs-number">-1</span>) &#123;<br>                Java.classFactory.loader = classLoaderToUse;<br>                //console.warn(<span class="hljs-string">&#x27;success capture clsLoader:&#x27;</span>, classLoaderToUse)<br>                clearInterval(refreshIntervalId);<br>                break;<br>            &#125;<br>        &#125;<br>    &#125;, <span class="hljs-number">1000</span>)<br>&#125;)<br></code></pre></td></tr></table></figure></li></ul></li></ul><h4 id="hook-native层"><a href="#hook-native层" class="headerlink" title="hook native层"></a>hook native层</h4><h3 id="Call-运行指定方法获得结果"><a href="#Call-运行指定方法获得结果" class="headerlink" title="Call: 运行指定方法获得结果"></a>Call: 运行指定方法获得结果</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">runStaticMethod</span>(<span class="hljs-params">classname, func</span>)&#123;<br>    <span class="hljs-keyword">var</span> currentApplication = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;android.app.ActivityThread&#x27;</span>).<span class="hljs-title function_">currentApplication</span>();<br>    <span class="hljs-keyword">var</span> context = currentApplication.<span class="hljs-title function_">getApplicationContext</span>();<br>    <span class="hljs-keyword">var</span> cls = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(classname);<br>    <span class="hljs-keyword">var</span> mtd = cls[func];<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warn</span>(mtd)<br>    <span class="hljs-keyword">var</span> ret = mtd.<span class="hljs-title function_">call</span>(cls, context);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warn</span>(<span class="hljs-string">&#x27;ret:&#x27;</span>, ret)<br>&#125;<br><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">runNormalMethod</span>(<span class="hljs-params">classname, func</span>)&#123;<br>    <span class="hljs-comment">// choose | new</span><br>     <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">choose</span>(<span class="hljs-string">&quot;com.example.a11x256.frida_test.my_activity&quot;</span>, &#123;<br>        <span class="hljs-attr">onMatch</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">instance</span>) &#123;<br>            instance.<span class="hljs-property">a</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-string">&#x27;aa&#x27;</span>, <span class="hljs-string">&#x27;bb&#x27;</span>)<br>        &#125;,<br>        <span class="hljs-attr">onComplete</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; &#125;<br>    &#125;);<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="全局hook"><a href="#全局hook" class="headerlink" title="全局hook"></a>全局hook</h3><ul><li>参考：<ul><li><a href="https://github.com/r0ysue/AndroidSecurityStudy/blob/master/FRIDA/B02/README.md">https://github.com/r0ysue/AndroidSecurityStudy/blob/master/FRIDA/B02/README.md</a></li><li><a href="https://github.com/0xdea/frida-scripts/blob/master/raptor_frida_android_trace.js">https://github.com/0xdea/frida-scripts/blob/master/raptor_frida_android_trace.js</a></li></ul></li><li>以上知识点结合就可实现全局hook<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * raptor_frida_android_trace.js - Code tracer for Android</span><br><span class="hljs-comment"> * Copyright (c) 2017 Marco Ivaldi &lt;raptor@0xdeadbeef.info&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Frida.re JS script to trace arbitrary Java Methods and</span><br><span class="hljs-comment"> * Module functions for debugging and reverse engineering.</span><br><span class="hljs-comment"> * See https://www.frida.re/ and https://codeshare.frida.re/</span><br><span class="hljs-comment"> * for further information on this powerful tool.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &quot;We want to help others achieve interop through reverse</span><br><span class="hljs-comment"> * engineering&quot; -- @oleavr</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Many thanks to @inode-, @federicodotta, @leonjza, and</span><br><span class="hljs-comment"> * @dankluev.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Example usage:</span><br><span class="hljs-comment"> * # frida -U -f com.target.app -l raptor_frida_android_trace.js --no-pause</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Get the latest version at:</span><br><span class="hljs-comment"> * https://github.com/0xdea/frida-scripts/</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">// generic trace</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">trace</span>(<span class="hljs-params">pattern</span>)<br>&#123;<br><span class="hljs-keyword">var</span> type = (pattern.<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;!&quot;</span>) === -<span class="hljs-number">1</span>) ? <span class="hljs-string">&quot;java&quot;</span> : <span class="hljs-string">&quot;module&quot;</span>;<br><br><span class="hljs-keyword">if</span> (type === <span class="hljs-string">&quot;module&quot;</span>) &#123;<br><br><span class="hljs-comment">// trace Module</span><br><span class="hljs-keyword">var</span> res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiResolver</span>(<span class="hljs-string">&quot;module&quot;</span>);<br><span class="hljs-keyword">var</span> matches = res.<span class="hljs-title function_">enumerateMatchesSync</span>(pattern);<br><span class="hljs-keyword">var</span> targets = <span class="hljs-title function_">uniqBy</span>(matches, <span class="hljs-title class_">JSON</span>.<span class="hljs-property">stringify</span>);<br>targets.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">target</span>) &#123;<br><span class="hljs-title function_">traceModule</span>(target.<span class="hljs-property">address</span>, target.<span class="hljs-property">name</span>);<br>&#125;);<br><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type === <span class="hljs-string">&quot;java&quot;</span>) &#123;<br><br><span class="hljs-comment">// trace Java Class</span><br><span class="hljs-keyword">var</span> found = <span class="hljs-literal">false</span>;<br><span class="hljs-title class_">Java</span>.<span class="hljs-title function_">enumerateLoadedClasses</span>(&#123;<br><span class="hljs-attr">onMatch</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">aClass</span>) &#123;<br><span class="hljs-keyword">if</span> (aClass.<span class="hljs-title function_">match</span>(pattern)) &#123;<br>found = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">var</span> className = aClass.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/[L](.*);/</span>)[<span class="hljs-number">1</span>].<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\//g</span>, <span class="hljs-string">&quot;.&quot;</span>);<br><span class="hljs-title function_">traceClass</span>(className);<br>&#125;<br>&#125;,<br><span class="hljs-attr">onComplete</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;<br>&#125;);<br><br><span class="hljs-comment">// trace Java Method</span><br><span class="hljs-keyword">if</span> (!found) &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-title function_">traceMethod</span>(pattern);<br>&#125;<br><span class="hljs-keyword">catch</span>(err) &#123; <span class="hljs-comment">// catch non existing classes/methods</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(err);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// find and trace all methods declared in a Java Class</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">traceClass</span>(<span class="hljs-params">targetClass</span>)<br>&#123;<br><span class="hljs-keyword">var</span> hook = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(targetClass);<br><span class="hljs-keyword">var</span> methods = hook.<span class="hljs-property">class</span>.<span class="hljs-title function_">getDeclaredMethods</span>();<br>hook.<span class="hljs-property">$dispose</span>;<br><br><span class="hljs-keyword">var</span> parsedMethods = [];<br>methods.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">method</span>) &#123;<br>parsedMethods.<span class="hljs-title function_">push</span>(method.<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">replace</span>(targetClass + <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;TOKEN&quot;</span>).<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/\sTOKEN(.*)\(/</span>)[<span class="hljs-number">1</span>]);<br>&#125;);<br><br><span class="hljs-keyword">var</span> targets = <span class="hljs-title function_">uniqBy</span>(parsedMethods, <span class="hljs-title class_">JSON</span>.<span class="hljs-property">stringify</span>);<br>targets.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">targetMethod</span>) &#123;<br><span class="hljs-title function_">traceMethod</span>(targetClass + <span class="hljs-string">&quot;.&quot;</span> + targetMethod);<br>&#125;);<br>&#125;<br><br><span class="hljs-comment">// trace a specific Java Method</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">traceMethod</span>(<span class="hljs-params">targetClassMethod</span>)<br>&#123;<br><span class="hljs-keyword">var</span> delim = targetClassMethod.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&quot;.&quot;</span>);<br><span class="hljs-keyword">if</span> (delim === -<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span>;<br><br><span class="hljs-keyword">var</span> targetClass = targetClassMethod.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, delim)<br><span class="hljs-keyword">var</span> targetMethod = targetClassMethod.<span class="hljs-title function_">slice</span>(delim + <span class="hljs-number">1</span>, targetClassMethod.<span class="hljs-property">length</span>)<br><br><span class="hljs-keyword">var</span> hook = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(targetClass);<br><span class="hljs-keyword">var</span> overloadCount = hook[targetMethod].<span class="hljs-property">overloads</span>.<span class="hljs-property">length</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Tracing &quot;</span> + targetClassMethod + <span class="hljs-string">&quot; [&quot;</span> + overloadCount + <span class="hljs-string">&quot; overload(s)]&quot;</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; overloadCount; i++) &#123;<br><br>hook[targetMethod].<span class="hljs-property">overloads</span>[i].<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warn</span>(<span class="hljs-string">&quot;\n*** entered &quot;</span> + targetClassMethod);<br><br><span class="hljs-comment">// print backtrace</span><br><span class="hljs-comment">// Java.perform(function() &#123;</span><br><span class="hljs-comment">//var bt = Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Exception&quot;).$new());</span><br><span class="hljs-comment">//console.log(&quot;\nBacktrace:\n&quot; + bt);</span><br><span class="hljs-comment">// &#125;);</span><br><br><span class="hljs-comment">// print args</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>) <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>; j++) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;arg[&quot;</span> + j + <span class="hljs-string">&quot;]: &quot;</span> + <span class="hljs-variable language_">arguments</span>[j]);<br>&#125;<br><br><span class="hljs-comment">// print retval</span><br><span class="hljs-keyword">var</span> retval = <span class="hljs-variable language_">this</span>[targetMethod].<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>); <span class="hljs-comment">// rare crash (Frida bug?)</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;\nretval: &quot;</span> + retval);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warn</span>(<span class="hljs-string">&quot;\n*** exiting &quot;</span> + targetClassMethod);<br><span class="hljs-keyword">return</span> retval;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// trace Module functions</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">traceModule</span>(<span class="hljs-params">impl, name</span>)<br>&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Tracing &quot;</span> + name);<br><br><span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(impl, &#123;<br><br><span class="hljs-attr">onEnter</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">args</span>) &#123;<br><br><span class="hljs-comment">// debug only the intended calls</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">flag</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-comment">// var filename = Memory.readCString(ptr(args[0]));</span><br><span class="hljs-comment">// if (filename.indexOf(&quot;XYZ&quot;) === -1 &amp;&amp; filename.indexOf(&quot;ZYX&quot;) === -1) // exclusion list</span><br><span class="hljs-comment">// if (filename.indexOf(&quot;my.interesting.file&quot;) !== -1) // inclusion list</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">flag</span> = <span class="hljs-literal">true</span>;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">flag</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warn</span>(<span class="hljs-string">&quot;\n*** entered &quot;</span> + name);<br><br><span class="hljs-comment">// print backtrace</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;\nBacktrace:\n&quot;</span> + <span class="hljs-title class_">Thread</span>.<span class="hljs-title function_">backtrace</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span>, <span class="hljs-title class_">Backtracer</span>.<span class="hljs-property">ACCURATE</span>)<br>.<span class="hljs-title function_">map</span>(<span class="hljs-title class_">DebugSymbol</span>.<span class="hljs-property">fromAddress</span>).<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;\n&quot;</span>));<br>&#125;<br>&#125;,<br><br><span class="hljs-attr">onLeave</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">retval</span>) &#123;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">flag</span>) &#123;<br><span class="hljs-comment">// print retval</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;\nretval: &quot;</span> + retval);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warn</span>(<span class="hljs-string">&quot;\n*** exiting &quot;</span> + name);<br>&#125;<br>&#125;<br><br>&#125;);<br>&#125;<br><br><span class="hljs-comment">// remove duplicates from array</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">uniqBy</span>(<span class="hljs-params">array, key</span>)<br>&#123;<br>        <span class="hljs-keyword">var</span> seen = &#123;&#125;;<br>        <span class="hljs-keyword">return</span> array.<span class="hljs-title function_">filter</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>) &#123;<br>                <span class="hljs-keyword">var</span> k = <span class="hljs-title function_">key</span>(item);<br>                <span class="hljs-keyword">return</span> seen.<span class="hljs-title function_">hasOwnProperty</span>(k) ? <span class="hljs-literal">false</span> : (seen[k] = <span class="hljs-literal">true</span>);<br>        &#125;);<br>&#125;<br><br><span class="hljs-comment">// usage examples</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">// avoid java.lang.ClassNotFoundException</span><br><br><span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><br><span class="hljs-comment">// trace(&quot;com.target.utils.CryptoUtils.decrypt&quot;);</span><br><span class="hljs-comment">// trace(&quot;com.target.utils.CryptoUtils&quot;);</span><br><span class="hljs-comment">// trace(&quot;CryptoUtils&quot;);</span><br><span class="hljs-comment">// trace(/crypto/i);</span><br><span class="hljs-comment">// trace(&quot;exports:*!open*&quot;);</span><br><br>&#125;);<br>&#125;, <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
      <category>安卓逆向</category>
      
      <category>逆向框架</category>
      
      <category>Frida</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安卓逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Github Pages和hexo搭建个人博客</title>
    <link href="/blog/2025/04/04/Github%20Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/blog/2025/04/04/Github%20Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol><li><a href="https://blog.csdn.net/yaorongke/article/details/119089190">https://blog.csdn.net/yaorongke/article/details/119089190</a></li><li><a href="https://blog.csdn.net/qq_30163677/article/details/135159362">https://blog.csdn.net/qq_30163677/article/details/135159362</a></li><li>fluid用户手册：<a href="https://fluid-dev.github.io/hexo-fluid-docs/guide/">https://fluid-dev.github.io/hexo-fluid-docs/guide/</a></li></ol><h3 id="Github-Pages-仓库创建"><a href="#Github-Pages-仓库创建" class="headerlink" title="Github Pages 仓库创建"></a>Github Pages 仓库创建</h3><ul><li>参考上面的博客</li></ul><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install -g hexo-<span class="hljs-keyword">cli</span><br>hexo -v<br></code></pre></td></tr></table></figure><h3 id="创建hexo项目"><a href="#创建hexo项目" class="headerlink" title="创建hexo项目"></a>创建hexo项目</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">hexo init <span class="hljs-keyword">blog</span><br><span class="hljs-keyword"></span>cd <span class="hljs-keyword">blog</span><br><span class="hljs-keyword"></span>npm <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure><h3 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">pm</span> <span class="hljs-string">install</span> <span class="hljs-string">hexo-deployer-git</span> <span class="hljs-string">--save</span><br><br><span class="hljs-string">编辑</span> <span class="hljs-string">_config.yml</span> <span class="hljs-string">文件</span><br><span class="hljs-comment">#_config.yml</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">你的博客标题</span><br><span class="hljs-attr">subtitle:</span> <span class="hljs-string">你的博客副标题</span><br><span class="hljs-attr">description:</span> <span class="hljs-string">你的博客描述</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">你的名字</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">en</span><br><span class="hljs-attr">timezone:</span> <span class="hljs-string">Auto</span><br><br><span class="hljs-attr">root:</span> <span class="hljs-string">/blog</span>   <span class="hljs-comment"># 如果出现静态资源未加载，页面没有渲染效果时；因为这里指向的是根目录，在后面添加上仓库名</span><br><br><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 在生成文章的时候生成一个同名的资源目录用于存放图片文件</span><br>  <br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">&#x27;git&#x27;</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/&lt;username&gt;/&lt;project&gt;.git</span><br>  <span class="hljs-comment"># example, https://github.com/hexojs/hexojs.git</span><br>  <span class="hljs-comment">#（可复制HTTPS协议或者SSH协议）</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure><h3 id="常规操作"><a href="#常规操作" class="headerlink" title="常规操作"></a>常规操作</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">创建新文章：hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;My First Post&quot;</span><br>生成静态文件：hexo g<br>清除缓存文件等：hexo clean  <br><br>本地预览：hexo s<br>部署：hexo d<br>访问你的博客<br></code></pre></td></tr></table></figure><h3 id="主题设计"><a href="#主题设计" class="headerlink" title="主题设计"></a>主题设计</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs dts">fluid<br><span class="hljs-number">1.</span> 下载 最新 release 版本[https:<span class="hljs-comment">//github.com/fluid-dev/hexo-theme-fluid/releases] 解压到 themes 目录，并将解压出的文件夹重命名为 fluid。</span><br><span class="hljs-number">2.</span> 指定主题在*博客目录中*的 _config.yml：<br><span class="hljs-symbol">    theme:</span> fluid  <span class="hljs-meta"># 指定主题</span><br><span class="hljs-symbol">    language:</span> zh-CN  <span class="hljs-meta"># 指定语言，会影响主题显示的语言，按需修改</span><br><span class="hljs-number">3.</span> 创建关于页<br>    hexo new page about <br>    创建成功后，编辑博客目录下 <span class="hljs-keyword">/source/</span>about/index.md，添加 layout 属性   <br>    ---<br><span class="hljs-symbol">    title:</span> about<br><span class="hljs-symbol">    date:</span> <span class="hljs-number">2020</span><span class="hljs-number">-02</span><span class="hljs-number">-23</span> <span class="hljs-number">19</span>:<span class="hljs-number">20</span>:<span class="hljs-number">33</span><br><span class="hljs-symbol">    layout:</span> about<br>    ---<br>    <br>    这里写关于页的正文，支持 Markdown, HTML<br><span class="hljs-number">4.</span> 本地启动<br>    hexo g -d<br>    hexo s    <br><span class="hljs-number">5.</span> 部署：hexo g -d<br></code></pre></td></tr></table></figure><h3 id="hexo-fluid配置"><a href="#hexo-fluid配置" class="headerlink" title="hexo fluid配置"></a>hexo fluid配置</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">fluid用户手册：https:<span class="hljs-regexp">//</span>fluid-dev.github.io<span class="hljs-regexp">/hexo-fluid-docs/gui</span>de/<br>text: 欢迎各路大佬  <span class="hljs-comment"># 首页大图中文字</span><br><br></code></pre></td></tr></table></figure><h3 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">hexo <span class="hljs-built_in">new</span> <span class="hljs-built_in">post</span> 测试文章      <span class="hljs-comment">--- 执行完成后在source\_posts目录下生成了一个md文件和一个同名的资源目录(用于存放图片)</span><br></code></pre></td></tr></table></figure><h3 id="文章写作"><a href="#文章写作" class="headerlink" title="文章写作"></a>文章写作</h3><h4 id="添加图片"><a href="#添加图片" class="headerlink" title="添加图片"></a>添加图片</h4><ul><li>图片的三种引用方式</li><li>第一种为官方推荐用法</li><li>第二种为markdown语法</li><li>第三种和前两种图片存放位置不一样，是将图片放在\source\images目录下。</li><li>这三种写法在md文件中图片是无法显示的，但是在页面上能正常显示。<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">测试文章</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2021-06-10 16:35:20</span><br><span class="hljs-attr">tags:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">原创</span><br><span class="hljs-attr">categories:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">Java</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">这是一篇测试文章</span><br><br>&#123;<span class="hljs-string">%</span> <span class="hljs-string">asset_img</span> <span class="hljs-string">test.png</span> <span class="hljs-string">图片引用方法一</span> <span class="hljs-string">%</span>&#125;<br><br><span class="hljs-type">![</span><span class="hljs-string">图片引用方法二](test.png)</span><br><br><span class="hljs-type">![</span><span class="hljs-string">图片引用方法三](/images/test.png)</span><br><br></code></pre></td></tr></table></figure></li></ul><h4 id="分类页和标签页"><a href="#分类页和标签页" class="headerlink" title="分类页和标签页"></a>分类页和标签页</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">Hello</span> <span class="hljs-string">World</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2013</span><span class="hljs-string">/7/13</span> <span class="hljs-number">20</span><span class="hljs-string">:46:25</span><br><span class="hljs-attr">excerpt:</span> <span class="hljs-string">linux入门知识汇总</span><br><span class="hljs-attr">categories:</span><br>    <span class="hljs-bullet">-</span> [<span class="hljs-string">linux</span>, <span class="hljs-string">mysql</span>]    <span class="hljs-string">---</span> <span class="hljs-string">这种加上[]的方式：linux下有mysql目录</span><br>    <span class="hljs-bullet">-</span> [<span class="hljs-string">java</span>]            <span class="hljs-string">---</span> <span class="hljs-string">这种加上[]的方式：java目录和linux目录同级</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">java</span>              <span class="hljs-string">---</span> <span class="hljs-string">这种不加[]的方式：想要分级目录，是写在java下面一行才可以生效，同行不生效</span><br><span class="hljs-attr">tags:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">linux</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><h3 id="hexo文章隐藏方式"><a href="#hexo文章隐藏方式" class="headerlink" title="hexo文章隐藏方式"></a>hexo文章隐藏方式</h3><ul><li>参考：<a href="https://blog.ccknbc.cc/posts/how-to-hide-hexo-articles-gracefully/">https://blog.ccknbc.cc/posts/how-to-hide-hexo-articles-gracefully/</a><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-number">1.</span> 延迟发布： 隐藏未来文章：_config.yml( Hexo 配置文件) 关闭显示未来文章（即将 future 配置为 <span class="hljs-literal">false</span>，这样如果你手动指定日期晚于当前时间，就不会生成）<br><span class="hljs-number">2.</span> 发布状态设置：文章 <span class="hljs-built_in">Front</span>-matter 配置：<br>    ---<br>    published: <span class="hljs-literal">false</span><br>    ---<br><span class="hljs-number">3.</span> 首页隐藏<br>    更换首页插件：<br>    $ npm uninstall hexo-generator-index<br>    $ npm install hexo-generator-indexed<br>    文章首页隐藏： <span class="hljs-built_in">Front</span>-matter 配置：hide: <span class="hljs-literal">true</span><br>    分类隐藏：Hexo 的 <span class="hljs-string">`_config.yml`</span> 中可以通过 <span class="hljs-string">`hide_categories`</span> 选项设置隐藏某个分类下的文章<br>        hide_categories:<br>          - categorie1<br>          - categorie2<br><span class="hljs-number">4.</span> 存为草稿: 在博客目录.gitignore 文件添加忽略草稿目录....<br></code></pre></td></tr></table></figure></li></ul><h3 id="发布到github"><a href="#发布到github" class="headerlink" title="发布到github"></a>发布到github</h3><h4 id="方式1：hexo-deployer"><a href="#方式1：hexo-deployer" class="headerlink" title="方式1：hexo-deployer"></a>方式1：hexo-deployer</h4><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-number">1.</span> 安装hexo-deployer-git: <br>        npm install hexo-deployer-git --save<br>        <br><span class="hljs-number">2.</span> 修改根目录下的 _config.yml，配置 GitHub 相关信息<br><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> https:<span class="hljs-comment">//github.com/yaorongke/yaorongke.github.io.git</span><br><span class="hljs-symbol">  branch:</span> main<br><span class="hljs-symbol">  token:</span> ghp_3KakcaPHerunNRyMerofcFd9pblU282FSbsY<br><span class="hljs-number">3.</span> 其中 token 为 GitHub 的 Personal access tokens，获取方式如下图<br></code></pre></td></tr></table></figure><p><img src="/blog/images/hexo/hexo.png"></p><h4 id="方式2：直接将-public-目录中的文件和目录推送至-GitHub-仓库和分支中"><a href="#方式2：直接将-public-目录中的文件和目录推送至-GitHub-仓库和分支中" class="headerlink" title="方式2：直接将 public 目录中的文件和目录推送至 GitHub 仓库和分支中"></a>方式2：直接将 public 目录中的文件和目录推送至 GitHub 仓库和分支中</h4><p><img src="/blog/images/hexo/github.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手机ROOT环境搭建</title>
    <link href="/blog/2025/04/04/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/1.%20%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E6%89%8B%E6%9C%BAROOT%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/blog/2025/04/04/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/1.%20%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E6%89%8B%E6%9C%BAROOT%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li>推荐 google pixel 系列，买的时候就备注店家（解BL锁，刷twrp，magisk root， lsposed）</li><li>我用的是设备是 pixel 1。该root方案可能只适用于google</li><li>adb&#x2F;fastboot 环境，设备打开 usb 调试，版本号–开发者模式–设置usb调试</li></ul><h2 id="进入fastboot模式"><a href="#进入fastboot模式" class="headerlink" title="进入fastboot模式"></a>进入fastboot模式</h2><ul><li>pixel 1 关机状态下，同时按下，开机键 + ⾳量减键，进⼊ fastboot 模式, 之后进行后面的解锁 刷rom包流程</li><li>或者直接命令进入：adb reboot bootloader</li><li>fastboot模式下，使用adb devices是找不到设备的，需要用fastboot devices</li></ul><h2 id="解BL锁"><a href="#解BL锁" class="headerlink" title="解BL锁"></a>解BL锁</h2><ul><li>NEXUS5是2013款，所以用旧命令：fastboot oem unlock</li><li>新款使用fastboot flashing unlock命令，或通过在开发者模式下，找到OEM解锁选项，选择启用</li><li>备注：手机会提示是否解开OEM锁，通过音量键上下进行选择，然后按开关机确认</li><li>小米手机解BL锁需要等七天左右</li></ul><h2 id="刷⼊官⽅-rom包"><a href="#刷⼊官⽅-rom包" class="headerlink" title="刷⼊官⽅ rom包"></a>刷⼊官⽅ rom包</h2><ul><li>下载对应机型的rom包：<a href="https://developers.google.com/android/images#sailfish">https://developers.google.com/android/images#sailfish</a></li><li>下载好的包直接点flash-all.bat 等待即可</li></ul><h2 id="刷入terp-rec"><a href="#刷入terp-rec" class="headerlink" title="刷入terp rec"></a>刷入terp rec</h2><ul><li>下载对应机型的twrp img：<a href="https://dl.twrp.me/sailfish/%E3%80%82%E5%A6%82%E6%9E%9C%E6%98%AF%E5%85%B6%E4%BB%96%E6%9C%BA%E5%9E%8B%EF%BC%9Ahttps://twrp.me/Devices/">https://dl.twrp.me/sailfish/。如果是其他机型：https://twrp.me/Devices/</a> 找对应机型</li><li>进入fastboot模式：adb reboot bootloader</li><li>fastboot flash recovery twrp.img    首选这个。这个运行报错找不到命令就选下面的命令</li><li>fastboot flash boot twrp.img</li><li>刷入这个是为了刷Magisk。</li><li>异常情况：小米的手机没有提供twrp的rec的包，那就没法这样刷入。可以用Magisk的安装-选择修复文件-选择boot.img, 放在手机让Magsik去修补后，再放在电脑，用相同的命令刷入小米手机</li></ul><h2 id="rec下刷入magisk"><a href="#rec下刷入magisk" class="headerlink" title="rec下刷入magisk"></a>rec下刷入magisk</h2><ul><li>下载magisk(zip，apk相互转换)：<a href="https://github.com/topjohnwu/Magisk/releases%E3%80%82%E4%B8%8B%E8%BD%BDapk">https://github.com/topjohnwu/Magisk/releases。下载apk</a></li><li>把apk文件转换成zip文件后在push</li><li>adb push magisk.zip &#x2F;sdcard&#x2F;</li><li>先进fastboot模式，再音量键选择进入recovery模式，进入手机储存选择magisk.zip刷入，</li><li>开机</li><li>开机后 还需要adb install magisk的apk包</li><li>设置：<ul><li>打开magisk，发现zgisk对应的值是否，则需要在设置：在zgisk中运行magisk。新版的magisk都是用zgisk启动</li><li>还可以设置排除的app列表。就是设置哪些应用不加载magisk，就是不注入，没有root权限</li><li>还可以隐藏magisk应用，就是修改magisk的包名：该选项修改好像是需要开着代理|vpn才行</li></ul></li><li>magisk的功能<ul><li>提供root功能</li><li>提供api，开发magisk的模块：lsposed也是magisk的模块</li></ul></li></ul><h2 id="magisk-刷⼊-lsposed"><a href="#magisk-刷⼊-lsposed" class="headerlink" title="magisk 刷⼊ lsposed"></a>magisk 刷⼊ lsposed</h2><ul><li>下载lsposed：<a href="https://github.com/LSPosed/LSPosed/releases">https://github.com/LSPosed/LSPosed/releases</a></li><li>adb push lsposed-zygisk.zip &#x2F;sdcard&#x2F;</li><li>magisk中选择lsposed.zip刷入，重启设备</li><li>magisk在线模块：<a href="https://github.com/Fox2Code/FoxMagiskModuleManager/releases">https://github.com/Fox2Code/FoxMagiskModuleManager/releases</a><ul><li>因为Magisk已经不提供在线模块了，像之前的隐藏证书，移动证书，隐藏root的功能就不能用。</li><li>FoxMagiskModuleManager相当于Magisk的管理器，可以用这个来下载在线模块</li></ul></li></ul><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><ul><li>superSU，过去式</li><li>magisk，现在式 <ul><li>搭配xposed，原版xp。android8.1之前都是可以和原版的xposed搭配，后面不更新了</li><li>搭配riru，是magisk<strong>模块</strong>，提供注入接口 -&gt; riru模块，应用进程fork的时候提供一个时机，值入自己的代码</li><li>搭配zygisk, 是magisk23版本后提供的magisk<strong>模式</strong>，提供注入接口 -&gt; zygisk模块</li><li>riru和zygisk 都是hook的jniRegisterNativeMethods，基于暴露的jniRegisterNativeMethods接口，进行模块的开发。模块开发后就衍生出来两个模块：<ul><li>edxposed，xp分支，全局作用域</li><li>lsposed，xp分支，可控作用域</li></ul></li></ul></li><li>kernelSU，可能是未来式，基于内核</li><li>现主流搭配：magisk + zygisk + lsposed<ul><li>zygisk： magisk开启zygisk模式，就会修改zg进程，注入一个so，然后暴露一个注入接口</li><li>lsposed：基于暴露出来的接口进行开发</li></ul></li></ul><h2 id="Frida过root检测"><a href="#Frida过root检测" class="headerlink" title="Frida过root检测"></a>Frida过root检测</h2><ul><li>参考：<a href="https://gist.github.com/h1code2/fa9a3660b7dbe1d0f687bdb90356f97f">https://gist.github.com/h1code2/fa9a3660b7dbe1d0f687bdb90356f97f</a><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">function</span> showStacks() &#123;<br>    Java.<span class="hljs-keyword">perform</span>(<span class="hljs-keyword">function</span>() &#123;<br>        console.log(Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Exception&quot;).$<span class="hljs-built_in">new</span>()));<br>    &#125;);<br>&#125;<br><br><span class="hljs-keyword">function</span> hook() &#123;<br>    Java.<span class="hljs-keyword">perform</span>(<span class="hljs-keyword">function</span> () &#123;<br>        const commonPaths = [<br>            &quot;/data/local/bin/su&quot;,<br>            &quot;/data/local/su&quot;,<br>            &quot;/data/local/xbin/su&quot;,<br>            &quot;/dev/com.koushikdutta.superuser.daemon/&quot;,<br>            &quot;/sbin/su&quot;,<br>            &quot;/system/app/Superuser.apk&quot;,<br>            &quot;/system/bin/failsafe/su&quot;,<br>            &quot;/system/bin/su&quot;,<br>            &quot;/system/etc/init.d/99SuperSUDaemon&quot;,<br>            &quot;/system/sd/xbin/su&quot;,<br>            &quot;/system/xbin/busybox&quot;,<br>            &quot;/system/xbin/daemonsu&quot;,<br>            &quot;/system/xbin/su&quot;,<br>        ];<br><br>        var JavaString = Java.use(&quot;java.lang.String&quot;);<br>        JavaString.contains.implementation = <span class="hljs-keyword">function</span> (<span class="hljs-type">name</span>) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-type">name</span> !== &quot;test-keys&quot;) &#123;<br>                var ret = this.contains(<span class="hljs-type">name</span>);<br>                console.log(&quot;JavaString&quot;,<span class="hljs-type">name</span>,ret);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                var ret = this.contains(<span class="hljs-type">name</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span><br>            &#125;<br>            <span class="hljs-keyword">return</span> ret<br>        &#125;;<br><br>        var JavaRuntime = Java.use(&quot;java.lang.Runtime&quot;);<br>        var iOException = Java.use(&quot;java.io.IOException&quot;);<br>        JavaRuntime.exec.overload(&quot;java.lang.String&quot;).implementation = <span class="hljs-keyword">function</span> (command) &#123;<br>            <span class="hljs-keyword">if</span> (command.endsWith(&quot;su&quot;)) &#123;<br>                ret = this.exec(command);<br>                console.log(&quot;JavaRuntime&quot; ,command,ret);<br>                throw iOException.$<span class="hljs-built_in">new</span>(&quot;Hacker&quot;);<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                var ret = this.exec(command);<br>                console.log(&quot;JavaRuntime2&quot; ,command,ret)<br>            &#125;<br>            <span class="hljs-keyword">return</span> ret;<br>        &#125;;<br><br>        var JavaFile = Java.use(&quot;java.io.File&quot;);<br>        JavaFile.<span class="hljs-keyword">exists</span>.implementation = <span class="hljs-keyword">function</span> () &#123;<br>            const filename = this.getAbsolutePath();<br>            <span class="hljs-keyword">if</span> (commonPaths.indexOf(filename) &gt;= <span class="hljs-number">0</span>) &#123;<br>                var ret = this.<span class="hljs-keyword">exists</span>();<br>                console.log(&quot;JavaFile&quot;,filename,ret);<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span><br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                var ret = this.<span class="hljs-keyword">exists</span>();<br>            &#125;<br>            <span class="hljs-keyword">return</span> ret;<br>        &#125;<br>    &#125;)<br>&#125;;<br><br>setImmediate(<span class="hljs-keyword">function</span> () &#123;<br>    setTimeout(hook, <span class="hljs-number">0</span>);<br>&#125;);<br><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
      <category>安卓逆向</category>
      
      <category>环境搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安卓逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>电脑基础环境搭建</title>
    <link href="/blog/2025/04/04/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/1.%20%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E7%94%B5%E8%84%91%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/blog/2025/04/04/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/1.%20%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E7%94%B5%E8%84%91%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="JDK环境"><a href="#JDK环境" class="headerlink" title="JDK环境"></a>JDK环境</h1><ul><li>参考：<a href="https://blog.csdn.net/cj962464/article/details/78816275">https://blog.csdn.net/cj962464/article/details/78816275</a></li></ul><h3 id="JDK下载"><a href="#JDK下载" class="headerlink" title="JDK下载"></a>JDK下载</h3><ul><li>方式1</li></ul><ol><li>下载平台：<a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></li><li>选择 “Accept License Agreement” </li><li>根据系统选择对应的安装文件，64位系统安装64位JDK</li></ol><ul><li>方式2</li></ul><ol><li>进入oracle官网：<a href="https://www.oracle.com/------------%E8%BF%99%E9%87%8C%E5%8F%AF%E4%BB%A5%E4%B8%8B%E8%BD%BDjava%E7%9A%84%E5%AE%89%E8%A3%85%E5%8C%85">https://www.oracle.com/------------这里可以下载java的安装包</a></li></ol><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><ol><li>JAVA_HOME ：即Java安装目录，变量名：“JAVA_HOME”，变量值：Java安装路径</li><li>PATH： “%JAVA_HOME%\bin”</li><li>CLASSPATH：”.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar”</li></ol><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><ol><li>写一个简单的java程序<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HelloWorld.java">public class HelloWorld &#123;<br>public static void main(String[] args) &#123;<br>System.out.println(&quot;Hello World!&quot;);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>javac HelloWorld.java 命令编译该文件，命令执行完后，文件夹会多一个”HelloWorld.class”</li><li>java HelloWorld 执行编译后的class类文件</li><li>或者直接javac命令，看是否正常输出</li></ol><h1 id="SDK环境"><a href="#SDK环境" class="headerlink" title="SDK环境"></a>SDK环境</h1><h3 id="SDK下载"><a href="#SDK下载" class="headerlink" title="SDK下载"></a>SDK下载</h3><ul><li>SDK下载：<a href="http://tools.android-studio.org/index.php/sdk">http://tools.android-studio.org/index.php/sdk</a>  </li><li>安装步骤：<a href="https://blog.csdn.net/laofashi2015/article/details/83307733">https://blog.csdn.net/laofashi2015/article/details/83307733</a></li></ul><h3 id="配置环境变量-1"><a href="#配置环境变量-1" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><ul><li>选中计算机–&gt;点击右键–&gt;选择【属性】–&gt;【高级系统设置】–&gt;【环境变量】，新建&#x2F;修改变量</li><li>ANDROID_HOME：C:\Program Files (x86)\Java\sdk（sdk的安装目录）</li><li>Path：;%ANDROID_HOME%;%ANDROID_HOME%\platform-tools;%ANDROID_HOME%\tools;</li></ul><h3 id="platform-tools的版本问题"><a href="#platform-tools的版本问题" class="headerlink" title="platform-tools的版本问题"></a>platform-tools的版本问题</h3><p>platform-tools都到36版本了， 刷老版本全是报错，如何下载个老版本的platform-tools呢？： <a href="https://www.jianshu.com/p/6cc6ca71c330">https://www.jianshu.com/p/6cc6ca71c330</a><br>具体方法：实测成功：</p><ol><li>下载链接：<a href="https://dl.google.com/android/repository/platform-tools_r[%E7%89%88%E6%9C%AC]-[%E7%B3%BB%E7%BB%9F].zip">https://dl.google.com/android/repository/platform-tools_r[版本]-[系统].zip</a></li><li>版本：platform-tools的版本名称（33.0.1，33.0.0…）</li><li>系统：Windwos→windows，Mac→darwin，linux→linux</li><li>例如：<a href="https://dl.google.com/android/repository/platform-tools_r33.0.1-windows.zip">https://dl.google.com/android/repository/platform-tools_r33.0.1-windows.zip</a></li></ol><h1 id="ADB"><a href="#ADB" class="headerlink" title="ADB"></a>ADB</h1><ul><li>参考：<a href="https://blog.csdn.net/laofashi2015/article/details/83307733">https://blog.csdn.net/laofashi2015/article/details/83307733</a></li></ul><h3 id="adb下载"><a href="#adb下载" class="headerlink" title="adb下载"></a>adb下载</h3><ol><li>在SDK的目录下，打开SDK Manager.exe，下载tools中的platform-tools(下载慢，翻墙快)</li><li>下载好之后在SDK目录下生成platform-tools目录</li><li>在目录中照adb.exe, 找到之后该路径配置环境变量</li><li>运行cmd：输入adb，出现下图即环境搭建成功；</li><li>链接设备：手机通过USB线连接电脑，在cmd运行窗口输入命令：“adb devices”，显示已连接的设备信息；</li></ol><h3 id="如果此种方式adb无法使用，尝试单独安装adb，adb包"><a href="#如果此种方式adb无法使用，尝试单独安装adb，adb包" class="headerlink" title="如果此种方式adb无法使用，尝试单独安装adb，adb包"></a>如果此种方式adb无法使用，尝试单独安装adb，adb包</h3><ul><li>adb1.zip</li><li>adb2.zip</li></ul><h1 id="fastboot"><a href="#fastboot" class="headerlink" title="fastboot"></a>fastboot</h1><ul><li>fastboot和adb都是在SDK下面的platform-tools。配置好platform-tools的环境变量即可使用</li><li>验证：fastboot –version</li></ul>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
      <category>安卓逆向</category>
      
      <category>环境搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安卓逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LSPosed基础代码搭建</title>
    <link href="/blog/2025/04/04/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/4.%20%E9%80%86%E5%90%91%E6%A1%86%E6%9E%B6/Xposed/LSPosed%E5%9F%BA%E7%A1%80%E4%BB%A3%E7%A0%81%E6%90%AD%E5%BB%BA/"/>
    <url>/blog/2025/04/04/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/4.%20%E9%80%86%E5%90%91%E6%A1%86%E6%9E%B6/Xposed/LSPosed%E5%9F%BA%E7%A1%80%E4%BB%A3%E7%A0%81%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="搭建代码地址-直接复用"><a href="#搭建代码地址-直接复用" class="headerlink" title="搭建代码地址[直接复用]"></a>搭建代码地址[直接复用]</h1><ol><li>本节搭建版本：<a href="https://gitee.com/yangyin_g/xposed-tools">https://gitee.com/yangyin_g/xposed-tools</a></li><li>yrx版本：<a href="https://github.com/huaerxiela/XpTest">https://github.com/huaerxiela/XpTest</a></li></ol><h1 id="场景汇总-解决方案"><a href="#场景汇总-解决方案" class="headerlink" title="场景汇总&amp;解决方案"></a>场景汇总&amp;解决方案</h1><h2 id="xposed模块安装失败"><a href="#xposed模块安装失败" class="headerlink" title="xposed模块安装失败"></a>xposed模块安装失败</h2><ul><li>生成的破解apk安装失败，报错INSTALL_FAILED_TEST_ONLY，安装时：adb install -t ***.apk</li></ul><h2 id="hook-加壳的app"><a href="#hook-加壳的app" class="headerlink" title="hook 加壳的app"></a>hook 加壳的app</h2><ul><li>需要添加<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 目的为了获取ClassLoader</span><br><span class="hljs-comment">// com.stub.StubApp: 壳程序的application标签的android:name属性</span><br>XposedHelpers.findAndHookMethod(<span class="hljs-string">&quot;com.stub.StubApp&quot;</span>, lpparam.classLoader,<span class="hljs-string">&quot;attachBaseContext&quot;</span>,<br>    Context.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>            <span class="hljs-type">Context</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> (Context) param.args[<span class="hljs-number">0</span>];<br>            Log.i(tag, <span class="hljs-string">&quot;content-&gt;&quot;</span> + context);<br>            <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> context.getClassLoader();<br><span class="hljs-comment">//                            Log.i(tag, &quot;classloader-&gt;&quot; + classLoader);</span><br><span class="hljs-comment">//                            hookOne(classLoader);</span><br>            hookDongCheng(classLoader);<br>        &#125;<br>    &#125;<br>);<br></code></pre></td></tr></table></figure></li></ul><h1 id="搭建流程"><a href="#搭建流程" class="headerlink" title="搭建流程"></a>搭建流程</h1><ul><li>参考：<a href="https://www.codenong.com/cs107130461/">https://www.codenong.com/cs107130461/</a></li></ul><h2 id="1-编写测试程序"><a href="#1-编写测试程序" class="headerlink" title="1. 编写测试程序"></a>1. 编写测试程序</h2><h3 id="1-1-创建项目"><a href="#1-1-创建项目" class="headerlink" title="1.1 创建项目"></a>1.1 创建项目</h3><p><img src="/blog/images/android/xposed/1743760707710.jpg"><br><img src="/blog/images/android/xposed/1743760723646.jpg"><br><img src="/blog/images/android/xposed/1743760736977.jpg"></p><h3 id="1-2-修改布局"><a href="#1-2-修改布局" class="headerlink" title="1.2 修改布局"></a>1.2 修改布局</h3><p><img src="/blog/images/android/xposed/1743760749425.jpg"><br>然后将左侧源代码修改为以下内容:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">RelativeLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">tools:context</span>=<span class="hljs-string">&quot;.MainActivity&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/tv_text&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_centerInParent</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;Hello World!&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;22dp&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/bt_change&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_alignParentBottom</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;点击我&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">RelativeLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-3-编写程序逻辑代码"><a href="#1-3-编写程序逻辑代码" class="headerlink" title="1.3 编写程序逻辑代码"></a>1.3 编写程序逻辑代码</h3><p><img src="/blog/images/android/xposed/1743760825386.jpg"></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">private Button btn1<span class="hljs-comment">;</span><br>private TextView tvText1<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">btn1 = (Button) findViewById(R.id.bt_change);<br>tvText1 = (TextView) findViewById(R.id.tv_text);<br><br>btn1.setOnClickListener(<span class="hljs-built_in">new</span> <span class="hljs-keyword">View</span>.OnClickListener() &#123;<br>    @Override<br>    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> onClick(<span class="hljs-keyword">View</span> <span class="hljs-keyword">view</span>) &#123;<br>        tvText1.setText(&quot;你已经点击了按钮&quot;);<br>    &#125;<br>&#125;);<br><br></code></pre></td></tr></table></figure><ul><li>按下 Ctrl + Shift + L 可一键格式化代码</li></ul><h2 id="2-运行测试程序"><a href="#2-运行测试程序" class="headerlink" title="2. 运行测试程序"></a>2. 运行测试程序</h2><ul><li>Android Studio 中内置了 虚拟机,我们可以直接在 PC 上进行程序的测试运行。</li><li>如果你不想在虚拟机中运行测试程序,而是在自己的手机上安装运行,那么你可以先跳转到步骤—打包应用。<br><img src="/blog/images/android/xposed/1743760995059.jpg"><br><img src="/blog/images/android/xposed/1743761009224.jpg"></li></ul><h2 id="3-编写-Xposed-模块"><a href="#3-编写-Xposed-模块" class="headerlink" title="3. 编写 Xposed 模块"></a>3. 编写 Xposed 模块</h2><ul><li>接下来我们将通过编写一个 Xposed 模块来实现修改测试程序的运行结果: 当我们点击底部按钮后,界面中间的文字将变为我们所自定义的文本。</li></ul><h3 id="3-1-新建-Xposed-项目"><a href="#3-1-新建-Xposed-项目" class="headerlink" title="3.1 新建 Xposed 项目"></a>3.1 新建 Xposed 项目</h3><ul><li>同普通APP程序一样 Xposed 也是一个 APP 程序, 我们可以像 1.1 所示的步骤一样创建一个拥有 Activity 的程序,但是由于我们本次编写的 Xposed 模块无需用户界面, 所以我们也可以选择 No Activity 的项目进行创建<br><img src="/blog/images/android/xposed/1743761107423.jpg"></li></ul><h3 id="3-2-修改-AndroidManifest-xml"><a href="#3-2-修改-AndroidManifest-xml" class="headerlink" title="3.2 修改 AndroidManifest.xml"></a>3.2 修改 AndroidManifest.xml</h3><ul><li>项目创建完成后,我们以下展开左侧目录的 app-&gt;manifests,然后双击打开 AndroidManifest.xml 文件。</li><li>AndroidManifest.xml 文件中的 application 标签默认是一个单标签, 由于我们需要向其中添加内容, 所以我们首先要将 application 标签修改为双标签:<br><img src="/blog/images/android/xposed/1743761171762.jpg"></li><li>接下来我们在之前添加以下代码:<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs haskell">&lt;meta-<span class="hljs-class"><span class="hljs-keyword">data</span></span><br>           android:name=<span class="hljs-string">&quot;xposedmodule&quot;</span><br>           android:value=<span class="hljs-string">&quot;true&quot;</span> /&gt;<br>&lt;meta-<span class="hljs-class"><span class="hljs-keyword">data</span></span><br>           android:name=<span class="hljs-string">&quot;xposeddescription&quot;</span><br>           android:value=<span class="hljs-string">&quot;这是一个没有Active的Xposed模块&quot;</span> /&gt;<br>&lt;meta-<span class="hljs-class"><span class="hljs-keyword">data</span></span><br>           android:name=<span class="hljs-string">&quot;xposedminversion&quot;</span><br>           android:value=<span class="hljs-string">&quot;30&quot;</span> /&gt;<br></code></pre></td></tr></table></figure></li><li>然后 AndroidManifest.xml 文件的内容大致如下图所示:<br><img src="/blog/images/android/xposed/1743761230828.jpg"></li></ul><h3 id="3-3-引入-Xposed-Api"><a href="#3-3-引入-Xposed-Api" class="headerlink" title="3.3 引入 Xposed Api"></a>3.3 引入 Xposed Api</h3><ul><li>展开左侧的 Gradle Scripts 目录,然后双击 build.gradle(Module: app) 文件,并向其中添加如下代码:<figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">repositories</span> &#123;<br>    <span class="hljs-function"><span class="hljs-title">jcenter</span>()</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">compileOnly</span> <span class="hljs-string">&#x27;de.robv.android.xposed:api:82&#x27;</span><br>compileOnly <span class="hljs-string">&#x27;de.robv.android.xposed:api:82:sources&#x27;</span><br></code></pre></td></tr></table></figure><ul><li><p>扩展：compileOnly ‘de.robv.android.xposed:api:82’ </p><ul><li>表示只编译，但是这个包里的代码并不会打包到apk里面，因为xposed框架已经具备了。</li><li>回顾xposed是怎么执行成功的:<ul><li>系统启动的时候，挂载magisk </li><li>magisk会提供接口，这个接口被lsposed利用 </li><li>lsposed就利用magisk提供的接口 在应用启动的时候，就会注入xposed的代码，框架就利用lxposed的逻辑，已经注入到你这个应用中了 </li><li>也就是注入后，应用进程启动，就会执行magisk的回调，magisk的回调里就有lsposed的代码，代码就会加载xposed的框架，有这个框架之后，就可以利用classloader的方式去加载模块，这样就完成hook了。所以这里只需要进行编译即可。</li><li>主要意思就是xposed的逻辑已经在xposed的框架里了，这个框架已经被加载到应用进程里了，所以这里只需要编译就ok了</li></ul></li></ul></li><li><p>它们对应的位置如图所示:<br><img src="/blog/images/android/xposed/1743761299415.jpg"></p></li><li><p>然后点击右上角的 Sync Now 等待完成提示即可。</p></li></ul><h3 id="3-4-编写-Hook-主程序"><a href="#3-4-编写-Hook-主程序" class="headerlink" title="3.4 编写 Hook 主程序"></a>3.4 编写 Hook 主程序</h3><ul><li>展开 java 目录,然后鼠标右击 Xposed 模块对应的包名,新建一个 Java Class 文件,名称自定义(在这里我使用 Main 来命名)</li><li>接下来我们通过刚才新建的类来 实现 IXposedHookLoadPackage 接口:<br><img src="/blog/images/android/xposed/1743761350478.jpg"></li><li>具体代码如下(com.example.helloworld 需要修改为测试程序对应的包名):<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">if</span>(lpparam.packageName.equals(<span class="hljs-string">&quot;com.example.helloworld&quot;</span>)) &#123;<br>    XposedBridge.log(<span class="hljs-string">&quot;测试程序已经加载&quot;</span>);<br>    XposedHelpers.findAndHookMethod(TextView.class, <span class="hljs-string">&quot;setText&quot;</span>, CharSequence.class, <span class="hljs-keyword">new</span> XC_MethodHook() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>            <span class="hljs-keyword">if</span>(param.args[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;你已经点击了按钮&quot;</span>) &#123;<br>                param.args[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;这是被Xposed Hook修改的文本&quot;</span>;<br>                XposedBridge.log(<span class="hljs-string">&quot;Xposed 成功 Hook 目标方法&quot;</span>);<br>            &#125;<br>        &#125;<br>       <br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>            <span class="hljs-keyword">super</span>.afterHookedMethod(param);<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><img src="/blog/images/android/xposed/20200704211337257.webp"></li></ul><h3 id="3-5-设置-Xposed-模块入口"><a href="#3-5-设置-Xposed-模块入口" class="headerlink" title="3.5 设置 Xposed 模块入口"></a>3.5 设置 Xposed 模块入口</h3><ul><li>完成上述步骤之后,我们需要为 Xposed 模块指定入口文件。<br><img src="/blog/images/android/xposed/1743761444218.jpg"></li><li>新建 Assets Folder 时,我们直接点击 Finish 即可,无需进行其他操作。</li><li>接下来,我们将左上角的 Project 切换回 Android ,这时我们可以在左侧看到 assets 目录,鼠标右击该目录选择新建一个 File ,命名为 xposed_init。</li><li>向 xposed_init 写入以下内容: Xposed 对应的包名.入口类名</li><li>例如: 我创建的 Xposed 模块包名为:com.example.xposedhook, 在步骤 3.4 当中创建的 Java Class 文件命名为Main</li><li>那么,我应该向 xposed_init 中写入:com.example.xposedhook.Main</li></ul><h3 id="3-6-打包应用"><a href="#3-6-打包应用" class="headerlink" title="3.6 打包应用"></a>3.6 打包应用</h3><ul><li>步骤 2 中的运行测试程序是针对那些拥有用户界面的程序,由于我们所编写的 Xposed 模块是无用户界面的程序且虚拟机中没有安装 Xposed 框架,所以我们可以选择将项目打包为 APK 文件,然后在已安装 Xposed 框架的手机中进行安装测试。</li><li>我们依次选择顶部工具栏中的 Build-&gt;Build Bundle(s) &#x2F; APK(s)-&gt;Build APK(s),然后等待程序打包完成。</li><li>程序打包完成后在 Android Studio 的右下角会弹出提示,接下来我们点击蓝色的 locate,即可打开所打包的 APK 文件所在目录。</li></ul><h2 id="4-测试-Xposed-模块功能"><a href="#4-测试-Xposed-模块功能" class="headerlink" title="4. 测试 Xposed 模块功能"></a>4. 测试 Xposed 模块功能</h2><ul><li>此时我们需要将所打包的测试程序和 Xposed 模块一起安装到一部已经安装 Xposed 框架的手机中。</li><li>然后我们在 Xposed 框架中选择刚才所安装的 Xposed 模块进行启用,并重启手机。</li><li>这时我们再次运行我们之前所编写的测试程序,并点击底部的按钮,然后我们会发现: 中间的文字已经不是我们在测试程序所编写的 “你已经点击了按钮”, 而是我们在 Xposed 模块中自定义的 “这是被Xposed Hook修改的文本”。</li><li>至此,你已经学会了如何编写一个简单的 Android 程序和 Xposed 模块。</li></ul>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
      <category>安卓逆向</category>
      
      <category>逆向框架</category>
      
      <category>Xposed</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安卓逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Xposed支持模块汇总</title>
    <link href="/blog/2025/04/04/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/4.%20%E9%80%86%E5%90%91%E6%A1%86%E6%9E%B6/Xposed/LSposed%E6%94%AF%E6%8C%81%E6%A8%A1%E5%9D%97%E6%B1%87%E6%80%BB/"/>
    <url>/blog/2025/04/04/%E9%80%86%E5%90%91/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/4.%20%E9%80%86%E5%90%91%E6%A1%86%E6%9E%B6/Xposed/LSposed%E6%94%AF%E6%8C%81%E6%A8%A1%E5%9D%97%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h3 id="所有工具集合："><a href="#所有工具集合：" class="headerlink" title="所有工具集合："></a>所有工具集合：</h3><ul><li><a href="https://repo.xposed.info/module-overview">https://repo.xposed.info/module-overview</a></li><li><a href="https://github.com/Fox2Code/FoxMagiskModuleManager/release">https://github.com/Fox2Code/FoxMagiskModuleManager/release</a></li><li>安装了LSPosed后【需要较新版】，手机支持翻墙的话，就可以直接下载安装模块了</li></ul><h1 id="脱壳"><a href="#脱壳" class="headerlink" title="脱壳"></a>脱壳</h1><ul><li>dumpDex_v1.0.4.apk</li><li>FDex2_1.1.apk</li></ul><h1 id="JustTrustMe模块去除单项认证"><a href="#JustTrustMe模块去除单项认证" class="headerlink" title="JustTrustMe模块去除单项认证"></a>JustTrustMe模块去除单项认证</h1><ul><li>去除常规单项认证：JustTrustMe.apk</li><li>去除混淆的单项认证：JustMePlush–8.25.0.10.apk<ul><li>使用升级版JustMePlus 自适配Hook混淆后的网络请求库代码（自适配okhttp）</li><li>参考：<a href="https://bbs.pediy.com/thread-254114.htm">https://bbs.pediy.com/thread-254114.htm</a></li></ul></li></ul><h1 id="修改设备"><a href="#修改设备" class="headerlink" title="修改设备"></a>修改设备</h1><ul><li><p>com.kelvin.gai_ji_zh_v9_01235b_0.apk</p><ul><li><a href="https://repo.xposed.info/module/com.kelvin.gai_ji">https://repo.xposed.info/module/com.kelvin.gai_ji</a></li></ul></li><li><p>Hardwarecode-master.zip</p><ul><li><a href="https://github.com/1998lixin/Hardwarecode">https://github.com/1998lixin/Hardwarecode</a></li><li><a href="https://bbs.pediy.com/thread-218625.htm">https://bbs.pediy.com/thread-218625.htm</a></li></ul></li></ul><h1 id="钉钉打卡"><a href="#钉钉打卡" class="headerlink" title="钉钉打卡"></a>钉钉打卡</h1><ul><li>参考：<a href="https://repo.xposed.info/module/com.chenxiabin.xposed.ding">https://repo.xposed.info/module/com.chenxiabin.xposed.ding</a></li></ul><h1 id="Inspeckage"><a href="#Inspeckage" class="headerlink" title="Inspeckage"></a>Inspeckage</h1><ul><li>mobi.acpm.inspeckage_v10_b94f02.apk</li><li>Inspeckage-master.zip</li><li>github地址：<a href="https://github.com/ac-pm/Inspeckage">https://github.com/ac-pm/Inspeckage</a></li><li>安装包：<ul><li><a href="https://repo.xposed.info/module/mobi.acpm.inspeckage">https://repo.xposed.info/module/mobi.acpm.inspeckage</a></li><li><a href="https://github.com/ac-pm/Inspeckage/releases">https://github.com/ac-pm/Inspeckage/releases</a></li></ul></li></ul><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul><li><p>Inspeckage是一种用于对Android应用程序进行动态分析的工具。通过将钩子应用于Android API的功能，Inspeckage将帮助您了解Android应用程序在运行时正在做什么。</p><ul><li><a href="http://ac-pm.github.io/Inspeckage">http://ac-pm.github.io/Inspeckage</a></li><li><a href="https://twitter.com/inspeckage">https://twitter.com/inspeckage</a></li><li><a href="https://play.google.com/store/apps/details?id=mobi.acpm.inspeckage">https://play.google.com/store/apps/details?id=mobi.acpm.inspeckage</a></li><li><a href="http://repo.xposed.info/module/mobi.acpm.inspeckage">http://repo.xposed.info/module/mobi.acpm.inspeckage</a></li></ul></li><li><p>获取特征 </p><ul><li>使用Inspeckage，我们可以获得有关应用程序行为的大量信息：</li><li>信息收集</li><li>请求的权限；</li><li>应用权限;</li><li>共享库；</li><li>出口和非出口活动，内容提供商，广播接收器和服务；</li><li>检查应用程序是否可调试；</li><li>版本，UID和GID；</li><li>等等</li></ul></li><li><p>挂钩（到目前为止）</p><ul><li>通过挂钩，我们可以实时查看应用程序在做什么：</li><li>共享首选项（日志和文件）；</li><li>序列化；</li><li>加密;</li><li>散列；</li><li>SQLite;</li><li>HTTP（HTTP代理工具仍然是最佳选择）；</li><li>文件系统;</li><li>杂项（剪贴板，URL.Parse（））；</li><li>WebView；</li><li>IPC；</li><li>挂钩（动态添加新的挂钩）</li></ul></li><li><p>动作</p><ul><li>使用Xposed，可以执行诸如启动未导出的活动等动作：</li><li>开始任何活动（已导出和未导出）；</li><li>致电任何提供商（已导出和未导出）；</li><li>禁用FLAG_SECURE;</li><li>SSL取消选中（绕过证书固定-JSSE，Apache和okhttp3）；</li><li>启动，停止和重新启动应用程序；</li><li>替换参数并返回值（+挂钩选项卡）。</li></ul></li><li><p>指纹</p><ul><li>设备指纹-广告ID，MAC地址，IMEI，发布，品牌，构建模式…</li></ul></li><li><p>位置</p><ul><li>更改GPS位置（不使用“模拟位置”功能）</li></ul></li><li><p>附加功能</p><ul><li>APK下载；</li><li>查看应用程序的目录树；</li><li>下载应用程序的文件；</li><li>以文本文件格式下载钩子生成的输出；</li><li>进行屏幕截图；</li><li>发送文字到Android剪贴板。</li><li>提示-一些方法&#x2F;指南</li></ul></li><li><p>组态</p><ul><li>尽管我们的工具与HTTP库有一些联系，但使用外部代理工具仍然是分析应用流量的最佳选择。使用Inspeckage，您可以：</li><li>向目标应用添加代理；</li><li>启用和禁用代理；</li><li>在arp表中添加条目。</li></ul></li><li><p>Logcat</p><ul><li>Logcat.html页面。一个带有websocket的实验页面，用于显示logcat的一些信息。</li></ul></li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li>要求：Xposed框架</li><li>Xposed安装程序<ul><li>转到Xposed安装程序，选择“下载”</li><li>刷新并搜索“检查”</li><li>下载最新版本并安装</li><li>在Xposed中启用</li><li>重新启动并享受！</li></ul></li></ul><h3 id="Xposed存储库"><a href="#Xposed存储库" class="headerlink" title="Xposed存储库"></a>Xposed存储库</h3><ul><li><p>从Xposed存储库获取它：<a href="http://repo.xposed.info/module/mobi.acpm.inspeckage">http://repo.xposed.info/module/mobi.acpm.inspeckage</a></p></li><li><p>adb install mobi.acpm.inspeckage.apk</p></li><li><p>在Xposed中启用</p></li><li><p>重新启动并享受！</p></li><li><p>如何卸载<br>  adb uninstall mobi.acpm.inspeckage<br>  并重新启动！</p></li></ul><h2 id="使用指南"><a href="#使用指南" class="headerlink" title="使用指南"></a>使用指南</h2><h3 id="使用手册"><a href="#使用手册" class="headerlink" title="使用手册"></a>使用手册</h3><ul><li><a href="http://www.site-digger.com/html/articles/20190622/732.html">http://www.site-digger.com/html/articles/20190622/732.html</a></li><li><a href="https://blog.csdn.net/tom__chen/article/details/78216732">https://blog.csdn.net/tom__chen/article/details/78216732</a></li><li><a href="https://www.jianshu.com/p/e2589341f698">https://www.jianshu.com/p/e2589341f698</a></li></ul><h3 id="状态确认"><a href="#状态确认" class="headerlink" title="状态确认"></a>状态确认</h3><p><img src="/blog/images/android/xposed/1743759929363.jpg"></p><h3 id="访问websever"><a href="#访问websever" class="headerlink" title="访问websever"></a>访问websever</h3><p><img src="/blog/images/android/xposed/1743759961848.jpg"></p><ul><li>局域网内访问：手机连接wifi，同局域网浏览器通过ip访问</li><li>USB访问：adb连接，并输入 Access with ADB 所显示的命令</li></ul><h3 id="主界面说明"><a href="#主界面说明" class="headerlink" title="主界面说明"></a>主界面说明</h3><p><img src="/blog/images/android/xposed/1743759998493.jpg"></p><h3 id="设置页说明"><a href="#设置页说明" class="headerlink" title="设置页说明"></a>设置页说明</h3><p><img src="/blog/images/android/xposed/1743760020422.jpg"></p><h3 id="操作说明"><a href="#操作说明" class="headerlink" title="操作说明"></a>操作说明</h3><p><img src="/blog/images/android/xposed/1743760044306.jpg"></p><ul><li>动态刷新开关打开，webserver就会加载手机端的所有数据。（这个开关并不是控制手机端工具的开关，仅仅是webserver是否动态刷新数据的开关。查看数据时，可以关闭动态刷新，否则展开数据会不断的被收起，无法正常查看）<br><img src="/blog/images/android/xposed/1743760064286.jpg"></li><li>Setting模块内的restart&#x2F;finish&#x2F;start App 按钮，是控制被检测应用的</li></ul><h2 id="模块说明"><a href="#模块说明" class="headerlink" title="模块说明"></a>模块说明</h2><ul><li>Logcat                实时查看该app的logcat输出</li><li>Tree View             可以实时浏览app的数据目录并直接下载文件到本地</li><li>Package Information应用基本信息（组件信息、权限信息、共享库信息）</li><li>Shared PreferencesLOG：app XML文件读写记录；Files：具体XML写入内容</li><li>Serialization           反序列化记录</li><li>Crypto                常见加解密记录（KEY、IV值）</li><li>Hash                 常见的哈希算法记录</li><li>SQLite                SQLite数据库操作记录</li><li>HTTP                 HTTP网络请求记录</li><li>File System           文件读写记录</li><li>Misc.                 调用Clipboard,URL.Parse()记录</li><li>WebView             调用webview内容         </li><li>IPC                   进程之间通信记录</li><li>+Hooks               运行过程中用户自定义Hook记录</li></ul><p>+Hooks模块中，可对被测APP进行hook，很方便。<br><img src="/blog/images/android/xposed/1743759848936.jpg"><br><img src="/blog/images/android/xposed/1743759888369.jpg"></p><h1 id="CryptoFucker"><a href="#CryptoFucker" class="headerlink" title="CryptoFucker"></a>CryptoFucker</h1><ul><li>CryptoFucker-master.zip</li><li>参考：<ul><li><a href="https://github.com/P4nda0s/CryptoFucker">https://github.com/P4nda0s/CryptoFucker</a></li><li><a href="https://bbs.pediy.com/thread-222809.htm">https://bbs.pediy.com/thread-222809.htm</a></li><li>github: <a href="https://github.com/Chenyuxin/CryptoFucker">https://github.com/Chenyuxin/CryptoFucker</a></li></ul></li><li>注意： 如果是加壳的app，需要在源码修改class了</li></ul><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>Xposed框架，用于抓取javax.crypto.与 javax.security.算法参数（包括加密数据、密钥、IV、结果等数据）的工具。适用于java层加密</p><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><ol><li>安装Xposed framework</li><li>安装并激活CryptoFucker</li><li>运行你想测试的APP</li><li>&#x2F;sdcard&#x2F;ydsec&#x2F;packgeName.txt 为数据文件</li><li>建议使用Notepad++查看数据文件。</li></ol><h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><ol><li>支持 javax.crypto.* 大部分函数</li><li>支持 javax.security.*大部分函数</li><li>IV向量嗅探</li><li>密钥嗅探</li><li>加密原始数据嗅探</li><li>加密结果嗅探</li><li>调用栈显示</li><li>HEX 显示</li></ol><h3 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h3><ul><li>txt数据文件中都是16进制，转化使用以下python代码<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> binascii<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hex2string</span>(<span class="hljs-params">_<span class="hljs-built_in">hex</span>, decoding=<span class="hljs-string">&quot;utf-8&quot;</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;16进制转字符串， 转化出错可能是编码问题&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> binascii.a2b_hex(_<span class="hljs-built_in">hex</span>).decode(decoding)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">string2hex</span>(<span class="hljs-params">_string, encoding=<span class="hljs-string">&quot;utf-8&quot;</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;字符串转16进制，转化出错可能是编码问题&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> binascii.b2a_hex(_string.encode(encoding=encoding))<br><br>a = <span class="hljs-string">&quot;62 38 34 32 65 36 63 36 32 64 37 65 34 63 36 30&quot;</span>.replace(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;&quot;</span>).lower()<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(hex2string(a, decoding=<span class="hljs-string">&quot;gb2312&quot;</span>))<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
      <category>安卓逆向</category>
      
      <category>逆向框架</category>
      
      <category>Xposed</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安卓逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mongoDB介绍</title>
    <link href="/blog/2023/09/16/mongo/mongo/"/>
    <url>/blog/2023/09/16/mongo/mongo/</url>
    
    <content type="html"><![CDATA[<p><img src="/blog/images/mongo/DBranking.png" alt="DB排名"></p><ul><li>可以看出，当下mongoDB已经有被广泛使用的趋势</li></ul><h1 id="mongoDB介绍"><a href="#mongoDB介绍" class="headerlink" title="mongoDB介绍"></a>mongoDB介绍</h1><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>MongoDB是一个开源的文档数据库，旨在简化开发和扩展；更敏捷、灵活<ul><li>数据模型应对业务变化：因为表不需要创建 &amp; 数据模型比较灵活，可以根据业务变化来做快速应对</li><li>快速迭代以适应新的需求：schemaless 的文档设计，让我们的数据存储更灵活，省去了昂贵的发布成本，只需要发布索引</li><li>表不存在会自动创建，</li></ul></li><li>高性能，高可用和自动伸缩<ul><li>CAP理论，分别代表 Consistency（强一致性），Availability（可用性），Partition Tolerance（分区容错)</li><li>MongoDB主要体现在cap的ap，即Availability（可用性），Partition Tolerance（分区容错)；因为MongoDB的一致性是最终一致性，而不是强一致性</li><li>高性能：<ul><li>支持嵌入数据模型减少对数据库IO；嵌套文档的设计可以将离散IO变成顺序IO</li><li>支持索引快速查询</li></ul></li><li>高可用：<ul><li>自动故障切换</li><li>数据复制集</li></ul></li><li>自动伸缩：<ul><li>水平扩展：动态添加分片和副本集</li></ul></li></ul></li><li>支持多个存储引擎<ul><li>WiredTiger Storage Engine(3.2后默认)：存储在磁盘</li><li>In-Memory Storage Engine：存储在内存</li><li>MMAPv1 Storage ENgine (4.0后废弃)</li></ul></li></ul><h2 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h2><ul><li>底层存储BSON（Binary Serialized Document Notation），MongoDB 使用 BSON 作为数据存储和消息传输 的编码格式。<ul><li>数据修改效率高：数据具有类型 无需按字符串处理</li><li>基于原始的 JSON 数据类型之上，BSON 提供了自己的扩展。 </li><li>遍历扫描速度快：元素头部存储元素长度可快速seek</li><li>嵌套文档的设计可以将离散IO变成顺序IO</li><li>原生优秀的高可用支持，一旦发生故障，不依赖第三方工具，集群内部基于RAFT协议可以高效快速的选举出新的主库节点。</li><li><code>新版本支持事务</code>，满足业务对数据一致性的高要求；4.0版本后支持事务，4.2版本支持效果更强，会支持多文档事物，也就是基于多行数据的事务</li><li>支持多种类型的索引，提高我们的查询性能, 支持的索引类型包括唯一索引，稀疏索引，TTL索引等等</li><li>默认的wiredtiger引擎有基于文档级别(row)的并发控制系统，可以满足高并发的读写需求</li></ul></li></ul><h2 id="事务-version4-0"><a href="#事务-version4-0" class="headerlink" title="事务 version4.0"></a>事务 version4.0</h2><ul><li>单文档操作：原子性</li><li>多文档事物<ul><li>多文档事务仅对Replace Set集群可用，Sharded CLusters目前不支持</li><li>多文档事务仅适用于使用WiredTiger存储引擎的部署，in-memory存储引擎不支持</li><li>在多文档事务中，不允许创建或删除集合或索引等影响数据库的操作</li><li>回话最多只能有一个打开的事务</li><li>Read Preference：primary</li></ul></li></ul><h2 id="概念对比传统型"><a href="#概念对比传统型" class="headerlink" title="概念对比传统型"></a>概念对比传统型</h2><p><img src="/blog/images/mongo/duibi.png" alt="MYSQL和MONGODB对比"></p><ul><li>redo日志和binlog日志 以及对应的journal日志和oplog日志是偏运维的，主要要数据恢复用的</li></ul><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>日志，配置数据，报文数据，缓存数据，画像标签数据等一系列需要存储非结构化数据的应用</li><li><img src="/blog/images/mongo/changjing.png" alt="场景.png"></li><li>数据量几十几百亿，mongo可以轻松支持，mysql需要分库分表</li><li>跨地区集群：mongo有一个全球部署的模式</li><li>mongo有原生的分片架构</li></ul><h2 id="数据库定位"><a href="#数据库定位" class="headerlink" title="数据库定位"></a>数据库定位</h2><p>原则上 Oracle 和 MySQL 能做的事情，MongoDB 都能做（包括 ACID 事务）<br>优点：横向扩展能力，数据量或并发量增加时候架构可以自动扩展；如果使用mysql，横向扩展并不是透明的，往往需要一些应用进行一些配合<br>优点：灵活模型，适合迭代开发，数据模型多变场景 ；应对需求一直变更的场景，对应的数据库修改模型 修改字段增加字段来说，mysql修改很麻烦，但是mongo不需要预先定义好模型，会随着程序的修改而修改，这样非常适合敏捷开发<br>优点：JSON 数据结构，适合微服务&#x2F;REST API</p><h2 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h2><ul><li>Objectid(_id) 是mongodb默认的主键,它的生成和服务器识别码，mongodb 进程pid，时间戳都关联，只能保证主库节点稳定运行期间的单调性，<code>不建议作为业务主键使用</code>，如果把他覆盖掉，后面查问题比较麻烦； <code>如果需要业务主键，在业务主键上发布一个唯一索引</code>；索引是mongo唯一需要发布的东西</li><li><code>建议每条document都加入时间类型的字段</code>，并在上面创建索引，方便未来的数据检索，<code>对于需要定期清理的需求，也可以在这个时间字段上添加ttl索引</code>；注意：到期后mongo会起一个后台进程慢慢删除过期数据，不是到期就删除，而是根据当前数据库使用情况 压力 缓慢的把老数据清理掉</li><li>业务表名最好是见名知意，不要以纯数字作为表名，表名中也不要带特殊字符</li><li>对于需要join查询的多表数据，建议采用嵌套模式进行存储设计；嵌套模式：从离散IO到顺序IO<br><img src="/blog/images/mongo/shiyongjianyi.png" alt="嵌套模式"></li></ul><h1 id="高可用架构"><a href="#高可用架构" class="headerlink" title="高可用架构"></a>高可用架构</h1><h2 id="部署模式"><a href="#部署模式" class="headerlink" title="部署模式"></a>部署模式</h2><p><img src="/blog/images/mongo/%E9%83%A8%E7%BD%B2%E6%A8%A1%E5%BC%8F.png" alt="部署模式"></p><ul><li>单机: 基本不用</li><li>复制集群<ul><li>写入主节点的时候会有一个oplog，从节点就从主节点的oplog同步数据</li><li>读操作可以在主节点也可以在副本节点，这样可以实现读写分离</li></ul></li><li>分片集群<ul><li>三个角色：<ul><li>router节点[路由节点]：主要对外提供服务，也就是应用程序只会和router节点做操作和连接，也就是应用程序不会直接和shard节点做交互</li><li>config Services：配置服务节点，主要存储元数据，比如集群的分布和数据在shard的分布情况</li><li>shard: 分片节点：真正存储数据的；</li><li>config Services 和 shard 的内部都是replace set[复制集: 是MongoDB中的一种数据复制机制，它由一组MongoDB服务器组成，其中包括一个主服务器和多个从服务器]，也就提高了高可用性</li></ul></li></ul></li></ul><h2 id="副本集"><a href="#副本集" class="headerlink" title="副本集"></a>副本集</h2><p><img src="/blog/images/mongo/%E5%89%AF%E6%9C%AC%E9%9B%86.png" alt="副本集两种方式"></p><ul><li><p>方式1：</p><ul><li>这是一个集群</li><li>client Application Driver 请求app应用，通过配置连到集群里</li><li>通过读写分离 or 读写不分离的方式读写数据</li><li>如果不设置读写分离的话，默认会把读写请求到打到Primary节点上；如果读写分离，写在Primary节点，读在secondary节点</li><li>primary节点会异步的把数据都复制到secondary节点上；</li></ul></li><li><p>方式2</p><ul><li>Arbiter只有投票的功能，并不参与数据存储；但是这样的话数据存储就变成了主备从库，不是特别好的数据设计，通常采用第一种：三数据副本的模式</li></ul></li><li><p>读写分离</p><ul><li>可以考虑读写分离，通过在客户端配置，读从secondary节点，写通过primary节点，这样也可以进行一个压力分摊；这完全是由客户端自己定义的；生成连接串后，会返回给客户端整个集群的所有节点，客户端连接第一个节点，后执行isMaster命令，会告知是否主节点等操作</li><li>全备份和增量备份，是mongo的两种备份方式。<ul><li>全备份在晚上低峰期会起一个进程操作，增量备份每隔一小时起一个进程操作。</li><li>那个DR设计里有一个secondary的优先级最低，&#x3D;0，他永远不会被选做主库，另外设置他为hidden状态，他做的就是全量备份，也就是所有的请求都不会落到这个节点上，然后用它做备份和维护</li></ul></li></ul></li><li><p>故障转移：副本集切换<br><img src="/blog/images/mongo/failover.png" alt="故障转移"></p><ul><li>一旦主节点挂掉，mongodb的集群内部发现失联了，就会去判活，其他节点会基于raft协议发起投票，挑选出一个新的主节点，整个切换过程不需要基于第三方工具，是集群内部实现的，所以一旦发生大范围故障，整个机房的宕机，mongo会在10-20s就可以切换完毕</li><li>如果三个节点，挂了两个节点，剩下的一个节点是没办法选择主节点的，因为<code>不满足大多数原则</code>，这样这个剩下的secondary节点会永远保持secondary状态，永远是不可写的，只有只读状态，也就是整个集群永远只有primary节点可以写，secondary永远不能写</li></ul></li></ul><h2 id="DR设计-灾难恢复设计"><a href="#DR设计-灾难恢复设计" class="headerlink" title="DR设计[灾难恢复设计]"></a>DR设计[灾难恢复设计]</h2><p><img src="/blog/images/mongo/DR.png" alt="灾备"></p><ul><li>DR设计是指灾难恢复设计，是一种在系统或应用程序中预先计划恢复数据、硬件、软件和网络的过程，以保证在发生灾难性事件后，可以快速恢复业务运营。这种设计包括备份和复原策略、风险评估、容错能力、恢复时间目标以及测试和维护计划等。DR设计通常可以保证业务连续性和稳定性，同时也是信息安全和风险管理的重要措施之一。</li><li>因为mongo是基于raft协议投票的，所以最好选择三个机房，如果单机房挂掉，其他两个机房也可以实现投票选主<ul><li>选三个机房，一个作为Arbiter角色参与投票，另外两个机房是存数据，如果一个机房挂掉，还剩下三个节点可以做投票选主操作</li><li>priority可以设置优先级，选主会优选选择优先级高的节点</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>mongoDB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mongoDB</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>存储过程和触发器</title>
    <link href="/blog/2022/04/02/mysql/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E8%A7%A6%E5%8F%91%E5%99%A8/"/>
    <url>/blog/2022/04/02/mysql/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E8%A7%A6%E5%8F%91%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h1><p>存储过程：是一个可编程的函数，它在数据库中创建并保存，由 SQL 语句和一些特殊的控制结构组成。将常用或复杂的工作预先用 SQL 语句写好并用一个指定名称存储起来，这个过程经编译和优化后存储在数据库服务器中，因此称为存储过程。</p><h3 id="MySQL创建存储过程（CREATE-PROCEDURE）"><a href="#MySQL创建存储过程（CREATE-PROCEDURE）" class="headerlink" title="MySQL创建存储过程（CREATE PROCEDURE）"></a>MySQL创建存储过程（CREATE PROCEDURE）</h3><p>CREATE PROCEDURE &lt;过程名&gt; ( [过程参数[,…] ] ) &lt;过程体&gt;</p><p>[过程参数[,…] ] 格式[ IN | OUT | INOUT ] &lt;参数名&gt; &lt;类型&gt;</p><ol><li><p>过程名：若需要在特定数据库中创建存储过程，则要在名称前面加上数据库的名称，即 db_name.sp_name。</p></li><li><p>过程参数：可以有 1 个或多个参数，当有多个参数时，参数列表中彼此间用逗号分隔。可以没有参数，此时存储过程的名称后仍需加上一对括号。</p></li></ol><ul><li>输入参数、输出参数和输入&#x2F;输出参数，分别用 IN、OUT 和 INOUT 三个关键字标识。输</li><li>入参数可以传递给一个存储过程，输出参数用于存储过程需要返回一个操作结果的情形，而输入&#x2F;输出参数既可以充当输入参数也可以充当输出参数。</li></ul><ol start="3"><li>过程体：存储过程的主体部分，包含在过程调用的时候必须执行的 SQL 语句。这个部分以关键字 BEGIN 开始，以关键字END 结束</li></ol><h3 id="MySQL查看存储过程"><a href="#MySQL查看存储过程" class="headerlink" title="MySQL查看存储过程"></a>MySQL查看存储过程</h3><blockquote><p>SHOW CREATE PROCEDURE 存储过程名</p></blockquote><h3 id="MySQL删除存储过程（DROP-PROCEDURE）"><a href="#MySQL删除存储过程（DROP-PROCEDURE）" class="headerlink" title="MySQL删除存储过程（DROP PROCEDURE）"></a>MySQL删除存储过程（DROP PROCEDURE）</h3><p>DROP PROCEDURE [ IF EXISTS ] &lt;过程名&gt;</p><ul><li>过程名：指定要删除的存储过程的名称。</li><li>IF EXISTS：指定这个关键字，用于防止因删除不存在的存储过程而引发的错误</li></ul><h3 id="MySQL调用存储过程"><a href="#MySQL调用存储过程" class="headerlink" title="MySQL调用存储过程"></a>MySQL调用存储过程</h3><p>CALL sp_name ( [parameter […] ] ) ;<br>其中，sp_name 表示存储过程的名称，parameter 表示存储过程的参数。</p><h3 id="MySQL存储函数"><a href="#MySQL存储函数" class="headerlink" title="MySQL存储函数"></a>MySQL存储函数</h3><ul><li><p>存储函数和存储过程一样，都是在数据库中定义一些 SQL 语句的集合。存储函数可以通过 return 语句返回函数值，主要用于计算并返回一个值。而存储过程没有直接返回值，主要用于执行操作。</p></li><li><p>REATE FUNCTION sp_name ([func_parameter[…]])</p></li><li><p>RETURNS type [characteristic …] routine_body</p></li><li><p>sp_name 参数：表示存储函数的名称；</p></li><li><p>func_parameter：表示存储函数的参数列表；</p></li><li><p>RETURNS type：指定返回值的类型；</p></li><li><p>characteristic 参数：指定存储函数的特性，该参数的取值与存储过程是一样的；</p></li><li><p>routine_body 参数：表示 SQL 代码的内容，可以用 BEGIN…END 来标示 SQL 代码的开始和结束。</p></li><li><p>func_parameter 可以由多个参数组成，其中每个参数由参数名称和参数类型组成</p></li><li><p>SELECT func_student(3); #调用存储函数</p></li></ul><h1 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h1><p>触发器和存储过程一样，都是嵌入到 MySQL 中的一段程序 。不同的是执行存储过程要使用 CALL 语句来调用，而触发器的执行是通过对数据表的相关操作来触发执行。比如当对 student 表进行操作（INSERT，DELETE 或 UPDATE）时就会激活它执行。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>触发器的执行是自动的，当对触发器相关表的数据做出相应的修改后立即执行。 </li><li>触发器可以实施比 FOREIGN KEY 约束、CHECK 约束更为复杂的检查和操作。 </li><li>触发器可以实现表数据的级联更改，在一定程度上保证了数据的完整性。</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>使用触发器实现的业务逻辑在出现问题时很难进行定位，特别是涉及到多个触发器的情况下，会使后期维护变得困难</li><li>大量使用触发器容易导致代码结构被打乱，增加了程序的复杂性，</li><li>如果需要变动的数据量较大时，触发器的执行效率会非常低</li></ul>]]></content>
    
    
    <categories>
      
      <category>mysql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql存储引擎</title>
    <link href="/blog/2018/11/16/mysql/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/"/>
    <url>/blog/2018/11/16/mysql/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</url>
    
    <content type="html"><![CDATA[<ul><li>是数据库管理系统（DBMS）的核心软件组件， 决定了表在计算机中的</li><li>MySQL 提供了多个不同的存储引擎，包括处理事务安全表的引擎和处理非事务安全表的引擎。 不需要在整个服务器中使用同一种存储引擎，针对具体的要求，可以对每一个表使用不同的存储引擎。</li><li>MySQL 5.5 后，默认存储引擎由 MyISAM 修改为 InnoDB。</li><li>MySQL 5.7 支持的存储引擎有 InnoDB、MyISAM、Memory、Merge、Archive、CSV、BLACKHOLE 等。</li></ul><p><img src="/blog/images/mysql&linux/engine1.jpg"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">查看系统所支持的引擎类型<br><span class="hljs-keyword">SHOW</span> ENGINES;<br><span class="hljs-keyword">SHOW</span> VARIABLES <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;default_storage_engine%&#x27;</span>;  // 查看默认存储引擎<br><br>临时修改默认存储引擎<br><span class="hljs-keyword">SET</span> default_storage_engine=&lt; 存储引擎名 &gt;<br>再次重启客户端时失效，默认存储引擎仍然是 InnoDB。<br><br>永久修改默认的存储引擎<br>在my.cnf 配置文件  [mysqld] 后面加入以下语句：<br><span class="hljs-keyword">default</span>-<span class="hljs-keyword">storage</span>-engine=存储引擎名称<br>然后保存就可以了。<br></code></pre></td></tr></table></figure><h2 id="行级锁和表级锁"><a href="#行级锁和表级锁" class="headerlink" title="行级锁和表级锁"></a>行级锁和表级锁</h2><blockquote><p>表级锁：&lt;表级锁就是可以锁住表，当同时进行某些操作，只能锁住表，比如我对这个表进行写操作，其他人不能进行操作，不能读写，比如我写操作，就把这张表锁住，我写完了，其他人才能来做操作&gt;<br>行级锁：&lt;可以锁到某条记录，比如不能同时对某一行做某些操作&gt;<br>行级锁更加精细，适用于比如抢票下单业务，下单时锁住某一张票，其他人就不能抢这张票，但是可以抢其他的票</p></blockquote><h2 id="MySQL-InnoDB存储引擎"><a href="#MySQL-InnoDB存储引擎" class="headerlink" title="MySQL InnoDB存储引擎"></a>MySQL InnoDB存储引擎</h2><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ol><li>支持事务 ：实现了 SQL92 标准所要求的数据隔离级别 。 </li><li>使用行级锁 ： 通过索引来完成行锁机制 </li><li>实现了缓冲处理 ：提供了专门的缓存池，实现了缓冲管理，不仅能缓冲索引也能缓冲数据，常用的数据可以直接从内存中处理，比从磁盘获取数据处理速度要快。相比之下，MyISAM 只是缓存了索引。 </li><li>支持外键约束: 检查外键、插入、更新和删除，以确保数据的完整性。</li></ol><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ol><li>使用 InnoDB 存储引擎的读写效率稍差，且占用的数据空间相对较大&lt;因为他日志多，比如回滚操作，肯定是将一些操作记录了下来，回滚的时候翻旧账&gt;，不过他安全，拿空间换安全</li></ol><h2 id="MySQL-MyISAM-存储引擎"><a href="#MySQL-MyISAM-存储引擎" class="headerlink" title="MySQL MyISAM 存储引擎"></a>MySQL MyISAM 存储引擎</h2><blockquote><p>MyISAM 是一直作为 MySQL 数据库的默认存储引擎，直到 MySQL 5.5 版本才被 InnoDB 引擎取代了默认存储引擎的地位。</p></blockquote><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ol><li>占用空间小 </li><li>访问速度快，对事务完整性没有要求，或以 SELECT、INSERT 为主的应用基本上都可以使用这个引擎来创建表。比如像数据交易系统，对于数据一致性有极高的要求，绝对不能出错，这种就不适合MyISAM存储引擎。而对于数据分析型的系统，一次插入多次查询的比如数据仓库，这种就适用于MyISAM </li><li>可以配合锁，实现操作系统下的复制备份 </li><li>支持全文检索（InnoDB 在 MySQL 5.6 版本以后也支持全文检索） </li><li>数据紧凑存储&lt;数据紧凑存储：数据之间碎片化少，所以在读取时 一下子扫描一大片，寻址的过程就很少&gt;，因此可获得更小的索引和更快的全表扫描性能。</li></ol><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><ol><li>不支持事务,不能保证数据的一致性 </li><li>不支持行级锁，使用表级锁，并发性差&lt;表锁了之后，别人没法操作，所以并发差&gt;</li><li>数据查询崩溃后无法安全恢复 </li><li>只缓存索引，数据的缓存是利用操作系统缓冲区来实现的</li></ol><h2 id="MySQL存储引擎如何选择"><a href="#MySQL存储引擎如何选择" class="headerlink" title="MySQL存储引擎如何选择"></a>MySQL存储引擎如何选择</h2><h4 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h4><ul><li>如果应用主要以读取和写入为主，只有少量的更新和删除操作，并且对事务的完整性、并发性要求不是很高，可以选择 MyISAM 存储引擎 。</li><li>对于数据分析型的系统，一次插入多次查询的比如数据仓库，这种就适用于MyISAM</li><li>MyISAM 是在 数据仓储 最常使用的存储引擎之一。</li></ul><h4 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h4><ul><li>如果应用对事务的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询以外，还包括很多的更新、删除操作，那么 InnoDB 存储引擎是比较合适的选择。</li></ul><h4 id="MEMORY"><a href="#MEMORY" class="headerlink" title="MEMORY"></a>MEMORY</h4><p>MEMORY 存储引擎将所有数据保存在 内存 中，所以该存储引擎的数据访问速度快，但是安全上没有保障</p><p><img src="/blog/images/mysql&linux/engine2.jpg"></p><h2 id="MySQL修改数据表的存储引擎"><a href="#MySQL修改数据表的存储引擎" class="headerlink" title="MySQL修改数据表的存储引擎"></a>MySQL修改数据表的存储引擎</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-operator">&lt;</span>表名<span class="hljs-operator">&gt;</span> ENGINE<span class="hljs-operator">=</span><span class="hljs-operator">&lt;</span>存储引擎名<span class="hljs-operator">&gt;</span>;<br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> student \G #查看 student 表当前的存储引擎<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> student ENGINE<span class="hljs-operator">=</span>MyISAM; <br>#将 student 表的存储引擎修改为 MyISAM 类型，在数据多的时候比较慢，影响读取性能，推荐一个比第一种速度快， 安全性高的跟新策略，如下：<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">START</span> <span class="hljs-keyword">TRANSACTION</span>; # 开始事务<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> my_tmp_table <span class="hljs-keyword">LIKE</span> my_table; # 创建表,先创建一个和要操作表一样的表<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> my_tmp_table ENGINE=InnoDB; # 然后更改存储引擎为目标引擎<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> my_tmp_table <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> my_table; # 插入。<br><span class="hljs-keyword">RENAME</span> <span class="hljs-keyword">TABLE</span> my_table <span class="hljs-keyword">to</span> my_table_MyISAM_20201230backup; # 原表命名为备份表<br><span class="hljs-keyword">RENAME</span> <span class="hljs-keyword">TABLE</span> my_tmp_table <span class="hljs-keyword">to</span> my_table ; # 临时表上位<br><span class="hljs-keyword">COMMIT</span>; # 提交事物<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>mysql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库设计方法论</title>
    <link href="/blog/2018/10/02/mysql/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/"/>
    <url>/blog/2018/10/02/mysql/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="数据库设计的基本步骤"><a href="#数据库设计的基本步骤" class="headerlink" title="数据库设计的基本步骤"></a>数据库设计的基本步骤</h1><blockquote><p>需求分析：是数据库设计的第一步，是最困难、最耗费时间的一步，也是整个设计过程的基础。<br>概要设计：是数据库设计的关键，通过综合、归纳与抽象用户需求，形成一个具体 DBMS 的概念模型，也就是绘制数据库的 E-R 图。<br>逻辑结构设计：将 E-R 图转换为多张表，进行逻辑设计，确认各表的主外键，并应用数据库设计的三大范式进行审核，对其优化。<br>物理设计阶段：确定 E-R 图后，根据项目的技术实现，团队开发能力及项目的成本预算，选择具体的数据库（如 MySQL 或 Oracle 等）进行物理实现。<br>数据库实施：运用 DBMS 提供的数据语言（例如 SQL）、工具及宿主语言（例如 Java），根据逻辑设计和物理设计的结果建立数据库，编制与调试应用程序，组织数据入库，并进行试运行。<br>数据库运行和维护：数据库应用系统经过试运行后即可投入正式运行。在运行过程中必须不断地对其进行评价、调整与修改。<br>总之设计一个完善的数据库应用系统是不可能一蹴而就的，它是上述 6 个阶段的不断反复</p></blockquote><h2 id="概要设计"><a href="#概要设计" class="headerlink" title="概要设计"></a>概要设计</h2><h3 id="E-R图介绍"><a href="#E-R图介绍" class="headerlink" title="E-R图介绍"></a>E-R图介绍</h3><blockquote><p>为什么要叫关系型数据库，是因为关系型数据库就是在研究实体与实体的关系，属性与属性的关系<br>E-R图是设计数据库的工具之一，用于建立数据库的概念模型。<br>实体、属性和关系是构成 E-R图的基本要素。</p></blockquote><h4 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h4><ul><li>指现实世界中客观存在并可以相互区分的对象或事物。</li><li>实体往往指某类事物的集合。可以是具体的人和事物，也可以是抽象的概念、联系。</li><li>实体一般是名词，对应表中的一行数据。例如，用户张三是一个实体，他对应于客人表中“张三”所在的一行数据，包括客人姓名、身份证号等信息。</li><li>严格的说，实体用来指表中的一行特定数据。但在开发时，我们也常常把表称为一个实体。</li></ul><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><ul><li>可以理解为实体的特征。</li></ul><h4 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h4><ul><li>两个或多个实体之间的关联关系。</li><li>关系可分为以下 4 种类型，例如对于实体 X 和 Y 之间的关系就必须为以下任意一种：<ul><li>一对一:X 中的一个实体最多与 Y 中的一个实体关联，并且 Y 中的一个实体最多与 X 中的一个实体关联。 </li><li>一对多:X 中的一个实体可以与 Y 中任意数量的实体关联，Y 中的一个实体最多与 X 中的一个实体关联。 </li><li>多对一:X 中的一个实体最多与 Y 中的一个实体关联，Y 中的一个实体可以与 X 中的任意数量的实体关联。 </li><li>多对多:X 中的一个实体可以与 Y 中的任意数量的实体关联，反之亦然。</li></ul></li></ul><h3 id="绘制ER图"><a href="#绘制ER图" class="headerlink" title="绘制ER图"></a>绘制ER图</h3><p>E-R 图以图形的方式来表示数据库的整个逻辑结构，如下：<br>实体：用矩形表示<br>属性：用椭圆形表示<br>关系：用菱形表示<br>使用直线连接属性和实体，以及连接实体和关系</p><p><img src="/blog/images/mysql&linux/WEBRESOURCEc8ed773eefcbc91783928825fb5c0df0%E6%88%AA%E5%9B%BE.png"></p><h2 id="逻辑结构设计"><a href="#逻辑结构设计" class="headerlink" title="逻辑结构设计"></a>逻辑结构设计</h2><h3 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h3><blockquote><p>数据库范式(Normal form，简称NF) ：理解就是按照面向对象的思想 拆分到不能拆分为止符合某一种级别的关系模式的集合，表示一个关系内部各属性之间的联系的合理化程度 。 数据库模型设计的一系列规范 ，分成6个等级，一级比一级要求得严格。满足这些规范的数据库是简洁的、结构明晰的，同时，不会发生插入(insert)、删除(delete)和更新(update)操作异常。避免不需要的数据冗余<br>逻辑主键：哪个字段 或者哪几个字段 加在一起，这条数据不会重复，就是逻辑主键</p></blockquote><h4 id="1NF"><a href="#1NF" class="headerlink" title="1NF"></a>1NF</h4><p>强调列的原子性，拆到不能再拆</p><p><img src="/blog/images/mysql&linux/WEBRESOURCEa9a08b63b4500123dbdb098c36340347%E6%88%AA%E5%9B%BE.png"></p><p><img src="/blog/images/mysql&linux/WEBRESOURCE548f2769b62bbbdb03a0d46ba5004a20%E6%88%AA%E5%9B%BE.png"></p><h4 id="2NF"><a href="#2NF" class="headerlink" title="2NF"></a>2NF</h4><p>在满足1NF的基础上，非主属性必须完全依赖于主属性，部分依赖&lt;比如学号和科目为主属性。姓名依赖于学号，但是不依赖于科目。即非主属性只依赖于主属性的一部分&gt;则不符合2NF</p><p><img src="/blog/images/mysql&linux/1725093391910.jpg"></p><h4 id="3NF"><a href="#3NF" class="headerlink" title="3NF"></a>3NF</h4><p>消除非主属性传递依赖主属性</p><p><img src="/blog/images/mysql&linux/1725093505827.jpg"></p><p>巴斯-科德范式（Boyce-Codd Normal Form ，BCNF）在3NF基础上，任何非主属性不能对主键子集依赖（在3NF基础上消除对主码子集的依赖）</p><h3 id="反范式"><a href="#反范式" class="headerlink" title="反范式"></a>反范式</h3><p>• 范式越高意味着表的划分更细，一个数据库中需要的表也就越多，用户不得不将原本相关联的数据分摊到多个表中。同时把多个表联接在一起的花费是巨大的， 这严重地降低了系统运行性能。<br>• 反范式化的数据库因为所有的数据都在一张表中，可以很好地避免关联。<br>• 平时工作中，我们通常是将范式和反范式混合使用，相互结合。</p><h3 id="数据库范式化和反范式化："><a href="#数据库范式化和反范式化：" class="headerlink" title="数据库范式化和反范式化："></a>数据库范式化和反范式化：</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>可以减少表的关联</li><li>可以更好的进行索引优化</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>数据表存在数据冗余及数据维护异常，空间换时间</li><li>对数据的修改需要更多的成本</li></ul>]]></content>
    
    
    <categories>
      
      <category>mysql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>锁和事务</title>
    <link href="/blog/2018/09/18/mysql/%E9%94%81%E5%92%8C%E4%BA%8B%E7%89%A9/"/>
    <url>/blog/2018/09/18/mysql/%E9%94%81%E5%92%8C%E4%BA%8B%E7%89%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL锁机制"><a href="#MySQL锁机制" class="headerlink" title="MySQL锁机制"></a>MySQL锁机制</h1><ul><li>锁机制: 是为了保证数据库并发访问时的一致性和有效性的一系列规则。锁机制的优劣直接影响到数据库的并发处理能力和系统性能，所以锁机制也就成为了各种数据库的核心技术之一。</li></ul><h2 id="按锁级别分类"><a href="#按锁级别分类" class="headerlink" title="按锁级别分类"></a>按锁级别分类</h2><ul><li>可分为共享锁、排他锁和意向锁 <ul><li>共享锁(S,是Share的缩写，也称读锁): 锁粒度是行或者元组（多个行）。一个事务获取了共享锁之后，可以对锁定范围内的数据执行读操作。会阻止其它事务获得相同数据集的排他锁X。上了读锁的数据，其他事务只能读取，不能被修改和删除。</li><li>排他锁(X,是eXclusive的缩写，也称写锁): 锁粒度是行或者元组。一个事务获取了排他锁之后，可以对锁定范围内的数据执行写操作。阻止其它事务取得相同数据集的共享锁S和排他锁X。上了写锁的数据只能被当前事务修改和删除，其他事务不能读也不能写。</li><li>意向锁：锁定的粒度是整张表，分为意向共享锁（IS）和意向排他锁（IX）两类。“意向”表示事务想执行但还没有真正执行</li></ul></li></ul><h2 id="MySQL-锁机制的相容和互斥"><a href="#MySQL-锁机制的相容和互斥" class="headerlink" title="MySQL 锁机制的相容和互斥"></a>MySQL 锁机制的相容和互斥</h2><ul><li>锁和锁之间的关系，要么是相容的，要么是互斥的。</li><li>锁a和锁b相容是指：操作同样一组数据时，如果事务t1获取了锁a，另一个事务t2还可以获取锁b；</li><li>锁a和锁b互斥是指：操作同样一组数据时，如果事务t1获取了锁 a，另一个事务t2在t1释放锁 a 之前无法释放锁b。</li><li>锁模式的兼容情况 其中Y表示相容，N表示互斥。</li></ul><p><img src="/blog/images/mysql&linux/WEBRESOURCE61e8039a40a805c0085374c5dd75149c%E6%88%AA%E5%9B%BE.png"></p><ul><li>为了尽可能提高数据库的并发量; 需每次锁定的数据范围越小越好，越小的锁其耗费的系统资源越多，系统性能下降。为在高并发响应和系统性能两方面进行平衡，这样就产生了“锁粒度”的概念</li></ul><h2 id="按锁的粒度分类"><a href="#按锁的粒度分类" class="headerlink" title="按锁的粒度分类"></a>按锁的粒度分类</h2><ul><li>可以细分为行级锁、页级锁和表级锁</li></ul><h3 id="表级锁（table-lock）"><a href="#表级锁（table-lock）" class="headerlink" title="表级锁（table lock）"></a>表级锁（table lock）</h3><ul><li>会锁定整张表，可以很好的避免死锁，是 MySQL 中最大颗粒度的锁定机制。</li><li>一个用户在对表进行写操作（插入、删除、更新等）时，需要先获得写锁，这会阻塞其它用户对该表的所有读写操作。没有写锁时，其它读取的用户才能获得读锁，读锁之间是不相互阻塞的 </li><li>表级锁最大的特点就是实现逻辑非常简单，带来的系统负面影响最小。所以获取锁和释放锁的速度很快。• 出现锁定资源争用的概率会很高，致使并发度大打折扣。 </li><li>使用表级锁的主要是 MyISAM，MEMORY，CSV 等一些非事务性存储引擎。</li><li>尽管存储引擎可以管理自己的锁，MySQL 本身还是会使用各种有效的表级锁来实现不同的目的。例如，服务器会为诸如 ALTER TABLE 之类的语句使用表级锁，而忽略存储引擎的锁机制</li></ul><h3 id="页级锁（page-lock）"><a href="#页级锁（page-lock）" class="headerlink" title="页级锁（page lock）"></a>页级锁（page lock）</h3><ul><li>页级锁是 MySQL 中比较独特的一种锁定级别，在其他数据库管理软件中并不常见。</li><li>页级锁的颗粒度介于行级锁与表级锁之间，资源开销，并发处理能力也是介于上面二者之间。</li><li>页级锁和行级锁一样，会发生死锁。</li><li>页级锁主要应用于 BDB 存储引擎。</li></ul><h3 id="行级锁（row-lock）"><a href="#行级锁（row-lock）" class="headerlink" title="行级锁（row lock）"></a>行级锁（row lock）</h3><ul><li>行级锁的锁定颗粒度是最小的，只针对操作的当前行进行加锁，所以行级锁发生锁定资源争用的概率也最小。</li><li>最大程度地支持并发处理。</li><li>每次获取锁和释放锁，系统消耗较大</li><li>容易发生死锁。</li><li>行级锁主要应用于 InnoDB 存储引擎</li></ul><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><ul><li><p><strong>数据库的事务（Transaction）</strong> 是一种机制、一个操作序列，包含了一组数据库操作命令。事务把所有的命令作为一个整体一起向系统提交或撤销操作请求，即这一组数据库命令要么都执行，要么都不执行 。保障数据有效性</p></li><li><p>事务具有 4 个特性：简称为 ACID</p><ul><li><strong>• 原子性（Atomicity）</strong>: 所有元素必须作为一个整体提交或回滚。如果事务中的任何元素失败，则整个事务将失败。</li><li><strong>• 一致性（Consistency）</strong>: 是事务机制的目的，保障数据与现实业务的一致。一致性：就是保证不出现错误的数据，保持数据与我们想要的结果一致，不会因为底层操作而被篡改等等</li><li><strong>• 隔离性（Isolation）</strong>: 所有并发事务是彼此隔离的，独立的。不以任何方式依赖于或影响其他事务。</li><li><strong>• 持久性（Durability）</strong>: 事务被提交，事务对数据所做的任何变动都会被永久地保留在数据库中</li></ul></li><li><p>InnoDB 存储引擎事务主要通过 UNDO 日志和 REDO 日志实现，MyISAM 存储引擎不支持事务。</p><ul><li>UNDO 日志 ：复制事务执行前的数据，用于在事务发生异常时回滚数据。 </li><li>REDO 日志 ：记录在事务执行中，每条对数据进行更新的操作，当事务提交时，该内容将被刷新到磁盘。 </li><li>默认设置下，每条SQL 语句就是一个事务，即执行SQL语句后自动提交。 </li><li>为了达到将几个操作做为一个整体的目的，需要使用<blockquote><p><strong>BEGIN 或 START TRANSACTION</strong> #开启一个事务，或者禁止当前会话的自动提交。<br>**COMMIT; **表示提交事务， 将事务中所有对数据库的更新都写到磁盘上的物理数据库中，事务正常结束。<br>**ROLLBACK; **:表示撤销事务， 事务不能继续执行，系统将事务中对数据库的所有已完成的操作全部撤销，回滚到事务开始时的状态</p></blockquote></li></ul></li></ul><h1 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h1><h3 id="演示设置，方便复现"><a href="#演示设置，方便复现" class="headerlink" title="演示设置，方便复现"></a>演示设置，方便复现</h3><blockquote><p>为了演示锁等待效果，让锁等待长一些，不然很快就 终止等待了.等待语句并未执行。事务也不回滚。<br>SHOW VARIABLES LIKE ‘%innodb_lock_wait%’; # 查看 锁等待超时时间<br>set innodb_lock_wait_timeout&#x3D;300 ;        # 设置锁等待超时秒数 。如果并未杀掉持有锁的线程：则第二个update语句提示等待锁超时</p><p>SHOW VARIABLES LIKE ‘%innodb_deadlock%’;<br>set global innodb_deadlock_detect &#x3D;off ;         # 为了演示死锁 ，把死锁检测 关闭。</p></blockquote><h3 id="事物及行级锁演示"><a href="#事物及行级锁演示" class="headerlink" title="事物及行级锁演示"></a>事物及行级锁演示</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># 创建一个Innodb 的表<br># 课上演示翻车 ，就是因为上次课修改了 会话参数 默认存储引擎 为 MyISAM ，未修改回来，导致建表 默认成了MyISAM，不支持事务 。<br><span class="hljs-keyword">SHOW</span> VARIABLES <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;default_storage_engine%&#x27;</span>;<br>#临时修改默认存储引擎<br># <span class="hljs-keyword">SET</span> default_storage_engine=&lt; 存储引擎名 &gt;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> account(<br>    id <span class="hljs-type">int</span> <span class="hljs-keyword">primary key</span> ,<br>    <span class="hljs-type">name</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) ,<br>    balance <span class="hljs-type">decimal</span>(<span class="hljs-number">18</span>,<span class="hljs-number">2</span>)<br>   )ENGINE=innodb ;   # 保险起见 ，加上存储引擎限制 。<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> account <span class="hljs-keyword">values</span> (<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;刘备&#x27;</span>,<span class="hljs-number">1000</span>) , (<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;张飞&#x27;</span>,<span class="hljs-number">1</span>) ;<br><br><br># <span class="hljs-comment">-------A会话： 运用 事务进行转账操作</span><br><span class="hljs-keyword">BEGIN</span>;          # 开始A事务 和 <span class="hljs-keyword">START</span>  <span class="hljs-keyword">TRANSACTION</span>等效 ， 转账事务 <br>   #   第<span class="hljs-number">1</span>步 ，从转出账户转出金额 ，即更新 转出账户金额 自减 <span class="hljs-number">500</span>元 ；<br>   #获取行级写锁<span class="hljs-number">1</span> ，在提交事务之前，其他的事务不能修改此条数据 。不信？ 你可以在B事务 更新试试，看看什么效果<br>  <span class="hljs-keyword">UPDATE</span> account<br>  <span class="hljs-keyword">SET</span> balance = balance<span class="hljs-number">-500</span><br>  <span class="hljs-keyword">WHERE</span>  id=<span class="hljs-number">1</span>  #  <span class="hljs-string">&#x27;刘备&#x27;</span><br>  ;<br>  #   第<span class="hljs-number">2</span>步 ，转入账户接收金额 ，即更新 转入账户金额 自加 <span class="hljs-number">500</span>元 ；<br>   #获取行级写锁<span class="hljs-number">2</span> ，在提交事务之前，其他的事务不能修改此条数据<br>  <span class="hljs-keyword">UPDATE</span> account<br>  <span class="hljs-keyword">SET</span> balance = balance+<span class="hljs-number">500</span><br>  <span class="hljs-keyword">WHERE</span>  id=<span class="hljs-number">2</span>   #  <span class="hljs-string">&#x27;张飞&#x27;</span> ， 获取行级写锁  <span class="hljs-number">2</span><br>  ;<br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> test_db.account;   # 查看事务内部过程 数据<br><br># <span class="hljs-comment">-------B会话：  在A事务提交之前， 查看账户信息</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> test_db.account;  # 对比 A事务内部结果 ，发现结果不一致，说明事务的 “隔离性”。<br># <span class="hljs-comment">-------继续在 B会话操作：</span><br><span class="hljs-keyword">BEGIN</span>;  # 开始B事务 , 不知道A事务在转账 ，二不拉几的也 在执行转账，我们看他是怎么搞乱世界的。<br>      #   第<span class="hljs-number">1</span>步 ，他竟然先 让接收账户接收 转账金额， 增加了<span class="hljs-number">500</span> ；<br> <span class="hljs-keyword">UPDATE</span> account <span class="hljs-keyword">SET</span> balance = balance+<span class="hljs-number">500</span><br>           <span class="hljs-keyword">WHERE</span>  id=<span class="hljs-number">2</span>  # <span class="hljs-type">Name</span>=<span class="hljs-string">&#x27;张飞&#x27;</span>;   # 如果A未提交，你会发现 此条语句卡住了<br># 切换到A 会话 执行提交动作 。 注意观察 ，B事务 同时执行成功，返回执行结果<br> <span class="hljs-keyword">commit</span>；<br>  <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> test_db.account; # 看看更新效果<br><span class="hljs-keyword">ROLLBACK</span>;    #  可以试验一下回滚操作 好不好使 ，说明事务 的  “原子性”<br> <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> test_db.account;  # 验证一下是否回滚<br></code></pre></td></tr></table></figure><h6 id="死锁演示"><a href="#死锁演示" class="headerlink" title="死锁演示"></a>死锁演示</h6><blockquote><p>我要的东西在你手里，你要的东西在我手里</p></blockquote><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-meta">##### 死锁 演示 ：新建两个 会话 ，A 和B</span><br><span class="hljs-meta"># 1、在A会话 ： 锁住 id=1 的记录</span><br> UPDATE account<br>  SET balance = <span class="hljs-built_in">balance</span><span class="hljs-number">-500</span><br>  <span class="hljs-built_in">WHERE</span>  id=<span class="hljs-number">1</span>  <span class="hljs-meta">#  &#x27;刘备&#x27;</span><br>  ;<br><span class="hljs-meta"># 2、在B会话： 锁住 id=2 的记录</span><br> UPDATE account<br>  SET balance = <span class="hljs-built_in">balance</span>+<span class="hljs-number">500</span><br>  <span class="hljs-built_in">WHERE</span>  id=<span class="hljs-number">2</span>  <span class="hljs-meta">#  &#x27;张飞&#x27;</span><br>  ;<br><span class="hljs-meta">#3、在A会话 ：执行id=2的修改，即索要id=2的写锁 ，但是 此数据已被B 抢先锁住，A进入等待</span><br>UPDATE account<br>  SET balance = <span class="hljs-built_in">balance</span>+<span class="hljs-number">500</span><br>  <span class="hljs-built_in">WHERE</span>  id=<span class="hljs-number">2</span>  <span class="hljs-meta">#  &#x27;张飞&#x27;</span><br>  ;<br><span class="hljs-meta">#4、在B会话：执行 id=1 的修改，即索要id=1的写锁，但是 此数据已被 A抢先锁住，A、B进入死锁</span><br><span class="hljs-meta">#此时 如 innodb_deadlock_detect =on ，则此语句终止，避免死锁。否则一直等待</span><br> UPDATE account<br>  SET balance = <span class="hljs-built_in">balance</span><span class="hljs-number">-500</span><br>  <span class="hljs-built_in">WHERE</span>  id=<span class="hljs-number">1</span>  <span class="hljs-meta">#  &#x27;刘备飞&#x27;</span><br>  ;<br><span class="hljs-meta"># 如果从业务流程上规范： 一律先执行扣减，再执行加钱，即可避免死锁 。</span><br><span class="hljs-meta"># 就是说，会话B 也先执行id=1的变更 ，他就会跟着 A 后面顺利执行，顶多等待一会儿，而不会死锁。</span><br><br>set autocommit = <span class="hljs-number">0</span>; <span class="hljs-meta"># 取消自动提交,只有当执行 commit才提交 。</span><br><br><span class="hljs-built_in">SELECT</span> * FROM INFORMATION_SCHEMA.INNODB_TRX ;        <span class="hljs-meta">#查询 正在执行的事务：</span><br><span class="hljs-built_in">SELECT</span> * FROM INFORMATION_SCHEMA.INNODB_LOCKS ;      <span class="hljs-meta">#查询 正在锁的事务 ,Mysql 8.0版本 以前</span><br> <span class="hljs-built_in">SELECT</span> * FROM performance_schema.data_locks\G ；     <span class="hljs-meta">#查询 正在锁的事务 ,Mysql 8.0版本 以后</span><br><span class="hljs-built_in">SELECT</span> * FROM INFORMATION_SCHEMA.INNODB_LOCK_WAITS ; <span class="hljs-meta">#查询 等待锁的事务,Mysql 8.0版本 以前</span><br><span class="hljs-built_in">SELECT</span> * FROM performance_schema.data_lock_waits\G ; <span class="hljs-meta">#查询 等待锁的事务,Mysql 8.0版本 以后</span><br><span class="hljs-built_in">select</span> * from INFORMATION_SCHEMA.`PROCESSLIST` ;   <span class="hljs-meta">#查询mysql数据库中存在的进程</span><br><span class="hljs-keyword">show</span> processlist;<br><span class="hljs-keyword">show</span> full processlist; <span class="hljs-meta">#查询进程列表— #返回的结果是实时变化的，是对mysql链接执行的现场快照，所以用来处理突发事件非常有用。</span><br> <span class="hljs-meta">#它可以查看当前mysql的一些运行情况，是否有压力，都在执行什么sql，语句耗时时间，有没有慢sql在执行等等。</span><br><span class="hljs-meta">#当发现一些执行时间很长的sql时，就需要多注意一下了，必要时kill掉，先解决问题。</span><br><br>kill 线程id <span class="hljs-meta">#杀掉线程</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>mysql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql视图</title>
    <link href="/blog/2018/06/18/mysql/%E8%A7%86%E5%9B%BE/"/>
    <url>/blog/2018/06/18/mysql/%E8%A7%86%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<h2 id="视图介绍"><a href="#视图介绍" class="headerlink" title="视图介绍"></a>视图介绍</h2><p>视图（View）是一种虚拟存在的表，并不实际存在于数据库中，相当于一个子查询。</p><blockquote><ol><li>定制用户数据在实际的应用过程中，不同的用户可能对不同的数据有不同的要求，聚焦特定的数据。</li><li>简化数据操作在使用查询时，很多时候要使用聚合函数，同时还要显示其他字段的信息，可能还需要关联到其他表，语句可能会很长，如果这个动作频繁发生的话，可以创建视图来简化操作。</li><li>提高数据的安全性视图是虚拟的，物理上是不存在的。可以只授予用户视图的权限，而不具体指定使用表的权限，来保护基础数据的安全。</li><li>共享所需数据通过使用视图，每个用户不必都定义和存储自己所需的数据，可以共享数据库中的数据，同样的数据只需要存储一次。</li><li>重用 SQL 语句视图提供的是对查询操作的封装，本身不包含数据，所呈现的数据是根据视图定义从基础表中检索出来的，如果基础表的数据新增或删除，视图呈现的也是更新后的数据。视图定义后，编写完所需的查询，可以方便地重用该视图</li></ol></blockquote><h2 id="MySQL视图管理"><a href="#MySQL视图管理" class="headerlink" title="MySQL视图管理"></a>MySQL视图管理</h2><h5 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h5><blockquote><p><strong>CREATE VIEW &lt;视图名&gt; AS &lt;SELECT语句&gt;</strong><br>•&lt;视图名&gt;：指定视图的名称。该名称在数据库中必须是唯一的，不能与其他表或视图同名。<br>•&lt;SELECT语句&gt;：指定创建视图的 SELECT 语句，可用于查询多个基础表或源视图。</p></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">MySQL创建视图（<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> view_student   <span class="hljs-keyword">AS</span> <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> student; //  相当于：<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> student) <span class="hljs-keyword">as</span> view_student;  就是个子查询<br>  <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> view_student;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> v_students_info (s_id,s_name,d_id,s_age,s_sex,s_height,s_date)<br>    <span class="hljs-keyword">AS</span> <span class="hljs-keyword">SELECT</span> id,<span class="hljs-type">name</span>,deptid,age,sex,height,login_date <span class="hljs-keyword">FROM</span> student;<br><br><span class="hljs-keyword">show</span> <span class="hljs-keyword">tables</span>; 查看视图是否创建成功<br>DESCRIBE v_students_info;  # 查看视图结构<br><span class="hljs-keyword">desc</span> v_students_info;<br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> v_students_info<br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> v_students_info \G;  // 可读性更强<br></code></pre></td></tr></table></figure><h5 id="修改视图"><a href="#修改视图" class="headerlink" title="修改视图"></a>修改视图</h5><blockquote><p><strong>ALTER VIEW &lt;视图名&gt; AS &lt;SELECT语句&gt;</strong><br>•&lt;视图名&gt;：指定视图的名称。该名称在数据库中必须是唯一的，不能与其他表或视图同名。<br>•&lt;SELECT语句&gt;：指定创建视图的 SELECT 语句，可用于查询多个基础表或源视图。</p></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">#修改视图（<span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">VIEW</span>） 就是保留<span class="hljs-keyword">view</span>的名称，把<span class="hljs-keyword">sql</span>调整下<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">VIEW</span> view_student<br>     <span class="hljs-keyword">AS</span> <span class="hljs-keyword">SELECT</span> id,<span class="hljs-type">name</span>,age <span class="hljs-keyword">FROM</span> student;<br> <span class="hljs-keyword">DESC</span> view_students_info;<br></code></pre></td></tr></table></figure><h5 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h5><blockquote><p><strong>DROP VIEW &lt;视图名1&gt; [ , &lt;视图名2&gt; …]</strong><br>其中：&lt;视图名&gt;指定要删除的视图名。DROP VIEW 语句可以一次删除多个视图</p></blockquote><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-meta"># 删除视图</span><br><span class="hljs-built_in">DROP</span> <span class="hljs-built_in">VIEW</span> <span class="hljs-keyword">IF</span> EXISTS v_students_info;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>mysql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql索引</title>
    <link href="/blog/2018/06/17/mysql/%E7%B4%A2%E5%BC%95/"/>
    <url>/blog/2018/06/17/mysql/%E7%B4%A2%E5%BC%95/</url>
    
    <content type="html"><![CDATA[<h1 id="mysql-索引介绍"><a href="#mysql-索引介绍" class="headerlink" title="mysql 索引介绍"></a>mysql 索引介绍</h1><p>索引是一种特殊的数据库结构，可以用来快速查询数据表中有某一特定值的记录。</p><ul><li><p><strong>可以把索引比作新华字典的音序表。</strong> 例如，要查“库”字，如果不使用音序，就需要从字典的 400 页中逐页来找。但是，如果提取拼音出来，构成音序表，就只需要从 10 多页的音序表中直接查找。这样就可以大大节省时间。</p></li><li><p><strong>1) 顺序访问</strong> 在表中实行全表扫描，从头到尾逐行遍历，直到在无序的行数据中找到符合条件的目标数据。顺序访问实现比较简单，效率非常低下。例如，在几千万条数据中查找少量的数据时，使用顺序访问方式将会遍历所有的数据，花费大量的时间，显然会影响数据库的处理性能</p></li><li><p><strong>2) 索引访问</strong>通过遍历索引来直接访问表中记录行的方式。使用这种方式的前提是对表建立一个索引，查找数据时可以直接根据该列上的索引找到对应记录行的位置，从而快捷地查找到数据。</p></li><li><p>索引存储了指定列数据值的指针，根据指定的排序顺序对这些指针排序。索引是很小的，而且通常读在内存中</p></li></ul><h2 id="MySQL-索引的优缺点"><a href="#MySQL-索引的优缺点" class="headerlink" title="MySQL 索引的优缺点"></a>MySQL 索引的优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li><p>通过创建唯一索引可以保证数据库表中每一行数据的<strong>唯一性。</strong></p></li><li><p>可以给所有的 MySQL 列类型设置索引。</p></li><li><p>可以<strong>大大加快数据的查询速度</strong>，这是使用索引最主要的原因。</p></li><li><p>在实现数据的参考完整性方面可以加速表与表之间的连接。</p></li><li><p>在使用分组和排序子句进行数据查询时也可以显著减少查询中分组和排序的时间</p></li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>创建和维护索引组要耗费时间，并且随着数据量的增加所耗费的时间也会增加。</li><li>索引需要占磁盘空间，除了数据表占数据空间以外，每一个索引还要占一定的物理空间。如果有大量的索引，索引文件可能比数据文件更快达到最大文件尺寸。</li><li><strong>当对表中的数据进行增加、删除和修改的时候，索引也要动态维护，这样就降低了数据的维护速度。插入海量数据时，最好的办法是先删除表中的索引，然后插入数据，插入完成后，再创建索引</strong></li></ul><h1 id="创建索引的原则"><a href="#创建索引的原则" class="headerlink" title="创建索引的原则"></a>创建索引的原则</h1><ol><li>从数据内容来说，<strong>这一列数据越分散越唯一 分布越均匀就越好，越集中取值越少越不好</strong>，比如性别就两个值就不划算</li><li>索引字段是被经常用的，比如被查询，被关联，用的越多，建了索引效果越好，<strong>经常不用的字段没必要建索引</strong></li></ol><h1 id="使用索引时的技巧和注意事项"><a href="#使用索引时的技巧和注意事项" class="headerlink" title="使用索引时的技巧和注意事项"></a>使用索引时的技巧和注意事项</h1><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">1.</span>索引不会包含有<span class="hljs-keyword">null</span>值的列<br>只要列中包含有<span class="hljs-keyword">null</span>值都将不会被包含在索引中，复合索引中只要有一列含有<span class="hljs-keyword">null</span>值，那么这一列对于此复合索引就是无效的。所以我们在数据库设计时不要让字段的默认值为<span class="hljs-keyword">null</span>。<br><span class="hljs-number">2.</span>使用短索引<br>对串列进行索引，如果可能应该指定一个前缀长度。例如，如果有一个<span class="hljs-type">char</span>(<span class="hljs-number">255</span>)的列，如果在前<span class="hljs-number">10</span>个或<span class="hljs-number">20</span>个字符内，多数值是惟一的，那么就不要对整个列进行索引。短索引不仅可以提高查询速度而且可以节省磁盘空间和I/O操作。<br><span class="hljs-number">3.</span>索引列排序<br>查询只使用一个索引，因此如果<span class="hljs-keyword">where</span>子句中已经使用了索引的话，那么<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span>中的列是不会使用索引的。因此数据库默认排序可以符合要求的情况下不要使用排序操作；尽量不要包含多个列的排序，如果需要最好给这些列创建复合索引。<br><span class="hljs-number">4.</span><span class="hljs-keyword">like</span>语句操作<br>一般情况下不推荐使用<span class="hljs-keyword">like</span>操作，如果非使用不可，如何使用也是一个问题。<span class="hljs-keyword">like</span>  “%aaa%” 不会使用索引而 <span class="hljs-keyword">like</span> “aaa%” 可以使用索引。<br><span class="hljs-number">5.</span>不要在列上进行运算<br>这将导致索引失效而进行全表扫描，例如<br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> <span class="hljs-built_in">table_name</span> <span class="hljs-keyword">WHERE</span> YEAR(<span class="hljs-built_in">column_name</span>)&lt;<span class="hljs-number">2017</span>;<br><span class="hljs-number">6.</span>不使用<span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span>和&lt;&gt;操作<br></code></pre></td></tr></table></figure><h1 id="MySQL索引类型"><a href="#MySQL索引类型" class="headerlink" title="MySQL索引类型"></a>MySQL索引类型</h1><h2 id="物理区分"><a href="#物理区分" class="headerlink" title="物理区分"></a>物理区分</h2><blockquote><p>整个计算机当中的性能瓶颈是 磁盘IO，就是进和出磁盘的速度，也就是IO的读取速度<br>cpu的计算能力，内存速度都不是瓶颈<br>所以找一种数据结构来存储。<br>经过理论和实践，<strong>B+Tree 平衡二叉树</strong> 用起来最优，所以MySQL使用<strong>B+Tree作为索引的结构</strong><br><strong>B+Tree最末端叫叶子节点，叶子节点又分为索引域和data域。</strong><br><strong>根节点和中间的叫非叶子节点</strong></p></blockquote><h4 id="MyISAM存储方式"><a href="#MyISAM存储方式" class="headerlink" title="MyISAM存储方式"></a>MyISAM存储方式</h4><ul><li>MyISAM存储引擎使用B+Tree作为索引结构，叶子节点的data域存放的是数据记录的地址</li><li>MyISAM的索引方式是“非聚集”&lt;索引和数据是分开存储的&gt;的，主索引（primary key）和辅助索引（Secondary key）在结构上没有任何区别，只是主索引key唯一，而辅助索引的key可以重复</li></ul><p><img src="/blog/images/mysql&linux/index1.jpg"></p><h4 id="InnoDB-存储引擎"><a href="#InnoDB-存储引擎" class="headerlink" title="InnoDB 存储引擎"></a>InnoDB 存储引擎</h4><ul><li><p>nnoDB中，表数据文件本身就是按B+Tree组织的一个索引结构，这棵树的叶节点data域保存了完整的数据记录。因为InnoDB的数据文件本身要按主键聚集，所以InnoDB要求表必须有主键（MyISAM可以没有）。这个索引叫做聚集索引&lt;索引和数据聚集在一块&gt;</p></li><li><p><strong>如果没有显式指定，则MySQL系统会自动选择一个可以唯一标识数据记录的列作为主键， 如果不存在这种列，则MySQL自动为InnoDB表生成一个隐含字段作为主键，这个字段长度为6个字节，类型为长整形</strong></p></li></ul><blockquote><p>树的深度越深性能越慢；所以在一个节点尽量存多的数据。<br><strong>如何多存：</strong><br>因为根节点的存储空间是一定的，比如16k，64k，所以节点的数占用空间越小，节点数越多，就深度越浅。<br>所以索引取值的字段  越短越好<br><strong>为什么需要主键自增？</strong><br>因为在B+Tree里，当结构定下来后，比如要在20和30之间插入一条25，25后面的数据要重新排序，性能就低；<br>自增的话 不需要在结构上插入，不需要重新排序，性能就高</p></blockquote><p><img src="/blog/images/mysql&linux/index2.jpg"></p><ul><li><p>InnoDB的辅助索引data域存储的是相应记录主键的值而不是地址。</p></li><li><p>辅助索引搜索需要检索两遍索引：首先检索辅助索引获得主键，然后用主键到主索引中检索获得记录</p></li></ul><p><img src="/blog/images/mysql&linux/index3.jpg"></p><h2 id="逻辑区分"><a href="#逻辑区分" class="headerlink" title="逻辑区分"></a>逻辑区分</h2><ul><li>普通索引 ：最基本的索引类型，它没有任何限制，唯一任务就是加快系统对数据的访问速度。 允许在定义索引的列中插入重复值和空值。创建普通索引关键字是 INDEX 或 KEY。</li><li>唯一索引 ：与普通索引类似， 不仅仅可以提高访问速度，还可以避免数据出现重复。唯一索引列或者组合列的值必须唯一，允许有空值。如果是组合索引，则列值的组合必须唯一。创建唯一索引使用 UNIQUE INDEX 关键字。</li><li>主键索引：专门为主键字段创建的索引， 是一种特殊的唯一索引，不允许值重复或者值为空。使用 PRIMARY KEY 关键字。不能使用 CREATE INDEX 语句创建主键索引。</li><li>组合索引：指多个字段上创建的索引，只有在查询条件中使用了创建索引时的第一个字段，索引才会被使用。使用组合索引时遵循最左前缀原则。</li><li>全文索引：主要用来查找文本中的关键字，只能在 CHAR、VARCHAR 或 TEXT 类型的列上创建。只有 MyISAM 存储引擎 支持。<ul><li>允许在索引列中插入重复值和空值。使用 FULLTEXT 关键字创建。不过对于大容量的数据表，生成全文索引非常消耗时间和硬盘空间。</li></ul></li><li>空间索引：是对空间数据类型的字段建立的索引，使用 SPATIAL 关键字进行扩展。<ul><li>创建空间索引的列必须将其声明为 NOT NULL，空间索引只能在存储引擎为 MyISAM 的表中创建。</li><li>空间索引主要用于地理空间数据类型 GEOMETRY。对于初学者来说，这类索引很少会用到。</li></ul></li></ul><h1 id="使用索引"><a href="#使用索引" class="headerlink" title="使用索引"></a>使用索引</h1><h3 id="MySQL创建索引（CREATE-INDEX）"><a href="#MySQL创建索引（CREATE-INDEX）" class="headerlink" title="MySQL创建索引（CREATE INDEX）"></a>MySQL创建索引（CREATE INDEX）</h3><blockquote><p>**CREATE INDEX &lt;索引名&gt; ON &lt;表名&gt; (&lt;列名&gt; [&lt;长度&gt;] [ ASC | DESC]) **<br>•&lt;索引名&gt;：指定索引名。一个表可以创建多个索引，但每个索引在该表中的名称是唯一的。<br>•&lt;表名&gt;：指定要创建索引的表名。<br>•&lt;列名&gt;：指定要创建索引的列名。通常可以考虑将查询语句中在 JOIN 子句和 WHERE 子句里经常出现的列作为索引列。<br>•&lt;长度&gt;：可选项。指定使用列的前的几个字符来创建索引，节省索引列所占的空间。•索引列的长度有一个最大上限 255 个字节（MyISAM 和 InnoDB 表的最大上限为 1000 个字节），如果索引列的长度超过了这个上限，就只能用列的前缀进行索引。<br>•BLOB 或 TEXT 类型的列也必须使用前缀索引。<br>•ASC | DESC：可选项。ASC指定索引按照升序来排列，DESC指定索引按照降序来排列，默认为ASC</p></blockquote><p><strong>CREATE TABLE 创建新表的同时创建该表的普通索引:</strong></p><p>KEY | INDEX [&lt;索引名&gt;] [&lt;索引类型&gt;] (&lt;列名&gt;,…)</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> tb_stu_info  (<br>     id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>     <span class="hljs-type">name</span> <span class="hljs-type">CHAR</span>(<span class="hljs-number">45</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>     dept_id <span class="hljs-type">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>     age <span class="hljs-type">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>     height <span class="hljs-type">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>     <span class="hljs-keyword">INDEX</span>(height)      // 如果没有写索引名，默认索引名是字段名<br>     );<br></code></pre></td></tr></table></figure><p><strong>CREATE TABLE 创建新表的同时创建该表的唯一性索引</strong></p><p>UNIQUE [ INDEX | KEY] [&lt;索引名&gt;] [&lt;索引类型&gt;] (&lt;列名&gt;,…)</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> tb_stu_info2  (<br>     id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>     <span class="hljs-type">name</span> <span class="hljs-type">CHAR</span>(<span class="hljs-number">45</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>     dept_id <span class="hljs-type">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>     age <span class="hljs-type">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>     height <span class="hljs-type">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>     <span class="hljs-keyword">UNIQUE</span> <span class="hljs-keyword">INDEX</span>(height)     // 如果没有写索引名，默认索引名是字段名<br>     );<br></code></pre></td></tr></table></figure><p><strong>ALTER TABLE 修改表时 添加唯一索引或者索引</strong></p><p>ADD UNIQUE|INDEX [&lt;索引名&gt;] [&lt;索引类型&gt;] (&lt;列名&gt;,…)</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">//在 tb_student 表中的 id 字段上建立名为 index_id 的索引。<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">INDEX</span> index_id <span class="hljs-keyword">ON</span> tb_student(id);<br><br>//在 tb_student 表中的 id 字段上建立名为 index_id 的索引，<span class="hljs-keyword">SQL</span> 语句如下：<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">UNIQUE</span> <span class="hljs-keyword">INDEX</span> index_id <span class="hljs-keyword">ON</span> tb_student(id);<br>#其中，id 字段可以有唯一性约束，也可以没有。<br><br>//在 tb_student 表中的 <span class="hljs-keyword">info</span> 字段上建立名为 index_info 的全文索引，<span class="hljs-keyword">SQL</span> 语句如下：<br><span class="hljs-keyword">CREATE</span> FULLTEXT <span class="hljs-keyword">INDEX</span> index_info <span class="hljs-keyword">ON</span> tb_student(<span class="hljs-keyword">info</span>);<br></code></pre></td></tr></table></figure><h3 id="MySQL删除索引（DROP-INDEX）"><a href="#MySQL删除索引（DROP-INDEX）" class="headerlink" title="MySQL删除索引（DROP INDEX）"></a>MySQL删除索引（DROP INDEX）</h3><blockquote><ol><li><p>DROP INDEX &lt;索引名&gt; ON &lt;表名&gt;<br>•&lt;索引名&gt;：要删除的索引名。<br>•&lt;表名&gt;：指定该索引所在的表名。</p></li><li><p>ALTER TABLE 语句的语法中部分指定为以下子句中的某一项。<br>•DROP PRIMARY KEY：表示删除表中的主键。一个表只有一个主键，主键也是一个索引。<br>•DROP INDEX index_name：表示删除名称为 index_name 的索引。<br>•DROP FOREIGN KEY fk_symbol：表示删除外</p></li></ol></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">INDEX</span> height <span class="hljs-keyword">ON</span> tb_stu_info;  // height是索引的名称，如果没有写索引名称，默认就是字段名称<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> tb_stu_info2 <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">INDEX</span> height;<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">#索引类型<br># #### <span class="hljs-number">1.</span>普通索引<br>#是最基本的索引，它没有任何限制。它有以下几种创建方式：<br><br>#（<span class="hljs-number">1</span>）直接创建索引<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">INDEX</span> index_name <span class="hljs-keyword">ON</span> <span class="hljs-keyword">table</span>(<span class="hljs-keyword">column</span>(length))<br> ##<span class="hljs-number">2</span>）修改表结构的方式添加索引<br><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-built_in">table_name</span> <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">INDEX</span> index_name <span class="hljs-keyword">ON</span> (<span class="hljs-keyword">column</span>(length))<br> ##<span class="hljs-number">3</span>）创建表的时候同时创建索引<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `<span class="hljs-keyword">table</span>` (<br>    `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT ,<br>    `title` <span class="hljs-type">char</span>(<span class="hljs-number">255</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> ,<br>    `content` <span class="hljs-type">text</span> <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">NULL</span> ,<br>    `<span class="hljs-type">time</span>` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> ,<br>    <span class="hljs-keyword">PRIMARY KEY</span> (`id`),<br>    <span class="hljs-keyword">INDEX</span> index_name (title(length))<br>)<br>#（<span class="hljs-number">4</span>）删除索引<br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">INDEX</span> index_name <span class="hljs-keyword">ON</span> <span class="hljs-keyword">table</span><br><span class="hljs-meta">#2.唯一索引</span><br>#与前面的普通索引类似，不同的就是：索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。它有以下几种创建方式：<br>#（<span class="hljs-number">1</span>）创建唯一索引<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">UNIQUE</span> <span class="hljs-keyword">INDEX</span> indexName <span class="hljs-keyword">ON</span> <span class="hljs-keyword">table</span>(<span class="hljs-keyword">column</span>(length))<br>#（<span class="hljs-number">2</span>）修改表结构<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-built_in">table_name</span> <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">UNIQUE</span> indexName <span class="hljs-keyword">ON</span> (<span class="hljs-keyword">column</span>(length))<br>#（<span class="hljs-number">3</span>）创建表的时候直接指定<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `<span class="hljs-keyword">table</span>` (<br>    `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT ,<br>    `title` <span class="hljs-type">char</span>(<span class="hljs-number">255</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> ,<br>    `content` <span class="hljs-type">text</span> <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">NULL</span> ,<br>    `<span class="hljs-type">time</span>` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> ,<br>    <span class="hljs-keyword">UNIQUE</span> indexName (title(length))<br>);<br><span class="hljs-meta">#3.主键索引</span><br>#是一种特殊的唯一索引，一个表只能有一个主键，不允许有空值。一般是在建表的时候同时创建主键索引：<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `<span class="hljs-keyword">table</span>` (<br>    `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT ,<br>    `title` <span class="hljs-type">char</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> ,<br>    <span class="hljs-keyword">PRIMARY KEY</span> (`id`)<br>);<br><span class="hljs-meta">#4.组合索引</span><br>#指多个字段上创建的索引，只有在查询条件中使用了创建索引时的第一个字段，索引才会被使用。使用组合索引时遵循最左前缀集合<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `<span class="hljs-keyword">table</span>` <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">INDEX</span> name_city_age (<span class="hljs-type">name</span>,city,age);<br><span class="hljs-meta">#5.全文索引</span><br><br>#主要用来查找文本中的关键字，而不是直接与索引中的值相比较。fulltext索引跟其它索引大不相同，它更像是一个搜索引擎，而不是简单的<span class="hljs-keyword">where</span>语句的参数匹配。<br># fulltext索引配合match against操作使用，而不是一般的<span class="hljs-keyword">where</span>语句加<span class="hljs-keyword">like</span>。它可以在<span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span>，<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> ，<span class="hljs-keyword">create</span> <span class="hljs-keyword">index</span>使用，不过目前只有<span class="hljs-type">char</span>、<span class="hljs-type">varchar</span>，<span class="hljs-type">text</span> 列上可以创建全文索引。<br># 值得一提的是，在数据量较大时候，现将数据放入一个没有全局索引的表中，然后再用<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">index</span>创建fulltext索引，要比先为一张表建立fulltext然后再将数据写入的速度快很多。<br><br>#（<span class="hljs-number">1</span>）创建表的适合添加全文索引<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `<span class="hljs-keyword">table</span>` (<br>    `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT ,<br>    `title` <span class="hljs-type">char</span>(<span class="hljs-number">255</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> ,<br>    `content` <span class="hljs-type">text</span> <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">NULL</span> ,<br>    `<span class="hljs-type">time</span>` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> ,<br>    <span class="hljs-keyword">PRIMARY KEY</span> (`id`),<br>    FULLTEXT (content)<br>);<br>#（<span class="hljs-number">2</span>）修改表结构添加全文索引<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> article <span class="hljs-keyword">ADD</span> FULLTEXT index_content(content)<br># （<span class="hljs-number">3</span>）直接创建索引<br><span class="hljs-keyword">CREATE</span> FULLTEXT <span class="hljs-keyword">INDEX</span> index_content <span class="hljs-keyword">ON</span> article(content)<br></code></pre></td></tr></table></figure><h1 id="MySQL-索引失效"><a href="#MySQL-索引失效" class="headerlink" title="MySQL 索引失效"></a>MySQL 索引失效</h1><h3 id="失效的场景"><a href="#失效的场景" class="headerlink" title="失效的场景"></a>失效的场景</h3><blockquote><p>没有查询条件，或者查询条件没有建立索引;<br>在查询条件上没有使用引导列，<strong>最左前缀规则，即在查询条件中使用了复合索引的第一个字段，索引才会被使用</strong>&lt;比如组合索引：在where子句里用的时候，就必须从第一个字段来限制才管用，比如用第一和第二个索引来查询；如果不用第一个索引，直接开始用第二个索引，索引就失效&gt;<br>查询的数量是大表的大部分，应该是30％以上。<br>如果列类型是字符串，那一定要在条件中将数据使用引号引用起来,否则不使用索引<br>索引本身失效，即没有建立索引成功<br>在索引列上使用函数、计算、类型转换<br>对小表查询<br>用or分割开的条件，如果or前的条件中的列有索引，而后面的列中没有索引，那么涉及的索引都不会被用到。<br>如果like是以%开始<br> 使用NOT IN和&lt;&gt;操作<br>DATE_FORMAT()格式化时间，格式化后的时间再去比较，可能会导致索引失效。</p></blockquote><h3 id="MySQL-EXPLAIN和DESCRIBE（查询分析器）"><a href="#MySQL-EXPLAIN和DESCRIBE（查询分析器）" class="headerlink" title="MySQL EXPLAIN和DESCRIBE（查询分析器）"></a>MySQL EXPLAIN和DESCRIBE（查询分析器）</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">EXPLAIN</span> <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> students <span class="hljs-keyword">where</span> stud_id=<span class="hljs-string">&#x27;1&#x27;</span>  <span class="hljs-keyword">or</span> phone=<span class="hljs-string">&#x27;18729902095&#x27;</span><br></code></pre></td></tr></table></figure><ul><li><p>id ：表示 SELECT 语句的编号</p></li><li><p>select_type ：该参数有以下几个常用的取值：</p></li></ul><blockquote><p>• SIMPLE：表示简单查询，其中不包括连接查询和子查询；<br>• PRIMARY：表示主查询，或者是最外层的查询语句；<br>• UNION：表示连接查询的第二个或后面的查询语句；<br>• DEPENDENT UNION：连接查询中的第 2 个或后面的 SELECT 语句，取决于外面的查询；<br>• UNION RESULT：连接查询的结果；<br>• SUBQUERY：子查询中的第 1 个 SELECT 语句；<br>• DEPENDENT SUBQUERY：子查询中的第 1 个 SELECT 语句，取决于外面的查询；<br>• DERIVED：导出表的 SELECT（FROM 子句的子查询）。</p></blockquote><ul><li><p>table ： 表示查询的表</p></li><li><p>type ：表示表的连接类型。该参数有以下几个常用的取值，范围从 NULL 到 ALL。下面按照最佳类型到最差类型排序：</p></li></ul><blockquote><p>NULL：不用访问表或者索引，直接就能得到结果；<br>system：表示表中只有一条记录；<br>const：表示表中有多条记录，但只从表中查询一条记录；<br>eq _ref：类似 ref，表示多表连接时，后面的表使用了 UNIQUE 或者 PRIMARY KEY；<br>ref：表示多表查询时，后面的表使用了普通索引；<br>range：表示查询语句中给出了查询范围，常见于 &lt;、&lt;&#x3D;、&gt;、&gt;&#x3D;、between 等操作符；<br>index：表示对表中的索引进行了完整的扫描，MySQL 遍历整个索引来查询匹配的行；<br>ALL：表示对表进行了完整的扫描，MySQL 遍历全表来找到匹配的行</p></blockquote><ul><li><p>possible_keys ：表示查询中可以使用的索引，可能用到这个索引；</p></li><li><p>key ：表示实际查询中使用到的索引，为NULL表示最终没有用到索引；</p></li><li><p>key_len ：表示索引字段的长度；</p></li><li><p>ref ： 表示使用哪个列或常数与索引一起来查询记录；</p></li><li><p>rows： 表示查询的行数；</p></li><li><p>filtered ：表示存储引擎返回的数据在 server 层过滤后，剩下多少满足查询记录数量的比例。注意是百分比，不是具体记录数。</p></li><li><p>Extra ：表示查询过程的附件信息。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>mysql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用户管理</title>
    <link href="/blog/2018/05/29/linux/%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/"/>
    <url>/blog/2018/05/29/linux/%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a><strong>创建用户</strong></h3><ol><li><p>useradd -m -g 组 用户名：创建用户</p></li><li><p>-m 会自动创建用户家目录</p></li><li><p>-g 会指定用户所在组，否认会创建一个用户同名的组</p></li><li><p>passwd 用户名：创建用户密码</p></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css">useradd -m -<span class="hljs-selector-tag">g</span> lgw leegw<br>passwd leegw<br>更改用户 leegw 的密码 <br><span class="hljs-number">1</span>、密码少于 <span class="hljs-number">8</span> 个字符<br><span class="hljs-number">2</span>、密码不能包含用户名<br><span class="hljs-number">3</span>、一次命令允许连续输入<span class="hljs-number">4</span>次，否则，超出服务重试的最多次数<br></code></pre></td></tr></table></figure><h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a><strong>删除用户</strong></h3><ol><li>userdel -r 用户名；-r选项会自动删除用户家目录</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><br><span class="hljs-attribute">userdel</span> leegw<br><span class="hljs-attribute">userdel</span> -r leegw   # 同步删除 家目录<br><span class="hljs-attribute">userdel</span>: user ligw is currently used by process <span class="hljs-number">15288</span><br><span class="hljs-attribute">ps</span> -ef |grep <span class="hljs-number">15288</span><br><span class="hljs-attribute">kill</span> - <span class="hljs-number">9</span> <span class="hljs-number">15288</span><br></code></pre></td></tr></table></figure><h3 id="查看用户"><a href="#查看用户" class="headerlink" title="查看用户"></a>查看用户</h3><ol><li><p>id [用户名] 查看用户 UID 和 GID 信息</p></li><li><p>who 查看当前所有登录的用户列表</p></li><li><p>whoami 查看当前登录用户的账户名</p></li><li><p>&#x2F;etc&#x2F;passwd 文件存放的是用户的信息，由 6 个分号组成的 7 个信息，分别是</p></li><li><p>•用户名</p></li><li><p>•密码（x，表示加密的密码）</p></li><li><p>•UID（用户标识）</p></li><li><p>•GID（组标识）</p></li><li><p>•用户全名或本地帐号</p></li><li><p>•家目录</p></li><li><p>•登录使用的 Shell，就是登录之后，使用的终端命令，ubuntu 默认是 dash</p></li><li><p>cat &#x2F;etc&#x2F;passwd  #查看所有用户信息</p></li></ol><h3 id="修改用户usermod"><a href="#修改用户usermod" class="headerlink" title="修改用户usermod"></a>修改用户usermod</h3><p>usermod 可以用来设置 用户 的 主组 ／ 附加组 和 登录 Shell，命令格式如下：</p><ul><li><p>主组：通常在新建用户时指定，在 etc&#x2F;passwd 的第 4 列 GID 对应的组</p></li><li><p>附加组：在 etc&#x2F;group 中最后一列表示该组的用户列表，用于指定 用户的附加权限</p></li><li><p>提示：设置了用户的附加组之后，需要重新登录才能生效！</p></li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">usermod -g 组 用户名 <span class="hljs-comment"># 修改用户的主组（passwd 中的 GID）</span><br>usermod -G 组 用户名 <span class="hljs-comment"># 修改用户的附加组</span><br>usermod -s <span class="hljs-regexp">/bin/</span>bash 用户名 <span class="hljs-comment"># 修改用户登录 Shell</span><br></code></pre></td></tr></table></figure><p><strong>创建用户 &#x2F; 删除用户 &#x2F; 修改其他用户密码 的终端命令都需要通过 su</strong></p><h3 id="管理用户组"><a href="#管理用户组" class="headerlink" title="管理用户组"></a><strong>管理用户组</strong></h3><blockquote><p>groupadd 组名 #添加组<br>groupdel 组名 #删除组<br>cat &#x2F;etc&#x2F;group #确认组信息<br>groupmod 选项 用户组 # 修改组</p></blockquote><h3 id="root用户"><a href="#root用户" class="headerlink" title="root用户"></a><strong>root用户</strong></h3><p>root 账号通常 用于系统的维护和管理，对操作系统的所有资源 具有所有访问权限</p><p>不推荐 直接使用 root 账号登录系统</p><p>在 Linux 安装的过程中，系统会自动创建一个用户账号，而这个默认的用户就称为“标准用户”</p><p>sudo</p><p>•su 是 substitute user 的缩写，表示 使用另一个用户的身份</p><p>•sudo是linux系统管理指令，是允许系统管理员让普通用户执行一些或者全部的root命令的一个工具</p><p>•sudo 命令用来以其他身份来执行命令，预设的身份为 root </p><p>•用户使用 sudo 时，必须先输入密码，之后有 5 分钟的有效期限，超过期限则必须重新输入密码</p><p>• 若其未经授权的用户企图使用 sudo，则会发出警告邮件给管理</p><h6 id="设置普通用户的sudo无密码登录权限"><a href="#设置普通用户的sudo无密码登录权限" class="headerlink" title="设置普通用户的sudo无密码登录权限"></a><strong>设置普通用户的sudo无密码登录权限</strong></h6><blockquote><p>1.** <strong><strong># vi &#x2F;etc&#x2F;sudoers</strong><br>2.在第一行编辑：**用户名 ALL&#x3D;(root)NOPASSWD:ALL</strong><br>eg：  baby ALL&#x3D;(root)NOPASSWD:ALL</p></blockquote><h3 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a><strong>切换用户</strong></h3><ol><li><p>su - 用户名：切换用户，并且切换到家目录；不加-，则不会切换到家目录，保持原来路径不变</p></li><li><p>su 不接用户名，可以切换到 root，但是不推荐使用，因为不安全</p></li><li><p>su - 用户名：切换到新用户</p></li><li><p>su：切换到管理员</p></li></ol><blockquote><p>1.root用户切换到普通用户，不需要密码<br>2.普通用户切换到root用户，需要密码</p></blockquote><h3 id="修改用户的文件权限"><a href="#修改用户的文件权限" class="headerlink" title="修改用户的文件权限"></a>修改用户的文件权限</h3><ol><li><p>chmod：设置文件对不同用户的权限，需要使用root用户</p></li><li><p>chgrp：修改组</p></li><li><p>chown：修改拥有者</p></li></ol><blockquote><p>chown 用户名 文件名|目录名 # 修改文件|目录的拥有者<br>chgrp -R 组名 文件名|目录名 # 递归修改文件|目录的组<br>chmod -R 755 文件名|目录名 # 递归修改文件权限<br>chmod 在设置权限时，可以简单地使用三个数字分别对应拥有者／ 组和其他用户的权限<br>直接修改文件|目录的 读|写|执行 权限，但是不能精确到 拥有者|组|其他<br>chmod +&#x2F;-rwx 文件名|目录名 # 一次性修改 拥有者 &#x2F; 组 权限</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># chmod</span><br>eg: -rw-rw-r--. 1 baby baby 0 May 31 16:02 a.py<br>需求：对于同组用户来说，仅仅可读，对于其他用户不可读不可写<br>    权限字符形式操作：<br>        <span class="hljs-comment"># chmod  g-w a.py      (表示对于同组u用户，删除可写权限)</span><br>        <span class="hljs-comment"># chmod  o-r a.py    (表示对于其他用户，删除读和写权限)</span><br>        <span class="hljs-comment"># chmod g-r-w a.py  (表示对于同组用户，删除读和写权限)</span><br>    <br>    权限数字形式权限：<br>        <span class="hljs-comment"># chmod 664  (表示对拥有着可读可写，同组用户可读可写，其他用户可读)</span><br><br>    问题：如果针对一个目录，设置权限呢？且目录中有许多文件，这些文件都需要同样的权限设置。<br>        -R, --recursive  递归<br>        <span class="hljs-comment"># chmod -R 664 /opt/softwares</span><br><br><span class="hljs-comment"># chown</span><br>    <span class="hljs-built_in">chown</span> baby /home/a.py<br><span class="hljs-comment"># chgrp</span><br>    <span class="hljs-built_in">chgrp</span> baby /home/a.py<br>    经测，两个命令都要运行，才会改变(不一定)<br><span class="hljs-comment"># 如果针对目录：递归</span><br>    <span class="hljs-built_in">chown</span> -R baby /opt/softwares<br>    <span class="hljs-built_in">chgrp</span> -R baby /opt/softwares<br><span class="hljs-comment"># 将/home/a.py文件的所属用户和所属组改为senior用户和senior组</span><br>    可以使用一个命令完成：<br>    <span class="hljs-built_in">chown</span> senior:senior /home/a.py<br>    senior:senior: 第一个senior代表用户，第二个senior代表组<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>系统管理</title>
    <link href="/blog/2018/05/23/linux/%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/"/>
    <url>/blog/2018/05/23/linux/%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">/etc/profile：配置全局环境变量，所有用户都可以用<br>用户家目录/.bash_profile 配置环境变量，只对当前用户生效<br>文件的path环境变量中多个配置用:分开，最后加上. 代表当前路径下文件可直接调用，而不需要加上./<br>比如配置jdk<br>     <span class="hljs-built_in">export</span>    <span class="hljs-attribute">JAVA_HOME</span>=/opt/jdk1.8.0_281<br>     <span class="hljs-built_in">export</span>    <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$JAVA_HOME</span>/bin:$PATH:.<br></code></pre></td></tr></table></figure><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><h4 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h4><ol><li>top：动态显示运行中的进程并且排序</li><li>ps <ol><li>ps aux：查看进程的详细状况<ol><li>a 显示终端上的所有进程，包括其他用户的进程</li><li>u 显示进程的详细状态</li><li>x 显示没有控制终端的进程</li></ol></li><li>ps -ef</li></ol></li></ol><h4 id="杀死进程"><a href="#杀死进程" class="headerlink" title="杀死进程"></a>杀死进程</h4><ol><li>kill：kill [-9] 进程代号 终止指定代号的进程，-9 表示强行终止 </li><li>pkill：按照进程名杀死进程。pkill java：杀掉所有java进程；是按照进程名称来杀死进程 </li><li>提示： 使用 kill 命令时，最好只终止由当前用户开启的进程，而不要终止 root 身份开启的进程，否则可能导致系统崩溃要退出 </li><li>批量删除进程:  kill -9 <code>ps -ef | grep *** | awk &#39;&#123;print $2&#125;&#39;</code></li><li>批量kill：ps auxww | grep ‘gunicorn’ | awk ‘{print $2}’ | xargs kill -9 </li><li>以树状图形式查看pid号，杀掉主进程，所有进程都杀掉：pstree -ap | grep gunicorn<br><img src="/blog/images/mysql&linux/1722580916435.png"></li></ol><h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><h4 id="方式1：service-–-7-3版本之前"><a href="#方式1：service-–-7-3版本之前" class="headerlink" title="方式1：service – 7.3版本之前"></a>方式1：service – 7.3版本之前</h4><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-number">1</span>.查看防火墙的状态<br>[baby<span class="hljs-variable">@localhost</span> etc]<span class="hljs-variable">$ </span>sudo service iptables status<br><span class="hljs-symbol">iptables:</span> Firewall is not running.<br><br><span class="hljs-number">2</span>.关闭防火墙：<br>[baby<span class="hljs-variable">@localhost</span> etc]<span class="hljs-variable">$ </span>sudo service iptables stop<br><br><span class="hljs-number">3</span>.启动防火墙：<br>[baby<span class="hljs-variable">@localhost</span> etc]<span class="hljs-variable">$ </span>sudo service iptables start<br><br><span class="hljs-number">4</span>.重启防火墙：<br>[baby<span class="hljs-variable">@localhost</span> etc]<span class="hljs-variable">$ </span>sudo service iptables restart<br><br><span class="hljs-number">5</span>.永久性设置防火墙关闭|开启(意思就是设置开启启动|关闭防火墙)：<br><span class="hljs-variable">$ </span>sudo chkconfig iptables off|on<br></code></pre></td></tr></table></figure><h4 id="方式2：systemctl-–-7-3版本之后"><a href="#方式2：systemctl-–-7-3版本之后" class="headerlink" title="方式2：systemctl – 7.3版本之后"></a>方式2：systemctl – 7.3版本之后</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">查看防火墙状态：firewall-cmd <span class="hljs-attr">--state</span><br>关闭防火墙：systemctl <span class="hljs-selector-tag">stop</span> firewalld<span class="hljs-selector-class">.service</span><br>禁止防火墙开机启动：systemctl disable firewalld.service<br></code></pre></td></tr></table></figure><h4 id="防火墙2-SELINUX-禁用"><a href="#防火墙2-SELINUX-禁用" class="headerlink" title="防火墙2-SELINUX 禁用"></a>防火墙2-SELINUX 禁用</h4><ol><li><p>第一步：编辑</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">vi  /etc/sysconfig/selinux<br><span class="hljs-attribute">SELINUX</span>=disabled<br>或者：<br>vi /etc/selinux<span class="hljs-built_in">/config</span><br><span class="hljs-built_in"></span><span class="hljs-attribute">SELINUX</span>=disabled<br>注意：不能改错，要不然重启不了服务器<br></code></pre></td></tr></table></figure></li><li><p>第二步重启服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> reboot<br></code></pre></td></tr></table></figure></li></ol><h2 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a>系统信息</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ruby">- 查看什么系统<br>[baby<span class="hljs-variable">@localhost</span> ~]<span class="hljs-variable">$ </span>uname  <br><span class="hljs-title class_">Linux</span><br>- 可显示电脑以及操作系统的相关信息。<br>uname -a <br>- 查看内核版本<br>[baby<span class="hljs-variable">@localhost</span> ~]<span class="hljs-variable">$ </span>uname -r    <br><span class="hljs-number">2.6</span>.<span class="hljs-number">32</span>-<span class="hljs-number">358</span>.el6.x86_64<br>- 查看cpu信息<br>[baby<span class="hljs-variable">@localhost</span> ~]<span class="hljs-variable">$ </span>cat /<span class="hljs-built_in">proc</span>/cpuinfo   <br>- 查看内存信息<br>[baby<span class="hljs-variable">@localhost</span> ~]<span class="hljs-variable">$ </span>cat /<span class="hljs-built_in">proc</span>/meminfo   <br><br>cat /<span class="hljs-built_in">proc</span>/version<span class="hljs-string">&quot;,说明正在运行的内核版本。  </span><br><span class="hljs-string">cat /etc/issue&quot;</span>, 显示的是发行版本信息<br></code></pre></td></tr></table></figure><h2 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h2><ul><li>查看剩余磁盘空间：df<figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs tcl">-a ：列出所有的文件系统，包括系统特有的 /<span class="hljs-keyword">proc</span> 等文件系统；<br>-k ：以<span class="hljs-title"> KBytes</span> 的容量显示各文件系统；<br>-m ：以<span class="hljs-title"> MBytes</span> 的容量显示各文件系统；<br>-h ：以人们较易阅读的<span class="hljs-title"> GBytes,</span> MBytes,<span class="hljs-title"> KBytes</span> 等格式自行显示；<br>-H ：以<span class="hljs-title"> M=1000K</span> 取代<span class="hljs-title"> M=1024K</span> 的进位方式；<br>-T ：显示文件系统类型, 连同该<span class="hljs-title"> partition</span> 的<span class="hljs-title"> filesystem</span> 名称 (例如<span class="hljs-title"> ext3)</span> 也列出；<br>-i ：不用硬盘容量，而以<span class="hljs-title"> inode</span> 的数量来显示<br></code></pre></td></tr></table></figure></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span> -h: 易读方式打印<br><span class="hljs-built_in">df</span> -lh<br><br><span class="hljs-built_in">df</span> -aT       <span class="hljs-comment">#将系统内的所有特殊文件格式及名称都列出来</span><br><span class="hljs-built_in">df</span> -h /etc   <span class="hljs-comment">#将 /etc 底下的可用的磁盘容量以易读的容量格式显示</span><br><span class="hljs-built_in">df</span> -hi: 打印inode。操作系统的文件由两部分组成，数据部分和名称部分；数据部分就是内容，inode就是名称部分，操作系统对文件的个数和容量都有上限，其中一个满了就会不可写；<br><br></code></pre></td></tr></table></figure><ul><li>显示目录下文件大小：du<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">显示目录下的文件大小。 检查文件系统的磁盘空间占用情况。可以利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息。<br><span class="hljs-built_in">du</span> -sh /home/baby     预估在某个路径下使用的磁盘空间大小<br><span class="hljs-built_in">du</span> -sm /*    <span class="hljs-comment">#检查根目录底下每个目录所占用的容量</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="内存相关"><a href="#内存相关" class="headerlink" title="内存相关"></a>内存相关</h2><ul><li>看系统内存使用情况 free<figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@localhost baby]<span class="hljs-comment"># free -m</span><br>             total       used       free     shared    buffers     cached<br>Mem:          <span class="hljs-number"> 995 </span>      <span class="hljs-number"> 884 </span>      <span class="hljs-number"> 110 </span>        <span class="hljs-number"> 0 </span>      <span class="hljs-number"> 149 </span>       385<br>-/+ buffers/cache:       <span class="hljs-number"> 349 </span>       646<br>Swap:        <span class="hljs-number"> 4095 </span>        <span class="hljs-number"> 0 </span>      4095<br></code></pre></td></tr></table></figure></li></ul><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><ol><li>监控TCP&#x2F;IP网络端口<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs makefile">netstat是控制台命令,是一个监控TCP/IP网络的非常有用的工具，它可以显示路由表、实际的网络连接以及每一个网络接口设<br>备的状态信息。Netstat用于显示与IP、TCP、UDP和ICMP协议相关的统计数据，一般用于检验本机各端口的网络连接情况。<br><br><span class="hljs-section">常用netstat相关命令:</span><br>1、列出所有端口 <span class="hljs-comment">#netstat -a</span><br>2、列出所有 tcp 端口 <span class="hljs-comment">#netstat -at</span><br>3、列出所有 udp 端口 <span class="hljs-comment">#netstat -au</span><br>4、只显示监听端口 <span class="hljs-comment">#netstat -l</span><br>5、只列出所有监听 tcp 端口 <span class="hljs-comment">#netstat -lt</span><br>6、只列出所有监听 udp 端口 <span class="hljs-comment">#netstat -lu</span><br>7、列出所有监听 UNIX 端口 <span class="hljs-comment">#netstat -lx</span><br>8、显示所有端口的统计信息 <span class="hljs-comment">#netstat -s</span><br></code></pre></td></tr></table></figure></li><li>查看网卡的信息<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@localhost baby]# cd /etc/sysconfig/network-scripts <br>[root@localhost network-scripts]# ls<br>ifcfg-eth0   ifdown-isdn    ifup-aliases  ifup-plusb     init.ipv6-global<br>ifcfg-lo     ifdown-post    ifup-bnep     ifup-post      net.hotplug<br>ifdown       ifdown-ppp     ifup-eth      ifup-ppp       network-functions<br>ifdown-bnep  ifdown-routes  ifup-ippp     ifup-routes    network-functions-ipv6<br>ifdown-eth   ifdown-sit     ifup-ipv6     ifup-sit<br>ifdown-ippp  ifdown-tunnel  ifup-isdn     ifup-tunnel<br>ifdown-ipv6  ifup           ifup-plip     ifup-wireless<br>[root@localhost network-scripts]# cat ifcfg-eth0 <br><span class="hljs-attribute">DEVICE</span>=eth0<br><span class="hljs-attribute">TYPE</span>=Ethernet<br><span class="hljs-attribute">UUID</span>=57d4c2c9-9e9c-48f8-a654-8e5bdbadafb8<br><span class="hljs-attribute">ONBOOT</span>=<span class="hljs-literal">yes</span><br><span class="hljs-attribute">NM_CONTROLLED</span>=<span class="hljs-literal">yes</span><br><span class="hljs-attribute">BOOTPROTO</span>=none<br><span class="hljs-attribute">DEFROUTE</span>=<span class="hljs-literal">yes</span><br><span class="hljs-attribute">IPV4_FAILURE_FATAL</span>=<span class="hljs-literal">yes</span><br><span class="hljs-attribute">IPV6INIT</span>=<span class="hljs-literal">no</span><br><span class="hljs-attribute">NAME</span>=<span class="hljs-string">&quot;System eth0&quot;</span><br><span class="hljs-attribute">HWADDR</span>=00:0C:29:CD:79:8C<br><span class="hljs-attribute">IPADDR</span>=192.168.202.110<br><span class="hljs-attribute">PREFIX</span>=24<br><span class="hljs-attribute">GATEWAY</span>=192.168.202.110<br><span class="hljs-attribute">LAST_CONNECT</span>=1559242361<br>[root@localhost network-scripts]# cat ifcfg-lo<br><span class="hljs-attribute">DEVICE</span>=lo<br><span class="hljs-attribute">IPADDR</span>=127.0.0.1<br><span class="hljs-attribute">NETMASK</span>=255.0.0.0<br><span class="hljs-attribute">NETWORK</span>=127.0.0.0<br><span class="hljs-comment"># If you&#x27;re having problems with gated making 127.0.0.0/8 a martian,</span><br><span class="hljs-comment"># you can change this to something else (255.255.255.255, for example)</span><br><span class="hljs-attribute">BROADCAST</span>=127.255.255.255<br><span class="hljs-attribute">ONBOOT</span>=<span class="hljs-literal">yes</span><br><span class="hljs-attribute">NAME</span>=loopback<br></code></pre></td></tr></table></figure></li></ol><h2 id="关机重启"><a href="#关机重启" class="headerlink" title="关机重启"></a>关机重启</h2><ol><li>shutdown 命令可以 安全 关闭 或者 重新启动系统<figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">选项 -r 重新启动</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">提示：</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">•不指定选项和参数，默认表示 <span class="hljs-number">1</span> 分钟之后 关闭电脑</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">•远程维护服务器时，最好不要关闭系统，而应该重新启动系统</span><br></code></pre></td></tr></table></figure></li></ol><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs autoit">$ <span class="hljs-built_in">shutdown</span> -r now <span class="hljs-meta"># 重新启动操作系统，其中 now 表示现在</span><br>$ <span class="hljs-built_in">shutdown</span> now <span class="hljs-meta"># 立刻关机，其中 now 表示现在</span><br>$ <span class="hljs-built_in">shutdown</span> <span class="hljs-number">20</span>:<span class="hljs-number">25</span> <span class="hljs-meta"># 系统在今天的 20:25 会关机</span><br>$ <span class="hljs-built_in">shutdown</span> +<span class="hljs-number">10</span> <span class="hljs-meta"># 系统再过十分钟后自动关机</span><br>$ <span class="hljs-built_in">shutdown</span> -c <span class="hljs-meta"># 取消之前指定的关机计</span><br><br></code></pre></td></tr></table></figure><ol start="2"><li>halt 关机</li><li>reboot 重启</li></ol><h2 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h2><ul><li><p><strong>显示当前的日期</strong></p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">[baby@localhost ~]$** date**     </span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-title class_">Sun</span> <span class="hljs-title class_">Jun</span>  <span class="hljs-number">9</span> <span class="hljs-number">13</span>:<span class="hljs-number">52</span>:<span class="hljs-number">58</span> <span class="hljs-variable constant_">EDT</span> <span class="hljs-number">2019</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">[baby@localhost ~]$ **date -R  **  显示当前的日期和时区</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-title class_">Sun</span>, <span class="hljs-number">09</span> <span class="hljs-title class_">Jun</span> <span class="hljs-number">2019</span> <span class="hljs-number">13</span>:<span class="hljs-number">53</span>:<span class="hljs-number">03</span> -<span class="hljs-number">0400</span></span><br></code></pre></td></tr></table></figure></li><li><p><strong>设置时间（需要root用户）</strong></p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">[root@localhost baby]# **date -s <span class="hljs-number">2019</span>-<span class="hljs-number">06</span>-<span class="hljs-number">10</span>**</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-title class_">Mon</span> <span class="hljs-title class_">Jun</span> <span class="hljs-number">10</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> <span class="hljs-variable constant_">EDT</span> <span class="hljs-number">2019</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">[root@localhost baby]# **date -s <span class="hljs-number">14</span>:<span class="hljs-number">42</span>:<span class="hljs-number">10</span>**</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-title class_">Mon</span> <span class="hljs-title class_">Jun</span> <span class="hljs-number">10</span> <span class="hljs-number">14</span>:<span class="hljs-number">42</span>:<span class="hljs-number">10</span> <span class="hljs-variable constant_">EDT</span> <span class="hljs-number">2019</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">[root@localhost baby]# date</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-title class_">Mon</span> <span class="hljs-title class_">Jun</span> <span class="hljs-number">10</span> <span class="hljs-number">14</span>:<span class="hljs-number">42</span>:<span class="hljs-number">11</span> <span class="hljs-variable constant_">EDT</span> <span class="hljs-number">2019</span></span><br></code></pre></td></tr></table></figure></li><li><p><strong>显示2015年的日历表</strong></p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal">&gt; [baby<span class="hljs-variable">@localhost</span> ~]<span class="hljs-variable">$ </span>**cal <span class="hljs-number">2015</span>   **<br></code></pre></td></tr></table></figure></li></ul><h2 id="crontab定时调度"><a href="#crontab定时调度" class="headerlink" title="crontab定时调度"></a>crontab定时调度</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul><li>crontab命令用于设置周期性被执行的指令。该命令从标准输入设备读取指令，并将其存放于“crontab”文件中，以供之后读取和执行。</li><li>cron 系统调度进程。 可以使用它在每天的非高峰负荷时间段运行作业，或在一周或一月中的不同时段运行。cron是系统主要的调度进程，可以在无需人工干预的情况下运行作业。crontab命令允许用户提交、编辑或删除相应的作业。每一个用户都可以有一个crontab文件来保存调度信息。系统管理员可以通过cron.deny 和 cron.allow 这两个文件来禁止或允许用户拥有自己的crontab文件。</li><li>名词解释： cron是服务名称，crond是后台进程，crontab则是定制好的计划任务表。</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li><p>要使用cron服务，先要安装vixie-cron软件包和crontabs软件包，两个软件包作用如下： </p><ol><li><p>vixie-cron软件包是cron的主程序。</p></li><li><p>crontabs软件包是用来安装、卸装、或列举用来驱动 cron 守护进程的表格的程序。</p></li></ol></li><li><p>查看是否安装 </p><ol><li>查看是否安装了cron软件包: rpm -qa|grep vixie-cron</li><li>查看是否安装了crontabs软件包:rpm -qa|grep crontabs</li></ol></li><li><p>软件包存在如何安装</p><ol><li>如果没有安装，则执行如下命令安装软件包(软件包必须存在)<blockquote><p>rpm -ivh vixie-cron-4.1-54.FC5*<br>rpm -ivh crontabs*</p></blockquote></li></ol></li><li><p>安装包不存在如何安装(正常情况下都是这样安装方式)</p></li></ol><ul><li>如果本地没有安装包，在能够连网的情况下可以在线安装<blockquote><p>yum install vixie-cron或者yum -y install vixie-cron<br>yum install crontabs或者yum -y install crontabs</p></blockquote></li></ul><ol start="5"><li>查看crond服务状态：<blockquote><p>pgrep crond或&#x2F;sbin&#x2F;service crond status或ps -elf|grep crond|grep -v “grep”</p></blockquote></li></ol><p>###配置<br>crond服务操作命令:</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs protobuf"><span class="hljs-keyword">service </span><span class="hljs-title class_">crond</span> start     <span class="hljs-comment">//启动服务</span><br><span class="hljs-keyword">service </span><span class="hljs-title class_">crond</span> stop      <span class="hljs-comment">//关闭服务</span><br><span class="hljs-keyword">service </span><span class="hljs-title class_">crond</span> restart   <span class="hljs-comment">//重启服务</span><br><span class="hljs-keyword">service </span><span class="hljs-title class_">crond</span> reload    <span class="hljs-comment">//重新载入配置</span><br><span class="hljs-keyword">service </span><span class="hljs-title class_">crond</span> status    <span class="hljs-comment">//查看crontab服务状态</span><br>或这种形式<br>/sbin/<span class="hljs-keyword">service </span><span class="hljs-title class_">crond</span> start<span class="hljs-comment">//启动服务 </span><br>/sbin/<span class="hljs-keyword">service </span><span class="hljs-title class_">crond</span> stop<span class="hljs-comment">//关闭服务 </span><br>/sbin/<span class="hljs-keyword">service </span><span class="hljs-title class_">crond</span> restart<span class="hljs-comment">//重启服务 </span><br>/sbin/<span class="hljs-keyword">service </span><span class="hljs-title class_">crond</span> reload<span class="hljs-comment">//重新载入配置</span><br></code></pre></td></tr></table></figure><p>在CentOS系统中设置cron开机自动启动: chkconfig –level 345 crond on</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>crontab(选项)(参数)<br>选项<br>-e：编辑该用户的计时器设置；<br>-l：列出该用户的计时器设置；<br>-r：删除该用户的计时器设置；<br>-u&lt;用户名称&gt;：指定要设定计时器的用户名称。<br>-i：在删除用户的crontab文件时给确认提示<br>file：file是命令文件的名字,表示将file做为crontab的任务列表文件并载入crontab。 如果在命令行中没有指定这个文件，crontab命令将接受标准输入（键盘）上键入的命令，并将它们载入crontab。</p><h3 id="加入定时任务"><a href="#加入定时任务" class="headerlink" title="加入定时任务"></a>加入定时任务</h3><p><img src="/blog/images/mysql&linux/20972_0.png"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs swift">时间间隔的单位可以是分钟<span class="hljs-operator">、</span>小时<span class="hljs-operator">、</span>日<span class="hljs-operator">、</span>月<span class="hljs-operator">、</span>周及以上的任意组合<span class="hljs-operator">。</span>这个命令非常设合周期性的日志分析或数据备份等工作<span class="hljs-operator">。</span><br><br>crontab任务配置基本格式：<br><span class="hljs-operator">*</span> <span class="hljs-operator">*</span>　 <span class="hljs-operator">*</span>　 <span class="hljs-operator">*</span>　 <span class="hljs-operator">*</span>　　command<br>分钟(<span class="hljs-number">0</span><span class="hljs-operator">-</span><span class="hljs-number">59</span>)　小时(<span class="hljs-number">0</span><span class="hljs-operator">-</span><span class="hljs-number">23</span>)　日期(<span class="hljs-number">1</span><span class="hljs-operator">-</span><span class="hljs-number">31</span>)　月份(<span class="hljs-number">1</span><span class="hljs-operator">-</span><span class="hljs-number">12</span>)　星期(<span class="hljs-number">0</span><span class="hljs-operator">-</span><span class="hljs-number">6</span>,<span class="hljs-number">0</span>代表星期天)　 命令<br><br>第<span class="hljs-number">1</span>列表示分钟<span class="hljs-number">1</span>～<span class="hljs-number">59</span> 每分钟用<span class="hljs-operator">*</span>或者 <span class="hljs-operator">*/</span><span class="hljs-number">1</span>表示<br>eg:每十分钟执行一次： <span class="hljs-operator">*/</span><span class="hljs-number">10</span><br>第<span class="hljs-number">2</span>列表示小时<span class="hljs-number">1</span>～<span class="hljs-number">23</span>（<span class="hljs-number">0</span>表示<span class="hljs-number">0</span>点）<br>第<span class="hljs-number">3</span>列表示日期<span class="hljs-number">1</span>～<span class="hljs-number">31</span><br>第<span class="hljs-number">4</span>列表示月份<span class="hljs-number">1</span>～<span class="hljs-number">12</span><br>第<span class="hljs-number">5</span>列标识号星期<span class="hljs-number">0</span>～<span class="hljs-number">6</span>（<span class="hljs-number">0</span>表示星期天）<br>第<span class="hljs-number">6</span>列要运行的命令<br><br>日志：<br>如果没有指定日志，则日志默认存放在<span class="hljs-regexp">/var/</span>spool<span class="hljs-regexp">/mail/</span>root<br>如果在命令中指定日志，则日志在统计目录下，且<span class="hljs-regexp">/var/</span>spool<span class="hljs-regexp">/mail/</span>root下也会存储一份日志<br><br><br><br>实例：<br><span class="hljs-operator">*/</span><span class="hljs-number">1</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> cd <span class="hljs-regexp">/python_project/</span>dingshi_spider <span class="hljs-operator">&amp;&amp;</span> python3 test_debug.py <span class="hljs-operator">&gt;&gt;</span> run.log<br><span class="hljs-operator">-------</span>每一分钟执行一次，后面的是需要执行的linux命令，多个命令用<span class="hljs-operator">&amp;&amp;</span>链接，如果需要指定日志输出，用<span class="hljs-operator">&gt;&gt;</span>链接，后面跟上日志的名字，默认日志放在同级目录下<br><br><br>每<span class="hljs-number">1</span>分钟执行一次command<br><span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> command<br><br>每小时的第<span class="hljs-number">3</span>和第<span class="hljs-number">15</span>分钟执行<br><span class="hljs-number">3</span>,<span class="hljs-number">15</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> command<br><br>每个月的<span class="hljs-number">1</span>号， <span class="hljs-number">11</span>号， <span class="hljs-number">21</span>号 的<span class="hljs-number">2</span>：<span class="hljs-number">30</span>执行<br><span class="hljs-number">30</span>  <span class="hljs-number">2</span>   <span class="hljs-number">1</span>,<span class="hljs-number">11</span>,<span class="hljs-number">21</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> cmd<br><br>每天<span class="hljs-number">20</span>：<span class="hljs-number">00</span>至<span class="hljs-number">23</span>：<span class="hljs-number">00</span>，每半个小时执行一次<br><span class="hljs-number">0</span>,<span class="hljs-number">30</span> <span class="hljs-number">20</span><span class="hljs-operator">-</span><span class="hljs-number">23</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> cmd<br><br>在上午<span class="hljs-number">8</span>点到<span class="hljs-number">11</span>点的第<span class="hljs-number">3</span>和第<span class="hljs-number">15</span>分钟执行<br><span class="hljs-number">3</span>,<span class="hljs-number">15</span> <span class="hljs-number">8</span><span class="hljs-operator">-</span><span class="hljs-number">11</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> command<br><br>每隔两天的上午<span class="hljs-number">8</span>点到<span class="hljs-number">11</span>点的第<span class="hljs-number">3</span>和第<span class="hljs-number">15</span>分钟执行<br><span class="hljs-number">3</span>,<span class="hljs-number">15</span> <span class="hljs-number">8</span><span class="hljs-operator">-</span><span class="hljs-number">11</span> <span class="hljs-operator">*/</span><span class="hljs-number">2</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> command<br><br>每个星期一的上午<span class="hljs-number">8</span>点到<span class="hljs-number">11</span>点的第<span class="hljs-number">3</span>和第<span class="hljs-number">15</span>分钟执行<br><span class="hljs-number">3</span>,<span class="hljs-number">15</span> <span class="hljs-number">8</span><span class="hljs-operator">-</span><span class="hljs-number">11</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-number">1</span> command<br><br>每晚的<span class="hljs-number">21</span>:<span class="hljs-number">30</span>重启smb<br><span class="hljs-number">30</span> <span class="hljs-number">21</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-regexp">/etc/</span><span class="hljs-keyword">init</span>.d<span class="hljs-operator">/</span>smb restart<br><br>每月<span class="hljs-number">1</span><span class="hljs-operator">、</span><span class="hljs-number">10</span><span class="hljs-operator">、</span><span class="hljs-number">22</span>日的<span class="hljs-number">4</span>:<span class="hljs-number">45</span>重启smb<br><span class="hljs-number">45</span> <span class="hljs-number">4</span> <span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">22</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-regexp">/etc/</span><span class="hljs-keyword">init</span>.d<span class="hljs-operator">/</span>smb restart<br><br>每周六<span class="hljs-operator">、</span>周日的<span class="hljs-number">1</span>:<span class="hljs-number">10</span>重启smb<br><span class="hljs-number">10</span> <span class="hljs-number">1</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-number">6</span>,<span class="hljs-number">0</span> <span class="hljs-regexp">/etc/</span><span class="hljs-keyword">init</span>.d<span class="hljs-operator">/</span>smb restart<br><br>每天<span class="hljs-number">18</span>:<span class="hljs-number">00</span>至<span class="hljs-number">23</span>:<span class="hljs-number">00</span>之间每隔<span class="hljs-number">30</span>分钟重启smb<br><span class="hljs-number">0</span>,<span class="hljs-number">30</span> <span class="hljs-number">18</span><span class="hljs-operator">-</span><span class="hljs-number">23</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-regexp">/etc/</span><span class="hljs-keyword">init</span>.d<span class="hljs-operator">/</span>smb restart<br><br>每星期六的晚上<span class="hljs-number">11</span>:00pm重启smb<br><span class="hljs-number">0</span> <span class="hljs-number">23</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-number">6</span> <span class="hljs-regexp">/etc/</span><span class="hljs-keyword">init</span>.d<span class="hljs-operator">/</span>smb restart<br><br>每一小时重启smb<br><span class="hljs-number">0</span> <span class="hljs-operator">*/</span><span class="hljs-number">1</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-regexp">/etc/</span><span class="hljs-keyword">init</span>.d<span class="hljs-operator">/</span>smb restart<br><br>晚上<span class="hljs-number">11</span>点到早上<span class="hljs-number">7</span>点之间，每隔一小时重启smb<br><span class="hljs-operator">*</span> <span class="hljs-number">23</span><span class="hljs-operator">-</span><span class="hljs-number">7</span><span class="hljs-regexp">/1 * * * /</span>etc<span class="hljs-regexp">/init.d/</span>smb restart<br><br>每月的<span class="hljs-number">4</span>号与每周一到周三的<span class="hljs-number">11</span>点重启smb<br><span class="hljs-number">0</span> <span class="hljs-number">11</span> <span class="hljs-number">4</span> <span class="hljs-operator">*</span> mon<span class="hljs-operator">-</span>wed <span class="hljs-regexp">/etc/</span><span class="hljs-keyword">init</span>.d<span class="hljs-operator">/</span>smb restart<br><br>一月一号的<span class="hljs-number">4</span>点重启smb<br><span class="hljs-number">0</span> <span class="hljs-number">4</span> <span class="hljs-number">1</span> jan <span class="hljs-operator">*</span> <span class="hljs-regexp">/etc/</span><span class="hljs-keyword">init</span>.d<span class="hljs-operator">/</span>smb restart<br><br>每小时执行<span class="hljs-regexp">/etc/</span>cron.hourly目录内的脚本<br><span class="hljs-number">0</span> <span class="hljs-operator">*/</span><span class="hljs-number">1</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> root run<span class="hljs-operator">-</span>parts <span class="hljs-regexp">/etc/</span>cron.hourly<br><br><br>crontab每分钟定时执行：<br><span class="hljs-operator">*/</span><span class="hljs-number">1</span><span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> service mysqld restart<span class="hljs-comment">//每隔1分钟执行一次</span><br><span class="hljs-operator">*/</span><span class="hljs-number">10</span><span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> service mysqld restart<span class="hljs-comment">//每隔10分钟执行一次</span><br><br>crontab每小时定时执行：<br><span class="hljs-number">0</span> <span class="hljs-operator">*/</span><span class="hljs-number">1</span><span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> service mysqld restart<span class="hljs-comment">//每1小时执行一次</span><br><span class="hljs-number">0</span> <span class="hljs-operator">*/</span><span class="hljs-number">2</span><span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> service mysqld restart<span class="hljs-comment">//每2小时执行一次</span><br><br>crontab每天定时执行：<br><span class="hljs-number">0</span> <span class="hljs-number">10</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> service mysqld restart<span class="hljs-comment">//每天10点执行</span><br><span class="hljs-number">30</span> <span class="hljs-number">19</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> service mysqld restart<span class="hljs-comment">//每天19点30分执行</span><br><br>crontab每周定时执行：<br><span class="hljs-number">0</span> <span class="hljs-number">10</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-number">1</span> service mysqld restart<span class="hljs-comment">//每周一10点执行</span><br><span class="hljs-number">30</span> <span class="hljs-number">17</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-number">5</span> service mysqld restart<span class="hljs-comment">//每周五17点30分执行</span><br><br>crontab每年定时执行：<br><span class="hljs-number">0</span> <span class="hljs-number">10</span> <span class="hljs-number">1</span> <span class="hljs-number">10</span> <span class="hljs-operator">*</span> service mysqld restart<span class="hljs-comment">//每年的10月1日10点执行</span><br><span class="hljs-number">0</span> <span class="hljs-number">20</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-operator">*</span> service mysqld restart<span class="hljs-comment">//每年的8月8日20点执行</span><br><br><br>每分钟执行<span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span><br>每小时执行 <span class="hljs-number">0</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span><br>每天执行 <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span><br>每周执行 <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-number">0</span><br>每月执行 <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span><br>每年执行 <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-operator">*</span><br>每小时的第<span class="hljs-number">3</span>和第<span class="hljs-number">15</span>分钟执行<span class="hljs-number">3</span>,<span class="hljs-number">15</span><span class="hljs-operator">****</span><br>上午<span class="hljs-number">8</span>点到<span class="hljs-number">11</span>点的第<span class="hljs-number">3</span>和第<span class="hljs-number">15</span>分钟执行<span class="hljs-number">3</span>,<span class="hljs-number">158</span><span class="hljs-operator">-</span><span class="hljs-number">11</span><span class="hljs-operator">***</span><br></code></pre></td></tr></table></figure><h3 id="mac上crontab的使用"><a href="#mac上crontab的使用" class="headerlink" title="mac上crontab的使用"></a>mac上crontab的使用</h3><ul><li><p>对crontab服务操作：</p><blockquote><p>sudo &#x2F;usr&#x2F;sbin&#x2F;cron start<br>sudo &#x2F;usr&#x2F;sbin&#x2F;cron restart<br>sudo &#x2F;usr&#x2F;sbin&#x2F;cron stop<br>sudo &#x2F;usr&#x2F;sbin&#x2F;cron status</p></blockquote></li><li><p>编辑定时任务</p><blockquote><p>sudo crontab -e</p></blockquote></li></ul><h2 id="nohup-后台运行"><a href="#nohup-后台运行" class="headerlink" title="nohup 后台运行"></a>nohup 后台运行</h2><ul><li>用途：不挂断地、后台运行命令。</li><li>语法：nohup Command [ Arg … ] [ &amp; ]</li><li>描述：nohup 命令运行由 Command 参数和任何相关的 Arg 参数指定的命令，忽略所有挂断（SIGHUP）信号。添加 &amp; 符号 到命令的尾部，表示在 后台运行 Command 命令 。</li><li>nohup .&#x2F;start-dishi.sh &gt;output 2&gt;&amp;1 &amp;</li><li>将标准错误 2 重定向到标准输出 &amp;1 ，标准输出 &amp;1 再被重定向输入到 runoob.log 文件中。<ul><li>0 – stdin (standard input，标准输入)</li><li>1 – stdout (standard output，标准输出)</li><li>2 – stderr (standard error，标准错误输出)</li></ul></li><li>解释：<ul><li>带&amp;的命令行，即使terminal（终端）关闭，或者电脑死机程序依然运行（前提是你把程序递交到服务器上)；</li><li>2&gt;&amp;1的意思</li><li>这个意思是把标准错误（2）重定向到标准输出中（1），而标准输出又导入文件output里面，所以结果是标准错误和标准输出都导入文件output里面了</li></ul></li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">nohup ping www<span class="hljs-selector-class">.baidu</span><span class="hljs-selector-class">.com</span> &gt;ping<span class="hljs-selector-class">.log</span> <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span> &amp;<br>echo ping www<span class="hljs-selector-class">.baidu</span><span class="hljs-selector-class">.com</span> &gt;pingwww<span class="hljs-selector-class">.sh</span><br>sh pingwww<span class="hljs-selector-class">.sh</span><br>./pingwww<span class="hljs-selector-class">.sh</span><br>nohup ping www<span class="hljs-selector-class">.baidu</span><span class="hljs-selector-class">.com</span> &gt;ping<span class="hljs-selector-class">.log</span> <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span> &amp;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>软件安装</title>
    <link href="/blog/2018/05/03/linux/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    <url>/blog/2018/05/03/linux/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><p>Linux下的软件包可细分为两种，分别是</p><p><strong>源码包</strong></p><p><strong>二进制包</strong></p><p>二进制包是 Linux 下默认的软件安装包，因此二进制包又被称为默认安装软件包。</p><h6 id="目前主要有以下-2-大主流的二进制包管理系统："><a href="#目前主要有以下-2-大主流的二进制包管理系统：" class="headerlink" title="目前主要有以下 2 大主流的二进制包管理系统："></a>目前主要有以下 2 大主流的二进制包管理系统：</h6><p><strong>RPM 包管理系统</strong></p><p><strong>DPKG 包管理系统</strong></p><p><img src="/blog/images/mysql&linux/WEBRESOURCE39cc36d8b1ca8730d1710b7a43f39378%E6%88%AA%E5%9B%BE.png"></p><p><strong>yum</strong></p><p><strong>apt</strong></p><p><img src="/blog/images/mysql&linux/WEBRESOURCE2a61ac20f438a4376a6f160e72db4265%E6%88%AA%E5%9B%BE.png"></p><h3 id="apt-get"><a href="#apt-get" class="headerlink" title="apt-get"></a><strong>apt-get</strong></h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">1</span>. sudo apt-<span class="hljs-keyword">get</span> install tree 安装tree<br><span class="hljs-number">2</span>. sudo apt-<span class="hljs-keyword">get</span> <span class="hljs-comment">remove tree 卸载tree</span><br><span class="hljs-number">3</span>. sudo apt-<span class="hljs-keyword">get</span> update 更新软件<br><span class="hljs-number">4</span>. sudo apt-<span class="hljs-keyword">get</span> upgrade<br></code></pre></td></tr></table></figure><h3 id="rpm"><a href="#rpm" class="headerlink" title="rpm"></a><strong>rpm</strong></h3><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs subunit">*  检查某个软件是否安装<br># rpm -qa|grep java（查看java是否安装）<br>* 卸载已安装的软件<br># rpm -e --nodeps *****<br>同时卸载多个软件， 软件之间空格隔开<br>* 安装软件<br># rpm -ivh xxx.rpm<br><br><br>rpm -qa|grep java      #  查看java安装软件，通过 rpm 卸载低版本jdk<br>rpm -e --nodeps java<span class="hljs-string">-1</span>.8.0-openjdk-headless<span class="hljs-string">-1</span>.8.0.262.b10<span class="hljs-string">-1</span>.el7.x86_64<br>rpm -e --nodeps java<span class="hljs-string">-1</span>.8.0-openjdk<span class="hljs-string">-1</span>.8.0.262.b10<span class="hljs-string">-1</span>.el7.x86_64<br>rpm -e --nodeps java<span class="hljs-string">-1</span>.7.0-openjdk-headless<span class="hljs-string">-1</span>.7.0.261<span class="hljs-string">-2</span>.6.22.2.el7_8.x86_64<br>rpm -e --nodeps java<span class="hljs-string">-1</span>.7.0-openjdk<span class="hljs-string">-1</span>.7.0.261<span class="hljs-string">-2</span>.6.22.2.el7_8.x86_64<br></code></pre></td></tr></table></figure><h3 id="yum命令"><a href="#yum命令" class="headerlink" title="yum命令"></a><strong>yum命令</strong></h3><blockquote><p>只针对于centos和redhat系统<br>需要配置源<br>软件包依赖关系以及各个软件的安装顺序 </p></blockquote><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment"># yum安装jdk</span><br>yum <span class="hljs-keyword">install </span><span class="hljs-keyword">java-11-openjdk-devel.x86_64</span><br><span class="hljs-keyword"></span><span class="hljs-comment"># yum安装redis</span><br>yum <span class="hljs-keyword">install </span>redis<br><span class="hljs-comment"># yum安装nginx</span><br>yum -y <span class="hljs-keyword">install </span>nginx<br><br></code></pre></td></tr></table></figure><h3 id="tar命令"><a href="#tar命令" class="headerlink" title="tar命令"></a><strong>tar命令</strong></h3><blockquote><p><strong>用于安装tar包(tar包里面是源码， 需要编译)</strong><br>—– 不推荐使用源码编译方式安装， 较复杂<br><strong>zip软件相关操作</strong><br>前提： 需要linux上安装的是否有zip的操作包<br>检查命令： <strong>rpm -qa | grep zip</strong></p><p><strong>###  解压</strong><br><strong>$ unzip xxx.zip</strong><br><strong>### 压缩为zip文件</strong><br><strong>$ zip yyy.zip filename</strong><br><strong>tar软件相关操作</strong><br><strong>### 解压</strong><br>$ tar -zxvf xxx.tar.gz      （解压到当前目录）<br>$ tar -zxvf xxx.tar.gz -C dirpath    (解压到指定目录)</p><p><strong>## 压缩</strong><br>$ tar zcvf zzz.tar.gz dir&#x2F;filename</p></blockquote><h4 id="压缩包方式：linux安装jdk"><a href="#压缩包方式：linux安装jdk" class="headerlink" title="压缩包方式：linux安装jdk"></a><strong>压缩包方式：linux安装jdk</strong></h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs awk">第一步： 使用FileZila将jdk包传到linux上<br>第二步： 使用tar -zxvf **jdk**.tar.gz<br>第三步：切换到root用户，配置环境变量<br><span class="hljs-comment"># vi /etc/profile</span><br>编辑内容如下<br><span class="hljs-comment">## JAVA_HOME</span><br>export JAVA_HOME=<span class="hljs-regexp">/opt/</span>java/jdk1.<span class="hljs-number">8.0</span>_381<br>export PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$JAVA_HOME</span>/bin<br>下一步：source一下，让命令生效<br>source <span class="hljs-regexp">/etc/</span>profile<br><span class="hljs-keyword">exit</span><br>第四步：检查<br>echo <span class="hljs-variable">$JAVA_HOME</span><br>echo <span class="hljs-variable">$PATH</span><br>java<br>java -version<br></code></pre></td></tr></table></figure><h4 id="压缩包方式：安装jdk11"><a href="#压缩包方式：安装jdk11" class="headerlink" title="压缩包方式：安装jdk11"></a><strong>压缩包方式：安装jdk11</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">1、先新建一个文件夹，<span class="hljs-built_in">mkdir</span> /usr/local/java<br>2、在宿主机执行 scp jdk-11.0.10_linux-x64_bin.tar.gz root@192.168.50.132:/usr/local/java2<br>3、在linux 执行<br>    <span class="hljs-built_in">cd</span>  /usr/local/java2/<br>    tar -zxvf jdk-11.0.10_linux-x64_bin.tar.gz<br>4、vi /etc/profile   <span class="hljs-comment"># 在 尾部添加如下内容：</span><br>    <span class="hljs-built_in">export</span> JAVA_HOME=/usr/local/java/jdk-11.0.10<br>    <span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$JAVA_HOME</span>/bin<br>    <span class="hljs-comment">#（！！！注意：JAVA_HOME的路径是你实际解压后的JDK的路径，千万别写错了）</span><br>5、<span class="hljs-built_in">source</span> /etc/profile   <span class="hljs-comment"># 刷新 配置文件</span><br>    java -version    <span class="hljs-comment"># 查看配置文件</span><br>    openjdk version <span class="hljs-string">&quot;1.8.0_262&quot;</span><br>    OpenJDK Runtime Environment (build 1.8.0_262-b10)<br>    OpenJDK 64-Bit Server VM (build 25.262-b10, mixed mode)<br></code></pre></td></tr></table></figure><h4 id="压缩包方式：安装tomcat"><a href="#压缩包方式：安装tomcat" class="headerlink" title="压缩包方式：安装tomcat"></a>压缩包方式：安装tomcat</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">1</span>、在宿主机上，下载地址<br>http:<span class="hljs-regexp">//</span>tomcat.apache.org/download-<span class="hljs-number">10</span>.cgi<br><span class="hljs-number">2</span>、在服务器上 先新建一个文件夹，<br>mkdir <span class="hljs-regexp">/usr/</span>local/tomcat<br><span class="hljs-number">3</span>、在宿主机上 ，执行下面命令 上传安装包<br>scp apache-tomcat-<span class="hljs-number">10.0</span>.<span class="hljs-number">5</span>.zip root@<span class="hljs-number">192.168</span>.<span class="hljs-number">50.132</span>:<span class="hljs-regexp">/usr/</span>local/tomcat<br><span class="hljs-number">4</span>、在服务器上 通过root用户 解压<br>unzip  apache-tomcat-<span class="hljs-number">10.0</span>.<span class="hljs-number">5</span>.zip<br>unzip -l apache-tomcat-<span class="hljs-number">10.0</span>.<span class="hljs-number">5</span>.zip  <span class="hljs-comment"># 只是查看 不解压</span><br><span class="hljs-number">5</span>、启动tomcat服务<br>cd apache-tomcat-<span class="hljs-number">10.0</span>.<span class="hljs-number">5</span>/bin<br>./startup.sh<br>chmod <span class="hljs-number">744</span> ./*.sh<br>./startup.sh<br><span class="hljs-number">6</span>、验证安装<br>netstat -nl  <span class="hljs-comment"># 找到 8080端口 是 LISTEN</span><br>ifconfig<br>systemctl status firewalld  <span class="hljs-comment">#查看防火墙状态</span><br>systemctl stop firewalld   <span class="hljs-comment">#禁用防火墙</span><br>在宿主机浏览器<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">50.132</span>:<span class="hljs-number">8080</span>/<br>显示：<br>Apache Tomcat/<span class="hljs-number">10.0</span>.<span class="hljs-number">5</span><br>If yo<span class="hljs-string">u&#x27;re seeing this, you&#x27;</span>ve successfully installed Tomcat. Congratulations!<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>远程操作</title>
    <link href="/blog/2018/04/28/linux/%E8%BF%9C%E7%A8%8B%E6%93%8D%E4%BD%9C/"/>
    <url>/blog/2018/04/28/linux/%E8%BF%9C%E7%A8%8B%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h2 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a><strong>ifconfig</strong></h2><blockquote><p>ifconfig 可以查看／配置计算机当前的网卡配置信息<br>   $ ifconfig # 查看网卡配置信息<br>   $ ifconfig | grep inet # 查看网卡对应的 IP 地址<br>提示：一台计算机中有可能会有一个 物理网卡 和 多个虚拟网卡，在 Linux 中物理网卡的名字通常以 ensXX 表示</p></blockquote><h2 id="ping"><a href="#ping" class="headerlink" title="ping"></a><strong>ping</strong></h2><blockquote><p>$ ping IP地址 # 检测到目标主机是否连接正常<br>$ ping 127.0.0.1 # 检测本地网卡工作正常<br>ping 一般用于检测当前计算机到目标计算机之间的网络 是否通畅，数值越大，速度越慢<br>原理：网络上的机器都有 唯一确定的 IP 地址，我们给目标 IP 地址发送一个数据包，对方就要返回一个数据包，根据返回的数据包以及时间，我们可以确定目标主机的存在</p></blockquote><h2 id="ssh远程连接"><a href="#ssh远程连接" class="headerlink" title="ssh远程连接"></a>ssh远程连接</h2><h3 id="主机名和ip地址的映射"><a href="#主机名和ip地址的映射" class="headerlink" title="主机名和ip地址的映射"></a>主机名和ip地址的映射</h3><blockquote><p>修宿主机hosts 文件，添加ip地址和域名映射 。linux 也存在hosts 文件。<br>win：C:\Windows\System32\drivers\etc\hosts     linux：&#x2F;etc&#x2F;hosts<br>添加：<br>192.168.50.129  vmware.lnx01<br>192.168.50.128  vmware.lnx02<br>使用域名登录<br>ssh <a href="mailto:&#x72;&#x6f;&#111;&#x74;&#x40;&#x76;&#x6d;&#119;&#x61;&#114;&#x65;&#x2e;&#108;&#x6e;&#120;&#x30;&#x31;">&#x72;&#x6f;&#111;&#x74;&#x40;&#x76;&#x6d;&#119;&#x61;&#114;&#x65;&#x2e;&#108;&#x6e;&#120;&#x30;&#x31;</a></p></blockquote><h3 id="修改linux主机名"><a href="#修改linux主机名" class="headerlink" title="修改linux主机名"></a>修改linux主机名</h3><blockquote><p>Linux系统安装好后，都会有默认的主机名， CentOS系统默认的主机名是localhost.localdomain，为了便于使用，我们常常需要修改主机名<br>1.显示主机名称： hostname  |  uname -n | hostnamectl<centos7><br>2.设置主机名称：hostname 名称<br>     注意：这种方式设置主机名称，仅仅在当前使用没有问题，当机器重启之后，主机名称会变化。<br>     原因：在linux系统中，系统配置的信息都是来自于文件中，这种设置方式没有写入文件中<br>3.永久设置主机名称：      cat &#x2F;etc&#x2F;system-release: 查看服务器的linux版本<br>      方式1：hostnamectl set-hostname vm_lnx  #修改主机名, 重新连接主机即可看到主机名发生了改变，不需要重启机器<br>      方式2：centos7.3 前的系统<br>             1：cat &#x2F;etc&#x2F;sysconfig&#x2F;network   (cat  文件名： 读取文件内容)<br>             2    vi &#x2F;etc&#x2F;sysconfig&#x2F;network<br>             3    编辑hostname&#x3D;主机名<br>             4    重启系统：关机：# halt     |      重启：reboot &#x2F; init6(安全重启) &#x2F; shutdown<br>    方式3：centos7.3 后的系统修改&#x2F;etc&#x2F;hostname 文件内容，并重启生效</p><p>注意：centos上再重命名主机名字的时候， 主机名字不要使用  下划线_,   会出现很多错误</p></blockquote><h3 id="简单连接"><a href="#简单连接" class="headerlink" title="简单连接"></a>简单连接</h3><blockquote><p>ssh [-p port]<br>•user 是在远程机器上的用户名，如果不指定的话默认为当前用户<br>•remote 是远程机器的地址，可以是 IP／域名，或者是 后面会提到的别名<br>•port 是 SSH Server 监听的端口，如果不指定，就为默认值 22<br>使用 exit 退出当前用户的登录<br>SSH 服务器的端口号很有可能不是 22，如果遇到这种情况就需要使用 -p 选项，指定正确的端口号，否则无法正常连接到服务器</p></blockquote><h3 id="免密码连接"><a href="#免密码连接" class="headerlink" title="免密码连接"></a>免密码连接</h3><blockquote><ol><li>生成钥匙，一路回车：ssh-keygen</li><li>配置公钥到服务器：<br>  a. ssh-copy-id -p port user@remote，可以让远程服务器记住我们的公钥<br>  b. win不支持a命令，可以手动配置：将生成的id_rsa.pub内容拷贝到authorized_keys文件中</li></ol></blockquote><h2 id="scp远程拷贝"><a href="#scp远程拷贝" class="headerlink" title="scp远程拷贝"></a>scp远程拷贝</h2><blockquote><p>远程复制：<br>      scp file root@ip:dir 上传<br>      scp root@ip:file &#x2F;dir 下载<br>选项<br>      -r 若给出的源文件是目录文件，则 scp 将递归复制该目录下的所有子目录和文件，目标文件必须为一个目录名<br>      -P 若远程 SSH 服务器的端口不是 22，需要使用大写字母 -P 选项指定端</p></blockquote><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment"># 把本地当前目录下的 01.py 文件 复制到 远程 家目录下的 Desktop/01.py</span><br><span class="hljs-comment"># 注意：`:` 后面的路径如果不是绝对路径，则以用户的家目录作为参照路径</span><br>scp -P port <span class="hljs-number">01</span>.py user<span class="hljs-variable">@remote</span><span class="hljs-symbol">:Desktop/</span><span class="hljs-number">01</span>.py<br>scp -P port user<span class="hljs-variable">@remote</span><span class="hljs-symbol">:Desktop/</span><span class="hljs-number">01</span>.py <span class="hljs-number">01</span>.py <span class="hljs-comment"># 把远程 家目录下的 Desktop/01.py 文件 复制到 本地当前目录下的 01.py</span><br>scp -r demo user<span class="hljs-variable">@remote</span><span class="hljs-symbol">:/opt/yyang25</span>  <span class="hljs-comment"># 加上 -r 选项可以传送文件夹,把当前目录下的 demo 文件夹 复制到 远程 家目录下的 /opt/yyang25</span><br>scp -r user<span class="hljs-variable">@remote</span><span class="hljs-symbol">:Desktop</span> demo         <span class="hljs-comment"># 把远程 家目录下的 Desktop 复制到 当前目录下的 demo 文件夹</span><br><br>scp jdk<span class="hljs-number">-11.0</span>.<span class="hljs-number">12_</span>linux-x64_bin.tar.gz <span class="hljs-title class_">SERVER_USERNAME</span><span class="hljs-variable">@HOSTNAME_OR_IP</span><span class="hljs-symbol">:</span>.<br><span class="hljs-symbol">:</span>后面跟路径<br><span class="hljs-symbol">example:</span> scp <span class="hljs-symbol">D:</span>\<span class="hljs-title class_">Users</span>\yyang25\<span class="hljs-title class_">Downloads</span>\test.apk root<span class="hljs-variable">@182</span>.<span class="hljs-number">92.164</span>.<span class="hljs-number">32</span><span class="hljs-symbol">:</span>. --&gt;.表示上传到home目录<br><span class="hljs-symbol">example:</span> scp <span class="hljs-symbol">D:</span>\<span class="hljs-title class_">Users</span>\yyang25\<span class="hljs-title class_">Downloads</span>\test.apk root<span class="hljs-variable">@182</span>.<span class="hljs-number">92.164</span>.<span class="hljs-number">32</span><span class="hljs-symbol">:/opt/yyang25/software</span> --&gt;<span class="hljs-symbol">:</span>后面跟路径<br><span class="hljs-symbol">example:</span> scp  root<span class="hljs-variable">@182</span>.<span class="hljs-number">92.164</span>.<span class="hljs-number">32</span><span class="hljs-symbol">:/opt/yyang25/software/test</span>.apk <span class="hljs-symbol">D:</span>\<span class="hljs-title class_">Users</span>\yyang25\<span class="hljs-title class_">Downloads</span> --&gt;从远程拉取文件<br><span class="hljs-symbol">example:</span> scp  root<span class="hljs-variable">@182</span>.<span class="hljs-number">92.164</span>.<span class="hljs-number">32</span><span class="hljs-symbol">:</span>./test.apk root<span class="hljs-variable">@182</span>.<span class="hljs-number">92.164</span>.<span class="hljs-number">32</span><span class="hljs-symbol">:</span>. --&gt;两个服务器之间推拉文件; 注意：需要在服务器配置公钥，比如scp a b; 要把b服务器home目录下.ssh目录中把公钥复制到a服务器下.ssh/目录下的auth..keys文件中<br></code></pre></td></tr></table></figure><h2 id="Rsync远程数据同步"><a href="#Rsync远程数据同步" class="headerlink" title="Rsync远程数据同步"></a>Rsync远程数据同步</h2><p>Rsync（remote synchronize）是一个远程数据同步工具，可通过LAN&#x2F;WAN快速同步多台主机间的文件。Rsync使用所谓的“Rsync算法”来使本地和远程两个主机之间的文件达到同步，这个算法只传送两个文件的不同部分，而不是每次都整份传送，因此速度相当快。</p><p>rsync [OPTION]… SRC DEST</p><p>rsync [OPTION]… SRC [USER@]HOST:DEST</p><p>rsync [OPTION]… [USER@]HOST:SRC DEST</p><p>源目录加了斜线，效果就是将该目录下的内容传输到目标目录下。</p><p>源目录不加斜线，效果就是将该目录传输到目标目录下。</p><p>目标目录如果不存在，会自动创建目标目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rsync -avlK ./d2 ./d3 <span class="hljs-comment">#同步目录</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件管理</title>
    <link href="/blog/2018/04/26/linux/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
    <url>/blog/2018/04/26/linux/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a><strong>文件</strong></h1><h2 id="linux下文件类型-常见三种文件-："><a href="#linux下文件类型-常见三种文件-：" class="headerlink" title="linux下文件类型(常见三种文件)："></a><strong>linux下文件类型(常见三种文件)：</strong></h2><blockquote><p>***** 文件：表示符： <strong>-</strong><br>*** <strong>目录(类似win7下的文件夹)：表示符：</strong>d**<br>*** <strong>链接(类似win7下的快捷方式)：表示符：</strong>l**</p></blockquote><h2 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a><strong>文件权限</strong></h2><blockquote><ul><li>可读  r</li><li>可写  w</li><li>可执行(针对脚本，比如shell脚本)  x</li><li>特殊字符：<br><strong>-</strong>**  表示没有任何权限**</li></ul><p>权限的数字表示方法：<br>*** rw-  **     —&gt; 6<br>*** 二进制数字之和的方式**<br>R          W        X<br>2^2      2^1      2^0<br>  4          2          1  </p></blockquote><h2 id="文件归属"><a href="#文件归属" class="headerlink" title="文件归属"></a><strong>文件归属</strong></h2><blockquote><ul><li>拥有着    owner  ** u**</li><li>属于组    grouip   <strong>g</strong></li><li>其他人    other   **  o**</li></ul></blockquote><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">-rw-rw-r--   <span class="hljs-number">2</span> <span class="hljs-keyword">beifeng </span><span class="hljs-keyword">beifeng </span><span class="hljs-number">4096</span> May <span class="hljs-number">30</span> <span class="hljs-number">15</span>:<span class="hljs-number">15</span> <span class="hljs-keyword">bin</span><br><span class="hljs-keyword"></span><br>第一部分：-rw-rw-r--<br>十个字符，代表不同的意义<br>-   rw-   rw-    r--       ----&gt;  数字表示权限：<span class="hljs-number">664</span><br>第一个字符：<br>表示的是文件的类型<br>后面的<span class="hljs-number">9</span>个字符，分为<span class="hljs-number">3</span>组，表示的是此文件针对不同用户的权限关系<br>为什么是三组呢？<br>因为一个文件对于用户来说，属于三个部分<br>* 拥有着    rw-<br>* 所属组    rw-<br>* 其他人    r--<br>第二部分：<span class="hljs-number">2</span>       硬链接数，通俗地讲，就是有多少种方式，可以访问到当前目录／文件<br>第三部分：<span class="hljs-keyword">beifeng </span><span class="hljs-keyword">beifeng</span><br><span class="hljs-keyword"></span>* 第一个字符串表示的是   文件的拥有者，<span class="hljs-keyword">beifeng </span><br>* 第二个字符串表示的是   文件所属组， <span class="hljs-keyword">beifeng</span><br><span class="hljs-keyword"></span><br>第四部分：<span class="hljs-number">4096</span><br>如果是文件夹，表示文件夹中多少文件<br>如果是文件，表示文件大小<br></code></pre></td></tr></table></figure><h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><h2 id="操作文件"><a href="#操作文件" class="headerlink" title="操作文件"></a>操作文件</h2><h3 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a><strong>创建文件</strong></h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">1</span>. 使用touch命令： touch test.py<br><span class="hljs-symbol">2 </span>使用vi/vim方式：本意是修改文件，如果不存在，则创建：$ vi test.py<br><span class="hljs-symbol">3 </span>使用echo命令， 覆盖 | 追加：对文件内容进行追加  $ echo <span class="hljs-string">&quot;******&quot;</span>  &gt;&gt; text.py<br></code></pre></td></tr></table></figure><h3 id="编辑文件"><a href="#编辑文件" class="headerlink" title="编辑文件"></a><strong>编辑文件</strong></h3><ul><li><p>vi | vim：</p><blockquote><p>1.dd：表示删除光标所在行的内容<br>2. u: 撤销上次命令<br>3. ctrl + r: 恢复撤销的命令<br>4. o：表示光标进入下一行，并进行插入数据模式<br>5. 异常处理&#x2F;交换文件：vim -r 文件名: 恢复交换文件；rm *.swp：删除交换文件<br>6. shift + G: vi跳到文件末尾</p></blockquote></li><li><p>echo：</p><blockquote><p>追加内容至末尾：echo aaaaa &gt;&gt; 1.txt<br>覆盖原有内容：echo aaaaa &gt; 1.txt</p></blockquote></li></ul><h3 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a><strong>查看文件</strong></h3><ul><li><p>wc：统计文本中行数、字数、字符数</p></li><li><p>cat：查看文件的全部内容， 适用于文件内容较小的文件</p></li><li><p>more： 翻页查看，适用于文件内容较大的文件</p></li></ul><blockquote><p>回车多显示一行，空格就一页一页的走<br>:q  退出查看</p></blockquote><ul><li>less：翻页查看，more只能往后翻，less可以往前</li></ul><blockquote><p>回车多显示一行，空格就一页一页的走<br>:q  退出查看<br>b：回滚一屏<br>f：前滚一屏</p></blockquote><ul><li>tail：从文件末尾开始查看</li></ul><blockquote><p><strong>通常与  -f   参数连用，适合查看服务的实时动态的日志信息</strong><br>eg：<br>tail -f  ****.log<br>tail -200f  ****.log       (查看日志文件最后的两百行日志)</p></blockquote><ul><li><p>head：查看文件的开头文件， 通常用于查看文件格式，内容模板样式</p></li><li><p>grep：匹配文件内容</p></li></ul><blockquote><p>-c 仅列出文件中包含模式的行数。<br>-i 忽略模式中的字母大小写。<br>参数<br>    ^a 行首，搜寻以 a 开头的行<br>    ke$ 行尾，搜寻以 ke 结束的行</p></blockquote><blockquote><p>grep Setup 1.txt<br>grep setup 1.txt<br>grep -i setup 1.txt： -i  忽略大小写<br>grep -c setup 1.txt<br>grep -ic setup 1.txt<br>grep ^% 1.txt<br>grep -i c$ 1.txt<br>grep -i [a-z]ystem 1.txt</p></blockquote><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="**删除文件"></a>**删除文件</h3><blockquote><p>**<strong>rm；</strong>-f 强制删除，忽略不存在的文件，无需提示；-r 递归删除目录下的内容</p></blockquote><h3 id="拷贝文件"><a href="#拷贝文件" class="headerlink" title="**拷贝文件"></a>**拷贝文件</h3><blockquote><p>**cp；-i 覆盖文件前提示； -r 若给出的源文件是目录文件，则 cp 将递归复制该目录下的所有子目录和文件，目标文件必须为一个目录名</p></blockquote><h3 id="合并文件"><a href="#合并文件" class="headerlink" title="**合并文件"></a>**合并文件</h3><blockquote><p>**cat  可以文件合并：cat  file1 file2 &gt; file3</p></blockquote><h3 id="移动文件"><a href="#移动文件" class="headerlink" title="**移动文件"></a>**移动文件</h3><blockquote><p>**mv；-i 默认选项，覆盖文件前提示； -f 强制覆盖，不提示；-b 当目标文件存在时，先进行备份在覆盖</p></blockquote><h3 id="搜索文件"><a href="#搜索文件" class="headerlink" title="**搜索文件"></a>**搜索文件</h3><blockquote><p>**find 搜索路径 -name 搜索文件名；</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> ~/ -name ab.txt<br><span class="hljs-built_in">find</span> ~/ -name ab\*    (模糊查询)<br></code></pre></td></tr></table></figure><h2 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h2><ol><li><p>创建目录：mkdir；-p 可以递归创建目录。同级的目录或文件，都不能重名</p></li><li><p>删除目录：<strong>rm；</strong>-f 强制删除，忽略不存在的文件，无需提示；-r 递归地删除目录下的内容</p></li><li><p>拷贝目录：cp；-i 覆盖文件前提示； -r 若给出的源文件是目录文件，则 cp 将递归复制该目录下的所有子目录和文件，目标文件必须为一个目录名</p></li><li><p>移动目录：mv；-i 默认选项，覆盖文件前提示； -f 强制覆盖，不提示；-b 当目标文件存在时，先进行备份在覆盖</p></li><li><p>查看路径：pwd</p></li><li><p>树形结构查看目录：tree；需要安装tree包 sudo apt-get install tree</p></li><li><p>查看文件详细信息：stat；比ls更详细</p></li><li><p>查看目录：ls；-l  列出文件详细信息l(list)；-a  列出当前目录下所有文件及目录，包括隐藏的a(all)</p></li></ol><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ls</span> -<span class="hljs-keyword">l</span>  # 列出可见文件详细信息<br><span class="hljs-keyword">ll</span>     # 列出可见文件详细信息  等效 <span class="hljs-keyword">ls</span> -<span class="hljs-keyword">l</span><br><span class="hljs-keyword">ls</span> -<span class="hljs-keyword">al</span> # 列出所有文件详细信息，包括隐藏文件<br><span class="hljs-keyword">ll</span> -<span class="hljs-keyword">a</span>  # 列出所有文件详细信息，包括隐藏文件 等效 <span class="hljs-keyword">ll</span> -<span class="hljs-keyword">a</span><br><span class="hljs-keyword">ll</span> -ah<br><span class="hljs-keyword">ll</span> dirname：列出dirname目录下的文件<br><br>占位符：* 匹配多个；?匹配一个<br><span class="hljs-keyword">ll</span> <span class="hljs-keyword">y</span>*<br><span class="hljs-keyword">ll</span> *.txt<br><br><span class="hljs-keyword">ll</span> <span class="hljs-keyword">y</span>*d*<br><span class="hljs-keyword">ll</span> <span class="hljs-keyword">y</span>??<br><span class="hljs-keyword">ll</span> /usr/bin # 列出指定路径的文件信息<br></code></pre></td></tr></table></figure><h2 id="连接："><a href="#连接：" class="headerlink" title="连接："></a><strong>连接：</strong></h2><blockquote><p>软连接：相当于win7快捷键<br>硬连接：相当于拷贝文件<br>区别：在删除链接时，是否删除源文件</p></blockquote><ol><li><p>创建软连接：ln -s file&#x2F;dir linkName</p></li><li><p>创建硬连接：ln file&#x2F;dir linkName</p></li></ol><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment">## 创建一个软链接</span><br><span class="hljs-built_in">ln</span> -s readme.txt link.txt<br>lrwxrwxrwx. <span class="hljs-number">1</span> baby baby    <span class="hljs-number">4</span> Jun  <span class="hljs-number">9</span> <span class="hljs-number">02</span>:<span class="hljs-number">24</span> rm.txt -&gt; <span class="hljs-keyword">a</span>.py<br><span class="hljs-comment">## 创建一个硬链接</span><br>$ <span class="hljs-built_in">ln</span> ab.txt baby.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><h2 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a>修改文件权限</h2><ol><li><p>chmod：设置文件对不同用户的权限，需要使用root用户</p></li><li><p>chgrp：修改组</p></li><li><p>chown：修改拥有者</p></li></ol><blockquote><p>chown 用户名 文件名|目录名 # 修改文件|目录的拥有者<br>chgrp -R 组名 文件名|目录名 # 递归修改文件|目录的组<br>chmod -R 755 文件名|目录名 # 递归修改文件权限<br>chmod 在设置权限时，可以简单地使用三个数字分别对应拥有者／ 组和其他用户的权限<br>直接修改文件|目录的 读|写|执行 权限，但是不能精确到 拥有者|组|其他<br>chmod +&#x2F;-rwx 文件名|目录名 # 一次性修改 拥有者 &#x2F; 组 权限</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># chmod</span><br>eg: -rw-rw-r--. 1 baby baby 0 May 31 16:02 a.py<br>需求：对于同组用户来说，仅仅可读，对于其他用户不可读不可写<br>    权限字符形式操作：<br>        <span class="hljs-comment"># chmod  g-w a.py      (表示对于同组u用户，删除可写权限)</span><br>        <span class="hljs-comment"># chmod  o-r a.py    (表示对于其他用户，删除读和写权限)</span><br>        <span class="hljs-comment"># chmod g-r-w a.py  (表示对于同组用户，删除读和写权限)</span><br>    <br>    权限数字形式权限：<br>        <span class="hljs-comment"># chmod 664  (表示对拥有着可读可写，同组用户可读可写，其他用户可读)</span><br><br>    问题：如果针对一个目录，设置权限呢？且目录中有许多文件，这些文件都需要同样的权限设置。<br>        -R, --recursive  递归<br>        <span class="hljs-comment"># chmod -R 664 /opt/softwares</span><br><br><span class="hljs-comment"># chown</span><br>    <span class="hljs-built_in">chown</span> baby /home/a.py<br><span class="hljs-comment"># chgrp</span><br>    <span class="hljs-built_in">chgrp</span> baby /home/a.py<br>    经测，两个命令都要运行，才会改变(不一定)<br><span class="hljs-comment"># 如果针对目录：递归</span><br>    <span class="hljs-built_in">chown</span> -R baby /opt/softwares<br>    <span class="hljs-built_in">chgrp</span> -R baby /opt/softwares<br><span class="hljs-comment"># 将/home/a.py文件的所属用户和所属组改为senior用户和senior组</span><br>    可以使用一个命令完成：<br>    <span class="hljs-built_in">chown</span> senior:senior /home/a.py<br>    senior:senior: 第一个senior代表用户，第二个senior代表组<br></code></pre></td></tr></table></figure><h2 id="打包与压缩"><a href="#打包与压缩" class="headerlink" title="打包与压缩"></a>打包与压缩</h2><h3 id="tar"><a href="#tar" class="headerlink" title="tar"></a><strong>tar</strong></h3><blockquote><p>c 生成档案文件，创建打包文件<br>x 解开档案文件<br>v 列出归档解档的详细过程，显示进度<br>f 指定档案文件名称，f 后面一定是 .tar 文件，所以必须放选项最后，其他选项顺序可以随意<br>z 可以调用gzip进行压缩</p></blockquote><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">tar -cvf 打包文件<span class="hljs-string">.tar</span> 被打包的文件／路径 <span class="hljs-comment"># 打包文件</span><br>tar -xvf 打包文件<span class="hljs-string">.tar</span> <span class="hljs-comment"># 解包文件</span><br>tar -zcvf 打包文件<span class="hljs-string">.tar.gz</span> 要被压缩的文件/路径   <span class="hljs-comment"># 压缩文件</span><br>tar -zxvf filename.tar.gz                     <span class="hljs-comment"># 解压缩文件</span><br>tar -zxvf filename.tar.gz -C 目标路径         <span class="hljs-comment"># 解压缩到指定路径；选项-C 解压缩到指定目录，注意：要解压缩的目录必须存在 </span><br></code></pre></td></tr></table></figure><h3 id="zip"><a href="#zip" class="headerlink" title="zip"></a><strong>zip</strong></h3><p><strong>zip</strong></p><blockquote><p>zip -q -r html.zip &#x2F;home&#x2F;html # 将 &#x2F;home&#x2F;html&#x2F; 这个目录下所有文件和文件夹打包为当前目录下的 html.zip<br>zip -q -r html.zip * # 如果在我们在 &#x2F;home&#x2F;html 目录下<br>zip -dv cp.zip a.c #从压缩文件 cp.zip 中删除文件 a.c</p></blockquote><p><strong>unzip</strong></p><blockquote><p>unzip -l abc.zip #查看压缩文件中包含的文件<br>unzip abc.zip -d&lt;目录&gt; # 指定文件解压缩后所要存储的目录</p></blockquote><p><strong>查看命令的路径</strong></p><blockquote><p>whereis java</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基础知识</title>
    <link href="/blog/2017/03/26/linux/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/blog/2017/03/26/linux/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h3 id="linux的发行版本"><a href="#linux的发行版本" class="headerlink" title="linux的发行版本"></a>linux的发行版本</h3><p><img src="/blog/images/mysql&linux/WEBRESOURCEdea7cd4b5044f1814039227aa57292f3%E6%88%AA%E5%9B%BE.png"></p><h3 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h3><ul><li>Linux下的软件包可细分为两种，分别是<strong>源码包</strong>和<strong>二进制包</strong></li><li>源码包就是一大堆源代码程序，一般包含多个文件，为了方便发布，通常会将源码包做打包压缩处理，Linux 中最常用的打包压缩格式为“tar.gz”，因此源码包又被称为 Tarball。因为可能会需要一些依赖环境，所以安装前就需要先安装这些依赖环境</li><li>二进制包：是源码包经过成功编译之后产生的包。由于二进制包在发布之前就已经完成了编译的工作，因此用户安装软件的速度较快（同 Windows下安装软件速度相当），且安装过程报错几率大大减小。因为已经编译过，依赖环境已经编译进二进制文件中，所以会省去很多麻烦</li><li>二进制包是 Linux 下默认的软件安装包，因此二进制包又被称为默认安装软件包。</li></ul><h4 id="目前主要有以下-2-大主流的二进制包管理系统："><a href="#目前主要有以下-2-大主流的二进制包管理系统：" class="headerlink" title="目前主要有以下 2 大主流的二进制包管理系统："></a>目前主要有以下 2 大主流的二进制包管理系统：</h4><p><strong>RPM 包管理系统</strong>： 功能强大，安装、升级、査询和卸载非常简单方便，因此很多 Linux 发行版都默认使用此机制作为软件安装的管理方式，例如 Fedora、CentOS、SuSE 等</p><p><strong>DPKG 包管理系统</strong>： 由 Debian Linux 所开发的包管理机制，通过 DPKG 包，Debian Linux 就可以进行软件包管理，主要应用在 Debian 和 Ubuntu 中</p><p><img src="/blog/images/mysql&linux/WEBRESOURCE9731d18bcb5321cfa264a5153b5dbc4a%E6%88%AA%E5%9B%BE.png"></p><p><strong>yum</strong>：全称“Yellow dog Updater, Modified”，是一个专门为了解决包的依赖关系而存在的软件包管理器。就好像 Windows 系统上可以通过 360 软件管家实现软件的一键安装、升级和卸载</p><p><strong>apt</strong>：是 Advanced Packaging Tool，是 Linux 下的一款安装包管理工具，可以在终端中方便的 安装／卸载／更新软件包</p><p><img src="/blog/images/mysql&linux/WEBRESOURCEe65ac98f274d246b4cac2da80154c292%E6%88%AA%E5%9B%BE.png"></p><h3 id="Linux的设计思想：一切皆文件"><a href="#Linux的设计思想：一切皆文件" class="headerlink" title="Linux的设计思想：一切皆文件"></a>Linux的设计思想：一切皆文件</h3><p>Linux 中所有内容都是以文件的形式保存和管理的，即一切皆文件 。具体可分为以下几种类型：</p><ol><li>- 普通文件：类似 mp4、pdf、html 这样，可直接拿来使用的文件都属于普通文件</li><li>d 目录文件：目录文件包含了此目录中各个文件的文件名以及指向这些文件的指针，打开目录等同于打开目录文件，只要你有权限，可以随意访问目录中的任何文件。</li><li>c 字符设备文件：这些文件通常隐藏在 &#x2F;dev&#x2F; 目录下，当进行设备读取或外设交互时才会被使用。例如，磁盘光驱属于块设备文件，串口设备则属于字符设备文件。 Linux 系统中的所有设备，要么是块设备文件，要么是字符设备文件。 </li><li>s 套接字文件（socket）：套接字文件一般隐藏在 &#x2F;var&#x2F;run&#x2F; 目录下，用于进程间的网络通信。 </li><li>l 链接文件（symbolic link）：类似与 Windows 中的快捷方式，是指向另一文件的简介指针（也就是软链接）。 </li><li>p 管道文件（pipe）：主要用于进程间通信。例如，使用 mkfifo 命令创建一个 FIFO 文件，与此同时，启用进程 A 从FIFO文件读数据，启用进程 B 从 FIFO文件中写数据，随写随读。</li></ol><h3 id="Linux文件目录结构"><a href="#Linux文件目录结构" class="headerlink" title="Linux文件目录结构"></a>Linux文件目录结构</h3><ul><li>&#x2F;：根目录，一般根目录下只存放目录，不要存放文件，&#x2F;etc、&#x2F;bin、&#x2F;dev、&#x2F;lib、&#x2F;sbin应该和根目录放置在一个分区中  </li><li>&#x2F;bin: &#x2F;usr&#x2F;bin:可执行二进制文件的目录，如常用的命令ls、tar、mv、cat等。 </li><li>&#x2F;boot：放置linux系统启动时用到的一些文件，比如内核文件和启动引导文件。&#x2F;boot&#x2F;vmlinuz为linux的内核文件，以及&#x2F;boot&#x2F;gurb。建议单独分区，分区大小100M即可 </li><li>&#x2F;dev：存放linux系统下的设备文件，访问该目录下某个文件，相当于访问某个设备，常用的是挂载光驱mount &#x2F;dev&#x2F;cdrom &#x2F;mnt。 </li><li>&#x2F;etc：系统配置文件存放的目录，系统通过rpm默认安装方式的配置文件全都在这个目录。不建议在此目录下存放可执行文件，重要的配置文件有&#x2F;etc&#x2F;inittab、&#x2F;etc&#x2F;fstab、&#x2F;etc&#x2F;init.d、&#x2F;etc&#x2F;X11、&#x2F;etc&#x2F;sysconfig、&#x2F;etc&#x2F;xinetd.d修改配置文件之前记得备份。 注：&#x2F;etc&#x2F;X11存放与x windows有关的设置。 </li><li>&#x2F;home：系统默认的用户家目录，新增用户账号时，用户的家目录都存放在此目录下，<del>表示当前用户的家目录，</del>test表示用户test的家目录。建议单独分区，并设置较大的磁盘空间，方便用户存放数据 </li><li>&#x2F;lib:&#x2F;usr&#x2F;lib:&#x2F;usr&#x2F;local&#x2F;lib：系统调用的函数库的目录，程序在执行过程中，需要调用一些额外的参数时需要函数库的协助，比较重要的目录为&#x2F;lib&#x2F;modules。</li><li>&#x2F;mnt:&#x2F;media:&#x2F;misc：光盘默认挂载点，通常光盘挂载于&#x2F;mnt&#x2F;cdrom下，也不一定，可以选择任意位置进行挂载 </li><li>&#x2F;opt：给主机额外安装软件所摆放的目录,即第三方软件的安装位置。手工安装的包都可以放在这个位置。如：FC4使用的Fedora 社群开发软件，如果想要自行安装新的KDE 桌面软件，可以将该软件安装在该目录下。以前的 Linux 系统中，习惯放置在 &#x2F;usr&#x2F;local 目录下</li><li>&#x2F;root：系统管理员root的家目录，系统第一个启动的分区为&#x2F;，所以最好将&#x2F;root和&#x2F;放置在一个分区下。</li><li>&#x2F;sbin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;sbin：放置系统管理员使用的可执行命令即系统环境设置相关命令，如fdisk、shutdown、mount等。与&#x2F;bin不同的是，这几个目录是给系统管理员root使用的命令，一般用户只能”查看”而不能设置和使用。</li><li>&#x2F;srv：服务启动之后需要访问的数据目录，如www服务需要访问的网页数据存放在&#x2F;srv&#x2F;www内</li><li>&#x2F;tmp：一般用户或正在执行的程序临时存放文件的目录,任何人都可以访问,重要数据不可放置在此目录下</li><li>&#x2F;proc：此目录的数据都在内存中，如系统核心，外部设备，网络状态，由于数据都存放于内存中，所以不占用磁盘空间，比较重要的目录有&#x2F;proc&#x2F;cpuinfo、&#x2F;proc&#x2F;interrupts、&#x2F;proc&#x2F;dma、&#x2F;proc&#x2F;ioports、&#x2F;proc&#x2F;net&#x2F;*等</li><li>&#x2F;lost+fount：系统异常产生错误时，会将一些遗失的片段放置于此目录下，通常这个目录会自动出现在装置目录下。如加载硬盘于&#x2F;disk 中，此目录下就会自动产生目录&#x2F;disk&#x2F;lost+found </li><li>&#x2F;usr：应用程序存放目录，全称为 Unix Software Resource，此目录用于存储系统软件资源。FHS 建议所有开发者，应把软件产品的数据合理的放置在 &#x2F;usr 目录下的各子目录中，而不是为他们的产品创建单独的目录。&#x2F;usr&#x2F;bin存放应用程序，&#x2F;usr&#x2F;share存放共享数据，&#x2F;usr&#x2F;lib存放不能直接运行的，却是许多程序运行所必需的一些函数库文件。&#x2F;usr&#x2F;local:存放软件升级包。&#x2F;usr&#x2F;share&#x2F;doc:系统说明文件存放目录。&#x2F;usr&#x2F;share&#x2F;man:?程序说明文件存放目录，使用 man ls时会查询&#x2F;usr&#x2F;share&#x2F;man&#x2F;man1&#x2F;ls.1.gz的内容建议单独分区，设置较大的磁盘空间</li></ul><p><img src="/blog/images/mysql&linux/WEBRESOURCEd609518d33a119b1d3f1200067f3950d%E6%88%AA%E5%9B%BE.png"></p><ul><li>&#x2F;var：放置系统执行过程中经常变化的文件，如随时更改的日志文件&#x2F;var&#x2F;log，&#x2F;var&#x2F;log&#x2F;message：所有的登录文件存放目录，&#x2F;var&#x2F;spool&#x2F;mail：邮件存放的目录，&#x2F;var&#x2F;run:程序或服务启动后，其PID存放在该目录下。建议单独分区，设置较大的磁盘空间</li></ul><p><img src="/blog/images/mysql&linux/WEBRESOURCEfd92c04351383b1e3171fb103f8757cc%E6%88%AA%E5%9B%BE.png"></p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
